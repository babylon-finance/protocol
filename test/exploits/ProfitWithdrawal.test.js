const { expect } = require('chai');
const hre = require('hardhat');
const ethers = hre.ethers;
const {
  createStrategy,
  executeStrategy,
  finalizeStrategy,
} = require('../fixtures/StrategyHelper');
const { MAX_UINT_256 } = require('../../lib/constants');
const { setupTests } = require('../fixtures/GardenFixture');
const { createGarden } = require('../fixtures/GardenHelper');
const addresses = require('../../lib/addresses');
const { impersonateAddress } = require('../../lib/rpc');
const { increaseTime, getContract, from, eth } = require('../utils/test-helpers');


describe.only('Hack', function () {  
  let aaveLendIntegration;
  let babController;
  let signer1;  
  let signer2;
  let signer3;
  let owner;
  let keeper;
  let dai;
  let priceOracle;
  let weth;
  let rewardsDistributor;

  // useless when amount < 1
  function normalizeToken(amount) {
    return amount.div(ethers.utils.parseEther('0.001')).toNumber() / 1000;
  }

  beforeEach(async () => {
    ({ babController, 
       aaveLendIntegration,        
       keeper, 
       owner,
       signer1, 
       signer2, 
       signer3, 
       priceOracle, 
       dai, 
       rewardsDistributor,
       weth } = await setupTests()());    
  });

  describe('RewardDistributor check', function () {
    it(`Check that after strategy ends all rewards are go back to LP and do not lock in the garden`, async function () {
      console.log("");
      console.log("===========================TEST========================");
      console.log("");      
      userBalanceBefore = await ethers.provider.getBalance(signer1.address);
      console.log("user balance ETH before: " + normalizeToken(userBalanceBefore));
      await babController.connect(owner).enableBABLMiningProgram();
      console.log("Mining program starts");
      // signer1 creates with 1 ETH contribution
      const garden = await createGarden({ reserveAsset: weth.address, signer: signer1 });
      console.log("Garden crearted");
      // Create strategy with lend and borrow operations for exploit simplicity
      const strategyContract = await createStrategy(
        'lend',
        'dataset',
        [signer1],
        aaveLendIntegration.address,
        garden,        
      );
      console.log("Strategy crearted");
      await garden.connect(signer1).deposit(ethers.utils.parseEther('10'), 1, signer1.address, false, {value: ethers.utils.parseEther('10')});      
    
      console.log("user balance ETH after deposit: " + normalizeToken(await ethers.provider.getBalance(signer1.address)));
      console.log("garden balance after deposits: " + normalizeToken(await weth.balanceOf(garden.address)));
      const userGardenTokens = await garden.balanceOf(signer1.address);      
      await strategyContract.connect(keeper).resolveVoting([signer1.address], [userGardenTokens], 0, {gasPrice: 0});      
      
      console.log("CHECK user balance in garden tokens before executing strategy: " + normalizeToken(userGardenTokens));

      const amount = ethers.utils.parseEther('10');
      await executeStrategy(strategyContract, { amount });
      console.log("garden balance after strategy exeuction: " + normalizeToken(await weth.balanceOf(garden.address)));

      console.log("Trying call NAV()");
      const nav = await strategyContract.getNAV();
      console.log("NAV() : " + normalizeToken(nav));
            
      await increaseTime(15000000);

      const nav2 = await strategyContract.getNAV();
      console.log("NAV() after some time: " + normalizeToken(nav2));

      console.log('CHECK GETSTRATEGIES BEFORE', await garden.getStrategies());

      // finalize strategy
      await finalizeStrategy(strategyContract);
      console.log("garden balance after strategy finalization: " + normalizeToken(await weth.balanceOf(garden.address)));
      console.log("rewards after strategy finalization: " + normalizeToken(await garden.reserveAssetRewardsSetAside()));

      console.log('CHECK GETSTRATEGIES AFTER', await garden.getStrategies());

       // Check pending rewards for signer 1
       // rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits

       const signer1Rewards = await rewardsDistributor.getRewards(garden.address, signer1.address, [strategyContract.address]);
       const signer1BABL = signer1Rewards[5];
       const signer1Profit = signer1Rewards[6];
       console.log('CHECK signer1BABL', signer1BABL.toString());
       console.log('CHECK signer1Profit', signer1Profit.toString());
       console.log('CHECK signer1Profit as Strategist', signer1Rewards[1].toString());
       console.log('CHECK signer1Profit as Steward', signer1Rewards[3].toString());
       console.log("CHECK user balance ETH BEFORE CLAIM: " + await ethers.provider.getBalance(signer1.address));




      // Claim rewards
      await garden.connect(signer1).claimReturns([strategyContract.address], {gasPrice:0});
      console.log("garden balance after claim retunrs: " + normalizeToken(await weth.balanceOf(garden.address)));
      console.log("rewards after claim returns: " + normalizeToken(await garden.reserveAssetRewardsSetAside()) + "!!!!!!!!!!!!!!!!!!!!!!");

        // Check pending rewards for signer 1 after claim
       const signer1Rewards2 = await rewardsDistributor.getRewards(garden.address, signer1.address, [strategyContract.address]);
       const signer1BABL2 = signer1Rewards2[5];
       const signer1Profit2 = signer1Rewards2[6];
       console.log('CHECK signer1BABL AFTER CLAIM', signer1BABL2.toString());
       console.log('CHECK signer1Profit AFTER CLAIM', signer1Profit2.toString());
       console.log('CHECK signer1Profit as Strategist', signer1Rewards2[1].toString());
       console.log('CHECK signer1Profit as Steward', signer1Rewards2[3].toString());
       console.log("CHECK user balance ETH AFTER CLAIM: " + await ethers.provider.getBalance(signer1.address));


      console.log('CHECK PRINCIPAL', (await garden.principal()).toString());
      // Withdraw all from garden
      const userBal = await garden.balanceOf(signer1.address);
      console.log("user balance in garden tokens: " + normalizeToken(userBal));
      await increaseTime(3024000);
      await garden.connect(signer1).withdraw(userBal, 0, signer1.address, false, strategyContract.address);
      console.log("garden balance after withdraw all garden tokens: " + normalizeToken(await weth.balanceOf(garden.address)));
      console.log("CHECK user balance ETH AFTER WITHDRAW: " + await ethers.provider.getBalance(signer1.address));

    });    
  });
});
