{
  "address": "0xB5262476467311bBC024fb5d50328D9042eE402D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sendQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiveToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReceiveQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_hopToken",
          "type": "address"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_sendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sendQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiveToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minReceiveQuantity",
          "type": "uint256"
        }
      ],
      "name": "trade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc51377a4189ed13fdbd09c2693375ce5e67363f736dda19b1cc700aed0fb2609",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0xB5262476467311bBC024fb5d50328D9042eE402D",
    "transactionIndex": 264,
    "gasUsed": "1463137",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x91855f1b0f96bdc02a5b14cd6a28fb377b6778a3819a0f9afc9f79f1784e1628",
    "transactionHash": "0xc51377a4189ed13fdbd09c2693375ce5e67363f736dda19b1cc700aed0fb2609",
    "logs": [],
    "blockNumber": 13893674,
    "cumulativeGasUsed": "19747380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "solcInputHash": "b4cd98ceb4cfae036936e7509ab9208e",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sendQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReceiveQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_hopToken\",\"type\":\"address\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sendQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiveToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minReceiveQuantity\",\"type\":\"uint256\"}],\"name\":\"trade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol UniswapV3 trade integration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_controller\":\"Address of the controller\"}},\"trade(address,address,uint256,address,uint256)\":{\"details\":\"@param _strategy             Address of the strategy\",\"params\":{\"_minReceiveQuantity\":\"Min units of wanted token to be received from the exchange\",\"_receiveToken\":\"Address of the token that will be received from the exchange\",\"_sendQuantity\":\"Units of reserve asset token sent to the exchange\",\"_sendToken\":\"Address of the token to be sent to the exchange\"}},\"trade(address,address,uint256,address,uint256,address)\":{\"details\":\"@param _strategy             Address of the strategy\",\"params\":{\"_minReceiveQuantity\":\"Min units of wanted token to be received from the exchange\",\"_receiveToken\":\"Address of the token that will be received from the exchange\",\"_sendQuantity\":\"Units of reserve asset token sent to the exchange\",\"_sendToken\":\"Address of the token to be sent to the exchange\"}}},\"title\":\"UniswapV2TradeIntegration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"trade(address,address,uint256,address,uint256)\":{\"notice\":\"Executes a trade on a supported DEX.\"},\"trade(address,address,uint256,address,uint256,address)\":{\"notice\":\"Executes a trade on a supported DEX.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/trade/UniswapV2TradeIntegration.sol\":\"UniswapV2TradeIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/BaseIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IIntegration} from '../interfaces/IIntegration.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title BaseIntegration\\n * @author Babylon Finance\\n *\\n * Abstract class that houses common Integration-related state and functions.\\n */\\nabstract contract BaseIntegration {\\n    using SafeCast for int256;\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlySystemContract() {\\n        require(controller.isSystemContract(msg.sender), 'Only system can call this');\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant ETH_ADD_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address internal constant sETH = 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb;\\n    address internal constant sUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IBabController public controller;\\n\\n    // Name of the integration\\n    string public name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n\\n    constructor(string memory _name, IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getTokenOrETHBalance(address _strategy, address _token) internal view returns (uint256) {\\n        if (_token == address(0) || _token == ETH_ADD_CURVE) {\\n            return _strategy.balance;\\n        }\\n        return ERC20(_token).balanceOf(_strategy);\\n    }\\n}\\n\",\"keccak256\":\"0x8d18bffd64d77ff34b677b704a302c311ccbb77d15b458f47b29cdd91b8532d7\",\"license\":\"Apache License\"},\"contracts/integrations/trade/TradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {ITradeIntegration} from '../../interfaces/ITradeIntegration.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {BaseIntegration} from '../BaseIntegration.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title TradeIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Base class for integration with trading protocols\\n */\\nabstract contract TradeIntegration is BaseIntegration, ReentrancyGuard, ITradeIntegration {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Struct ============ */\\n\\n    struct TradeInfo {\\n        IGarden garden; // Garden\\n        IStrategy strategy; // Strategy\\n        string exchangeName; // Which exchange to use\\n        address sendToken; // Address of token being sold\\n        address receiveToken; // Address of token being bought\\n        uint256 gardenTotalSupply; // Total supply of Garden in Precise Units (10^18)\\n        uint256 totalSendQuantity; // Total quantity of sold tokens\\n        uint256 totalMinReceiveQuantity; // Total minimum quantity of token to receive back\\n        uint256 preTradeSendTokenBalance; // Total initial balance of token being sold\\n        uint256 preTradeReceiveTokenBalance; // Total initial balance of token being bought\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    /* ============ Constants ============ */\\n\\n    uint24 internal constant FEE_LOW = 500;\\n    uint24 internal constant FEE_MEDIUM = 3000;\\n    uint24 internal constant FEE_HIGH = 10000;\\n    IUniswapV3Factory internal constant uniswapFactory = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, IBabController _controller) BaseIntegration(_name, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Executes a trade on a supported DEX.\\n     * @dev\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of reserve asset token sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _minReceiveQuantity   Min units of wanted token to be received from the exchange\\n     */\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        address _hopToken\\n    ) public override nonReentrant onlySystemContract {\\n        _trade(_strategy, _sendToken, _sendQuantity, _receiveToken, _minReceiveQuantity, _hopToken);\\n    }\\n\\n    /**\\n     * Executes a trade on a supported DEX.\\n     * @dev\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of reserve asset token sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _minReceiveQuantity   Min units of wanted token to be received from the exchange\\n     */\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external override nonReentrant onlySystemContract {\\n        _trade(_strategy, _sendToken, _sendQuantity, _receiveToken, _minReceiveQuantity, address(0));\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Executes a trade on a supported DEX.\\n     * @dev\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of reserve asset token sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _minReceiveQuantity   Min units of wanted token to be received from the exchange\\n     */\\n    function _trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        address _hopToken\\n    ) internal {\\n        TradeInfo memory tradeInfo =\\n            _createTradeInfo(_strategy, name, _sendToken, _receiveToken, _sendQuantity, _minReceiveQuantity);\\n        _validatePreTradeData(tradeInfo, _sendQuantity);\\n        // Pre actions\\n        (address targetAddressP, uint256 callValueP, bytes memory methodDataP) =\\n            _getPreActionCallData(_sendToken, _receiveToken, _sendQuantity);\\n        if (targetAddressP != address(0)) {\\n            // Invoke protocol specific call\\n            if (_getPreApprovalSpender(targetAddressP) != address(0)) {\\n                tradeInfo.strategy.invokeApprove(\\n                    _getPreApprovalSpender(targetAddressP),\\n                    tradeInfo.sendToken,\\n                    tradeInfo.totalSendQuantity\\n                );\\n            }\\n            tradeInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n        // Get spender address from exchange adapter and invoke approve for exact amount on sendToken\\n        (address targetExchange, uint256 callValue, bytes memory methodData) =\\n            _hopToken != address(0)\\n                ? _getTradeCallData(\\n                    _strategy,\\n                    tradeInfo.sendToken,\\n                    tradeInfo.totalSendQuantity,\\n                    tradeInfo.receiveToken,\\n                    _hopToken\\n                )\\n                : _getTradeCallData(\\n                    _strategy,\\n                    tradeInfo.sendToken,\\n                    tradeInfo.totalSendQuantity,\\n                    tradeInfo.receiveToken\\n                );\\n        if (targetExchange != address(0)) {\\n            // Get spender address from exchange adapter and invoke approve for exact amount on sendToken\\n            tradeInfo.strategy.invokeApprove(\\n                _getSpender(targetExchange),\\n                tradeInfo.sendToken,\\n                tradeInfo.totalSendQuantity\\n            );\\n            tradeInfo.strategy.invokeFromIntegration(targetExchange, callValue, methodData);\\n        }\\n        // Post actions\\n        uint256 receiveTokenAmount = _getTokenOrETHBalance(address(_strategy), _getPostActionToken(_receiveToken));\\n        (targetAddressP, callValueP, methodDataP) = _getPostActionCallData(\\n            _sendToken,\\n            _receiveToken,\\n            receiveTokenAmount\\n        );\\n        if (targetAddressP != address(0)) {\\n            // Invoke protocol specific call\\n            if (_getPostApprovalSpender(targetAddressP) != address(0)) {\\n                tradeInfo.strategy.invokeApprove(\\n                    _getPostApprovalSpender(targetAddressP),\\n                    _getPostActionToken(_receiveToken),\\n                    receiveTokenAmount\\n                );\\n            }\\n            // Invoke protocol specific call\\n            tradeInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        _validatePostTrade(tradeInfo);\\n    }\\n\\n    /**\\n     * Create and return TradeInfo struct\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _exchangeName         Human readable name of the exchange in the integrations registry\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _sendQuantity         Units of token in SetToken sent to the exchange\\n     * @param _minReceiveQuantity   Min units of token in SetToken to be received from the exchange\\n     *\\n     * return TradeInfo             Struct containing data for trade\\n     */\\n    function _createTradeInfo(\\n        address _strategy,\\n        string memory _exchangeName,\\n        address _sendToken,\\n        address _receiveToken,\\n        uint256 _sendQuantity,\\n        uint256 _minReceiveQuantity\\n    ) internal view returns (TradeInfo memory) {\\n        TradeInfo memory tradeInfo;\\n\\n        tradeInfo.strategy = IStrategy(_strategy);\\n        tradeInfo.garden = tradeInfo.strategy.garden();\\n\\n        tradeInfo.exchangeName = _exchangeName;\\n\\n        tradeInfo.sendToken = _sendToken;\\n        tradeInfo.receiveToken = _receiveToken;\\n\\n        tradeInfo.gardenTotalSupply = ERC20(address(tradeInfo.strategy.garden())).totalSupply();\\n\\n        tradeInfo.totalSendQuantity = _sendQuantity;\\n\\n        tradeInfo.totalMinReceiveQuantity = _minReceiveQuantity;\\n        tradeInfo.preTradeSendTokenBalance = ERC20(_sendToken).balanceOf(_strategy);\\n        tradeInfo.preTradeReceiveTokenBalance = ERC20(_receiveToken).balanceOf(_strategy);\\n        return tradeInfo;\\n    }\\n\\n    /**\\n     * Validate pre trade data. Check exchange is valid, token quantity is valid.\\n     *\\n     * @param _tradeInfo            Struct containing trade information used in internal functions\\n     * @param _sendQuantity         Amount of tokens sent\\n     */\\n    function _validatePreTradeData(TradeInfo memory _tradeInfo, uint256 _sendQuantity) internal view {\\n        require(_tradeInfo.totalSendQuantity > 0, 'Token to sell must be nonzero');\\n        require(\\n            ERC20(_tradeInfo.sendToken).balanceOf(address(_tradeInfo.strategy)) >= _sendQuantity,\\n            'Strategy needs to have enough liquid tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post trade data.\\n     *\\n     * @param _tradeInfo                Struct containing trade information used in internal functions\\n     * @return uint256                  Total quantity of receive token that was exchanged\\n     */\\n    function _validatePostTrade(TradeInfo memory _tradeInfo) internal view returns (uint256) {\\n        uint256 exchangedQuantity =\\n            ERC20(_tradeInfo.receiveToken).balanceOf(address(_tradeInfo.strategy)).sub(\\n                _tradeInfo.preTradeReceiveTokenBalance\\n            );\\n        uint256 sendTokenBalance = ERC20(_tradeInfo.sendToken).balanceOf(address(_tradeInfo.strategy));\\n        uint256 realUsed = _tradeInfo.preTradeSendTokenBalance.sub(sendTokenBalance);\\n        // Uses at least 90% of the send token (disallow partial liquidity trades)\\n        require(realUsed >= _tradeInfo.totalSendQuantity.preciseMul(9e17), 'Partial trade not allowed');\\n        require(exchangedQuantity >= _tradeInfo.totalMinReceiveQuantity, 'Slippage greater than allowed');\\n        return exchangedQuantity;\\n    }\\n\\n    /**\\n     * Return exchange calldata which is already generated from the exchange API\\n     *\\n     * hparam _strategy             Address of the strategy\\n     * hparam _sendToken            Address of the token to be sent to the exchange\\n     * hparam _sendQuantity         Units of reserve asset token sent to the exchange\\n     * hparam _receiveToken         Address of the token that will be received from the exchange\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getTradeCallData(\\n        address, /* _strategy */\\n        address, /* _sendToken */\\n        uint256, /* _sendQuantity */\\n        address, /* _receiveToken */\\n        address /* _hopToken */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return exchange calldata which is already generated from the exchange API\\n     *\\n     * hparam _strategy             Address of the strategy\\n     * hparam _sendToken            Address of the token to be sent to the exchange\\n     * hparam _sendQuantity         Units of reserve asset token sent to the exchange\\n     * hparam _receiveToken         Address of the token that will be received from the exchange\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getTradeCallData(\\n        address, /* _strategy */\\n        address, /* _sendToken */\\n        uint256, /*_sendQuantity */\\n        address /* _receiveToken */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _sendToken               Address of the asset to send\\n     * hparam  _receiveToken            Address of the asset to receive\\n     * hparam  _sendQuantity            Amount of the asset to send\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPreActionCallData(\\n        address, /* _sendToken */\\n        address, /* _receiveToken */\\n        uint256 /* _sendQuantity */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _sendToken               Address of the asset to send\\n     * hparam  _receiveToken            Address of the asset to receive\\n     * hparam  _sendQuantity            Amount of the asset to send\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPostActionCallData(\\n        address, /* _sendToken */\\n        address, /* _receiveToken */\\n        uint256 /* _sendQuantity */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the TokenTaker address\\n     *\\n     * @param _swapTarget      Address of the contracts that executes the swap\\n     * @return address         Address of the contract to approve tokens to\\n     */\\n    function _getSpender(address _swapTarget) internal view virtual returns (address);\\n\\n    /**\\n     * Returns the address to approve the pre action. This is the TokenTaker address\\n     *\\n     * hparam _swapTarget      Address of the contracts that executes the swap\\n     * @return address         Address of the contract to approve tokens to\\n     */\\n    function _getPreApprovalSpender(\\n        address /* _swapTarget */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    /**\\n     * Returns the address to approve the post action. This is the TokenTaker address\\n     *\\n     * hparam _swapTarget      Address of the contracts that executes the swap\\n     * @return address         Address of the contract to approve tokens to\\n     */\\n    function _getPostApprovalSpender(\\n        address /* _swapTarget */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    function _getPostActionToken(address _receiveToken) internal view virtual returns (address) {\\n        return _receiveToken;\\n    }\\n}\\n\",\"keccak256\":\"0x82feadcada85ddd44059a50ad52b170fbe786f3d99327675086b717cc739d771\",\"license\":\"Apache License\"},\"contracts/integrations/trade/UniswapV2TradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol';\\nimport {LowGasSafeMath as SafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {TradeIntegration} from './TradeIntegration.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title UniswapV2TradeIntegration\\n * @author Babylon Finance Protocol\\n *\\n * UniswapV3 trade integration\\n */\\ncontract UniswapV2TradeIntegration is TradeIntegration {\\n    using SafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ State Variables ============ */\\n\\n    /* ============ Constants ============ */\\n    // Address of Uniswap V2 SwapRouter contract\\n    address private constant factory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address private constant router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _controller                   Address of the controller\\n     */\\n    constructor(IBabController _controller) TradeIntegration('univ2', _controller) {}\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Executes the trade through UniswapV2.\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of reserve asset token sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     * @param _hopToken             Address of the routing token for multi-hop, i.e., sendToken->hopToken->receiveToken\\n     */\\n    function _getTradeCallData(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        address _hopToken\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        address[] memory path;\\n        if (_hopToken == address(0) || _sendToken == _hopToken || _receiveToken == _hopToken) {\\n            path = new address[](2);\\n            path[0] = _sendToken;\\n            path[1] = _receiveToken;\\n        } else {\\n            path = new address[](3);\\n            path[0] = _sendToken;\\n            path[1] = _hopToken;\\n            path[2] = _receiveToken;\\n        }\\n        bytes memory callData =\\n            abi.encodeWithSignature(\\n                'swapExactTokensForTokens(uint256,uint256,address[],address,uint256)',\\n                _sendQuantity,\\n                1,\\n                path,\\n                _strategy,\\n                block.timestamp\\n            );\\n        return (router, 0, callData);\\n    }\\n\\n    /**\\n     * Executes the trade through UniswapV2.\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _sendToken            Address of the token to be sent to the exchange\\n     * @param _sendQuantity         Units of reserve asset token sent to the exchange\\n     * @param _receiveToken         Address of the token that will be received from the exchange\\n     */\\n    function _getTradeCallData(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return _getTradeCallData(_strategy, _sendToken, _sendQuantity, _receiveToken, WETH);\\n    }\\n\\n    /**\\n     * Returns the address to approve source tokens to for trading. This is the TokenTaker address\\n     *\\n     * @return address             Address of the contract to approve tokens to\\n     */\\n    function _getSpender(\\n        address /* _swapTarget */\\n    ) internal pure override returns (address) {\\n        return router;\\n    }\\n\\n    /* ============ Private Functions ============ */\\n}\\n\",\"keccak256\":\"0x8f980186b2f13a52c215e16ea2e523466afa7436b53496a8df897e49c0631f00\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x33b3ab0a2ece990ae46f2716f2dcb9c5abc290b52cb8b5d63466214fba069f98\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        address _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function updateGardenParams(uint256[9] memory _newParams) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4eb1ab36230c04a379beab49f1ac9f3729eaf22b8d608ff112498aa33a3ae391\",\"license\":\"Apache License\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xee03c9274ddf3257e3bfd2bb229fea3412c9105f178e64174f59efeafd53182c\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[4] calldata _params) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(uint256 fee, string memory _tokenURI) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0xea7c8d298fa5dfacd3cab9babeac447acb8e0bd93febad1fb0f64f0e7f05e67f\",\"license\":\"Apache License\"},\"contracts/interfaces/ITradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ITrade\\n * @author Babylon Finance\\n *\\n * Interface for trading protocol integrations\\n */\\ninterface ITradeIntegration {\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external;\\n\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        address _hopToken\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcbda9d19453f1e251b054bf94a5dae0e17aa3bf6788f6723c166a28342e78c46\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620019eb380380620019eb833981810160405260208110156200003757600080fd5b50516040805180820190915260058152643ab734bb1960d91b60208201528181816001600160a01b038116620000b4576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604482015290519081900360640190fd5b8151620000c9906001906020850190620000fa565b50600080546001600160a01b0319166001600160a01b03929092169190911790555050600160025550620001a69050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200013257600085556200017d565b82601f106200014d57805160ff19168380011785556200017d565b828001600101855582156200017d579182015b828111156200017d57825182559160200191906001019062000160565b506200018b9291506200018f565b5090565b5b808211156200018b576000815560010162000190565b61183580620001b66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063f694c75c146100ce578063f77c47911461011a578063fa1ca8201461013e575b600080fd5b610059610182565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009357818101518382015260200161007b565b50505050905090810190601f1680156100c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610118600480360360c08110156100e457600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013582169160808201359160a001351661020f565b005b61012261034d565b604080516001600160a01b039092168252519081900360200190f35b610118600480360360a081101561015457600080fd5b506001600160a01b03813581169160208101358216916040820135916060810135909116906080013561035c565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102075780601f106101dc57610100808354040283529160200191610207565b820191906000526020600020905b8154815290600101906020018083116101ea57829003601f168201915b505050505081565b600280541415610266576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055600054604080516313bc6d4b60e01b815233600482015290516001600160a01b03909216916313bc6d4b91602480820192602092909190829003018186803b1580156102b557600080fd5b505afa1580156102c9573d6000803e3d6000fd5b505050506040513d60208110156102df57600080fd5b5051610332576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b61034086868686868661049a565b5050600160025550505050565b6000546001600160a01b031681565b6002805414156103b3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055600054604080516313bc6d4b60e01b815233600482015290516001600160a01b03909216916313bc6d4b91602480820192602092909190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b505161047f576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b61048e8585858585600061049a565b50506001600255505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152600093610535938b938301828280156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505088878988610d22565b90506105418186610fca565b600080600061055189888a6110e6565b919450925090506001600160a01b038316156107c9576000610572846110fe565b6001600160a01b0316146106155783602001516001600160a01b03166397ccdc6061059c856110fe565b86606001518760c001516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050505b83602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561068c578181015183820152602001610674565b50505050905090810190601f1680156106b95780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071757600080fd5b810190808051604051939291908464010000000082111561073757600080fd5b90830190602082018581111561074c57600080fd5b825164010000000081118282018810171561076657600080fd5b82525081516020918201929091019080838360005b8381101561079357818101518382015260200161077b565b50505050905090810190601f1680156107c05780820380516001836020036101000a031916815260200191505b50604052505050505b600080806001600160a01b0388166107f8576107f38d88606001518960c001518a60800151611104565b610811565b6108118d88606001518960c001518a608001518c61113a565b919450925090506001600160a01b03831615610a6f5786602001516001600160a01b03166397ccdc60610843856113b7565b89606001518a60c001516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156108a357600080fd5b505af11580156108b7573d6000803e3d6000fd5b5050505086602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561093257818101518382015260200161091a565b50505050905090810190601f16801561095f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156109bd57600080fd5b81019080805160405193929190846401000000008211156109dd57600080fd5b9083019060208201858111156109f257600080fd5b8251640100000000811182820188101715610a0c57600080fd5b82525081516020918201929091019080838360005b83811015610a39578181015183820152602001610a21565b50505050905090810190601f168015610a665780820380516001836020036101000a031916815260200191505b50604052505050505b6000610a838e610a7e8d6113d0565b6113d3565b9050610a908d8c836110e6565b919850965094506001600160a01b03871615610d08576000610ab1886110fe565b6001600160a01b031614610b545787602001516001600160a01b03166397ccdc60610adb896110fe565b610ae48e6113d0565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050505b87602001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bcb578181015183820152602001610bb3565b50505050905090810190601f168015610bf85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c5657600080fd5b8101908080516040519392919084640100000000821115610c7657600080fd5b908301906020820185811115610c8b57600080fd5b8251640100000000811182820188101715610ca557600080fd5b82525081516020918201929091019080838360005b83811015610cd2578181015183820152602001610cba565b50505050905090810190601f168015610cff5780820380516001836020036101000a031916815260200191505b50604052505050505b610d118861149f565b505050505050505050505050505050565b610d2a61175d565b610d3261175d565b6001600160a01b038816602080830182905260408051630ad7511760e31b815290516356ba88b892600480840193919291829003018186803b158015610d7757600080fd5b505afa158015610d8b573d6000803e3d6000fd5b505050506040513d6020811015610da157600080fd5b50516001600160a01b0390811682526040808301899052878216606084015286821660808401526020838101518251630ad7511760e31b815292519316926356ba88b8926004808201939291829003018186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d6020811015610e2b57600080fd5b5051604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610e8857600080fd5b505afa158015610e9c573d6000803e3d6000fd5b505050506040513d6020811015610eb257600080fd5b505160a082015260c0810184905260e08101839052604080516370a0823160e01b81526001600160a01b038a811660048301529151918816916370a0823191602480820192602092909190829003018186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d6020811015610f3b57600080fd5b5051610100820152604080516370a0823160e01b81526001600160a01b038a811660048301529151918716916370a0823191602480820192602092909190829003018186803b158015610f8d57600080fd5b505afa158015610fa1573d6000803e3d6000fd5b505050506040513d6020811015610fb757600080fd5b5051610120820152979650505050505050565b60008260c0015111611023576040805162461bcd60e51b815260206004820152601d60248201527f546f6b656e20746f2073656c6c206d757374206265206e6f6e7a65726f000000604482015290519081900360640190fd5b8082606001516001600160a01b03166370a0823184602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b505110156110e25760405162461bcd60e51b815260040180806020018281038252602b8152602001806117d5602b913960400191505060405180910390fd5b5050565b50506040805160208101909152600080825292839250565b50600090565b600080606061112a8787878773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261113a565b9250925092509450945094915050565b6000806060806001600160a01b03851615806111675750846001600160a01b0316886001600160a01b0316145b806111835750846001600160a01b0316866001600160a01b0316145b1561120957604080516002808252606082018352909160208301908036833701905050905087816000815181106111b657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505085816001815181106111e457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506112b5565b604080516003808252608082019092529060208201606080368337019050509050878160008151811061123857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061126657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160028151811061129457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6000876001838c426040516024018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611321578181015183820152602001611309565b505060408051601f199690940184810396909601845294909452506020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f38ed173900000000000000000000000000000000000000000000000000000000179052737a250d5630b4cf539739df2c5dacb4c659f2488d9e5060009d509b505050505050505050505050955095509592505050565b50737a250d5630b4cf539739df2c5dacb4c659f2488d90565b90565b60006001600160a01b038216158061140757506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b1561141d57506001600160a01b03821631611499565b816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561146a57600080fd5b505afa15801561147e573d6000803e3d6000fd5b505050506040513d602081101561149457600080fd5b505190505b92915050565b60008061153283610120015184608001516001600160a01b03166370a0823186602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d602081101561152a57600080fd5b50519061169d565b9050600083606001516001600160a01b03166370a0823185602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d60208110156115b557600080fd5b50516101008501519091506000906115cd908361169d565b60c08601519091506115e790670c7d713b49da00006116ad565b81101561163b576040805162461bcd60e51b815260206004820152601960248201527f5061727469616c207472616465206e6f7420616c6c6f77656400000000000000604482015290519081900360640190fd5b8460e00151831015611694576040805162461bcd60e51b815260206004820152601d60248201527f536c6970706167652067726561746572207468616e20616c6c6f776564000000604482015290519081900360640190fd5b50909392505050565b8082038281111561149957600080fd5b60006116cb670de0b6b3a76400006116c585856116d2565b906116f6565b9392505050565b60008215806116ed575050818102818382816116ea57fe5b04145b61149957600080fd5b600080821161174c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161175557fe5b049392505050565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152509056fe5374726174656779206e6565647320746f206861766520656e6f756768206c697175696420746f6b656e73a2646970667358221220dc5662897cf54953b1627f3bd9f4166e46a9e15ad5efa39184188da2170a147964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806306fdde0314610051578063f694c75c146100ce578063f77c47911461011a578063fa1ca8201461013e575b600080fd5b610059610182565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561009357818101518382015260200161007b565b50505050905090810190601f1680156100c05780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610118600480360360c08110156100e457600080fd5b506001600160a01b0381358116916020810135821691604082013591606081013582169160808201359160a001351661020f565b005b61012261034d565b604080516001600160a01b039092168252519081900360200190f35b610118600480360360a081101561015457600080fd5b506001600160a01b03813581169160208101358216916040820135916060810135909116906080013561035c565b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102075780601f106101dc57610100808354040283529160200191610207565b820191906000526020600020905b8154815290600101906020018083116101ea57829003601f168201915b505050505081565b600280541415610266576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055600054604080516313bc6d4b60e01b815233600482015290516001600160a01b03909216916313bc6d4b91602480820192602092909190829003018186803b1580156102b557600080fd5b505afa1580156102c9573d6000803e3d6000fd5b505050506040513d60208110156102df57600080fd5b5051610332576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b61034086868686868661049a565b5050600160025550505050565b6000546001600160a01b031681565b6002805414156103b3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60028055600054604080516313bc6d4b60e01b815233600482015290516001600160a01b03909216916313bc6d4b91602480820192602092909190829003018186803b15801561040257600080fd5b505afa158015610416573d6000803e3d6000fd5b505050506040513d602081101561042c57600080fd5b505161047f576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b61048e8585858585600061049a565b50506001600255505050565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152600093610535938b938301828280156105275780601f106104fc57610100808354040283529160200191610527565b820191906000526020600020905b81548152906001019060200180831161050a57829003601f168201915b505050505088878988610d22565b90506105418186610fca565b600080600061055189888a6110e6565b919450925090506001600160a01b038316156107c9576000610572846110fe565b6001600160a01b0316146106155783602001516001600160a01b03166397ccdc6061059c856110fe565b86606001518760c001516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156105fc57600080fd5b505af1158015610610573d6000803e3d6000fd5b505050505b83602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561068c578181015183820152602001610674565b50505050905090810190601f1680156106b95780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156106da57600080fd5b505af11580156106ee573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561071757600080fd5b810190808051604051939291908464010000000082111561073757600080fd5b90830190602082018581111561074c57600080fd5b825164010000000081118282018810171561076657600080fd5b82525081516020918201929091019080838360005b8381101561079357818101518382015260200161077b565b50505050905090810190601f1680156107c05780820380516001836020036101000a031916815260200191505b50604052505050505b600080806001600160a01b0388166107f8576107f38d88606001518960c001518a60800151611104565b610811565b6108118d88606001518960c001518a608001518c61113a565b919450925090506001600160a01b03831615610a6f5786602001516001600160a01b03166397ccdc60610843856113b7565b89606001518a60c001516040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156108a357600080fd5b505af11580156108b7573d6000803e3d6000fd5b5050505086602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561093257818101518382015260200161091a565b50505050905090810190601f16801561095f5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561098057600080fd5b505af1158015610994573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156109bd57600080fd5b81019080805160405193929190846401000000008211156109dd57600080fd5b9083019060208201858111156109f257600080fd5b8251640100000000811182820188101715610a0c57600080fd5b82525081516020918201929091019080838360005b83811015610a39578181015183820152602001610a21565b50505050905090810190601f168015610a665780820380516001836020036101000a031916815260200191505b50604052505050505b6000610a838e610a7e8d6113d0565b6113d3565b9050610a908d8c836110e6565b919850965094506001600160a01b03871615610d08576000610ab1886110fe565b6001600160a01b031614610b545787602001516001600160a01b03166397ccdc60610adb896110fe565b610ae48e6113d0565b846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050505b87602001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610bcb578181015183820152602001610bb3565b50505050905090810190601f168015610bf85780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610c1957600080fd5b505af1158015610c2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610c5657600080fd5b8101908080516040519392919084640100000000821115610c7657600080fd5b908301906020820185811115610c8b57600080fd5b8251640100000000811182820188101715610ca557600080fd5b82525081516020918201929091019080838360005b83811015610cd2578181015183820152602001610cba565b50505050905090810190601f168015610cff5780820380516001836020036101000a031916815260200191505b50604052505050505b610d118861149f565b505050505050505050505050505050565b610d2a61175d565b610d3261175d565b6001600160a01b038816602080830182905260408051630ad7511760e31b815290516356ba88b892600480840193919291829003018186803b158015610d7757600080fd5b505afa158015610d8b573d6000803e3d6000fd5b505050506040513d6020811015610da157600080fd5b50516001600160a01b0390811682526040808301899052878216606084015286821660808401526020838101518251630ad7511760e31b815292519316926356ba88b8926004808201939291829003018186803b158015610e0157600080fd5b505afa158015610e15573d6000803e3d6000fd5b505050506040513d6020811015610e2b57600080fd5b5051604080517f18160ddd00000000000000000000000000000000000000000000000000000000815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b158015610e8857600080fd5b505afa158015610e9c573d6000803e3d6000fd5b505050506040513d6020811015610eb257600080fd5b505160a082015260c0810184905260e08101839052604080516370a0823160e01b81526001600160a01b038a811660048301529151918816916370a0823191602480820192602092909190829003018186803b158015610f1157600080fd5b505afa158015610f25573d6000803e3d6000fd5b505050506040513d6020811015610f3b57600080fd5b5051610100820152604080516370a0823160e01b81526001600160a01b038a811660048301529151918716916370a0823191602480820192602092909190829003018186803b158015610f8d57600080fd5b505afa158015610fa1573d6000803e3d6000fd5b505050506040513d6020811015610fb757600080fd5b5051610120820152979650505050505050565b60008260c0015111611023576040805162461bcd60e51b815260206004820152601d60248201527f546f6b656e20746f2073656c6c206d757374206265206e6f6e7a65726f000000604482015290519081900360640190fd5b8082606001516001600160a01b03166370a0823184602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561107957600080fd5b505afa15801561108d573d6000803e3d6000fd5b505050506040513d60208110156110a357600080fd5b505110156110e25760405162461bcd60e51b815260040180806020018281038252602b8152602001806117d5602b913960400191505060405180910390fd5b5050565b50506040805160208101909152600080825292839250565b50600090565b600080606061112a8787878773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc261113a565b9250925092509450945094915050565b6000806060806001600160a01b03851615806111675750846001600160a01b0316886001600160a01b0316145b806111835750846001600160a01b0316866001600160a01b0316145b1561120957604080516002808252606082018352909160208301908036833701905050905087816000815181106111b657fe5b60200260200101906001600160a01b031690816001600160a01b03168152505085816001815181106111e457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250506112b5565b604080516003808252608082019092529060208201606080368337019050509050878160008151811061123857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061126657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050858160028151811061129457fe5b60200260200101906001600160a01b031690816001600160a01b0316815250505b6000876001838c426040516024018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015611321578181015183820152602001611309565b505060408051601f199690940184810396909601845294909452506020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f38ed173900000000000000000000000000000000000000000000000000000000179052737a250d5630b4cf539739df2c5dacb4c659f2488d9e5060009d509b505050505050505050505050955095509592505050565b50737a250d5630b4cf539739df2c5dacb4c659f2488d90565b90565b60006001600160a01b038216158061140757506001600160a01b03821673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee145b1561141d57506001600160a01b03821631611499565b816001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561146a57600080fd5b505afa15801561147e573d6000803e3d6000fd5b505050506040513d602081101561149457600080fd5b505190505b92915050565b60008061153283610120015184608001516001600160a01b03166370a0823186602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561150057600080fd5b505afa158015611514573d6000803e3d6000fd5b505050506040513d602081101561152a57600080fd5b50519061169d565b9050600083606001516001600160a01b03166370a0823185602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561158b57600080fd5b505afa15801561159f573d6000803e3d6000fd5b505050506040513d60208110156115b557600080fd5b50516101008501519091506000906115cd908361169d565b60c08601519091506115e790670c7d713b49da00006116ad565b81101561163b576040805162461bcd60e51b815260206004820152601960248201527f5061727469616c207472616465206e6f7420616c6c6f77656400000000000000604482015290519081900360640190fd5b8460e00151831015611694576040805162461bcd60e51b815260206004820152601d60248201527f536c6970706167652067726561746572207468616e20616c6c6f776564000000604482015290519081900360640190fd5b50909392505050565b8082038281111561149957600080fd5b60006116cb670de0b6b3a76400006116c585856116d2565b906116f6565b9392505050565b60008215806116ed575050818102818382816116ea57fe5b04145b61149957600080fd5b600080821161174c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161175557fe5b049392505050565b60405180610140016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081526020016000815260200160008152509056fe5374726174656779206e6565647320746f206861766520656e6f756768206c697175696420746f6b656e73a2646970667358221220dc5662897cf54953b1627f3bd9f4166e46a9e15ad5efa39184188da2170a147964736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol UniswapV3 trade integration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_controller": "Address of the controller"
        }
      },
      "trade(address,address,uint256,address,uint256)": {
        "details": "@param _strategy             Address of the strategy",
        "params": {
          "_minReceiveQuantity": "Min units of wanted token to be received from the exchange",
          "_receiveToken": "Address of the token that will be received from the exchange",
          "_sendQuantity": "Units of reserve asset token sent to the exchange",
          "_sendToken": "Address of the token to be sent to the exchange"
        }
      },
      "trade(address,address,uint256,address,uint256,address)": {
        "details": "@param _strategy             Address of the strategy",
        "params": {
          "_minReceiveQuantity": "Min units of wanted token to be received from the exchange",
          "_receiveToken": "Address of the token that will be received from the exchange",
          "_sendQuantity": "Units of reserve asset token sent to the exchange",
          "_sendToken": "Address of the token to be sent to the exchange"
        }
      }
    },
    "title": "UniswapV2TradeIntegration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "trade(address,address,uint256,address,uint256)": {
        "notice": "Executes a trade on a supported DEX."
      },
      "trade(address,address,uint256,address,uint256,address)": {
        "notice": "Executes a trade on a supported DEX."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 21735,
        "contract": "contracts/integrations/trade/UniswapV2TradeIntegration.sol:UniswapV2TradeIntegration",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBabController)35030"
      },
      {
        "astId": 21737,
        "contract": "contracts/integrations/trade/UniswapV2TradeIntegration.sol:UniswapV2TradeIntegration",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 5975,
        "contract": "contracts/integrations/trade/UniswapV2TradeIntegration.sol:UniswapV2TradeIntegration",
        "label": "_status",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_contract(IBabController)35030": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}