{
  "address": "0xc4EE06f210514d3f04E043A5C16C1bc8BA9760d5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract ICurveMetaRegistry",
          "name": "_curveMetaRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolTokensOut",
          "type": "uint256"
        }
      ],
      "name": "PoolEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_poolTokensIn",
          "type": "uint256"
        }
      ],
      "name": "PoolExited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_poolTokensIn",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokensOut",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "name": "exitPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getLPToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getPoolMinAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_minAmountsOut",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        },
        {
          "internalType": "bool",
          "name": "forNAV",
          "type": "bool"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getPoolTokensOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        }
      ],
      "name": "getPoolWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        }
      ],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        }
      ],
      "name": "getRewardTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingAndRate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_pool",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_poolTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_tokensIn",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_maxAmountsIn",
          "type": "uint256[]"
        }
      ],
      "name": "joinPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "poolWeightsByPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b33e53f3cd698057250d4cd364a12ab4940137c5416e834374db690957f92c6",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0xc4EE06f210514d3f04E043A5C16C1bc8BA9760d5",
    "transactionIndex": 241,
    "gasUsed": "3649048",
    "logsBloom": "0x
    "blockHash": "0xb1716b93f84508bd0aceb20352bb239de54b8627ccc616b9494745dc2b7139b6",
    "transactionHash": "0x0b33e53f3cd698057250d4cd364a12ab4940137c5416e834374db690957f92c6",
    "logs": [],
    "blockNumber": 14210240,
    "cumulativeGasUsed": "17349295",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0x2B4A741F5281Ea672b7cc21C6d4B4e63c5d7F2A5"
  ],
  "numDeployments": 2,
  "solcInputHash": "d473d609720c87a45aae96e5ba466dc4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract ICurveMetaRegistry\",\"name\":\"_curveMetaRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolTokensOut\",\"type\":\"uint256\"}],\"name\":\"PoolEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_poolTokensIn\",\"type\":\"uint256\"}],\"name\":\"PoolExited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_poolTokensIn\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokensOut\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_minAmountsOut\",\"type\":\"uint256[]\"}],\"name\":\"exitPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLPToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPoolMinAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_minAmountsOut\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"},{\"internalType\":\"bool\",\"name\":\"forNAV\",\"type\":\"bool\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getPoolTokensOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"}],\"name\":\"getPoolWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"}],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"}],\"name\":\"getRewardTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingAndRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_pool\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_poolTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_tokensIn\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_maxAmountsIn\",\"type\":\"uint256[]\"}],\"name\":\"joinPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"poolWeightsByPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Curve liquidity providing integration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_controller\":\"Address of the controller\"}},\"exitPool(address,bytes,uint256,address[],uint256[])\":{\"params\":{\"_minAmountsOut\":\"Array of min token quantities to receive from the pool\",\"_pool\":\"Pool info e.g. PoolId or Address of the pool token to join + metadata\",\"_poolTokensIn\":\"Pool tokens to exchange for the underlying tokens\",\"_strategy\":\"Address of the strategy\",\"_tokensOut\":\"Array of token addresses to withdraw\"}},\"getLPToken(address)\":{\"params\":{\"_pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"address                 Address of the LP token\"}},\"getPool(address)\":{\"params\":{\"_pool\":\"Address of the maybe pool\"},\"returns\":{\"_0\":\"address                 Address of the pool itself\"}},\"getUnderlyingAndRate(bytes,uint256)\":{\"params\":{\"_i\":\"Index of coin in the pool\",\"_pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"address                 Underlying coin\",\"_1\":\"uint256                 Rate from coin to underlying\"}},\"isPool(bytes)\":{\"params\":{\"_pool\":\"OpData e.g. Pool address to check\"},\"returns\":{\"_0\":\"bool                 True if the address is a pool\"}},\"joinPool(address,bytes,uint256,address[],uint256[])\":{\"params\":{\"_maxAmountsIn\":\"Array of max token quantities to pull out from the garden\",\"_pool\":\"OpData e.g. Address of the pool token to join\",\"_poolTokensOut\":\"Min amount of pool tokens to receive\",\"_strategy\":\"Address of the strategy\",\"_tokensIn\":\"Array of token addresses to deposit\"}},\"totalSupply(address)\":{\"params\":{\"_pool\":\"Address of the pool\"},\"returns\":{\"_0\":\"address                 Total supply of the token\"}}},\"title\":\"CurvePoolIntegration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"exitPool(address,bytes,uint256,address[],uint256[])\":{\"notice\":\"Exits a liquidity pool. Accrue protocol fee (if any)\"},\"getLPToken(address)\":{\"notice\":\"Returns the actual address of the LP token. Different for curve.\"},\"getPool(address)\":{\"notice\":\"Gets the underlying pool that holds the internal tokens. Different for curve.\"},\"getUnderlyingAndRate(bytes,uint256)\":{\"notice\":\"Returns the underlying coin\"},\"isPool(bytes)\":{\"notice\":\"Checks whether a pool address is valid\"},\"joinPool(address,bytes,uint256,address[],uint256[])\":{\"notice\":\"Joins a pool\"},\"totalSupply(address)\":{\"notice\":\"Returns the total supply of the pool tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/pool/CurvePoolIntegration.sol\":\"CurvePoolIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/integrations/BaseIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IIntegration} from '../interfaces/IIntegration.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IBaseIntegration} from '../interfaces/IBaseIntegration.sol';\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title BaseIntegration\\n * @author Babylon Finance\\n *\\n * Abstract class that houses common Integration-related state and functions.\\n */\\nabstract contract BaseIntegration is IBaseIntegration {\\n    using SafeCast for int256;\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlySystemContract() {\\n        require(controller.isSystemContract(msg.sender), 'Only system can call this');\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant ETH_ADD_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address internal constant sETH = 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb;\\n    address internal constant sUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IBabController public immutable controller;\\n\\n    // Name of the integration\\n    string public override name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n\\n    constructor(string memory _name, IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getTokenOrETHBalance(address _strategy, address _token) internal view returns (uint256) {\\n        if (_token == address(0) || _token == ETH_ADD_CURVE) {\\n            return _strategy.balance;\\n        }\\n        return ERC20(_token).balanceOf(_strategy);\\n    }\\n}\\n\",\"keccak256\":\"0x76381111c833bc1dff8c0013b54d5ce3c23ec346dba02d31968033e45710aaf4\",\"license\":\"Apache License\"},\"contracts/integrations/pool/CurvePoolIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {ICurveMetaRegistry} from '../../interfaces/ICurveMetaRegistry.sol';\\nimport {PoolIntegration} from './PoolIntegration.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {BytesLib} from '../../lib/BytesLib.sol';\\nimport {ControllerLib} from '../../lib/ControllerLib.sol';\\n\\n/**\\n * @title CurvePoolIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Curve liquidity providing integration\\n */\\ncontract CurvePoolIntegration is PoolIntegration {\\n    using LowGasSafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using BytesLib for uint256;\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constant ============ */\\n    address private constant TRICRYPTO2 = 0xD51a44d3FaE010294C616388b506AcdA1bfAAE46; // Pool only takes ETH\\n    address private constant cvxCRVPool = 0x9D0464996170c6B9e75eED71c68B99dDEDf279e8; // Pool only takes CRV for us\\n    address private constant palstkaave = 0x48536EC5233297C367fd0b6979B75d9270bB6B15; // Pool only takes CRV for us\\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52; // crv\\n    address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B; // cvx\\n    ICurveMetaRegistry private immutable curveMetaRegistry;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Registry of first party pools\\n\\n    // Mapping of pools to deposit contract\\n    mapping(address => address) private poolToDeposit;\\n\\n    // Whether to deposit using the underlying coins\\n    mapping(address => bool) private usesUnderlying;\\n\\n    // Whether it supports the underlying param in add liquidity and remove liquidity\\n    mapping(address => bool) private supportsUnderlyingParam;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _controller                   Address of the controller\\n     */\\n    constructor(IBabController _controller, ICurveMetaRegistry _curveMetaRegistry)\\n        PoolIntegration('curve_pool', _controller)\\n    {\\n        require(address(_controller) != address(0), 'invalid address');\\n        require(address(_curveMetaRegistry) != address(0), 'invalid address');\\n\\n        usesUnderlying[0xDeBF20617708857ebe4F679508E7b7863a8A8EeE] = true; // aave\\n        usesUnderlying[0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56] = true; // compound\\n        usesUnderlying[0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C] = true; // usdt\\n        usesUnderlying[0x06364f10B501e868329afBc005b3492902d6C763] = true; // PAX\\n        usesUnderlying[0x2dded6Da1BF5DBdF597C45fcFaa3194e53EcfeAF] = true; // ironbank\\n        usesUnderlying[0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27] = true; // busd\\n        usesUnderlying[0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51] = true; // y\\n        usesUnderlying[0xA5407eAE9Ba41422680e2e00537571bcC53efBfD] = true; // susd\\n        usesUnderlying[0x8925D9d9B4569D737a48499DeF3f67BaA5a144b9] = true; // yv2\\n        usesUnderlying[0xEB16Ae0052ed37f479f7fe63849198Df1765a733] = true; // saave\\n\\n        poolToDeposit[0xA2B47E3D5c44877cca798226B7B8118F9BFb7A56] = 0xeB21209ae4C2c9FF2a86ACA31E123764A3B6Bc06; // compound\\n        poolToDeposit[0x52EA46506B9CC5Ef470C5bf89f17Dc28bB35D85C] = 0xac795D2c97e60DF6a99ff1c814727302fD747a80; // usdt\\n        poolToDeposit[0x06364f10B501e868329afBc005b3492902d6C763] = 0xA50cCc70b6a011CffDdf45057E39679379187287; // pax\\n        poolToDeposit[0x79a8C46DeA5aDa233ABaFFD40F3A0A2B1e5A4F27] = 0xb6c057591E073249F2D9D88Ba59a46CFC9B59EdB; // busd\\n        poolToDeposit[0x45F783CCE6B7FF23B2ab2D70e416cdb7D6055f51] = 0xbBC81d23Ea2c3ec7e56D39296F0cbB648873a5d3; // y\\n        poolToDeposit[0xA5407eAE9Ba41422680e2e00537571bcC53efBfD] = 0xFCBa3E75865d2d561BE8D220616520c171F12851; // susd\\n\\n        supportsUnderlyingParam[0xDeBF20617708857ebe4F679508E7b7863a8A8EeE] = true; // aave\\n        supportsUnderlyingParam[0x2dded6Da1BF5DBdF597C45fcFaa3194e53EcfeAF] = true; // ironbank\\n        supportsUnderlyingParam[0x8925D9d9B4569D737a48499DeF3f67BaA5a144b9] = true; // yv2\\n        supportsUnderlyingParam[0xEB16Ae0052ed37f479f7fe63849198Df1765a733] = true; // saave\\n\\n        curveMetaRegistry = _curveMetaRegistry;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function getPoolTokens(bytes calldata _pool, bool forNAV) public view override returns (address[] memory) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        uint256 ncoins = curveMetaRegistry.getNCoins(poolAddress);\\n        address[] memory result = new address[](ncoins);\\n        address[8] memory coins =\\n            curveMetaRegistry.getCoinAddresses(poolAddress, usesUnderlying[poolAddress] && !forNAV);\\n        for (uint8 i = 0; i < ncoins; i++) {\\n            result[i] = coins[i];\\n        }\\n        return result;\\n    }\\n\\n    function getPoolWeights(bytes calldata _pool) external view override returns (uint256[] memory) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        address[] memory poolTokens = getPoolTokens(_pool, false);\\n        uint256[] memory result = new uint256[](curveMetaRegistry.getNCoins(poolAddress));\\n        if (poolAddress == TRICRYPTO2) {\\n            result[0] = 0;\\n            result[1] = 0;\\n            result[2] = uint256(1e18);\\n            return result;\\n        }\\n        // cvxCRV\\n        if (poolAddress == cvxCRVPool || poolAddress == palstkaave) {\\n            result[0] = uint256(1e18);\\n            result[1] = 0;\\n            return result;\\n        }\\n        // If it's a meta pool, deposit and withdraw from the stable one\\n        if (curveMetaRegistry.isMeta(poolAddress)) {\\n            result[0] = uint256(1e18);\\n        } else {\\n            for (uint8 i = 0; i < poolTokens.length; i++) {\\n                result[i] = uint256(1e18).div(poolTokens.length);\\n            }\\n        }\\n        return result;\\n    }\\n\\n    function getPoolTokensOut(\\n        bytes calldata, /* _pool */\\n        address, /* _poolToken */\\n        uint256 /* _maxAmountsIn */\\n    ) external pure override returns (uint256) {\\n        // return 1 since _poolTokensOut are not used\\n        return 1;\\n    }\\n\\n    function getPoolMinAmountsOut(\\n        bytes calldata _pool,\\n        uint256 /* _liquidity */\\n    ) external view override returns (uint256[] memory _minAmountsOut) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        uint256[] memory result = new uint256[](curveMetaRegistry.getNCoins(poolAddress));\\n        return result;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _isPool(bytes memory _pool) internal view override returns (bool) {\\n        address poolAddress = BytesLib.decodeOpDataAddressAssembly(_pool, 12);\\n        return curveMetaRegistry.isPool(poolAddress);\\n    }\\n\\n    function _getSpender(bytes calldata _pool) internal view override returns (address) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        if (poolToDeposit[poolAddress] != address(0)) {\\n            poolAddress = poolToDeposit[poolAddress];\\n        }\\n        return poolAddress;\\n    }\\n\\n    function _totalSupply(\\n        address /* _pool */\\n    ) internal pure override returns (uint256) {\\n        return uint256(1e18);\\n    }\\n\\n    /**\\n     * Return join pool calldata which is already generated from the pool API\\n     *\\n     * hparam  _strategy                 Address of the strategy\\n     * @param  _pool                     OpData e.g. Address of the pool\\n     * @param  _poolTokensOut            Amount of pool tokens to send\\n     * hparam  _tokensIn                 Addresses of tokens to send to the pool\\n     * @param  _maxAmountsIn             Amounts of tokens to send to the pool\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getJoinPoolCalldata(\\n        address, /* _strategy */\\n        bytes calldata _pool,\\n        uint256 _poolTokensOut,\\n        address[] calldata _tokensIn,\\n        uint256[] calldata _maxAmountsIn\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        uint256 poolCoins = curveMetaRegistry.getNCoins(poolAddress); //_decodeOpDataAsUint8(_pool, 0);\\n        // Encode method data for Garden to invoke\\n        bytes memory methodData = _getAddLiquidityMethodData(poolAddress, poolCoins, _maxAmountsIn, _poolTokensOut);\\n\\n        uint256 value = 0;\\n        // If any is eth, set as value\\n        for (uint256 i = 0; i < poolCoins; i++) {\\n            if (_tokensIn[i] == address(0) || _tokensIn[i] == ETH_ADD_CURVE) {\\n                value = _maxAmountsIn[i];\\n            }\\n        }\\n        // If we need a deposit contract to deposit underlying, switch\\n        if (poolToDeposit[poolAddress] != address(0)) {\\n            poolAddress = poolToDeposit[poolAddress];\\n        }\\n        return (poolAddress, value, methodData);\\n    }\\n\\n    /**\\n     * Return exit pool calldata which is already generated from the pool API\\n     *\\n     * hparam  _strategy                 Address of the strategy\\n     * @param  _pool                     OpData e.g. Address of the pool\\n     * @param  _poolTokensIn             Amount of pool tokens to receive\\n     * hparam  _tokensOut                Addresses of tokens to receive\\n     * @param  _minAmountsOut            Amounts of pool tokens to receive\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getExitPoolCalldata(\\n        address, /* _strategy */\\n        bytes memory _pool,\\n        uint256 _poolTokensIn,\\n        address[] calldata, /* _tokensOut */\\n        uint256[] calldata _minAmountsOut\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        address poolAddress = BytesLib.decodeOpDataAddressAssembly(_pool, 12);\\n        uint256 poolCoins = curveMetaRegistry.getNCoins(poolAddress); //_decodeOpDataAsUint8(_pool, 0);\\n\\n        require(_poolTokensIn > 0, '_poolTokensIn has to not 0');\\n        require(_minAmountsOut.length > 1, 'Has to provide _minAmountsOut');\\n        // Encode method data for Garden to invoke\\n        bytes memory methodData = _getRemoveLiquidityMethodData(poolAddress, poolCoins, _minAmountsOut, _poolTokensIn);\\n        if (poolToDeposit[poolAddress] != address(0)) {\\n            poolAddress = poolToDeposit[poolAddress];\\n        }\\n        return (poolAddress, 0, methodData);\\n    }\\n\\n    function _getAddLiquidityMethodData(\\n        address _poolAddress,\\n        uint256 ncoins,\\n        uint256[] calldata _maxAmountsIn,\\n        uint256 minMintAmount\\n    ) private view returns (bytes memory) {\\n        if (ncoins == 2) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[2],uint256,bool)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        minMintAmount,\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[2],uint256)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        minMintAmount\\n                    );\\n            }\\n        }\\n        if (ncoins == 3) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[3],uint256,bool)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        minMintAmount,\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[3],uint256)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        minMintAmount\\n                    );\\n            }\\n        }\\n        if (ncoins == 4) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[4],uint256,bool)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        _maxAmountsIn[3],\\n                        minMintAmount,\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[4],uint256)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        _maxAmountsIn[3],\\n                        minMintAmount\\n                    );\\n            }\\n        }\\n        if (ncoins == 5) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[5],uint256,bool)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        _maxAmountsIn[3],\\n                        _maxAmountsIn[4],\\n                        minMintAmount,\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'add_liquidity(uint256[5],uint256)',\\n                        _maxAmountsIn[0],\\n                        _maxAmountsIn[1],\\n                        _maxAmountsIn[2],\\n                        _maxAmountsIn[3],\\n                        _maxAmountsIn[4],\\n                        minMintAmount\\n                    );\\n            }\\n        }\\n        return bytes('');\\n    }\\n\\n    function _getRemoveLiquidityMethodData(\\n        address _poolAddress,\\n        uint256 ncoins,\\n        uint256[] calldata _minAmountsOut,\\n        uint256 _poolTokensIn\\n    ) private view returns (bytes memory) {\\n        // For meta remove everything in the stable coin\\n        if (curveMetaRegistry.isMeta(_poolAddress) || _poolAddress == cvxCRVPool) {\\n            return\\n                abi.encodeWithSignature(\\n                    'remove_liquidity_one_coin(uint256,int128,uint256)',\\n                    _poolTokensIn,\\n                    int128(0),\\n                    _minAmountsOut[0]\\n                );\\n        }\\n        if (ncoins == 2) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[2],bool)',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        true\\n                    );\\n            } else {\\n                if (_poolAddress == palstkaave) {\\n                    return\\n                        abi.encodeWithSignature(\\n                            'remove_liquidity_one_coin(uint256,uint256,uint256)',\\n                            _poolTokensIn,\\n                            uint256(0),\\n                            _minAmountsOut[0]\\n                        );\\n                }\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[2])',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1]\\n                    );\\n            }\\n        }\\n        if (ncoins == 3) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[3],bool)',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[2],\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[3])',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[2]\\n                    );\\n            }\\n        }\\n        if (ncoins == 4) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[4],bool)',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[2],\\n                        _minAmountsOut[3],\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[4])',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[2],\\n                        _minAmountsOut[3]\\n                    );\\n            }\\n        }\\n        if (ncoins == 5) {\\n            if (supportsUnderlyingParam[_poolAddress]) {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[5],bool)',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[3],\\n                        _minAmountsOut[4],\\n                        true\\n                    );\\n            } else {\\n                return\\n                    abi.encodeWithSignature(\\n                        'remove_liquidity(uint256,uint256[5])',\\n                        _poolTokensIn,\\n                        _minAmountsOut[0],\\n                        _minAmountsOut[1],\\n                        _minAmountsOut[2],\\n                        _minAmountsOut[3],\\n                        _minAmountsOut[4]\\n                    );\\n            }\\n        }\\n        return bytes('');\\n    }\\n\\n    function _getLpToken(address _pool) internal view override returns (address) {\\n        // For Deposits & stable swaps that support it get the LP token, otherwise get the pool\\n        return curveMetaRegistry.getLpToken(_pool);\\n    }\\n\\n    function _getUnderlyingAndRate(bytes calldata _pool, uint256 _i) internal view override returns (address, uint256) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        return curveMetaRegistry.getUnderlyingAndRate(poolAddress, _i);\\n    }\\n\\n    function _getRewardTokens(\\n        address /* _pool */\\n    ) internal pure override returns (address[] memory) {\\n        address[] memory rewards = new address[](2);\\n        rewards[0] = CRV;\\n        rewards[1] = CVX;\\n        return rewards;\\n    }\\n}\\n\",\"keccak256\":\"0x1c5507a9cf486ea5afc43da79e72c79c16d4816ae6458a109eabeaea0aa32eb1\",\"license\":\"Apache License\"},\"contracts/integrations/pool/PoolIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {AddressArrayUtils} from '../../lib/AddressArrayUtils.sol';\\n\\nimport {IPoolIntegration} from '../../interfaces/IPoolIntegration.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\n\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {BytesLib} from '../../lib/BytesLib.sol';\\n\\nimport {BaseIntegration} from '../BaseIntegration.sol';\\n\\n/**\\n * @title PoolIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Base class for integration with pool protocols\\n */\\nabstract contract PoolIntegration is BaseIntegration, ReentrancyGuard, IPoolIntegration {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n    using BytesLib for bytes;\\n\\n    /* ============ Struct ============ */\\n\\n    struct PoolInfo {\\n        IGarden garden; // Garden address\\n        IStrategy strategy; // Strategy address\\n        bytes pool; // OpData 64 bytes each OpData\\n        address lpToken; // LP address\\n        uint256 totalSupply; // Total Supply of the pool\\n        uint256 poolTokensInTransaction; // Pool tokens affected by this transaction\\n        uint256 poolTokensInStrategy; // Pool tokens strategy balance\\n        uint256[] limitPoolTokenQuantities;\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event PoolEntered(address indexed _strategy, address indexed _garden, address _pool, uint256 _poolTokensOut);\\n\\n    event PoolExited(address indexed _strategy, address indexed _garden, address _pool, uint256 _poolTokensIn);\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 internal constant SLIPPAGE_ALLOWED = 5e16; // 5%\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, IBabController _controller) BaseIntegration(_name, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Joins a pool\\n     *\\n     * @param _strategy             Address of the strategy\\n     * @param _pool                 OpData e.g. Address of the pool token to join\\n     * @param _poolTokensOut        Min amount of pool tokens to receive\\n     * @param _tokensIn             Array of token addresses to deposit\\n     * @param _maxAmountsIn         Array of max token quantities to pull out from the garden\\n     */\\n    function joinPool(\\n        address _strategy,\\n        bytes calldata _pool,\\n        uint256 _poolTokensOut,\\n        address[] calldata _tokensIn,\\n        uint256[] calldata _maxAmountsIn\\n    ) external override nonReentrant onlySystemContract {\\n        PoolInfo memory poolInfo = _createPoolInfo(_strategy, _pool, _poolTokensOut, _tokensIn, _maxAmountsIn);\\n        _validatePreJoinPoolData(poolInfo);\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        // Approve spending of the tokens\\n        for (uint256 i = 0; i < _tokensIn.length; i++) {\\n            // No need to approve ETH\\n            if (_tokensIn[i] != address(0) && _tokensIn[i] != ETH_ADD_CURVE && _maxAmountsIn[i] > 0) {\\n                poolInfo.strategy.invokeApprove(_getSpender(_pool), _tokensIn[i], _maxAmountsIn[i]);\\n            }\\n        }\\n        (address targetPool, uint256 callValue, bytes memory methodData) =\\n            _getJoinPoolCalldata(_strategy, _pool, _poolTokensOut, _tokensIn, _maxAmountsIn);\\n        poolInfo.strategy.invokeFromIntegration(targetPool, callValue, methodData);\\n        poolInfo.poolTokensInTransaction = IERC20(poolInfo.lpToken).balanceOf(address(poolInfo.strategy)).sub(\\n            poolInfo.poolTokensInStrategy\\n        );\\n        _validatePostJoinPoolData(poolInfo);\\n        emit PoolEntered(address(poolInfo.strategy), address(poolInfo.garden), poolAddress, _poolTokensOut);\\n    }\\n\\n    /**\\n     * Exits a liquidity pool. Accrue protocol fee (if any)\\n     *\\n     * @param _strategy               Address of the strategy\\n     * @param _pool                   Pool info e.g. PoolId or Address of the pool token to join + metadata\\n     * @param _poolTokensIn           Pool tokens to exchange for the underlying tokens\\n     * @param _tokensOut              Array of token addresses to withdraw\\n     * @param _minAmountsOut          Array of min token quantities to receive from the pool\\n     */\\n    function exitPool(\\n        address _strategy,\\n        bytes calldata _pool,\\n        uint256 _poolTokensIn,\\n        address[] calldata _tokensOut,\\n        uint256[] calldata _minAmountsOut\\n    ) external override nonReentrant onlySystemContract {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        PoolInfo memory poolInfo = _createPoolInfo(_strategy, _pool, _poolTokensIn, _tokensOut, _minAmountsOut);\\n        _validatePreExitPoolData(poolInfo);\\n        // Approve spending of the pool token\\n        poolInfo.strategy.invokeApprove(_getSpender(_pool), poolInfo.lpToken, _poolTokensIn);\\n\\n        (address targetPool, uint256 callValue, bytes memory methodData) =\\n            _getExitPoolCalldata(_strategy, _pool, _poolTokensIn, _tokensOut, _minAmountsOut);\\n        poolInfo.strategy.invokeFromIntegration(targetPool, callValue, methodData);\\n        _validatePostExitPoolData(poolInfo);\\n\\n        emit PoolExited(address(poolInfo.strategy), address(poolInfo.garden), poolAddress, _poolTokensIn);\\n    }\\n\\n    /**\\n     * Checks whether a pool address is valid\\n     *\\n     * @param _pool                 OpData e.g. Pool address to check\\n     * @return bool                 True if the address is a pool\\n     */\\n    function isPool(bytes memory _pool) external view override returns (bool) {\\n        return _isPool(_pool);\\n    }\\n\\n    /**\\n     * Returns the actual address of the LP token. Different for curve.\\n     * @param _pool                    Address of the pool\\n     * @return address                 Address of the LP token\\n     */\\n    function getLPToken(address _pool) external view override returns (address) {\\n        return _getLpToken(_pool);\\n    }\\n\\n    /**\\n     * Gets the underlying pool that holds the internal tokens. Different for curve.\\n     * @param _pool                    Address of the maybe pool\\n     * @return address                 Address of the pool itself\\n     */\\n    function getPool(address _pool) external view override returns (address) {\\n        return _getPool(_pool);\\n    }\\n\\n    /**\\n     * Returns the total supply of the pool tokens\\n     * @param _pool                    Address of the pool\\n     * @return address                 Total supply of the token\\n     */\\n    function totalSupply(address _pool) external view override returns (uint256) {\\n        return _totalSupply(_pool);\\n    }\\n\\n    /**\\n     * Returns the underlying coin\\n     * @param _pool                    Address of the pool\\n     * @param _i                       Index of coin in the pool\\n     * @return address                 Underlying coin\\n     * @return uint256                 Rate from coin to underlying\\n     */\\n    function getUnderlyingAndRate(bytes calldata _pool, uint256 _i) external view override returns (address, uint256) {\\n        return _getUnderlyingAndRate(_pool, _i);\\n    }\\n\\n    function getPricePerShare(bytes calldata _pool) external view virtual override returns (uint256) {\\n        return _getPricePerShare(_pool);\\n    }\\n\\n    function poolWeightsByPrice(\\n        bytes calldata /* _pool */\\n    ) external view virtual override returns (bool) {\\n        return false;\\n    }\\n\\n    function getPoolTokens(\\n        bytes calldata, /* _pool */\\n        bool /* forNAV */\\n    ) public view virtual override returns (address[] memory);\\n\\n    function getPoolWeights(\\n        bytes calldata /*_pool */\\n    ) external view virtual override returns (uint256[] memory);\\n\\n    function getRewardTokens(bytes calldata _pool) external view virtual override returns (address[] memory) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        return _getRewardTokens(poolAddress);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Create and return PoolInfo struct\\n     *\\n     * @param _strategy                      Address of the strategy\\n     * @param _pool                          Pool info e.g. Address of the pool + metadata\\n     * @param _poolTokensInTransaction       Number of pool tokens involved\\n     * hparam _poolTokens                    Addresseses of the pool tokens\\n     * @param _limitPoolTokenQuantities      Limit quantity of the pool tokens\\n     *\\n     * return PoolInfo             Struct containing data for pool\\n     */\\n    function _createPoolInfo(\\n        address _strategy,\\n        bytes calldata _pool,\\n        uint256 _poolTokensInTransaction,\\n        address[] calldata, /* _poolTokens */\\n        uint256[] calldata _limitPoolTokenQuantities\\n    ) internal view returns (PoolInfo memory) {\\n        address poolAddress = BytesLib.decodeOpDataAddress(_pool);\\n        PoolInfo memory poolInfo;\\n        poolInfo.lpToken = _getLpToken(poolAddress);\\n        poolInfo.strategy = IStrategy(_strategy);\\n        poolInfo.garden = IGarden(poolInfo.strategy.garden());\\n        poolInfo.pool = _pool;\\n        poolInfo.poolTokensInStrategy = IERC20(poolInfo.lpToken).balanceOf(_strategy);\\n        poolInfo.poolTokensInTransaction = _poolTokensInTransaction;\\n        poolInfo.limitPoolTokenQuantities = _limitPoolTokenQuantities;\\n\\n        return poolInfo;\\n    }\\n\\n    /**\\n     * Validate pre pool join data. Check pool is valid, token quantity is valid.\\n     *\\n     * @param _poolInfo               Struct containing pool information used in internal functions\\n     */\\n    function _validatePreJoinPoolData(PoolInfo memory _poolInfo) internal view {\\n        require(_isPool(_poolInfo.pool), 'The pool address is not valid');\\n        require(_poolInfo.poolTokensInTransaction > 0, 'Min pool tokens to receive must be greater than 0');\\n    }\\n\\n    /**\\n     * Validate pre pool data. Check pool is valid, token quantity is valid.\\n     *\\n     * @param _poolInfo               Struct containing pool information used in internal functions\\n     */\\n    function _validatePreExitPoolData(PoolInfo memory _poolInfo) internal view {\\n        require(_isPool(_poolInfo.pool), 'The pool address is not valid');\\n        require(_poolInfo.poolTokensInTransaction > 0, 'Pool tokens to exchange must be greater than 0');\\n        require(\\n            _poolInfo.poolTokensInStrategy >= _poolInfo.poolTokensInTransaction,\\n            'The strategy does not have enough pool tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post join pool data. Check pool is valid, token quantity is valid.\\n     *\\n     * @param _poolInfo               Struct containing pool information used in internal functions\\n     */\\n    function _validatePostJoinPoolData(PoolInfo memory _poolInfo) internal view {\\n        require(\\n            (IERC20(_poolInfo.lpToken).balanceOf(address(_poolInfo.strategy)) > _poolInfo.poolTokensInStrategy),\\n            'The strategy did not receive the pool tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post exit pool data. Check pool is valid, token quantity is valid.\\n     *\\n     * @param _poolInfo               Struct containing pool information used in internal functions\\n     */\\n    function _validatePostExitPoolData(PoolInfo memory _poolInfo) internal view {\\n        require(\\n            IERC20(_poolInfo.lpToken).balanceOf(address(_poolInfo.strategy)) ==\\n                _poolInfo.poolTokensInStrategy - _poolInfo.poolTokensInTransaction,\\n            'The strategy did not return the pool tokens'\\n        );\\n        // TODO: validate individual tokens received\\n    }\\n\\n    /**\\n     * Return join pool calldata which is already generated from the pool API\\n     *\\n     * hparam  _strategy                 Address of the strategy\\n     * hparam  _pool                     OpData e.g. Address of the pool\\n     * hparam  _poolTokensOut            Amount of pool tokens to send\\n     * hparam  _tokensIn                 Addresses of tokens to send to the pool\\n     * hparam  _maxAmountsIn             Amounts of tokens to send to the pool\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getJoinPoolCalldata(\\n        address, /* _strategy */\\n        bytes calldata, /* _pool */\\n        uint256, /* _poolTokensOut */\\n        address[] calldata, /* _tokensIn */\\n        uint256[] calldata /* _maxAmountsIn */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    /**\\n     * Return exit pool calldata which is already generated from the pool API\\n     *\\n     * hparam  _strategy                 Address of the strategy\\n     * hparam  _pool                     OpData e.g. Address of the pool\\n     * hparam  _poolTokensIn             Amount of pool tokens to receive\\n     * hparam  _tokensOut                Addresses of tokens to receive\\n     * hparam  _minAmountsOut            Amounts of pool tokens to receive\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getExitPoolCalldata(\\n        address, /* _strategy */\\n        bytes memory, /* _pool */\\n        uint256, /* _poolTokensIn */\\n        address[] calldata, /* _tokensOut */\\n        uint256[] calldata /* _minAmountsOut */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function _isPool(bytes memory _pool) internal view virtual returns (bool);\\n\\n    function _getPricePerShare(\\n        bytes calldata /* _pool */\\n    ) internal pure virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    function _totalSupply(address _pool) internal view virtual returns (uint256) {\\n        return IERC20(_pool).totalSupply();\\n    }\\n\\n    function _getUnderlyingAndRate(bytes calldata _pool, uint256 _i) internal view virtual returns (address, uint256) {\\n        return (getPoolTokens(_pool, false)[_i], 1e18);\\n    }\\n\\n    function _getSpender(\\n        bytes calldata /* _pool */\\n    ) internal view virtual returns (address);\\n\\n    function _getLpToken(address _pool) internal view virtual returns (address) {\\n        return _pool;\\n    }\\n\\n    function _getPool(address _pool) internal view virtual returns (address) {\\n        return _pool;\\n    }\\n\\n    function _getRewardTokens(\\n        address /* _pool */\\n    ) internal view virtual returns (address[] memory) {\\n        return new address[](1);\\n    }\\n}\\n\",\"keccak256\":\"0xe0e86c0ae5fbf0ebb313c646bd3c5334a116bad8dd7aee202e15788c28909156\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4658e4e06fba80545a68eeea6570913050028c26ba9f3e05e7c414c5a7f0382a\",\"license\":\"Apache License\"},\"contracts/interfaces/IBaseIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IBaseIntegration {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf6945b4c232e689e1501c5a9a2de85dd22cbb39fd130a41e59dcac486789af85\",\"license\":\"Apache License\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xb8b2aef9698f8ac2af013e3f0b71cc3ee3b2cdba0b5cae5e8d7c11e5f4a3039e\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function updateGardenParams(uint256[9] memory _newParams) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x88aa5b39c2ca9cf774890a9ad397cd4fee6bfa337827c3791d8cbfb42d632b1e\",\"license\":\"Apache License\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xee03c9274ddf3257e3bfd2bb229fea3412c9105f178e64174f59efeafd53182c\",\"license\":\"Apache License\"},\"contracts/interfaces/IPoolIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPoolIntegration\\n * @author Babylon Finance\\n *\\n * Interface for liquiditypool protocol integrations\\n */\\ninterface IPoolIntegration {\\n    function joinPool(\\n        address _strategy,\\n        bytes calldata _pool,\\n        uint256 _poolTokensOut,\\n        address[] memory _poolTokens,\\n        uint256[] memory _maxAmountsIn\\n    ) external;\\n\\n    function exitPool(\\n        address _strategy,\\n        bytes calldata _pool,\\n        uint256 _poolTokensIn,\\n        address[] memory _poolTokens,\\n        uint256[] memory _minAmountsOut\\n    ) external;\\n\\n    function getPoolTokens(bytes calldata _pool, bool forNAV) external view returns (address[] memory);\\n\\n    function getPoolWeights(bytes calldata _pool) external view returns (uint256[] memory);\\n\\n    function getPricePerShare(bytes calldata _pool) external view returns (uint256);\\n\\n    function getLPToken(address _pool) external view returns (address);\\n\\n    function getPool(address _pool) external view returns (address);\\n\\n    function totalSupply(address _pool) external view returns (uint256);\\n\\n    function getUnderlyingAndRate(bytes calldata _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function getPoolTokensOut(\\n        bytes calldata _pool,\\n        address _tokenAddress,\\n        uint256 _maxAmountsIn\\n    ) external view returns (uint256);\\n\\n    function getPoolMinAmountsOut(bytes calldata _pool, uint256 _poolTokenAmount)\\n        external\\n        view\\n        returns (uint256[] memory _minAmountsOut);\\n\\n    function isPool(bytes calldata _pool) external view returns (bool);\\n\\n    function poolWeightsByPrice(bytes calldata _pool) external view returns (bool);\\n\\n    function getRewardTokens(bytes calldata _pool) external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x1d126aeef91a851003100a39accc83eee0ced39a3fa09c83d16a9400292f9047\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[5] calldata _params) external;\\n\\n    function sweep(address _token, uint256 _newSlippage) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(\\n        uint256 fee,\\n        string memory _tokenURI,\\n        uint256 _minReserveOut\\n    ) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _overrideSlippage\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0x3219391eb742c240f221f5694cf66d8c22cc587662d9aa35cb244b2a40985829\",\"license\":\"Apache License\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /*\\n      Unfortunately Solidity does not support convertion of the fixed array to dynamic array so these functions are\\n      required. This functionality would be supported in the future so these methods can be removed.\\n    */\\n    function toDynamic(address _one, address _two) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](2);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](3);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three,\\n        address _four\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](4);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        arr[3] = _four;\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x22f796dac6fcdab1e033d870e152f08d777c81764bfa7aab4a1c9db2cc55403e\",\"license\":\"Apache License\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * original version by @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n *  Adapted by Babylon Finance.\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.7.6;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n                case 2 {\\n                    // Since the new array still fits in the slot, we just need to\\n                    // update the contents of the slot.\\n                    // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                    sstore(\\n                        _preBytes.slot,\\n                        // all the modifications to the slot are inside this\\n                        // next block\\n                        add(\\n                            // we can just add to the slot contents because the\\n                            // bytes we want to change are the LSBs\\n                            fslot,\\n                            add(\\n                                mul(\\n                                    div(\\n                                        // load the bytes from memory\\n                                        mload(add(_postBytes, 0x20)),\\n                                        // zero all bytes to the right\\n                                        exp(0x100, sub(32, mlength))\\n                                    ),\\n                                    // and now shift left the number of bytes to\\n                                    // leave space for the length in the slot\\n                                    exp(0x100, sub(32, newlength))\\n                                ),\\n                                // increase length by the double of the memory\\n                                // bytes length\\n                                mul(mlength, 2)\\n                            )\\n                        )\\n                    )\\n                }\\n                case 1 {\\n                    // The stored value fits in the slot, but the combined value\\n                    // will exceed it.\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // The contents of the _postBytes array start 32 bytes into\\n                    // the structure. Our first read should obtain the `submod`\\n                    // bytes that can fit into the unused space in the last word\\n                    // of the stored array. To get this, we read 32 bytes starting\\n                    // from `submod`, so the data we read overlaps with the array\\n                    // contents by `submod` bytes. Masking the lowest-order\\n                    // `submod` bytes allows us to add that value directly to the\\n                    // stored value.\\n\\n                    let submod := sub(32, slength)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(\\n                        sc,\\n                        add(\\n                            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                            and(mload(mc), mask)\\n                        )\\n                    )\\n\\n                    for {\\n                        mc := add(mc, 0x20)\\n                        sc := add(sc, 1)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n                default {\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    // Start copying to the last used word of the stored array.\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // Copy over the first `submod` bytes of the new data as in\\n                    // case 1 above.\\n                    let slengthmod := mod(slength, 32)\\n                    let mlengthmod := mod(mlength, 32)\\n                    let submod := sub(32, slengthmod)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                    for {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, 'toUint32_outOfBounds');\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, 'toUint96_outOfBounds');\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, 'toUint128_outOfBounds');\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, 'toBytes32_outOfBounds');\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n                case 1 {\\n                    // slength can contain both the length and contents of the array\\n                    // if length < 32 bytes so let's prepare for that\\n                    // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                    if iszero(iszero(slength)) {\\n                        switch lt(slength, 32)\\n                            case 1 {\\n                                // blank the last byte which is the length\\n                                fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                                if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                                    // unsuccess:\\n                                    success := 0\\n                                }\\n                            }\\n                            default {\\n                                // cb is a circuit breaker in the for loop since there's\\n                                //  no said feature for inline assembly loops\\n                                // cb = 1 - don't breaker\\n                                // cb = 0 - break\\n                                let cb := 1\\n\\n                                // get the keccak hash to get the contents of the array\\n                                mstore(0x0, _preBytes.slot)\\n                                let sc := keccak256(0x0, 0x20)\\n\\n                                let mc := add(_postBytes, 0x20)\\n                                let end := add(mc, mlength)\\n\\n                                // the next line is the loop condition:\\n                                // while(uint256(mc < end) + cb == 2)\\n                                for {\\n\\n                                } eq(add(lt(mc, end), cb), 2) {\\n                                    sc := add(sc, 1)\\n                                    mc := add(mc, 0x20)\\n                                } {\\n                                    if iszero(eq(sload(sc), mload(mc))) {\\n                                        // unsuccess:\\n                                        success := 0\\n                                        cb := 0\\n                                    }\\n                                }\\n                            }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function get64Bytes(bytes memory _data, uint256 _index) internal pure returns (bytes memory) {\\n        return slice(_data, (64 * _index), 64);\\n    }\\n\\n    function decodeOpDataAddressAssembly(bytes memory _data, uint256 _startingByte) internal pure returns (address) {\\n        return toAddress(_data, _startingByte);\\n    }\\n\\n    function decodeOpDataAddress(bytes calldata _data) internal pure returns (address) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address));\\n    }\\n\\n    function decodeOpDataAddressAndUint(bytes calldata _data) internal pure returns (address, uint256) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address, uint256));\\n    }\\n\\n    function decodeOpDataAsType(\\n        bytes memory _data,\\n        uint8 _type,\\n        uint8 _offset\\n    ) internal pure returns (bytes memory) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        // type: 0 - uint8, 1: uint256, 2: bool, 3: address\\n        if (_type == 0 || _type == 2) {\\n            // boolean is also 1 byte\\n            // returning bytes type\\n            return slice(_data, _offset, 1); // to return uint8 type better use toUint8(_data, _offset);\\n        } else if (_type == 1) {\\n            // returning bytes type\\n            return slice(_data, _offset, 32); // to return uint256 type better use toUint256(_data, _offset);\\n        } else if (_type == 3) {\\n            // returning bytes type\\n            return slice(_data, _offset, 20); // to return address type better use toAddress(_data, _offset);\\n        }\\n        // Default uint\\n        return slice(_data, _offset, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x6a0b47ec0526641367a1b50b39af2bb507f5e3ad84494ed55a1970df642628ae\",\"license\":\"Unlicense\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x39387b44420772715db25dc0ce61aab134a45367dc056f830c2af40816d5e09e\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162003e9038038062003e90833981810160405260408110156200003757600080fd5b50805160209182015160408051808201909152600a81526918dd5c9d9957dc1bdbdb60b21b9381019390935290918281816001600160a01b038116620000c4576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604482015290519081900360640190fd5b8151620000d990600090602085019062000586565b5060601b6001600160601b031916608052505060018055506001600160a01b0382166200013f576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015290519081900360640190fd5b6001600160a01b0381166200018d576040805162461bcd60e51b815260206004820152600f60248201526e696e76616c6964206164647265737360881b604482015290519081900360640190fd5b7fbffaba8ed807aac5bd4559d357feb7410334b2efee14a5c33f8abd31231de008805460ff1990811660019081179092557f9e3085c549c940a937d9df5aa77527a2fbb5c8922f29b891d2a37c297f52c5c280548216831790557f371e38fd35f2cbab3241489b78c5dec877159d01b652724d178dc78bb439526380548216831790557fcbbd5b15413e60259d032af565227af6e6c59bb1663b311f827bbc306242e17880548216831790557f3e548828e43aa6c3eb9366d01d6b4f6f341be2b09e72e1180fb8e7b026a7c37d80548216831790557f7b750edd9f2f9e63fa616f346ec6c82693f5728b5b31ec978c987596748ad71780548216831790557f575a61620848edd8667f6c0d525c88fc200cbcd700c2c338684329e071b220b580548216831790557f413e93e93adcd366de858449d1d736f9932796f510c70aca5f04ce7638c63e1a80548216831790557f55d2ab851d5ee489c36fc778eded4b91e0adb008a83acea2d8ce30ae44f599bc80548216831790557f1fa63ce0c0f359948e8230e630b9b90ceed6f1ac0d724946e66d6c48d6701b5680548216831790557ffa9bc0ae4bd196f93fac1dd492912992f6ab68dcb635c865fc7c8abf01b8565d80546001600160a01b031990811673eb21209ae4c2c9ff2a86aca31e123764a3b6bc06179091557fb5c1f7bac5c6f428cd0192c5d0962092588d9d31709b925319cc1e28c6ca00d78054821673ac795d2c97e60df6a99ff1c814727302fd747a801790557fd2bb8234aefd102f46c6dd17c3fb637e08812a9dbcf4da8b24c34ed1db4a1a428054821673a50ccc70b6a011cffddf45057e396793791872871790557ff886f99da4f2ed7a841216d0e4feaa1e018b5de0763155368a9dd9078927beac8054821673b6c057591e073249f2d9d88ba59a46cfc9b59edb1790557f22510e9e02d96ab71c7f73b52231824e7e4dc3cfec7d1c55572e3ae933a8a6888054821673bbc81d23ea2c3ec7e56d39296f0cbb648873a5d31790557fbc54c08ac387badf49368c31d70e2fc9b48a8d3e6119a61677a33e48f985e726805490911673fcba3e75865d2d561be8d220616520c171f1285117905560046020527f38fc7b768800a4335eb6d0058d1769a8b6e638cce3c027935b309dd2dc77a0f780548216831790557f209232a67cf252242128fd307be3082334473fe38982aa643b60b6c5545bc88980548216831790557ff9549814d47e0062c836e2e49f30f5f7e11cc4d21dbf7a7a6f6a0315c92e399d805482168317905573eb16ae0052ed37f479f7fe63849198df1765a7336000527f562fb3757ab1bec3e1ab646f03371eb2d6488da4a0a4a87c8d00673785d27820805490911690911790556001600160601b031960609190911b1660a0525062000632565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620005be576000855562000609565b82601f10620005d957805160ff191683800117855562000609565b8280016001018555821562000609579182015b8281111562000609578251825591602001919060010190620005ec565b50620006179291506200061b565b5090565b5b808211156200061757600081556001016200061c565b60805160601c60a05160601c6137f862000698600039806109ce5280610bad5280611760528061187752806119745280611b5a5280611bfc5280611fd252806122f9528061257952806126f0525080610d6052806111fa5280611a9b52506137f86000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80637a6731ab11610097578063d87517b411610066578063d87517b414610810578063e02271071461087e578063e4dc2aa4146108ee578063f77c47911461091457610100565b80637a6731ab146105c9578063bbe4f6db146106eb578063bc82b61d14610711578063c9d5066b146107a257610100565b80634fc99ed6116100d35780634fc99ed61461038757806354f070c1146103c957806364092159146104ed578063662952e01461055b57610100565b806306fdde031461010557806307ec3d92146101825780631b7e75b71461024057806326062493146102cf575b600080fd5b61010d61091c565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561014757818101518382015260200161012f565b50505050905090810190601f1680156101745780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101f06004803603602081101561019857600080fd5b810190602081018135600160201b8111156101b257600080fd5b8201836020820111156101c457600080fd5b803590602001918460018302840111600160201b831117156101e557600080fd5b5090925090506109aa565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561022c578181015183820152602001610214565b505050509050019250505060405180910390f35b6102bd6004803603606081101561025657600080fd5b810190602081018135600160201b81111561027057600080fd5b82018360208201111561028257600080fd5b803590602001918460018302840111600160201b831117156102a357600080fd5b91935091506001600160a01b038135169060200135610cc3565b60408051918252519081900360200190f35b610373600480360360208110156102e557600080fd5b810190602081018135600160201b8111156102ff57600080fd5b82018360208201111561031157600080fd5b803590602001918460018302840111600160201b8311171561033257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550610ccd945050505050565b604080519115158252519081900360200190f35b6103ad6004803603602081101561039d57600080fd5b50356001600160a01b0316610cd8565b604080516001600160a01b039092168252519081900360200190f35b6104eb600480360360a08110156103df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561040957600080fd5b82018360208201111561041b57600080fd5b803590602001918460018302840111600160201b8311171561043c57600080fd5b91939092823592604081019060200135600160201b81111561045d57600080fd5b82018360208201111561046f57600080fd5b803590602001918460208302840111600160201b8311171561049057600080fd5b919390929091602081019035600160201b8111156104ad57600080fd5b8201836020820111156104bf57600080fd5b803590602001918460208302840111600160201b831117156104e057600080fd5b509092509050610ce3565b005b6103736004803603602081101561050357600080fd5b810190602081018135600160201b81111561051d57600080fd5b82018360208201111561052f57600080fd5b803590602001918460018302840111600160201b8311171561055057600080fd5b509092509050611162565b6102bd6004803603602081101561057157600080fd5b810190602081018135600160201b81111561058b57600080fd5b82018360208201111561059d57600080fd5b803590602001918460018302840111600160201b831117156105be57600080fd5b50909250905061116a565b6104eb600480360360a08110156105df57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561060957600080fd5b82018360208201111561061b57600080fd5b803590602001918460018302840111600160201b8311171561063c57600080fd5b91939092823592604081019060200135600160201b81111561065d57600080fd5b82018360208201111561066f57600080fd5b803590602001918460208302840111600160201b8311171561069057600080fd5b919390929091602081019035600160201b8111156106ad57600080fd5b8201836020820111156106bf57600080fd5b803590602001918460208302840111600160201b831117156106e057600080fd5b50909250905061117d565b6103ad6004803603602081101561070157600080fd5b50356001600160a01b0316611727565b61077f6004803603604081101561072757600080fd5b810190602081018135600160201b81111561074157600080fd5b82018360208201111561075357600080fd5b803590602001918460018302840111600160201b8311171561077457600080fd5b919350915035611732565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6101f0600480360360408110156107b857600080fd5b810190602081018135600160201b8111156107d257600080fd5b8201836020820111156107e457600080fd5b803590602001918460018302840111600160201b8311171561080557600080fd5b91935091503561174c565b6101f06004803603602081101561082657600080fd5b810190602081018135600160201b81111561084057600080fd5b82018360208201111561085257600080fd5b803590602001918460018302840111600160201b8311171561087357600080fd5b509092509050611842565b6101f06004803603604081101561089457600080fd5b810190602081018135600160201b8111156108ae57600080fd5b8201836020820111156108c057600080fd5b803590602001918460018302840111600160201b831117156108e157600080fd5b9193509150351515611863565b6102bd6004803603602081101561090457600080fd5b50356001600160a01b0316611a8e565b6103ad611a99565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156109a25780601f10610977576101008083540402835291602001916109a2565b820191906000526020600020905b81548152906001019060200180831161098557829003601f168201915b505050505081565b606060006109b88484611abd565b905060006109c885856000611863565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4c09b55846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610a3957600080fd5b505afa158015610a4d573d6000803e3d6000fd5b505050506040513d6020811015610a6357600080fd5b505167ffffffffffffffff81118015610a7b57600080fd5b50604051908082528060200260200182016040528015610aa5578160200160208202803683370190505b5090506001600160a01b03831673d51a44d3fae010294c616388b506acda1bfaae461415610b2e57600081600081518110610adc57fe5b602002602001018181525050600081600181518110610af757fe5b602002602001018181525050670de0b6b3a764000081600281518110610b1957fe5b60209081029190910101529250610cbd915050565b6001600160a01b038316739d0464996170c6b9e75eed71c68b99ddedf279e81480610b7557506001600160a01b0383167348536ec5233297c367fd0b6979b75d9270bb6b15145b15610bab57670de0b6b3a764000081600081518110610b9057fe5b602002602001018181525050600081600181518110610b1957fe5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371174f16846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c1857600080fd5b505afa158015610c2c573d6000803e3d6000fd5b505050506040513d6020811015610c4257600080fd5b505115610c7057670de0b6b3a764000081600081518110610c5f57fe5b602002602001018181525050610cb8565b60005b82518160ff161015610cb6578251610c9490670de0b6b3a764000090611ae1565b828260ff1681518110610ca357fe5b6020908102919091010152600101610c73565b505b925050505b92915050565b6001949350505050565b6000610cbd82611b48565b6000610cbd82611bf8565b60026001541415610d3b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b158015610da657600080fd5b505afa158015610dba573d6000803e3d6000fd5b505050506040513d6020811015610dd057600080fd5b5051610e23576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b6000610e2f8888611abd565b90506000610e438a8a8a8a8a8a8a8a611c99565b9050610e4e81611e7d565b80602001516001600160a01b03166397ccdc60610e6b8b8b611f68565b83606001518a6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610ec757600080fd5b505af1158015610edb573d6000803e3d6000fd5b505050506000806000610f2b8d8d8d8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508f92508e91508d90508c8c611fba565b92509250925083602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610fa8578181015183820152602001610f90565b50505050905090810190601f168015610fd55780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610ff657600080fd5b505af115801561100a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561103357600080fd5b8101908080516040519392919084600160201b82111561105257600080fd5b90830190602082018581111561106757600080fd5b8251600160201b81118282018810171561108057600080fd5b82525081516020918201929091019080838360005b838110156110ad578181015183820152602001611095565b50505050905090810190601f1680156110da5780820380516001836020036101000a031916815260200191505b50604052505050506110eb84612179565b83600001516001600160a01b031684602001516001600160a01b03167f7659e40cf608296ce5aa9eff9c80adc7a49cb481173fc4e302e3983827b042df878d60405180836001600160a01b031681526020018281526020019250505060405180910390a35050600180555050505050505050505050565b600092915050565b60006111768383611162565b9392505050565b600260015414156111d5576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b15801561124057600080fd5b505afa158015611254573d6000803e3d6000fd5b505050506040513d602081101561126a57600080fd5b50516112bd576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b60006112cf8989898989898989611c99565b90506112da81612241565b60006112e68989611abd565b905060005b8581101561144657600087878381811061130157fe5b905060200201356001600160a01b03166001600160a01b031614158015611360575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee87878381811061134457fe5b905060200201356001600160a01b03166001600160a01b031614155b801561137e5750600085858381811061137557fe5b90506020020135115b1561143e5782602001516001600160a01b03166397ccdc606113a08c8c611f68565b8989858181106113ac57fe5b905060200201356001600160a01b03168888868181106113c857fe5b905060200201356040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561142557600080fd5b505af1158015611439573d6000803e3d6000fd5b505050505b6001016112eb565b50600080600061145c8d8d8d8d8d8d8d8d6122e2565b92509250925084602001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114d95781810151838201526020016114c1565b50505050905090810190601f1680156115065780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561152757600080fd5b505af115801561153b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561156457600080fd5b8101908080516040519392919084600160201b82111561158357600080fd5b90830190602082018581111561159857600080fd5b8251600160201b8111828201881017156115b157600080fd5b82525081516020918201929091019080838360005b838110156115de5781810151838201526020016115c6565b50505050905090810190601f16801561160b5780820380516001836020036101000a031916815260200191505b50604052505050506116a28560c0015186606001516001600160a01b03166370a0823188602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561167057600080fd5b505afa158015611684573d6000803e3d6000fd5b505050506040513d602081101561169a57600080fd5b505190612491565b60a08601526116b0856124a1565b84600001516001600160a01b031685602001516001600160a01b03167fe5ca6288535c5c6c2462c912b4033eade15b80926717896a2d58a2defdeb9128868d60405180836001600160a01b031681526020018281526020019250505060405180910390a35050600180555050505050505050505050565b6000610cbd82612563565b600080611740858585612566565b91509150935093915050565b6060600061175a8585611abd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4c09b55836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156117cb57600080fd5b505afa1580156117df573d6000803e3d6000fd5b505050506040513d60208110156117f557600080fd5b505167ffffffffffffffff8111801561180d57600080fd5b50604051908082528060200260200182016040528015611837578160200160208202803683370190505b509695505050505050565b606060006118508484611abd565b905061185b8161262b565b949350505050565b606060006118718585611abd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4c09b55836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118e257600080fd5b505afa1580156118f6573d6000803e3d6000fd5b505050506040513d602081101561190c57600080fd5b5051905060008167ffffffffffffffff8111801561192957600080fd5b50604051908082528060200260200182016040528015611953578160200160208202803683370190505b506001600160a01b03848116600090815260036020526040812054929350917f00000000000000000000000000000000000000000000000000000000000000009091169063a07952a490869060ff1680156119ac575088155b6040518363ffffffff1660e01b815260040180836001600160a01b031681526020018215158152602001925050506101006040518083038186803b1580156119f357600080fd5b505afa158015611a07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015611a2d57600080fd5b50905060005b838160ff161015611a8157818160ff1660088110611a4d57fe5b6020020151838260ff1681518110611a6157fe5b6001600160a01b0390921660209283029190910190910152600101611a33565b5090979650505050505050565b6000610cbd826126d3565b7f000000000000000000000000000000000000000000000000000000000000000081565b600082826020811015611acf57600080fd5b50356001600160a01b03169392505050565b6000808211611b37576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b4057fe5b049392505050565b600080611b5683600c6126e0565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316635b16ebb7826040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bc557600080fd5b505afa158015611bd9573d6000803e3d6000fd5b505050506040513d6020811015611bef57600080fd5b50519392505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632abd8a26836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611c6757600080fd5b505afa158015611c7b573d6000803e3d6000fd5b505050506040513d6020811015611c9157600080fd5b505192915050565b611ca161367f565b6000611cad8989611abd565b9050611cb761367f565b611cc082611bf8565b6001600160a01b0390811660608301528b166020808301829052604080517f56ba88b800000000000000000000000000000000000000000000000000000000815290516356ba88b892600480840193919291829003018186803b158015611d2657600080fd5b505afa158015611d3a573d6000803e3d6000fd5b505050506040513d6020811015611d5057600080fd5b50516001600160a01b03168152604080516020601f8c018190048102820181019092528a8152908b908b9081908401838280828437600092019190915250505050604080830191909152606082015181517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152925192909116916370a0823191602480820192602092909190829003018186803b158015611e0157600080fd5b505afa158015611e15573d6000803e3d6000fd5b505050506040513d6020811015611e2b57600080fd5b505160c082015260a081018890526040805160208681028281018201909352868252909187918791829185019084908082843760009201919091525050505060e08201529a9950505050505050505050565b611e8a8160400151611b48565b611edb576040805162461bcd60e51b815260206004820152601d60248201527f54686520706f6f6c2061646472657373206973206e6f742076616c6964000000604482015290519081900360640190fd5b60008160a0015111611f1e5760405162461bcd60e51b815260040180806020018281038252602e815260200180613711602e913960400191505060405180910390fd5b8060a001518160c001511015611f655760405162461bcd60e51b815260040180806020018281038252602d81526020018061376b602d913960400191505060405180910390fd5b50565b600080611f758484611abd565b6001600160a01b038082166000908152600260205260409020549192501615611176576001600160a01b03908116600090815260026020526040902054169392505050565b60008060606000611fcc8a600c6126e0565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4c09b55836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561203d57600080fd5b505afa158015612051573d6000803e3d6000fd5b505050506040513d602081101561206757600080fd5b50519050896120bd576040805162461bcd60e51b815260206004820152601a60248201527f5f706f6f6c546f6b656e73496e2068617320746f206e6f742030000000000000604482015290519081900360640190fd5b60018611612112576040805162461bcd60e51b815260206004820152601d60248201527f48617320746f2070726f76696465205f6d696e416d6f756e74734f7574000000604482015290519081900360640190fd5b600061212183838a8a8f6126ec565b6001600160a01b038481166000908152600260205260409020549192501615612163576001600160a01b03928316600090815260026020526040902054909216915b919c60009c50919a509098505050505050505050565b8060a001518160c001510381606001516001600160a01b03166370a0823183602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156121d957600080fd5b505afa1580156121ed573d6000803e3d6000fd5b505050506040513d602081101561220357600080fd5b505114611f655760405162461bcd60e51b815260040180806020018281038252602b815260200180613798602b913960400191505060405180910390fd5b61224e8160400151611b48565b61229f576040805162461bcd60e51b815260206004820152601d60248201527f54686520706f6f6c2061646472657373206973206e6f742076616c6964000000604482015290519081900360640190fd5b60008160a0015111611f655760405162461bcd60e51b81526004018080602001828103825260318152602001806136e06031913960400191505060405180910390fd5b600080606060006122f38b8b611abd565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c4c09b55836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561236457600080fd5b505afa158015612378573d6000803e3d6000fd5b505050506040513d602081101561238e57600080fd5b5051905060006123a183838a8a8f612f7c565b90506000805b8381101561243c5760008c8c838181106123bd57fe5b905060200201356001600160a01b03166001600160a01b03161480612419575073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee8c8c838181106123fe57fe5b905060200201356001600160a01b03166001600160a01b0316145b156124345789898281811061242a57fe5b9050602002013591505b6001016123a7565b506001600160a01b03848116600090815260026020526040902054161561247c576001600160a01b03938416600090815260026020526040902054909316925b929e929d509b50909950505050505050505050565b80820382811115610cbd57600080fd5b8060c0015181606001516001600160a01b03166370a0823183602001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156124fb57600080fd5b505afa15801561250f573d6000803e3d6000fd5b505050506040513d602081101561252557600080fd5b505111611f655760405162461bcd60e51b815260040180806020018281038252602c81526020018061373f602c913960400191505060405180910390fd5b90565b60008060006125758686611abd565b90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166364d894d282866040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050604080518083038186803b1580156125eb57600080fd5b505afa1580156125ff573d6000803e3d6000fd5b505050506040513d604081101561261557600080fd5b5080516020909101519097909650945050505050565b6040805160028082526060808301845292600092919060208301908036833701905050905073d533a949740bb3306d119cc777fa900ba034cd528160008151811061267257fe5b60200260200101906001600160a01b031690816001600160a01b031681525050734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b816001815181106126b457fe5b6001600160a01b03909216602092830291909101909101529050919050565b50670de0b6b3a764000090565b6000611176838361360b565b60607f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166371174f16876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561275b57600080fd5b505afa15801561276f573d6000803e3d6000fd5b505050506040513d602081101561278557600080fd5b5051806127ae57506001600160a01b038616739d0464996170c6b9e75eed71c68b99ddedf279e8145b1561283857816000858560008181106127c357fe5b604080516024810196909652600f9490940b604486015260209081029290920135606480860191909152835180860390910181526084909401909252820180516001600160e01b03167f1a4d01d200000000000000000000000000000000000000000000000000000000179052509050612f73565b8460021415612a38576001600160a01b03861660009081526004602052604090205460ff16156128fd57818484600081811061287057fe5b905060200201358585600181811061288457fe5b60408051602481019690965260448601949094526020908102929092013560648501525060016084808501919091528251808503909101815260a4909301909152810180516001600160e01b03167f269b5581000000000000000000000000000000000000000000000000000000001790529050612f73565b6001600160a01b0386167348536ec5233297c367fd0b6979b75d9270bb6b1514156129a4578160008585600081811061293257fe5b604080516024810196909652604486019490945260209081029290920135606480860191909152835180860390910181526084909401909252820180516001600160e01b03167ff1dc3cc900000000000000000000000000000000000000000000000000000000179052509050612f73565b81848460008181106129b257fe5b90506020020135858560018181106129c657fe5b604080516024810196909652604486019490945260209081029290920135606480860191909152835180860390910181526084909401909252820180516001600160e01b03167f5b36389c00000000000000000000000000000000000000000000000000000000179052509050612f73565b8460031415612bc3576001600160a01b03861660009081526004602052604090205460ff1615612b16578184846000818110612a7057fe5b9050602002013585856001818110612a8457fe5b9050602002013586866002818110612a9857fe5b6040805160248101979097526044870195909552606486019390935250602091820201356084840152600160a4808501919091528251808503909101815260c4909301909152810180516001600160e01b03167ffce64736000000000000000000000000000000000000000000000000000000001790529050612f73565b8184846000818110612b2457fe5b9050602002013585856001818110612b3857fe5b9050602002013586866002818110612b4c57fe5b6040805160248101979097526044870195909552606486019390935250602091820201356084808501919091528251808503909101815260a4909301909152810180516001600160e01b03167fecb586a5000000000000000000000000000000000000000000000000000000001790529050612f73565b8460041415612d86576001600160a01b03861660009081526004602052604090205460ff1615612cbd578184846000818110612bfb57fe5b9050602002013585856001818110612c0f57fe5b9050602002013586866002818110612c2357fe5b9050602002013587876003818110612c3757fe5b604080516024810198909852604488019690965260648701949094525060848501919091526020918202013560a4840152600160c4808501919091528251808503909101815260e4909301909152810180516001600160e01b03167fa6929895000000000000000000000000000000000000000000000000000000001790529050612f73565b8184846000818110612ccb57fe5b9050602002013585856001818110612cdf57fe5b9050602002013586866002818110612cf357fe5b9050602002013587876003818110612d0757fe5b604080516024810198909852604488019690965260648701949094525060848501919091526020918202013560a4808501919091528251808503909101815260c4909301909152810180516001600160e01b03167f7d49d875000000000000000000000000000000000000000000000000000000001790529050612f73565b8460051415612f62576001600160a01b03861660009081526004602052604090205460ff1615612e80578184846000818110612dbe57fe5b9050602002013585856001818110612dd257fe5b9050602002013586866003818110612de657fe5b9050602002013587876004818110612dfa57fe5b604080516024810198909852604488019690965260648701949094525060848501919091526020918202013560a4840152600160c4808501919091528251808503909101815260e4909301909152810180516001600160e01b03167fcbfe789f000000000000000000000000000000000000000000000000000000001790529050612f73565b8184846000818110612e8e57fe5b9050602002013585856001818110612ea257fe5b9050602002013586866002818110612eb657fe5b9050602002013587876003818110612eca57fe5b9050602002013588886004818110612ede57fe5b6040805160248101999099526044890197909752606488019590955250608486019290925260a48501526020918202013560c4808501919091528251808503909101815260e4909301909152810180516001600160e01b03167fe3bff5ce000000000000000000000000000000000000000000000000000000001790529050612f73565b506040805160208101909152600081525b95945050505050565b606084600214156130d0576001600160a01b03861660009081526004602052604090205460ff16156130415783836000818110612fb557fe5b9050602002013584846001818110612fc957fe5b6040805160248101959095526020918202939093013560448501526064840186905260016084808601919091528351808603909101815260a490940190925250810180516001600160e01b03167fee22be23000000000000000000000000000000000000000000000000000000001790529050612f73565b8383600081811061304e57fe5b905060200201358484600181811061306257fe5b604080516024810195909552602091820293909301356044850152606480850187905283518086039091018152608490940190925250810180516001600160e01b03167f0b4c7e4d000000000000000000000000000000000000000000000000000000001790529050612f73565b846003141561325a576001600160a01b03861660009081526004602052604090205460ff16156131af578383600081811061310757fe5b905060200201358484600181811061311b57fe5b905060200201358585600281811061312f57fe5b60408051602481019690965260448601949094526020908102929092013560648501525060848301859052600160a4808501919091528251808503909101815260c4909301909152810180516001600160e01b03167f2b6e993a000000000000000000000000000000000000000000000000000000001790529050612f73565b838360008181106131bc57fe5b90506020020135848460018181106131d057fe5b90506020020135858560028181106131e457fe5b60408051602481019690965260448601949094526020908102929092013560648501525060848084018690528251808503909101815260a4909301909152810180516001600160e01b03167f4515cef3000000000000000000000000000000000000000000000000000000001790529050612f73565b8460041415613416576001600160a01b03861660009081526004602052604090205460ff1615613352578383600081811061329157fe5b90506020020135848460018181106132a557fe5b90506020020135858560028181106132b957fe5b90506020020135868660038181106132cd57fe5b604080516024810197909752604487019590955260648601939093525060209182020135608484015260a48301859052600160c4808501919091528251808503909101815260e4909301909152810180516001600160e01b03167fdc3a2d81000000000000000000000000000000000000000000000000000000001790529050612f73565b8383600081811061335f57fe5b905060200201358484600181811061337357fe5b905060200201358585600281811061338757fe5b905060200201358686600381811061339b57fe5b604080516024810197909752604487019590955260648601939093525060209182020135608484015260a48084018690528251808503909101815260c4909301909152810180516001600160e01b03167f029b2f34000000000000000000000000000000000000000000000000000000001790529050612f73565b8460051415612f62576001600160a01b03861660009081526004602052604090205460ff161561352b578383600081811061344d57fe5b905060200201358484600181811061346157fe5b905060200201358585600281811061347557fe5b905060200201358686600381811061348957fe5b905060200201358787600481811061349d57fe5b604080516024810198909852604488019690965260648701949094525060848501919091526020918202013560a484015260c48301859052600160e48085019190915282518085039091018152610104909301909152810180516001600160e01b03167fc25fd565000000000000000000000000000000000000000000000000000000001790529050612f73565b8383600081811061353857fe5b905060200201358484600181811061354c57fe5b905060200201358585600281811061356057fe5b905060200201358686600381811061357457fe5b905060200201358787600481811061358857fe5b604080516024810198909852604488019690965260648701949094525060848501919091526020918202013560a484015260c48084018690528251808503909101815260e4909301909152810180516001600160e01b03167f84738499000000000000000000000000000000000000000000000000000000001790529050612f73565b60008160140183511015613666576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b60405180610100016040528060006001600160a01b0316815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160008152602001600081526020016000815260200160608152509056fe4d696e20706f6f6c20746f6b656e7320746f2072656365697665206d7573742062652067726561746572207468616e2030506f6f6c20746f6b656e7320746f2065786368616e6765206d7573742062652067726561746572207468616e203054686520737472617465677920646964206e6f7420726563656976652074686520706f6f6c20746f6b656e7354686520737472617465677920646f6573206e6f74206861766520656e6f75676820706f6f6c20746f6b656e7354686520737472617465677920646964206e6f742072657475726e2074686520706f6f6c20746f6b656e73a26469706673582212202bd128fdbd084cc26470cc760ddbcec34d9d52fc1db336b9ab684e78d679951c64736f6c63430007060033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Babylon Finance Protocol Curve liquidity providing integration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_controller": "Address of the controller"
        }
      },
      "exitPool(address,bytes,uint256,address[],uint256[])": {
        "params": {
          "_minAmountsOut": "Array of min token quantities to receive from the pool",
          "_pool": "Pool info e.g. PoolId or Address of the pool token to join + metadata",
          "_poolTokensIn": "Pool tokens to exchange for the underlying tokens",
          "_strategy": "Address of the strategy",
          "_tokensOut": "Array of token addresses to withdraw"
        }
      },
      "getLPToken(address)": {
        "params": {
          "_pool": "Address of the pool"
        },
        "returns": {
          "_0": "address                 Address of the LP token"
        }
      },
      "getPool(address)": {
        "params": {
          "_pool": "Address of the maybe pool"
        },
        "returns": {
          "_0": "address                 Address of the pool itself"
        }
      },
      "getUnderlyingAndRate(bytes,uint256)": {
        "params": {
          "_i": "Index of coin in the pool",
          "_pool": "Address of the pool"
        },
        "returns": {
          "_0": "address                 Underlying coin",
          "_1": "uint256                 Rate from coin to underlying"
        }
      },
      "isPool(bytes)": {
        "params": {
          "_pool": "OpData e.g. Pool address to check"
        },
        "returns": {
          "_0": "bool                 True if the address is a pool"
        }
      },
      "joinPool(address,bytes,uint256,address[],uint256[])": {
        "params": {
          "_maxAmountsIn": "Array of max token quantities to pull out from the garden",
          "_pool": "OpData e.g. Address of the pool token to join",
          "_poolTokensOut": "Min amount of pool tokens to receive",
          "_strategy": "Address of the strategy",
          "_tokensIn": "Array of token addresses to deposit"
        }
      },
      "totalSupply(address)": {
        "params": {
          "_pool": "Address of the pool"
        },
        "returns": {
          "_0": "address                 Total supply of the token"
        }
      }
    },
    "title": "CurvePoolIntegration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "exitPool(address,bytes,uint256,address[],uint256[])": {
        "notice": "Exits a liquidity pool. Accrue protocol fee (if any)"
      },
      "getLPToken(address)": {
        "notice": "Returns the actual address of the LP token. Different for curve."
      },
      "getPool(address)": {
        "notice": "Gets the underlying pool that holds the internal tokens. Different for curve."
      },
      "getUnderlyingAndRate(bytes,uint256)": {
        "notice": "Returns the underlying coin"
      },
      "isPool(bytes)": {
        "notice": "Checks whether a pool address is valid"
      },
      "joinPool(address,bytes,uint256,address[],uint256[])": {
        "notice": "Joins a pool"
      },
      "totalSupply(address)": {
        "notice": "Returns the total supply of the pool tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25782,
        "contract": "contracts/integrations/pool/CurvePoolIntegration.sol:CurvePoolIntegration",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6418,
        "contract": "contracts/integrations/pool/CurvePoolIntegration.sol:CurvePoolIntegration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 32076,
        "contract": "contracts/integrations/pool/CurvePoolIntegration.sol:CurvePoolIntegration",
        "label": "poolToDeposit",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 32080,
        "contract": "contracts/integrations/pool/CurvePoolIntegration.sol:CurvePoolIntegration",
        "label": "usesUnderlying",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 32084,
        "contract": "contracts/integrations/pool/CurvePoolIntegration.sol:CurvePoolIntegration",
        "label": "supportsUnderlyingParam",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}