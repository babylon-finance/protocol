{
  "address": "0x37469B01987FaC1f408F4EDEe4C4342aAC96e160",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IGovernor",
          "name": "_governor",
          "type": "address"
        },
        {
          "internalType": "contract IHeart",
          "name": "_heart",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllHeartDetails",
      "outputs": [
        {
          "internalType": "address[2]",
          "name": "",
          "type": "address[2]"
        },
        {
          "internalType": "uint256[7]",
          "name": "",
          "type": "uint256[7]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_ids",
          "type": "uint256[]"
        }
      ],
      "name": "getGovernanceProposals",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "contract IGovernor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heart",
      "outputs": [
        {
          "internalType": "contract IHeart",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heartGarden",
      "outputs": [
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGarden",
          "name": "_heartGarden",
          "type": "address"
        }
      ],
      "name": "setHeartGarden",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "visor",
      "outputs": [
        {
          "internalType": "contract IHypervisor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "visor_full",
      "outputs": [
        {
          "internalType": "contract IHypervisor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8b528d3d00cb4c103b0314d34a02f09e1ce6b55902b9b3cb3a828fd0e4fa8de4",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x37469B01987FaC1f408F4EDEe4C4342aAC96e160",
    "transactionIndex": 40,
    "gasUsed": "1204484",
    "logsBloom": "0x
    "blockHash": "0x0c333cae178051ccd02d565cb1746c5e76e8a08fdc35e779902315369e0c0995",
    "transactionHash": "0x8b528d3d00cb4c103b0314d34a02f09e1ce6b55902b9b3cb3a828fd0e4fa8de4",
    "logs": [],
    "blockNumber": 14126363,
    "cumulativeGasUsed": "2893534",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0xBEC3de5b14902C660Bd2C7EfD2F259998424cc24",
    "0x51e6775b7bE2eA1d20cA02cFEeB04453366e72C8"
  ],
  "solcInputHash": "6c4abd5f70f8a37f238ccd29702c7be0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IGovernor\",\"name\":\"_governor\",\"type\":\"address\"},{\"internalType\":\"contract IHeart\",\"name\":\"_heart\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllHeartDetails\",\"outputs\":[{\"internalType\":\"address[2]\",\"name\":\"\",\"type\":\"address[2]\"},{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_ids\",\"type\":\"uint256[]\"}],\"name\":\"getGovernanceProposals\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"contract IGovernor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heart\",\"outputs\":[{\"internalType\":\"contract IHeart\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartGarden\",\"outputs\":[{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGarden\",\"name\":\"_heartGarden\",\"type\":\"address\"}],\"name\":\"setHeartGarden\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visor\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"visor_full\",\"outputs\":[{\"internalType\":\"contract IHypervisor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Class that holds common view functions to retrieve heart and governance information effectively\",\"kind\":\"dev\",\"methods\":{},\"title\":\"HeartViewer\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getAllHeartDetails()\":{\"notice\":\"Gets all the heart details in one view call\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HeartViewer.sol\":\"HeartViewer\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/HeartViewer.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {IHeart} from './interfaces/IHeart.sol';\\nimport {IHypervisor} from './interfaces/IHypervisor.sol';\\nimport {IGarden} from './interfaces/IGarden.sol';\\nimport {IGovernor} from './interfaces/external/oz/IGovernor.sol';\\nimport {LowGasSafeMath as SafeMath} from './lib/LowGasSafeMath.sol';\\n\\n/**\\n * @title HeartViewer\\n * @author Babylon Finance\\n *\\n * Class that holds common view functions to retrieve heart and governance information effectively\\n */\\ncontract HeartViewer {\\n    using SafeMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not a keeper in the protocol\\n     */\\n\\n    modifier onlyGovernanceOrEmergency {\\n        require(msg.sender == controller.owner() || msg.sender == controller.EMERGENCY_OWNER(), 'Non valid');\\n        _;\\n    }\\n\\n    /* ============ Variables ============ */\\n\\n    IBabController public immutable controller;\\n    IGovernor public immutable governor;\\n    IHeart public immutable heart;\\n    IGarden public heartGarden;\\n    IHypervisor public constant visor = IHypervisor(0xF19F91d7889668A533F14d076aDc187be781a458);\\n    IHypervisor public constant visor_full = IHypervisor(0x5e6c481dE496554b66657Dd1CA1F70C61cf11660);\\n\\n    /* ============ External function  ============ */\\n\\n    constructor(\\n        IBabController _controller,\\n        IGovernor _governor,\\n        IHeart _heart\\n    ) {\\n        require(address(_controller) != address(0), 'Controller must exist');\\n        require(address(_governor) != address(0), 'Governor must exist');\\n\\n        controller = _controller;\\n        governor = _governor;\\n        heart = _heart;\\n    }\\n\\n    function setHeartGarden(IGarden _heartGarden) external onlyGovernanceOrEmergency {\\n        heartGarden = _heartGarden;\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Gets all the heart details in one view call\\n     */\\n    function getAllHeartDetails()\\n        external\\n        view\\n        returns (\\n            address[2] memory, // address of the heart garden\\n            uint256[7] memory, // total stats\\n            uint256[] memory, // fee weights\\n            address[] memory, // voted gardens\\n            uint256[] memory, // garden weights\\n            uint256[2] memory, // weekly babl reward\\n            uint256[2] memory, // dates\\n            uint256[2] memory // liquidity\\n        )\\n    {\\n        (uint256 wethAmount, uint256 bablAmount) = visor.getTotalAmounts();\\n        (uint256 wethAmountF, uint256 bablAmountF) = visor_full.getTotalAmounts();\\n\\n        return (\\n            [address(heartGarden), heart.assetToLend()],\\n            heart.getTotalStats(),\\n            heart.getFeeDistributionWeights(),\\n            heart.getVotedGardens(),\\n            heart.getGardenWeights(),\\n            [heart.bablRewardLeft(), heart.weeklyRewardAmount()],\\n            [heart.lastPumpAt(), heart.lastVotesAt()],\\n            [wethAmount.add(wethAmountF), bablAmount.add(bablAmountF)]\\n        );\\n    }\\n\\n    function getGovernanceProposals(uint256[] calldata _ids)\\n        external\\n        view\\n        returns (\\n            address[] memory, // proposers\\n            uint256[] memory, // endBlocks\\n            uint256[] memory, // for votes - against votes\\n            uint256[] memory // state\\n        )\\n    {\\n        address[] memory proposers = new address[](_ids.length);\\n        uint256[] memory endBlocks = new uint256[](_ids.length);\\n        uint256[] memory votesA = new uint256[](_ids.length);\\n        uint256[] memory stateA = new uint256[](_ids.length);\\n        for (uint256 i = 0; i < _ids.length; i++) {\\n            (address proposer, uint256[3] memory data) = _getProposalInfo(_ids[i]);\\n            proposers[i] = proposer;\\n            endBlocks[i] = data[0];\\n            votesA[i] = data[1];\\n            stateA[i] = data[2];\\n        }\\n        return (proposers, endBlocks, votesA, stateA);\\n    }\\n\\n    /* ============ Private Functions ============ */\\n\\n    function _getProposalInfo(uint256 _proposalId) internal view returns (address, uint256[3] memory) {\\n        (, address proposer, , , uint256 endBlock, uint256 forVotes, uint256 againstVotes, , , ) =\\n            governor.proposals(_proposalId);\\n        return (proposer, [endBlock, forVotes.sub(againstVotes), uint256(governor.state(_proposalId))]);\\n    }\\n}\\n\",\"keccak256\":\"0x2b877336192084efecf288c838b955d688139b168f636b496ad3adc5bf9c5294\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf18ae09f6905b42129d575d3fd4bbff33987f887833dc0e48465430a9f04dad3\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        address _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function updateGardenParams(uint256[9] memory _newParams) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4eb1ab36230c04a379beab49f1ac9f3729eaf22b8d608ff112498aa33a3ae391\",\"license\":\"Apache License\"},\"contracts/interfaces/IHeart.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IHeart\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Heart\\n */\\ninterface IHeart {\\n    // View functions\\n\\n    function getVotedGardens() external view returns (address[] memory);\\n\\n    function getGardenWeights() external view returns (uint256[] memory);\\n\\n    function minAmounts(address _reserve) external view returns (uint256);\\n\\n    function assetToCToken(address _asset) external view returns (address);\\n\\n    function assetToLend() external view returns (address);\\n\\n    function lastPumpAt() external view returns (uint256);\\n\\n    function lastVotesAt() external view returns (uint256);\\n\\n    function tradeSlippage() external view returns (uint256);\\n\\n    function weeklyRewardAmount() external view returns (uint256);\\n\\n    function bablRewardLeft() external view returns (uint256);\\n\\n    function getFeeDistributionWeights() external view returns (uint256[] memory);\\n\\n    function getTotalStats() external view returns (uint256[7] memory);\\n\\n    function votedGardens(uint256 _index) external view returns (address);\\n\\n    function gardenWeights(uint256 _index) external view returns (uint256);\\n\\n    function feeDistributionWeights(uint256 _index) external view returns (uint256);\\n\\n    function totalStats(uint256 _index) external view returns (uint256);\\n\\n    // Non-view\\n\\n    function pump() external;\\n\\n    function voteProposal(uint256 _proposalId, bool _isApprove) external;\\n\\n    function resolveGardenVotes(address[] memory _gardens, uint256[] memory _weights) external;\\n\\n    function updateMarkets() external;\\n\\n    function setHeartGardenAddress(address _heartGarden) external;\\n\\n    function updateFeeWeights(uint256[] calldata _feeWeights) external;\\n\\n    function updateAssetToLend(address _assetToLend) external;\\n\\n    function addReward(uint256 _bablAmount, uint256 _weeklyRate) external;\\n\\n    function setMinTradeAmount(address _asset, uint256 _minAmount) external;\\n\\n    function setTradeSlippage(uint256 _tradeSlippage) external;\\n}\\n\",\"keccak256\":\"0x5a03af43cabf4f290570a20548307d9f6f3b330c3576cb115d665d43c7031955\",\"license\":\"Apache License\"},\"contracts/interfaces/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IHypervisor {\\n    // @param deposit0 Amount of token0 transfered from sender to Hypervisor\\n    // @param deposit1 Amount of token0 transfered from sender to Hypervisor\\n    // @param to Address to which liquidity tokens are minted\\n    // @return shares Quantity of liquidity tokens minted as a result of deposit\\n    function deposit(\\n        uint256 deposit0,\\n        uint256 deposit1,\\n        address to\\n    ) external returns (uint256);\\n\\n    // @param shares Number of liquidity tokens to redeem as pool assets\\n    // @param to Address to which redeemed pool assets are sent\\n    // @param from Address from which liquidity tokens are sent\\n    // @return amount0 Amount of token0 redeemed by the submitted liquidity tokens\\n    // @return amount1 Amount of token1 redeemed by the submitted liquidity tokens\\n    function withdraw(\\n        uint256 shares,\\n        address to,\\n        address from\\n    ) external returns (uint256, uint256);\\n\\n    function rebalance(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        address _feeRecipient,\\n        int256 swapQuantity\\n    ) external;\\n\\n    function addBaseLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function addLimitLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function pullLiquidity(uint256 shares)\\n        external\\n        returns (\\n            uint256 base0,\\n            uint256 base1,\\n            uint256 limit0,\\n            uint256 limit1\\n        );\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n\\n    function pendingFees() external returns (uint256 fees0, uint256 fees1);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\n\\n    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\\n\\n    function appendList(address[] memory listed) external;\\n\\n    function toggleWhitelist() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x1035919a5afc1ca6013b687273d5878f50933f26ce5c85191ba48968fd53cfeb\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/external/oz/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor {\\n    enum ProposalState {Pending, Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed}\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    function proposals(uint256 _proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x571ccb40c907e376f675f02f442c0ce32010d92c14ee4b270cc448aad2b4b379\",\"license\":\"MIT\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b50604051620016d3380380620016d38339810160408190526200003491620000b7565b6001600160a01b038316620000665760405162461bcd60e51b81526004016200005d906200010a565b60405180910390fd5b6001600160a01b0382166200008f5760405162461bcd60e51b81526004016200005d9062000141565b6001600160601b0319606093841b811660805291831b821660a05290911b1660c05262000191565b600080600060608486031215620000cc578283fd5b8351620000d98162000178565b6020850151909350620000ec8162000178565b6040850151909250620000ff8162000178565b809150509250925092565b60208082526015908201527f436f6e74726f6c6c6572206d7573742065786973740000000000000000000000604082015260600190565b60208082526013908201527f476f7665726e6f72206d75737420657869737400000000000000000000000000604082015260600190565b6001600160a01b03811681146200018e57600080fd5b50565b60805160601c60a05160601c60c05160601c6114cb62000208600039806102f45280610385528061041652806104ab528061054052806105e05280610676528061071552806107ab5280610c705250806101445280610cde5280610db3525080610aa65280610b515280610c9452506114cb6000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80639bb1f64411610076578063e650d19a1161005b578063e650d19a1461011d578063f58d1c9414610132578063f77c47911461013a576100a3565b80639bb1f6441461010d578063d551723e14610115576100a3565b80630c340a24146100a85780630c75b1d8146100c657806365f7f648146100e257806371802996146100ea575b600080fd5b6100b0610142565b6040516100bd91906113e7565b60405180910390f35b6100ce610166565b6040516100bd9897969594939291906112d7565b6100b0610881565b6100fd6100f8366004611024565b610890565b6040516100bd949392919061138f565b6100b0610a74565b6100b0610a8c565b61013061012b366004611117565b610aa4565b005b6100b0610c6e565b6100b0610c92565b7f000000000000000000000000000000000000000000000000000000000000000081565b61016e610e78565b610176610e96565b6060806060610183610e78565b61018b610e78565b610193610e78565b60008073f19f91d7889668a533f14d076adc187be781a4586001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156101e257600080fd5b505afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a91906111f6565b91509150600080735e6c481de496554b66657dd1ca1f70c61cf116606001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a591906111f6565b6040805180820182526000546001600160a01b03908116825282517f6be2f2670000000000000000000000000000000000000000000000000000000081529251949650929450926020808501937f00000000000000000000000000000000000000000000000000000000000000001692636be2f2679260048083019392829003018186803b15801561033657600080fd5b505afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610ee7565b6001600160a01b03166001600160a01b03168152507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc5cbf1d6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156103dc57600080fd5b505afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610fa8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663564e4bab6040518163ffffffff1660e01b815260040160006040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a99190810190611093565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663081ab4c26040518163ffffffff1660e01b815260040160006040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261053e9190810190610f0a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfd2dc996040518163ffffffff1660e01b815260040160006040518083038186803b15801561059757600080fd5b505afa1580156105ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d39190810190611093565b60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a775efa56040518163ffffffff1660e01b815260040160206040518083038186803b15801561063757600080fd5b505afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190611152565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dac5a9956040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611152565b81525060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663394abf456040518163ffffffff1660e01b815260040160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611152565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663730fa8c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611152565b905260408051808201909152806108518d8c610cb6565b81526020016108608c8b610cb6565b8152509b509b509b509b509b509b509b509b50505050509091929394959697565b6000546001600160a01b031681565b606080808060008567ffffffffffffffff811180156108ae57600080fd5b506040519080825280602002602001820160405280156108d8578160200160208202803683370190505b50905060008667ffffffffffffffff811180156108f457600080fd5b5060405190808252806020026020018201604052801561091e578160200160208202803683370190505b50905060008767ffffffffffffffff8111801561093a57600080fd5b50604051908082528060200260200182016040528015610964578160200160208202803683370190505b50905060008867ffffffffffffffff8111801561098057600080fd5b506040519080825280602002602001820160405280156109aa578160200160208202803683370190505b50905060005b89811015610a63576000806109d68d8d858181106109ca57fe5b90506020020135610ccc565b91509150818784815181106109e757fe5b6001600160a01b03929092166020928302919091019091015280518651879085908110610a1057fe5b60209081029190910101528060016020020151858481518110610a2f57fe5b60209081029190910101528060026020020151848481518110610a4e57fe5b602090810291909101015250506001016109b0565b509299919850965090945092505050565b735e6c481de496554b66657dd1ca1f70c61cf1166081565b73f19f91d7889668a533f14d076adc187be781a45881565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610afd57600080fd5b505afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b359190610ee7565b6001600160a01b0316336001600160a01b03161480610bf557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190610ee7565b6001600160a01b0316336001600160a01b0316145b610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b906113fb565b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80820182811015610cc657600080fd5b92915050565b6000610cd6610eb4565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663013cf08b886040518263ffffffff1660e01b8152600401610d289190611432565b6101406040518083038186803b158015610d4157600080fd5b505afa158015610d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d79919061116a565b5050509650965096505050945050836040518060600160405280858152602001610dac8486610e6890919063ffffffff16565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633e4f49e68b6040518263ffffffff1660e01b8152600401610dfd9190611432565b60206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190611133565b6007811115610e5857fe5b8152509550955050505050915091565b80820382811115610cc657600080fd5b60405180604001604052806002906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b80518015158114610ee257600080fd5b919050565b600060208284031215610ef8578081fd5b8151610f038161147d565b9392505050565b60006020808385031215610f1c578182fd5b825167ffffffffffffffff811115610f32578283fd5b8301601f81018513610f42578283fd5b8051610f55610f508261145f565b61143b565b8181528381019083850185840285018601891015610f71578687fd5b8694505b83851015610f9c578051610f888161147d565b835260019490940193918501918501610f75565b50979650505050505050565b600060e08284031215610fb9578081fd5b82601f830112610fc7578081fd5b60405160e0810181811067ffffffffffffffff82111715610fe457fe5b604052808360e08101861015610ff8578384fd5b835b6007811015611019578151835260209283019290910190600101610ffa565b509195945050505050565b60008060208385031215611036578081fd5b823567ffffffffffffffff8082111561104d578283fd5b818501915085601f830112611060578283fd5b81358181111561106e578384fd5b8660208083028501011115611081578384fd5b60209290920196919550909350505050565b600060208083850312156110a5578182fd5b825167ffffffffffffffff8111156110bb578283fd5b8301601f810185136110cb578283fd5b80516110d9610f508261145f565b81815283810190838501858402850186018910156110f5578687fd5b8694505b83851015610f9c5780518352600194909401939185019185016110f9565b600060208284031215611128578081fd5b8135610f038161147d565b600060208284031215611144578081fd5b815160088110610f03578182fd5b600060208284031215611163578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215611189578586fd5b8a51995060208b015161119b8161147d565b8099505060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506111d66101008c01610ed2565b91506111e56101208c01610ed2565b90509295989b9194979a5092959850565b60008060408385031215611208578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156112515781516001600160a01b03168752958201959082019060010161122c565b509495945050505050565b8060005b600281101561127f578151845260209384019390910190600101611260565b50505050565b8060005b600781101561127f578151845260209384019390910190600101611289565b6000815180845260208085019450808401835b83811015611251578151875295820195908201906001016112bb565b6000610240828b835b60028110156113085781516001600160a01b03168352602092830192909101906001016112e0565b505050611318604084018b611285565b8061012084015261132b8184018a6112a8565b90508281036101408401526113408189611219565b905082810361016084015261135581886112a8565b91505061136661018083018661125c565b6113746101c083018561125c565b61138261020083018461125c565b9998505050505050505050565b6000608082526113a26080830187611219565b82810360208401526113b481876112a8565b905082810360408401526113c881866112a8565b905082810360608401526113dc81856112a8565b979650505050505050565b6001600160a01b0391909116815260200190565b60208082526009908201527f4e6f6e2076616c69640000000000000000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561145757fe5b604052919050565b600067ffffffffffffffff82111561147357fe5b5060209081020190565b6001600160a01b038116811461149257600080fd5b5056fea264697066735822122023552d56ff503421447c73739334ca05aa5f4ccd797f4fd0d9a253c1bd6108a064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80639bb1f64411610076578063e650d19a1161005b578063e650d19a1461011d578063f58d1c9414610132578063f77c47911461013a576100a3565b80639bb1f6441461010d578063d551723e14610115576100a3565b80630c340a24146100a85780630c75b1d8146100c657806365f7f648146100e257806371802996146100ea575b600080fd5b6100b0610142565b6040516100bd91906113e7565b60405180910390f35b6100ce610166565b6040516100bd9897969594939291906112d7565b6100b0610881565b6100fd6100f8366004611024565b610890565b6040516100bd949392919061138f565b6100b0610a74565b6100b0610a8c565b61013061012b366004611117565b610aa4565b005b6100b0610c6e565b6100b0610c92565b7f000000000000000000000000000000000000000000000000000000000000000081565b61016e610e78565b610176610e96565b6060806060610183610e78565b61018b610e78565b610193610e78565b60008073f19f91d7889668a533f14d076adc187be781a4586001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b1580156101e257600080fd5b505afa1580156101f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061021a91906111f6565b91509150600080735e6c481de496554b66657dd1ca1f70c61cf116606001600160a01b031663c4a7761e6040518163ffffffff1660e01b8152600401604080518083038186803b15801561026d57600080fd5b505afa158015610281573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a591906111f6565b6040805180820182526000546001600160a01b03908116825282517f6be2f2670000000000000000000000000000000000000000000000000000000081529251949650929450926020808501937f00000000000000000000000000000000000000000000000000000000000000001692636be2f2679260048083019392829003018186803b15801561033657600080fd5b505afa15801561034a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036e9190610ee7565b6001600160a01b03166001600160a01b03168152507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663fc5cbf1d6040518163ffffffff1660e01b815260040160e06040518083038186803b1580156103dc57600080fd5b505afa1580156103f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104149190610fa8565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663564e4bab6040518163ffffffff1660e01b815260040160006040518083038186803b15801561046d57600080fd5b505afa158015610481573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104a99190810190611093565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663081ab4c26040518163ffffffff1660e01b815260040160006040518083038186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261053e9190810190610f0a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663cfd2dc996040518163ffffffff1660e01b815260040160006040518083038186803b15801561059757600080fd5b505afa1580156105ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d39190810190611093565b60405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a775efa56040518163ffffffff1660e01b815260040160206040518083038186803b15801561063757600080fd5b505afa15801561064b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066f9190611152565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663dac5a9956040518163ffffffff1660e01b815260040160206040518083038186803b1580156106cd57600080fd5b505afa1580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107059190611152565b81525060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663394abf456040518163ffffffff1660e01b815260040160206040518083038186803b15801561076c57600080fd5b505afa158015610780573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107a49190611152565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663730fa8c46040518163ffffffff1660e01b815260040160206040518083038186803b15801561080257600080fd5b505afa158015610816573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083a9190611152565b905260408051808201909152806108518d8c610cb6565b81526020016108608c8b610cb6565b8152509b509b509b509b509b509b509b509b50505050509091929394959697565b6000546001600160a01b031681565b606080808060008567ffffffffffffffff811180156108ae57600080fd5b506040519080825280602002602001820160405280156108d8578160200160208202803683370190505b50905060008667ffffffffffffffff811180156108f457600080fd5b5060405190808252806020026020018201604052801561091e578160200160208202803683370190505b50905060008767ffffffffffffffff8111801561093a57600080fd5b50604051908082528060200260200182016040528015610964578160200160208202803683370190505b50905060008867ffffffffffffffff8111801561098057600080fd5b506040519080825280602002602001820160405280156109aa578160200160208202803683370190505b50905060005b89811015610a63576000806109d68d8d858181106109ca57fe5b90506020020135610ccc565b91509150818784815181106109e757fe5b6001600160a01b03929092166020928302919091019091015280518651879085908110610a1057fe5b60209081029190910101528060016020020151858481518110610a2f57fe5b60209081029190910101528060026020020151848481518110610a4e57fe5b602090810291909101015250506001016109b0565b509299919850965090945092505050565b735e6c481de496554b66657dd1ca1f70c61cf1166081565b73f19f91d7889668a533f14d076adc187be781a45881565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610afd57600080fd5b505afa158015610b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b359190610ee7565b6001600160a01b0316336001600160a01b03161480610bf557507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015610ba857600080fd5b505afa158015610bbc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be09190610ee7565b6001600160a01b0316336001600160a01b0316145b610c34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c2b906113fb565b60405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b80820182811015610cc657600080fd5b92915050565b6000610cd6610eb4565b6000806000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663013cf08b886040518263ffffffff1660e01b8152600401610d289190611432565b6101406040518083038186803b158015610d4157600080fd5b505afa158015610d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d79919061116a565b5050509650965096505050945050836040518060600160405280858152602001610dac8486610e6890919063ffffffff16565b81526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633e4f49e68b6040518263ffffffff1660e01b8152600401610dfd9190611432565b60206040518083038186803b158015610e1557600080fd5b505afa158015610e29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e4d9190611133565b6007811115610e5857fe5b8152509550955050505050915091565b80820382811115610cc657600080fd5b60405180604001604052806002906020820280368337509192915050565b6040518060e001604052806007906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b80518015158114610ee257600080fd5b919050565b600060208284031215610ef8578081fd5b8151610f038161147d565b9392505050565b60006020808385031215610f1c578182fd5b825167ffffffffffffffff811115610f32578283fd5b8301601f81018513610f42578283fd5b8051610f55610f508261145f565b61143b565b8181528381019083850185840285018601891015610f71578687fd5b8694505b83851015610f9c578051610f888161147d565b835260019490940193918501918501610f75565b50979650505050505050565b600060e08284031215610fb9578081fd5b82601f830112610fc7578081fd5b60405160e0810181811067ffffffffffffffff82111715610fe457fe5b604052808360e08101861015610ff8578384fd5b835b6007811015611019578151835260209283019290910190600101610ffa565b509195945050505050565b60008060208385031215611036578081fd5b823567ffffffffffffffff8082111561104d578283fd5b818501915085601f830112611060578283fd5b81358181111561106e578384fd5b8660208083028501011115611081578384fd5b60209290920196919550909350505050565b600060208083850312156110a5578182fd5b825167ffffffffffffffff8111156110bb578283fd5b8301601f810185136110cb578283fd5b80516110d9610f508261145f565b81815283810190838501858402850186018910156110f5578687fd5b8694505b83851015610f9c5780518352600194909401939185019185016110f9565b600060208284031215611128578081fd5b8135610f038161147d565b600060208284031215611144578081fd5b815160088110610f03578182fd5b600060208284031215611163578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215611189578586fd5b8a51995060208b015161119b8161147d565b8099505060408b0151975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b015192506111d66101008c01610ed2565b91506111e56101208c01610ed2565b90509295989b9194979a5092959850565b60008060408385031215611208578182fd5b505080516020909101519092909150565b6000815180845260208085019450808401835b838110156112515781516001600160a01b03168752958201959082019060010161122c565b509495945050505050565b8060005b600281101561127f578151845260209384019390910190600101611260565b50505050565b8060005b600781101561127f578151845260209384019390910190600101611289565b6000815180845260208085019450808401835b83811015611251578151875295820195908201906001016112bb565b6000610240828b835b60028110156113085781516001600160a01b03168352602092830192909101906001016112e0565b505050611318604084018b611285565b8061012084015261132b8184018a6112a8565b90508281036101408401526113408189611219565b905082810361016084015261135581886112a8565b91505061136661018083018661125c565b6113746101c083018561125c565b61138261020083018461125c565b9998505050505050505050565b6000608082526113a26080830187611219565b82810360208401526113b481876112a8565b905082810360408401526113c881866112a8565b905082810360608401526113dc81856112a8565b979650505050505050565b6001600160a01b0391909116815260200190565b60208082526009908201527f4e6f6e2076616c69640000000000000000000000000000000000000000000000604082015260600190565b90815260200190565b60405181810167ffffffffffffffff8111828210171561145757fe5b604052919050565b600067ffffffffffffffff82111561147357fe5b5060209081020190565b6001600160a01b038116811461149257600080fd5b5056fea264697066735822122023552d56ff503421447c73739334ca05aa5f4ccd797f4fd0d9a253c1bd6108a064736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Class that holds common view functions to retrieve heart and governance information effectively",
    "kind": "dev",
    "methods": {},
    "title": "HeartViewer",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getAllHeartDetails()": {
        "notice": "Gets all the heart details in one view call"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14931,
        "contract": "contracts/HeartViewer.sol:HeartViewer",
        "label": "heartGarden",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IGarden)39049"
      }
    ],
    "types": {
      "t_contract(IGarden)39049": {
        "encoding": "inplace",
        "label": "contract IGarden",
        "numberOfBytes": "20"
      }
    }
  }
}