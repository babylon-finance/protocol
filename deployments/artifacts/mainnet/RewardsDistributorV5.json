{
  "address": "0x7315E7ca8eD7dE15bEf035Fd51F553EAe0580D00",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "START_TIME",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "checkProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "principal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "time",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quarterBelonging",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timeListPointer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "power",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_num",
          "type": "uint256"
        }
      ],
      "name": "checkQuarter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quarterPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quarterNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quarterPower",
          "type": "uint256"
        },
        {
          "internalType": "uint96",
          "name": "supplyPerQuarter",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_to",
          "type": "uint256"
        }
      ],
      "name": "getContributorPower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        }
      ],
      "name": "getGardenProfitsSharing",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_finalizedStrategies",
          "type": "address[]"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyPricePerTokenUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        }
      ],
      "name": "getStrategyRewards",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TimeLockedToken",
          "name": "_bablToken",
          "type": "address"
        },
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "sendTokensToContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract TimeLockedToken",
          "name": "_bablToken",
          "type": "address"
        }
      ],
      "name": "setBablToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_strategistShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stewardsShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_lpShare",
          "type": "uint256"
        }
      ],
      "name": "setProfitRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBABLRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyPerQuarter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "quarterPrincipal",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quarterNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quarterPower",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "initialized",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyPricePerTokenUnit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "preallocated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "pricePerTokenUnit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_quarter",
          "type": "uint256"
        }
      ],
      "name": "tokenSupplyPerQuarter",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_contributor",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_previousBalance",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_depositOrWithdraw",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        }
      ],
      "name": "updateGardenPowerAndContributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_addOrSubstract",
          "type": "bool"
        }
      ],
      "name": "updateProtocolPrincipal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44eef973b46dc8ac3ca8499889facc43ce3ab2bbf3056419f18a33024fd0700b",
  "receipt": {
    "to": null,
    "from": "0xeA4E1d01Fad05465a84bAd319c93B73Fa12756fB",
    "contractAddress": "0x7315E7ca8eD7dE15bEf035Fd51F553EAe0580D00",
    "transactionIndex": 85,
    "gasUsed": "5314058",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xdb57334951dd0a818f246efa629accc64dd2b49c1081d3582a4540739b206a5a",
    "transactionHash": "0x44eef973b46dc8ac3ca8499889facc43ce3ab2bbf3056419f18a33024fd0700b",
    "logs": [],
    "blockNumber": 13192149,
    "cumulativeGasUsed": "9721403",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7643c09c88e02974e35008e8f283d4b4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"START_TIME\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"checkProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"principal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"time\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quarterBelonging\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeListPointer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"power\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_num\",\"type\":\"uint256\"}],\"name\":\"checkQuarter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quarterPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quarterNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quarterPower\",\"type\":\"uint256\"},{\"internalType\":\"uint96\",\"name\":\"supplyPerQuarter\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_to\",\"type\":\"uint256\"}],\"name\":\"getContributorPower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"}],\"name\":\"getGardenProfitsSharing\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_finalizedStrategies\",\"type\":\"address[]\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getStrategyPricePerTokenUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"}],\"name\":\"getStrategyRewards\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimeLockedToken\",\"name\":\"_bablToken\",\"type\":\"address\"},{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"sendTokensToContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract TimeLockedToken\",\"name\":\"_bablToken\",\"type\":\"address\"}],\"name\":\"setBablToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_strategistShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stewardsShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_lpShare\",\"type\":\"uint256\"}],\"name\":\"setProfitRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBABLRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyPerQuarter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"quarterPrincipal\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quarterNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quarterPower\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"initialized\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyPricePerTokenUnit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"preallocated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"pricePerTokenUnit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_quarter\",\"type\":\"uint256\"}],\"name\":\"tokenSupplyPerQuarter\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_contributor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_previousBalance\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_depositOrWithdraw\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"}],\"name\":\"updateGardenPowerAndContributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_addOrSubstract\",\"type\":\"bool\"}],\"name\":\"updateProtocolPrincipal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkProtocol(uint256)\":{\"params\":{\"time\":\"Timestamp\"}},\"checkQuarter(uint256)\":{\"params\":{\"_num\":\"Number of quarter\"}},\"getContributorPower(address,address,uint256,uint256)\":{\"params\":{\"_contributor\":\"Address if the contributor\",\"_from\":\"Initial timestamp\",\"_garden\":\"Address of the garden where the contributor belongs to\",\"_to\":\"End timestamp\"},\"returns\":{\"_0\":\"uint256     Contributor power during that period\"}},\"getGardenProfitsSharing(address)\":{\"params\":{\"_garden\":\"Address of the garden\"}},\"getRewards(address,address,address[])\":{\"params\":{\"_contributor\":\"Address of the contributor to check\",\"_finalizedStrategies\":\"List of addresses of the finalized strategies to check\",\"_garden\":\"Garden to which the strategies and the user must belong to\"},\"returns\":{\"_0\":\"Array of size 7 with the following distribution: rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits\"}},\"getStrategyRewards(address)\":{\"params\":{\"_strategy\":\"Strategy to check\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sendTokensToContributor(address,uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to send the address to\",\"_to\":\"Address to send the tokens to\"}},\"setBablToken(address)\":{\"params\":{\"_bablToken\":\"BABLToken address\"}},\"setProfitRewards(address,uint256,uint256,uint256)\":{\"params\":{\"_lpShare\":\"New % of lpShare\",\"_stewardsShare\":\"New % of stewardsShare\",\"_strategistShare\":\"New % of strategistShare\"}},\"tokenSupplyPerQuarter(uint256)\":{\"params\":{\"_quarter\":\"Number of the epoch (quarter)\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateGardenPowerAndContributor(address,address,uint256,bool,uint256)\":{\"params\":{\"_contributor\":\"Address of the contributor\",\"_depositOrWithdraw\":\"If the timestamp is a deposit (true) or a withdraw (false)\",\"_garden\":\"Address of the garden the contributor belongs to\",\"_pid\":\"The pid # of the Garden timestamps\",\"_previousBalance\":\"Previous balance of the contributor\"}},\"updateProtocolPrincipal(uint256,bool)\":{\"params\":{\"_addOrSubstract\":\"Whether we are adding or substracting capital\",\"_capital\":\"Amount of capital in any type of asset to be normalized into DAI\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkProtocol(uint256)\":{\"notice\":\"Check the protocol state in a certain timestamp\"},\"checkQuarter(uint256)\":{\"notice\":\"Check the quarter state for a specific quarter\"},\"getContributorPower(address,address,uint256,uint256)\":{\"notice\":\"Gets the contributor power from one timestamp to the other\"},\"getGardenProfitsSharing(address)\":{\"notice\":\"Check the garden profit sharing % if different from default\"},\"getRewards(address,address,address[])\":{\"notice\":\"Calculates the profits and BABL that a contributor should receive from a series of finalized strategies\"},\"getStrategyRewards(address)\":{\"notice\":\"Gets the total amount of rewards for a given strategy\"},\"sendTokensToContributor(address,uint256)\":{\"notice\":\"Sends BABL tokens rewards to a contributor after a claim is requested to the protocol.\"},\"setBablToken(address)\":{\"notice\":\"Function that set the babl Token address as it is going to be released in a future date\"},\"setProfitRewards(address,uint256,uint256,uint256)\":{\"notice\":\"Set customized profit shares for a specific garden by the gardener\"},\"startBABLRewards()\":{\"notice\":\"Starts BABL Rewards Mining Program from the controller.\"},\"tokenSupplyPerQuarter(uint256)\":{\"notice\":\"Calculates the BABL rewards supply for each quarter\"},\"updateGardenPowerAndContributor(address,address,uint256,bool,uint256)\":{\"notice\":\"Function that set each contributor timestamp per garden\"},\"updateProtocolPrincipal(uint256,bool)\":{\"notice\":\"Function that adds/substract the capital received to the total principal of the protocol per timestamp\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/RewardsDistributor.sol\":\"RewardsDistributorV5\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editIshtarGate(address _ishtarGate) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function enableBABLMiningProgram() external;\\n\\n    function setAllowPublicGardens() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function maxContributorsPerGarden() external view returns (uint256);\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function openPublicGardenCreation() external;\\n\\n    function setMaxContributorsPerGarden(uint256 _newMax) external;\\n\\n    function owner() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getProfitSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getBABLSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab3f2cba4de7d72e420e4833dd13cc3e124f95275a47166c833317fcdbe9d1f6\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        address _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function maxContributors() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b6caf65d253e9c8b5f22c4862dace55a9a391e5af04c97d339e1d80016db144\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getCompoundExchangeRate(address _asset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58027acbf4ef0db8718ffecca3391a4b5c3ffe24da03d1eb3f3885a4f8c7047a\",\"license\":\"Apache License\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Babylon Finance\\n *\\n * Interface for the distribute rewards of the BABL Mining Program.\\n */\\n\\ninterface IRewardsDistributor {\\n    // Structs\\n    struct PrincipalPerTimestamp {\\n        uint256 principal;\\n        uint256 time;\\n        uint256 timeListPointer;\\n    }\\n\\n    /* ========== View functions ========== */\\n\\n    // solhint-disable-next-line\\n    function START_TIME() external view returns (uint256);\\n\\n    function getStrategyPricePerTokenUnit(address _strategy) external view returns (uint256, uint256);\\n\\n    function getStrategyRewards(address _strategy) external view returns (uint96);\\n\\n    function getRewards(\\n        address _garden,\\n        address _contributor,\\n        address[] calldata _finalizedStrategies\\n    ) external view returns (uint256[] memory);\\n\\n    function getContributorPower(\\n        address _garden,\\n        address _contributor,\\n        uint256 _from,\\n        uint256 _to\\n    ) external view returns (uint256);\\n\\n    function getGardenProfitsSharing(address _garden) external view returns (uint256[3] memory);\\n\\n    function tokenSupplyPerQuarter(uint256 quarter) external view returns (uint96);\\n\\n    function checkProtocol(uint256 _time)\\n        external\\n        view\\n        returns (\\n            uint256 principal,\\n            uint256 time,\\n            uint256 quarterBelonging,\\n            uint256 timeListPointer,\\n            uint256 power\\n        );\\n\\n    function checkQuarter(uint256 _num)\\n        external\\n        view\\n        returns (\\n            uint256 quarterPrincipal,\\n            uint256 quarterNumber,\\n            uint256 quarterPower,\\n            uint96 supplyPerQuarter\\n        );\\n\\n    /* ============ External Functions ============ */\\n\\n    function startBABLRewards() external;\\n\\n    function sendTokensToContributor(address _to, uint256 _amount) external;\\n\\n    function setProfitRewards(\\n        address _garden,\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare\\n    ) external;\\n\\n    function updateProtocolPrincipal(uint256 _capital, bool _addOrSubstract) external;\\n\\n    function updateGardenPowerAndContributor(\\n        address _garden,\\n        address _contributor,\\n        uint256 _previousBalance,\\n        bool _depositOrWithdraw,\\n        uint256 _pid\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6aec6082ffdaceff926eca7c569164bf348b55bc5753e8d44ebdb0658c8d6ac2\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(uint256 fee, string memory _tokenURI) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind) external;\\n\\n    function changeStrategyDuration(uint256 _newDuration) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0xea3a31dc3eb7fa27eb3e732fb51f48286e1b3983b6b6272ef6869fdcfe6736e3\",\"license\":\"Apache License\"},\"contracts/interfaces/IVoteToken.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVoteToken {\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bool prefix\\n    ) external;\\n\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n    function getMyDelegatee() external view returns (address);\\n\\n    function getDelegatee(address account) external view returns (address);\\n\\n    function getCheckpoints(address account, uint32 id) external view returns (uint32 fromBlock, uint96 votes);\\n\\n    function getNumberOfCheckpoints(address account) external view returns (uint32);\\n}\\n\\ninterface IVoteTokenWithERC20 is IVoteToken, IERC20 {}\\n\",\"keccak256\":\"0xf4f3aa6bdcf6d3dc33e53b01aa6a2bf6543008b1910913e2504f229dab3b381d\",\"license\":\"Apache License\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0x409127cd8cadb573e5de48fd992efbd8b0f1e243d235abc3c5f2fa873195c16a\",\"license\":\"Apache License\"},\"contracts/lib/BabylonErrors.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// solhint-disable\\n\\n/**\\n * @notice Forked from https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/lib/helpers/BalancerErrors.sol\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAB#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAB#\\\" part is a known constant\\n        // (0x42414223): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414223000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Max deposit limit needs to be under the limit\\n    uint256 internal constant MAX_DEPOSIT_LIMIT = 0;\\n    // Creator needs to deposit\\n    uint256 internal constant MIN_CONTRIBUTION = 1;\\n    // Min Garden token supply >= 0\\n    uint256 internal constant MIN_TOKEN_SUPPLY = 2;\\n    // Deposit hardlock needs to be at least 1 block\\n    uint256 internal constant DEPOSIT_HARDLOCK = 3;\\n    // Needs to be at least the minimum\\n    uint256 internal constant MIN_LIQUIDITY = 4;\\n    // _reserveAssetQuantity is not equal to msg.value\\n    uint256 internal constant MSG_VALUE_DO_NOT_MATCH = 5;\\n    // Withdrawal amount has to be equal or less than msg.sender balance\\n    uint256 internal constant MSG_SENDER_TOKENS_DO_NOT_MATCH = 6;\\n    // Tokens are staked\\n    uint256 internal constant TOKENS_STAKED = 7;\\n    // Balance too low\\n    uint256 internal constant BALANCE_TOO_LOW = 8;\\n    // msg.sender doesn't have enough tokens\\n    uint256 internal constant MSG_SENDER_TOKENS_TOO_LOW = 9;\\n    //  There is an open redemption window already\\n    uint256 internal constant REDEMPTION_OPENED_ALREADY = 10;\\n    // Cannot request twice in the same window\\n    uint256 internal constant ALREADY_REQUESTED = 11;\\n    // Rewards and profits already claimed\\n    uint256 internal constant ALREADY_CLAIMED = 12;\\n    // Value have to be greater than zero\\n    uint256 internal constant GREATER_THAN_ZERO = 13;\\n    // Must be reserve asset\\n    uint256 internal constant MUST_BE_RESERVE_ASSET = 14;\\n    // Only contributors allowed\\n    uint256 internal constant ONLY_CONTRIBUTOR = 15;\\n    // Only controller allowed\\n    uint256 internal constant ONLY_CONTROLLER = 16;\\n    // Only creator allowed\\n    uint256 internal constant ONLY_CREATOR = 17;\\n    // Only keeper allowed\\n    uint256 internal constant ONLY_KEEPER = 18;\\n    // Fee is too high\\n    uint256 internal constant FEE_TOO_HIGH = 19;\\n    // Only strategy allowed\\n    uint256 internal constant ONLY_STRATEGY = 20;\\n    // Only active allowed\\n    uint256 internal constant ONLY_ACTIVE = 21;\\n    // Only inactive allowed\\n    uint256 internal constant ONLY_INACTIVE = 22;\\n    // Address should be not zero address\\n    uint256 internal constant ADDRESS_IS_ZERO = 23;\\n    // Not within range\\n    uint256 internal constant NOT_IN_RANGE = 24;\\n    // Value is too low\\n    uint256 internal constant VALUE_TOO_LOW = 25;\\n    // Value is too high\\n    uint256 internal constant VALUE_TOO_HIGH = 26;\\n    // Only strategy or protocol allowed\\n    uint256 internal constant ONLY_STRATEGY_OR_CONTROLLER = 27;\\n    // Normal withdraw possible\\n    uint256 internal constant NORMAL_WITHDRAWAL_POSSIBLE = 28;\\n    // User does not have permissions to join garden\\n    uint256 internal constant USER_CANNOT_JOIN = 29;\\n    // User does not have permissions to add strategies in garden\\n    uint256 internal constant USER_CANNOT_ADD_STRATEGIES = 30;\\n    // Only Protocol or garden\\n    uint256 internal constant ONLY_PROTOCOL_OR_GARDEN = 31;\\n    // Only Strategist\\n    uint256 internal constant ONLY_STRATEGIST = 32;\\n    // Only Integration\\n    uint256 internal constant ONLY_INTEGRATION = 33;\\n    // Only garden and data not set\\n    uint256 internal constant ONLY_GARDEN_AND_DATA_NOT_SET = 34;\\n    // Only active garden\\n    uint256 internal constant ONLY_ACTIVE_GARDEN = 35;\\n    // Contract is not a garden\\n    uint256 internal constant NOT_A_GARDEN = 36;\\n    // Not enough tokens\\n    uint256 internal constant STRATEGIST_TOKENS_TOO_LOW = 37;\\n    // Stake is too low\\n    uint256 internal constant STAKE_HAS_TO_AT_LEAST_ONE = 38;\\n    // Duration must be in range\\n    uint256 internal constant DURATION_MUST_BE_IN_RANGE = 39;\\n    // Max Capital Requested\\n    uint256 internal constant MAX_CAPITAL_REQUESTED = 41;\\n    // Votes are already resolved\\n    uint256 internal constant VOTES_ALREADY_RESOLVED = 42;\\n    // Voting window is closed\\n    uint256 internal constant VOTING_WINDOW_IS_OVER = 43;\\n    // Strategy needs to be active\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_ACTIVE = 44;\\n    // Max capital reached\\n    uint256 internal constant MAX_CAPITAL_REACHED = 45;\\n    // Capital is less then rebalance\\n    uint256 internal constant CAPITAL_IS_LESS_THAN_REBALANCE = 46;\\n    // Strategy is in cooldown period\\n    uint256 internal constant STRATEGY_IN_COOLDOWN = 47;\\n    // Strategy is not executed\\n    uint256 internal constant STRATEGY_IS_NOT_EXECUTED = 48;\\n    // Strategy is not over yet\\n    uint256 internal constant STRATEGY_IS_NOT_OVER_YET = 49;\\n    // Strategy is already finalized\\n    uint256 internal constant STRATEGY_IS_ALREADY_FINALIZED = 50;\\n    // No capital to unwind\\n    uint256 internal constant STRATEGY_NO_CAPITAL_TO_UNWIND = 51;\\n    // Strategy needs to be inactive\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_INACTIVE = 52;\\n    // Duration needs to be less\\n    uint256 internal constant DURATION_NEEDS_TO_BE_LESS = 53;\\n    // Can't sweep reserve asset\\n    uint256 internal constant CANNOT_SWEEP_RESERVE_ASSET = 54;\\n    // Voting window is opened\\n    uint256 internal constant VOTING_WINDOW_IS_OPENED = 55;\\n    // Strategy is executed\\n    uint256 internal constant STRATEGY_IS_EXECUTED = 56;\\n    // Min Rebalance Capital\\n    uint256 internal constant MIN_REBALANCE_CAPITAL = 57;\\n    // Not a valid strategy NFT\\n    uint256 internal constant NOT_STRATEGY_NFT = 58;\\n    // Garden Transfers Disabled\\n    uint256 internal constant GARDEN_TRANSFERS_DISABLED = 59;\\n    // Tokens are hardlocked\\n    uint256 internal constant TOKENS_HARDLOCKED = 60;\\n    // Max contributors reached\\n    uint256 internal constant MAX_CONTRIBUTORS = 61;\\n    // BABL Transfers Disabled\\n    uint256 internal constant BABL_TRANSFERS_DISABLED = 62;\\n    // Strategy duration range error\\n    uint256 internal constant DURATION_RANGE = 63;\\n    // Checks the min amount of voters\\n    uint256 internal constant MIN_VOTERS_CHECK = 64;\\n    // Ge contributor power error\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_WINDOW = 65;\\n    // Not enough reserve set aside\\n    uint256 internal constant NOT_ENOUGH_RESERVE = 66;\\n    // Garden is already public\\n    uint256 internal constant GARDEN_ALREADY_PUBLIC = 67;\\n    // Withdrawal with penalty\\n    uint256 internal constant WITHDRAWAL_WITH_PENALTY = 68;\\n    // Withdrawal with penalty\\n    uint256 internal constant ONLY_MINING_ACTIVE = 69;\\n    // Overflow in supply\\n    uint256 internal constant OVERFLOW_IN_SUPPLY = 70;\\n    // Overflow in power\\n    uint256 internal constant OVERFLOW_IN_POWER = 71;\\n    // Not a system contract\\n    uint256 internal constant NOT_A_SYSTEM_CONTRACT = 72;\\n    // Strategy vs Garden mismatch\\n    uint256 internal constant STRATEGY_GARDEN_MISMATCH = 73;\\n    // Minimum quarters is 1\\n    uint256 internal constant QUARTERS_MIN_1 = 74;\\n    // Too many strategy operations\\n    uint256 internal constant TOO_MANY_OPS = 75;\\n    // Only operations\\n    uint256 internal constant ONLY_OPERATION = 76;\\n    // Strat params wrong length\\n    uint256 internal constant STRAT_PARAMS_LENGTH = 77;\\n    // Garden params wrong length\\n    uint256 internal constant GARDEN_PARAMS_LENGTH = 78;\\n    // Token names too long\\n    uint256 internal constant NAME_TOO_LONG = 79;\\n    // Contributor power overflows over garden power\\n    uint256 internal constant CONTRIBUTOR_POWER_OVERFLOW = 80;\\n    // Contributor power window out of bounds\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_DEPOSITS = 81;\\n    // Contributor power window out of bounds\\n    uint256 internal constant NO_REWARDS_TO_CLAIM = 82;\\n    // Pause guardian paused this operation\\n    uint256 internal constant ONLY_UNPAUSED = 83;\\n    // Reentrant intent\\n    uint256 internal constant REENTRANT_CALL = 84;\\n    // Reserve asset not supported\\n    uint256 internal constant RESERVE_ASSET_NOT_SUPPORTED = 85;\\n    // Withdrawal/Deposit check min amount received\\n    uint256 internal constant RECEIVE_MIN_AMOUNT = 86;\\n    // Total Votes has to be positive\\n    uint256 internal constant TOTAL_VOTES_HAVE_TO_BE_POSITIVE = 87;\\n    // Signer has to be valid\\n    uint256 internal constant INVALID_SIGNER = 88;\\n    // Nonce has to be valid\\n    uint256 internal constant INVALID_NONCE = 89;\\n    // Garden is not public\\n    uint256 internal constant GARDEN_IS_NOT_PUBLIC = 90;\\n    // Setting max contributors\\n    uint256 internal constant MAX_CONTRIBUTORS_SET = 91;\\n    // Profit sharing mismatch for customized gardens\\n    uint256 internal constant PROFIT_SHARING_MISMATCH = 92;\\n    // Max allocation percentage\\n    uint256 internal constant MAX_STRATEGY_ALLOCATION_PERCENTAGE = 93;\\n    // new creator must not exist\\n    uint256 internal constant NEW_CREATOR_MUST_NOT_EXIST = 94;\\n    // only first creator can add\\n    uint256 internal constant ONLY_FIRST_CREATOR_CAN_ADD = 95;\\n    // invalid address\\n    uint256 internal constant INVALID_ADDRESS = 96;\\n    // creator can only renounce in some circumstances\\n    uint256 internal constant CREATOR_CANNOT_RENOUNCE = 97;\\n    // no price for trade\\n    uint256 internal constant NO_PRICE_FOR_TRADE = 98;\\n    // Max capital requested\\n    uint256 internal constant ZERO_CAPITAL_REQUESTED = 99;\\n}\\n\",\"keccak256\":\"0x5daa127dfe1bb22a5621a485a7bb9693a24cb4240594aab6fc64027dc7fe8afc\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Math.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// Libraries\\nimport './SafeDecimalMath.sol';\\n\\n// https://docs.synthetix.io/contracts/source/libraries/math\\nlibrary Math {\\n    using LowGasSafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /**\\n     * @dev Uses \\\"exponentiation by squaring\\\" algorithm where cost is 0(logN)\\n     * vs 0(N) for naive repeated multiplication.\\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\\n     */\\n    function powDecimal(uint256 x, uint256 n) internal pure returns (uint256) {\\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\\n\\n        uint256 result = SafeDecimalMath.unit();\\n        while (n > 0) {\\n            if (n % 2 != 0) {\\n                result = result.multiplyDecimal(x);\\n            }\\n            x = x.multiplyDecimal(x);\\n            n /= 2;\\n        }\\n        return result;\\n    }\\n\\n    function abs(int256 x) internal pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n}\\n\",\"keccak256\":\"0x415a45bed683f6e896bcbf7fb66718c9df48018c6bd629772cbd3229c85085a7\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"},\"contracts/lib/Safe3296.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\n\\nlibrary Safe3296 {\\n    using LowGasSafeMath for uint256;\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to convert from uint256 to uint32\\n     *\\n     * @dev internal function to convert from uint256 to uint32\\n     */\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to convert from uint256 to uint96\\n     *\\n     * @dev internal function to convert from uint256 to uint96\\n     */\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to add two uint96 numbers\\n     *\\n     * @dev internal safe math function to add two uint96 numbers\\n     */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to subtract two uint96 numbers\\n     *\\n     * @dev internal safe math function to subtract two uint96 numbers\\n     */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n}\\n\",\"keccak256\":\"0x0e52292c64757673e397bd0999a08a73ed480cfe57ba361ed254edf0d90eab19\",\"license\":\"Apache License\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x962373863c5ee11f3448970bfee73b0806ac9fe4e9e462a1f75a81f5959ef75f\",\"license\":\"Apache License\"},\"contracts/token/RewardsDistributor.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport 'hardhat/console.sol';\\n\\nimport {TimeLockedToken} from './TimeLockedToken.sol';\\n\\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {SafeDecimalMath} from '../lib/SafeDecimalMath.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\nimport {Math} from '../lib/Math.sol';\\nimport {Safe3296} from '../lib/Safe3296.sol';\\nimport {Errors, _require} from '../lib/BabylonErrors.sol';\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IRewardsDistributor} from '../interfaces/IRewardsDistributor.sol';\\nimport {IPriceOracle} from '../interfaces/IPriceOracle.sol';\\n\\n/**\\n * @title Rewards Distributor implementing the BABL Mining Program and other Rewards to Strategists and Stewards\\n * @author Babylon Finance\\n * Rewards Distributor contract is a smart contract used to calculate and distribute all the BABL rewards of the BABL Mining Program\\n * along the time reserved for executed strategies. It implements a supply curve to distribute 500K BABL along the time.\\n * The supply curve is designed to optimize the long-term sustainability of the protocol.\\n * The rewards are front-loaded but they last for more than 10 years, slowly decreasing quarter by quarter.\\n * For that, it houses the state of the protocol power along the time as each strategy power is compared to the whole protocol usage.\\n * Rewards Distributor also is responsible for the calculation and delivery of other rewards as bonuses to specific profiles\\n * which are actively contributing to the protocol growth and their communities (Garden creators, Strategists and Stewards).\\n */\\ncontract RewardsDistributor is OwnableUpgradeable, IRewardsDistributor {\\n    using LowGasSafeMath for uint256;\\n    using LowGasSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n    using PreciseUnitMath for int256;\\n    using SafeDecimalMath for uint256;\\n    using SafeDecimalMath for int256;\\n    using Math for uint256;\\n    using Math for int256;\\n    using Safe3296 for uint256;\\n    using Safe3296 for int256;\\n    using Safe3296 for uint96;\\n    using Safe3296 for uint32;\\n\\n    /* ========== Events ========== */\\n\\n    /* ============ Modifiers ============ */\\n    /**\\n     * Throws if the call is not from a valid strategy\\n     */\\n    modifier onlyStrategy {\\n        _require(controller.isSystemContract(address(IStrategy(msg.sender).garden())), Errors.ONLY_STRATEGY);\\n        _require(\\n            IGarden(address(IStrategy(msg.sender).garden())).isGardenStrategy(msg.sender),\\n            Errors.STRATEGY_GARDEN_MISMATCH\\n        );\\n        _;\\n    }\\n    /**\\n     * Throws if the call is not from a valid active garden\\n     */\\n    modifier onlyActiveGarden(address _garden, uint256 _pid) {\\n        _require(IBabController(controller).isGarden(address(_garden)), Errors.ONLY_ACTIVE_GARDEN);\\n        _require(msg.sender == address(_garden), Errors.ONLY_ACTIVE_GARDEN);\\n        _;\\n    }\\n\\n    /**\\n     * Throws if the BABL Rewards mining program is not active\\n     */\\n    modifier onlyMiningActive() {\\n        _require(IBabController(controller).bablMiningProgramEnabled(), Errors.ONLY_MINING_ACTIVE);\\n        _;\\n    }\\n    /**\\n     * Throws if the sender is not the controller\\n     */\\n    modifier onlyController() {\\n        _require(IBabController(controller).isSystemContract(msg.sender), Errors.NOT_A_SYSTEM_CONTRACT);\\n        _require(address(controller) == msg.sender, Errors.ONLY_CONTROLLER);\\n        _;\\n    }\\n    modifier onlyUnpaused() {\\n        // Do not execute if Globally or individually paused\\n        _require(!IBabController(controller).isPaused(address(this)), Errors.ONLY_UNPAUSED);\\n        _;\\n    }\\n\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        _require(status != ENTERED, Errors.REENTRANT_CALL);\\n        // Any calls to nonReentrant after this point will fail\\n        status = ENTERED;\\n        _;\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        status = NOT_ENTERED;\\n    }\\n\\n    /* ============ Constants ============ */\\n    // 500K BABL allocated to this BABL Mining Program, the first quarter is Q1_REWARDS\\n    // and the following quarters will follow the supply curve using a decay rate\\n    uint256 private constant Q1_REWARDS = 53_571_428_571_428_600e6; // First quarter (epoch) BABL rewards\\n    // 12% quarterly decay rate (each 90 days)\\n    // (Rewards on Q1 = 1,12 * Rewards on Q2) being Q1= Quarter 1, Q2 = Quarter 2\\n    uint256 private constant DECAY_RATE = 12e16;\\n    // Duration of its EPOCH in days  // BABL & profits split from the protocol\\n    uint256 private constant EPOCH_DURATION = 90 days;\\n\\n    // solhint-disable-next-line\\n    uint256 public override START_TIME; // Starting time of the rewards distribution\\n\\n    // solhint-disable-next-line\\n    uint256 private BABL_STRATEGIST_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private BABL_STEWARD_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private BABL_LP_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private PROFIT_STRATEGIST_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private PROFIT_STEWARD_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private PROFIT_LP_SHARE;\\n    // solhint-disable-next-line\\n    uint256 private PROFIT_PROTOCOL_FEE;\\n    // solhint-disable-next-line\\n    uint256 private CREATOR_BONUS;\\n\\n    // DAI normalize asset\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n\\n    // Reentrancy guard countermeasure\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /* ============ Structs ============ */\\n\\n    struct ProtocolPerTimestamp {\\n        // Protocol allocation checkpoints per timestamp along the time\\n        uint256 principal; // Protocol principal allocation in normalized asset (DAI)\\n        uint256 time; // Time of the checkpoint\\n        uint256 quarterBelonging; // # Quarter checkpoint belonging since START_TIME\\n        uint256 timeListPointer; // Pointer to the array of timestamps to enable the possibility of struct iteration\\n        uint256 power; // Protocol power checkpoint (power is proportional to = principal * duration)\\n    }\\n\\n    struct ProtocolPerQuarter {\\n        // Protocol allocation checkpoints per timestamp per each quarter along the time\\n        uint256 quarterPrincipal; // Checkpoint to keep track on accumulated protocol principal per quarter in normalized asset (DAI)\\n        uint256 quarterNumber; // # Quarter since START_TIME\\n        uint256 quarterPower; //  Accumulated Protocol power for each quarter\\n        uint96 supplyPerQuarter; // Supply per quarter\\n    }\\n\\n    struct GardenPowerByTimestamp {\\n        // Garden allocation checkpoints per timestamp per each garden\\n        uint256 supply; // Checkpoint to keep track on garden supply\\n        uint256 timestamp; // Checkpoint timestamps\\n        uint256 power; // Garden power checkpoint (power is proportional to = principal * duration)\\n    }\\n    struct ContributorPerGarden {\\n        // Checkpoints to keep track on the evolution of each contributor vs. each garden\\n        uint256 lastDepositAt; // Last deposit timestamp of each contributor in each garden\\n        uint256 initialDepositAt; // Checkpoint of the initial deposit\\n        uint256[] timeListPointer; // Array of timestamps for each user in each garden\\n        uint256 pid; // Garden contributor checkpoints counter to enable iteration\\n        mapping(uint256 => TimestampContribution) tsContributions; // Sub-mapping all the contributor checkpoints\\n    }\\n\\n    struct TimestampContribution {\\n        // Sub-mapping with all checkpoints for deposits and withdrawals of garden users\\n        uint256 supply; // Garden token balance of user in each garden along the time\\n        uint256 timestamp; // Checkpoint time\\n        uint256 timePointer; // Pointer\\n        uint256 power; // Contributor power per checkpoint\\n    }\\n    struct Checkpoints {\\n        // Checkpoints for contributor power calculations where a certain window (from -> to) is queried\\n        uint256 fromDepositAt; // First contributor checkpoint within the provided window\\n        uint256 lastDepositAt; // Last contributor checkpoint within the provided window\\n        uint256 gardenFromDepositAt; // First contributor checkpoint within the provided window\\n        uint256 gardenLastDepositAt; // Last garden checkpoint within the provided window\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of the Controller contract\\n    IBabController private controller;\\n\\n    // BABL Token contract\\n    TimeLockedToken private babltoken;\\n\\n    // Protocol total allocation points. Must be the sum of all allocation points (strategyPrincipal) in all strategy pools.\\n    uint256 private protocolPrincipal;\\n    mapping(uint256 => ProtocolPerTimestamp) private protocolPerTimestamp; // Mapping of all protocol checkpoints\\n    uint256[] private timeList; // Array of all protocol checkpoints\\n    uint256 private pid; // Initialization of the ID assigning timeListPointer to the checkpoint number\\n\\n    mapping(uint256 => ProtocolPerQuarter) private protocolPerQuarter; // Mapping of the accumulated protocol per each active quarter\\n    mapping(uint256 => bool) private isProtocolPerQuarter; // Check if the protocol per quarter data has been initialized\\n\\n    // Strategy overhead control. Only used if each strategy has power overhead due to changes overtime\\n    mapping(address => mapping(uint256 => uint256)) private rewardsPowerOverhead; // DEPRECATED Overhead control to enable high level accuracy calculations for strategy rewards\\n    // Contributor power control\\n    mapping(address => mapping(address => ContributorPerGarden)) private contributorPerGarden; // Enable high level accuracy calculations\\n    mapping(address => mapping(address => Checkpoints)) private checkpoints;\\n    // Garden power control\\n    mapping(address => mapping(uint256 => GardenPowerByTimestamp)) private gardenPowerByTimestamp;\\n    mapping(address => uint256[]) private gardenTimelist;\\n    mapping(address => uint256) private gardenPid;\\n\\n    struct StrategyPerQuarter {\\n        // Acumulated strategy power per each quarter along the time\\n        uint256 quarterPrincipal;\\n        uint256 quarterNumber; // # Quarter since START_TIME\\n        uint256 quarterPower; //  Accumulated strategy power for each quarter\\n        bool initialized;\\n    }\\n    struct StrategyPricePerTokenUnit {\\n        // Take control over the price per token changes along the time when normalizing into DAI\\n        uint256 preallocated; // Strategy capital preallocated before each checkpoint\\n        uint256 pricePerTokenUnit; // Last average price per allocated tokens per strategy normalized into DAI\\n    }\\n    mapping(address => mapping(uint256 => StrategyPerQuarter)) public strategyPerQuarter; // Acumulated strategy power per each quarter along the time\\n    mapping(address => StrategyPricePerTokenUnit) public strategyPricePerTokenUnit; // Pro-rata oracle price allowing re-allocations and unwinding of any capital value\\n\\n    // Reentrancy guard countermeasure\\n    uint256 private status;\\n\\n    // Customized profit sharing (if any)\\n    // [0]: _strategistProfit , [1]: _stewardsProfit, [2]: _lpProfit\\n    mapping(address => uint256[3]) private gardenProfitSharing;\\n    mapping(address => bool) private gardenCustomProfitSharing;\\n\\n    /* ============ Constructor ============ */\\n\\n    function initialize(TimeLockedToken _bablToken, IBabController _controller) public {\\n        OwnableUpgradeable.__Ownable_init();\\n        _require(address(_bablToken) != address(0), Errors.ADDRESS_IS_ZERO);\\n        _require(address(_controller) != address(0), Errors.ADDRESS_IS_ZERO);\\n        babltoken = _bablToken;\\n        controller = _controller;\\n\\n        (BABL_STRATEGIST_SHARE, BABL_STEWARD_SHARE, BABL_LP_SHARE, CREATOR_BONUS) = controller.getBABLSharing();\\n        (PROFIT_STRATEGIST_SHARE, PROFIT_STEWARD_SHARE, PROFIT_LP_SHARE) = controller.getProfitSharing();\\n        PROFIT_PROTOCOL_FEE = controller.protocolPerformanceFee();\\n\\n        status = NOT_ENTERED;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Function that adds/substract the capital received to the total principal of the protocol per timestamp\\n     * @param _capital                Amount of capital in any type of asset to be normalized into DAI\\n     * @param _addOrSubstract         Whether we are adding or substracting capital\\n     */\\n    function updateProtocolPrincipal(uint256 _capital, bool _addOrSubstract)\\n        external\\n        override\\n        onlyStrategy\\n        onlyMiningActive\\n    {\\n        IStrategy strategy = IStrategy(msg.sender);\\n        if (strategy.enteredAt() >= START_TIME) {\\n            // onlyMiningActive control, it does not create a checkpoint if the strategy is not part of the Mining Program\\n            _updateProtocolPrincipal(address(strategy), _capital, _addOrSubstract);\\n        }\\n    }\\n\\n    /**\\n     * Gets the total amount of rewards for a given strategy\\n     * @param _strategy                Strategy to check\\n     */\\n    function getStrategyRewards(address _strategy) external view override returns (uint96) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        // ts[0]: executedAt, ts[1]: exitedAt, ts[2]: updatedAt\\n        uint256[] memory ts = new uint256[](3);\\n        (, , , , ts[0], ts[1], ts[2]) = strategy.getStrategyState();\\n        _require(ts[1] != 0, Errors.STRATEGY_IS_NOT_OVER_YET);\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        uint256 allocated =\\n            strategy.capitalAllocated().preciseMul(oracle.getPrice(IGarden(strategy.garden()).reserveAsset(), DAI));\\n        uint256 returned =\\n            strategy.capitalReturned().preciseMul(oracle.getPrice(IGarden(strategy.garden()).reserveAsset(), DAI));\\n        if ((strategy.enteredAt() >= START_TIME) && (START_TIME != 0)) {\\n            // We avoid gas consuming once a strategy got its BABL rewards during its finalization\\n            uint256 rewards = strategy.strategyRewards();\\n            if (rewards != 0) {\\n                return Safe3296.safe96(rewards, 'overflow 96 bits');\\n            }\\n            // If the calculation was not done earlier we go for it\\n            (uint256 numQuarters, uint256 startingQuarter) = _getRewardsWindow(ts[0], ts[1]);\\n            uint256 percentage = 1e18;\\n\\n            for (uint256 i = 0; i < numQuarters; i++) {\\n                uint256 slotEnding = START_TIME.add(startingQuarter.add(i).mul(EPOCH_DURATION)); // Initialization timestamp at the end of the first slot where the strategy starts its execution\\n                // We calculate each epoch\\n                uint256 strategyPower = strategyPerQuarter[_strategy][startingQuarter.add(i)].quarterPower;\\n                uint256 protocolPower = protocolPerQuarter[startingQuarter.add(i)].quarterPower;\\n                _require(strategyPower <= protocolPower, Errors.OVERFLOW_IN_POWER);\\n                if (i.add(1) == numQuarters) {\\n                    // last quarter - we take proportional supply for that timeframe\\n                    percentage = block.timestamp.sub(slotEnding.sub(EPOCH_DURATION)).preciseDiv(\\n                        slotEnding.sub(slotEnding.sub(EPOCH_DURATION))\\n                    );\\n                }\\n                uint256 powerRatioInQuarter =\\n                    strategyPower\\n                        .preciseDiv(protocolPower)\\n                        .preciseMul(uint256(protocolPerQuarter[startingQuarter.add(i)].supplyPerQuarter))\\n                        .preciseMul(percentage);\\n                rewards = rewards.add(powerRatioInQuarter);\\n            }\\n            // Babl rewards will be proportional to the total return (profit) with a max cap of x2\\n            uint256 percentageMul = returned.preciseDiv(allocated);\\n            if (percentageMul > 2e18) percentageMul = 2e18;\\n            rewards = rewards.preciseMul(percentageMul);\\n            return Safe3296.safe96(rewards, 'overflow 96 bits');\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Sends BABL tokens rewards to a contributor after a claim is requested to the protocol.\\n     * @param _to                Address to send the tokens to\\n     * @param _amount            Amount of tokens to send the address to\\n     */\\n    function sendTokensToContributor(address _to, uint256 _amount)\\n        external\\n        override\\n        nonReentrant\\n        onlyMiningActive\\n        onlyUnpaused\\n    {\\n        _require(controller.isSystemContract(msg.sender), Errors.NOT_A_SYSTEM_CONTRACT);\\n        uint96 amount = Safe3296.safe96(_amount, 'overflow 96 bits');\\n        _safeBABLTransfer(_to, amount);\\n    }\\n\\n    /**\\n     * Starts BABL Rewards Mining Program from the controller.\\n     */\\n    function startBABLRewards() external override onlyController onlyUnpaused {\\n        if (START_TIME == 0) {\\n            // It can only be activated once to avoid overriding START_TIME\\n            START_TIME = block.timestamp;\\n        }\\n    }\\n\\n    /**\\n     * Function that set each contributor timestamp per garden\\n     * @param _garden                Address of the garden the contributor belongs to\\n     * @param _contributor           Address of the contributor\\n     * @param _previousBalance       Previous balance of the contributor\\n     * @param _depositOrWithdraw     If the timestamp is a deposit (true) or a withdraw (false)\\n     * @param _pid                   The pid # of the Garden timestamps\\n     */\\n    function updateGardenPowerAndContributor(\\n        address _garden,\\n        address _contributor,\\n        uint256 _previousBalance,\\n        bool _depositOrWithdraw,\\n        uint256 _pid\\n    ) external override nonReentrant onlyActiveGarden(_garden, _pid) {\\n        _updateGardenPower(_garden);\\n        _setContributorTimestampParams(_garden, _contributor, _previousBalance, _depositOrWithdraw);\\n    }\\n\\n    /**\\n     * Function that set the babl Token address as it is going to be released in a future date\\n     * @param _bablToken BABLToken address\\n     */\\n    function setBablToken(TimeLockedToken _bablToken) external onlyOwner onlyUnpaused {\\n        _require(address(_bablToken) != address(0) && _bablToken != babltoken, Errors.INVALID_ADDRESS);\\n        babltoken = _bablToken;\\n    }\\n\\n    /* ========== View functions ========== */\\n\\n    /**\\n     * Calculates the profits and BABL that a contributor should receive from a series of finalized strategies\\n     * @param _garden                   Garden to which the strategies and the user must belong to\\n     * @param _contributor              Address of the contributor to check\\n     * @param _finalizedStrategies      List of addresses of the finalized strategies to check\\n     * @return Array of size 7 with the following distribution:\\n     * rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits\\n     */\\n    function getRewards(\\n        address _garden,\\n        address _contributor,\\n        address[] calldata _finalizedStrategies\\n    ) external view override returns (uint256[] memory) {\\n        uint256[] memory totalRewards = new uint256[](7);\\n        _require(IBabController(controller).isGarden(address(_garden)), Errors.ONLY_ACTIVE_GARDEN);\\n        for (uint256 i = 0; i < _finalizedStrategies.length; i++) {\\n            uint256[] memory tempRewards = new uint256[](7);\\n            tempRewards = _getStrategyProfitsAndBABL(_garden, _finalizedStrategies[i], _contributor);\\n            totalRewards[0] = totalRewards[0].add(tempRewards[0]);\\n            totalRewards[1] = totalRewards[1].add(tempRewards[1]);\\n            totalRewards[2] = totalRewards[2].add(tempRewards[2]);\\n            totalRewards[3] = totalRewards[3].add(tempRewards[3]);\\n            totalRewards[4] = totalRewards[4].add(tempRewards[4]);\\n            totalRewards[5] = totalRewards[5].add(tempRewards[5]);\\n            totalRewards[6] = totalRewards[6].add(tempRewards[6]);\\n        }\\n\\n        return totalRewards;\\n    }\\n\\n    /**\\n     * Gets the contributor power from one timestamp to the other\\n     * @param _garden      Address of the garden where the contributor belongs to\\n     * @param _contributor Address if the contributor\\n     * @param _from        Initial timestamp\\n     * @param _to          End timestamp\\n     * @return uint256     Contributor power during that period\\n     */\\n    function getContributorPower(\\n        address _garden,\\n        address _contributor,\\n        uint256 _from,\\n        uint256 _to\\n    ) external view override returns (uint256) {\\n        return _getContributorPower(_garden, _contributor, _from, _to);\\n    }\\n\\n    /**\\n     * Calculates the BABL rewards supply for each quarter\\n     * @param _quarter      Number of the epoch (quarter)\\n     */\\n    function tokenSupplyPerQuarter(uint256 _quarter) external pure override returns (uint96) {\\n        return _tokenSupplyPerQuarter(_quarter);\\n    }\\n\\n    /**\\n     * Set customized profit shares for a specific garden by the gardener\\n     * @param _strategistShare      New % of strategistShare\\n     * @param _stewardsShare        New % of stewardsShare\\n     * @param _lpShare              New % of lpShare\\n     */\\n    function setProfitRewards(\\n        address _garden,\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare\\n    ) external override onlyController {\\n        _require(IBabController(controller).isGarden(_garden), Errors.ONLY_ACTIVE_GARDEN);\\n        _setProfitRewards(_garden, _strategistShare, _stewardsShare, _lpShare);\\n    }\\n\\n    /**\\n     * Check the protocol state in a certain timestamp\\n     * @param time      Timestamp\\n     */\\n    function checkProtocol(uint256 _time)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 principal,\\n            uint256 time,\\n            uint256 quarterBelonging,\\n            uint256 timeListPointer,\\n            uint256 power\\n        )\\n    {\\n        ProtocolPerTimestamp storage protocolCheckpoint = protocolPerTimestamp[_time];\\n\\n        return (\\n            protocolCheckpoint.principal,\\n            protocolCheckpoint.time,\\n            protocolCheckpoint.quarterBelonging,\\n            protocolCheckpoint.timeListPointer,\\n            protocolCheckpoint.power\\n        );\\n    }\\n\\n    /**\\n     * Check the quarter state for a specific quarter\\n     * @param _num     Number of quarter\\n     */\\n    function checkQuarter(uint256 _num)\\n        external\\n        view\\n        override\\n        returns (\\n            uint256 quarterPrincipal,\\n            uint256 quarterNumber,\\n            uint256 quarterPower,\\n            uint96 supplyPerQuarter\\n        )\\n    {\\n        ProtocolPerQuarter storage protocolCheckpoint = protocolPerQuarter[_num];\\n\\n        return (\\n            protocolCheckpoint.quarterPrincipal,\\n            protocolCheckpoint.quarterNumber,\\n            protocolCheckpoint.quarterPower,\\n            protocolCheckpoint.supplyPerQuarter\\n        );\\n    }\\n\\n    /**\\n     * Check the garden profit sharing % if different from default\\n     * @param _garden     Address of the garden\\n     */\\n    function getGardenProfitsSharing(address _garden) external view override returns (uint256[3] memory) {\\n        if (gardenCustomProfitSharing[_garden]) {\\n            // It has customized values\\n            return gardenProfitSharing[_garden];\\n        } else {\\n            return [PROFIT_STRATEGIST_SHARE, PROFIT_STEWARD_SHARE, PROFIT_LP_SHARE];\\n        }\\n    }\\n\\n    function getStrategyPricePerTokenUnit(address _strategy) external view override returns (uint256, uint256) {\\n        return (\\n            strategyPricePerTokenUnit[_strategy].preallocated,\\n            strategyPricePerTokenUnit[_strategy].pricePerTokenUnit\\n        );\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n    /**\\n     * Update the protocol principal checkpoints\\n     * @param _strategy         Strategy which is adding/removing principal\\n     * @param _capital          Capital to update\\n     * @param _addOrSubstract   Adding (true) or removing (false)\\n     */\\n\\n    function _updateProtocolPrincipal(\\n        address _strategy,\\n        uint256 _capital,\\n        bool _addOrSubstract\\n    ) internal {\\n        // Take control of getPrice fluctuations along the time - normalizing into DAI\\n        uint256 pricePerTokenUnit = _getStrategyPricePerTokenUnit(_strategy, _capital, _addOrSubstract);\\n        _capital = SafeDecimalMath.normalizeAmountTokens(\\n            IGarden(IStrategy(_strategy).garden()).reserveAsset(),\\n            DAI,\\n            _capital.preciseMul(pricePerTokenUnit)\\n        );\\n        ProtocolPerTimestamp storage protocolCheckpoint = protocolPerTimestamp[block.timestamp];\\n        if (_addOrSubstract == false) {\\n            // Substracting capital\\n            protocolPrincipal = protocolPrincipal.sub(_capital);\\n        } else {\\n            // Adding capital\\n            protocolPrincipal = protocolPrincipal.add(_capital);\\n        }\\n        protocolCheckpoint.principal = protocolPrincipal;\\n        protocolCheckpoint.time = block.timestamp;\\n        protocolCheckpoint.quarterBelonging = _getQuarter(block.timestamp);\\n        protocolCheckpoint.timeListPointer = pid;\\n\\n        if (pid == 0) {\\n            // The very first strategy of all strategies in the mining program\\n            protocolCheckpoint.power = 0;\\n        } else {\\n            // Any other strategy different from the very first one (will have an antecesor)\\n            ProtocolPerTimestamp storage previousProtocolCheckpoint = protocolPerTimestamp[timeList[pid.sub(1)]];\\n            protocolCheckpoint.power = previousProtocolCheckpoint.power.add(\\n                protocolCheckpoint.time.sub(previousProtocolCheckpoint.time).mul(previousProtocolCheckpoint.principal)\\n            );\\n        }\\n        timeList.push(block.timestamp); // Register of added strategies timestamps in the array for iteration\\n        // Here we control the accumulated protocol power per each quarter\\n        // Create or update the quarter checkpoint\\n        _addProtocolPowerPerQuarter(block.timestamp);\\n        // We update the strategy power per quarter normalized in DAI\\n        _updateStrategyPowerPerQuarter(IStrategy(_strategy), _capital, _addOrSubstract);\\n        pid++;\\n    }\\n\\n    /**\\n     * Get the price per token to be used in the adding or substraction normalized to DAI (supports multiple asset)\\n     * @param _strategy         Strategy address\\n     * @param _capital          Capital in reserve asset to add or substract\\n     * @param _addOrSubstract   Whether or not we are adding or unwinding capital to the strategy\\n     * @return pricePerToken value\\n     */\\n    function _getStrategyPricePerTokenUnit(\\n        address _strategy,\\n        uint256 _capital,\\n        bool _addOrSubstract\\n    ) private returns (uint256) {\\n        // Normalizing into DAI\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        uint256 pricePerTokenUnit = oracle.getPrice(IGarden(IStrategy(_strategy).garden()).reserveAsset(), DAI);\\n        if (strategyPricePerTokenUnit[_strategy].preallocated == 0) {\\n            // First adding checkpoint\\n            strategyPricePerTokenUnit[_strategy].preallocated = _capital;\\n            strategyPricePerTokenUnit[_strategy].pricePerTokenUnit = pricePerTokenUnit;\\n            return pricePerTokenUnit;\\n        } else {\\n            // We are controlling pair reserveAsset-DAI fluctuations along the time\\n            if (_addOrSubstract) {\\n                strategyPricePerTokenUnit[_strategy].pricePerTokenUnit = (\\n                    (\\n                        (\\n                            strategyPricePerTokenUnit[_strategy].pricePerTokenUnit.mul(\\n                                strategyPricePerTokenUnit[_strategy].preallocated\\n                            )\\n                        )\\n                            .add(_capital.mul(pricePerTokenUnit))\\n                    )\\n                        .div(1e18)\\n                )\\n                    .preciseDiv(strategyPricePerTokenUnit[_strategy].preallocated.add(_capital));\\n                strategyPricePerTokenUnit[_strategy].preallocated = strategyPricePerTokenUnit[_strategy]\\n                    .preallocated\\n                    .add(_capital);\\n            } else {\\n                //We use the previous pricePerToken in a substract instead of a new price (as allocated capital used previous prices not the current one)\\n                strategyPricePerTokenUnit[_strategy].preallocated = strategyPricePerTokenUnit[_strategy]\\n                    .preallocated\\n                    .sub(_capital);\\n            }\\n            return strategyPricePerTokenUnit[_strategy].pricePerTokenUnit;\\n        }\\n    }\\n\\n    /**\\n     * Get the rewards for a specific contributor activately contributing in strategies of a specific garden\\n     * @param _garden           Garden address responsible of the strategies to calculate rewards\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     * @return Array of size 7 with the following distribution:\\n     * rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits\\n     */\\n    function _getStrategyProfitsAndBABL(\\n        address _garden,\\n        address _strategy,\\n        address _contributor\\n    ) private view returns (uint256[] memory) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        _require(address(strategy.garden()) == _garden, Errors.STRATEGY_GARDEN_MISMATCH);\\n        _require(IGarden(_garden).isGardenStrategy(_strategy), Errors.STRATEGY_GARDEN_MISMATCH);\\n        // ts[0]: executedAt, ts[1]: exitedAt, ts[2]: updatedAt\\n        uint256[] memory ts = new uint256[](3);\\n        (, , , , ts[0], ts[1], ts[2]) = strategy.getStrategyState();\\n        // rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits\\n        uint256[] memory rewards = new uint256[](7);\\n        uint256 contributorProfits;\\n        uint256 contributorBABL;\\n        // We get the state of the strategy in terms of profit and distance from expected to accurately calculate profits and rewards\\n        (bool profit, uint256 profitValue, bool distance, uint256 distanceValue) =\\n            _getStrategyRewardsContext(address(strategy));\\n\\n        (, uint256 initialDepositAt, uint256 claimedAt, , , , , , , ) = IGarden(_garden).getContributor(_contributor);\\n        // Positive strategies not yet claimed\\n        if (ts[1] > claimedAt && ts[0] >= initialDepositAt && address(strategy.garden()) == _garden) {\\n            // If strategy returned money we give out the profits\\n            if (profit == true) {\\n                // We reserve 5% of profits for performance fees\\n                profitValue = profitValue.sub(profitValue.multiplyDecimal(PROFIT_PROTOCOL_FEE));\\n            }\\n            // Get strategist rewards in case the contributor is also the strategist of the strategy\\n            rewards[0] = _getStrategyStrategistBabl(\\n                _strategy,\\n                _contributor,\\n                profit,\\n                profitValue,\\n                distance,\\n                distanceValue\\n            );\\n            contributorBABL = contributorBABL.add(rewards[0]);\\n            rewards[1] = _getStrategyStrategistProfits(_garden, _strategy, _contributor, profit, profitValue);\\n            contributorProfits = contributorProfits.add(rewards[1]);\\n\\n            // Get steward rewards\\n            rewards[2] = _getStrategyStewardBabl(_strategy, _contributor, profit, profitValue, distance, distanceValue);\\n            contributorBABL = contributorBABL.add(rewards[2]);\\n            rewards[3] = _getStrategyStewardProfits(\\n                _garden,\\n                _strategy,\\n                _contributor,\\n                profit,\\n                profitValue,\\n                distance,\\n                distanceValue\\n            );\\n            contributorProfits = contributorProfits.add(rewards[3]);\\n\\n            // Get LP rewards\\n            rewards[4] = _getStrategyLPBabl(_garden, _strategy, _contributor);\\n            contributorBABL = contributorBABL.add(rewards[4]);\\n            // Creator bonus\\n            rewards[5] = _getCreatorBonus(_garden, _contributor, contributorBABL);\\n            rewards[6] = contributorProfits;\\n        }\\n        return rewards;\\n    }\\n\\n    /**\\n     * Get the context of a specific address depending on their expected returns, capital allocated and capital returned\\n     * @param _strategy         Strategy address\\n     */\\n    function _getStrategyRewardsContext(address _strategy)\\n        private\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            bool,\\n            uint256\\n        )\\n    {\\n        IStrategy strategy = IStrategy(_strategy);\\n        uint256 returned = strategy.capitalReturned();\\n        uint256 expected =\\n            strategy.capitalAllocated().add(strategy.capitalAllocated().preciseMul(strategy.expectedReturn()));\\n        uint256 allocated = strategy.capitalAllocated();\\n        bool profit;\\n        bool distance;\\n        uint256 profitValue;\\n        uint256 distanceValue;\\n        if (returned > allocated && returned >= expected) {\\n            // The strategy went equal or above expectations\\n            profit = true; // positive\\n            distance = true; // positive\\n            profitValue = returned.sub(allocated);\\n            distanceValue = returned.sub(expected);\\n        } else if (returned >= allocated && returned < expected) {\\n            // The strategy went worse than expected but with some profits\\n            profit = true; // positive or zero profits\\n            distance = false; // negative vs expected return (got less than expected)\\n            profitValue = returned.sub(allocated);\\n            distanceValue = expected.sub(returned);\\n        } else if (returned < allocated && returned < expected) {\\n            // Negative profits - bad investments has penalties\\n            profit = false; // negative - loosing capital\\n            distance = false; // negative vs expected return (got less than expected)\\n            profitValue = allocated.sub(returned); // Negative number, there were no profits at all\\n            distanceValue = expected.sub(returned);\\n        }\\n\\n        return (profit, profitValue, distance, distanceValue);\\n    }\\n\\n    /**\\n     * Get the BABL rewards (Mining program) for a Steward profile\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     * @param _profit           Whether or not the strategy had profits\\n     * @param _distance         If true the results were above expected returns, false means opposite\\n     * @param _distanceValue        The distance from/to expected returns for capital returned\\n     */\\n    function _getStrategyStewardBabl(\\n        address _strategy,\\n        address _contributor,\\n        bool _profit,\\n        uint256, /* _profitValue */\\n        bool _distance,\\n        uint256 _distanceValue\\n    ) private view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        uint256 strategyRewards = strategy.strategyRewards();\\n        int256 userVotes = strategy.getUserVotes(_contributor);\\n        uint256 allocated = strategy.capitalAllocated();\\n        uint256 totalPositiveVotes = strategy.totalPositiveVotes();\\n        uint256 bablCap;\\n        uint256 expected = allocated.add(allocated.preciseMul(strategy.expectedReturn()));\\n\\n        // Get proportional voter (stewards) rewards in case the contributor was also a steward of the strategy\\n        uint256 babl;\\n        if (userVotes > 0 && _profit == true && _distance == true) {\\n            // Voting in favor of the execution of the strategy with profits and positive distance\\n            babl = strategyRewards.multiplyDecimal(BABL_STEWARD_SHARE).preciseMul(\\n                uint256(userVotes).preciseDiv(totalPositiveVotes)\\n            );\\n        } else if (userVotes > 0 && _profit == true && _distance == false) {\\n            // Voting in favor positive profits but below expected return\\n            babl = strategyRewards.multiplyDecimal(BABL_STEWARD_SHARE).preciseMul(\\n                uint256(userVotes).preciseDiv(totalPositiveVotes)\\n            );\\n            // We discount the error of expected return vs real returns\\n            babl = babl.sub(babl.preciseMul(_distanceValue.preciseDiv(expected)));\\n        } else if (userVotes > 0 && _profit == false) {\\n            // Voting in favor of a non profitable strategy get nothing\\n            babl = 0;\\n        } else if (userVotes < 0 && _distance == false) {\\n            // Voting against a strategy that got results below expected return provides rewards\\n            // to the voter (helping the protocol to only have good strategies)\\n            babl = strategyRewards.multiplyDecimal(BABL_STEWARD_SHARE).preciseMul(\\n                uint256(Math.abs(userVotes)).preciseDiv(strategy.totalNegativeVotes())\\n            );\\n\\n            bablCap = babl.mul(2); // Max cap\\n            // We add a bonus inverse to the error of expected return vs real returns\\n            babl = babl.add(babl.preciseMul(_distanceValue.preciseDiv(expected)));\\n            if (babl > bablCap) babl = bablCap; // We limit 2x by a Cap\\n        } else if (userVotes < 0 && _distance == true) {\\n            babl = 0;\\n        }\\n        return babl;\\n    }\\n\\n    /**\\n     * Get the rewards for a Steward profile\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     * @param _profit           Whether or not the strategy had profits\\n     * @param _profitValue      The value of profits\\n     * @param _distance         If true the results were above expected returns, false means opposite\\n     */\\n    function _getStrategyStewardProfits(\\n        address _garden,\\n        address _strategy,\\n        address _contributor,\\n        bool _profit,\\n        uint256 _profitValue,\\n        bool _distance,\\n        uint256 /* _distanceValue */\\n    ) private view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        // Get proportional voter (stewards) rewards in case the contributor was also a steward of the strategy\\n        int256 userVotes = strategy.getUserVotes(_contributor);\\n        uint256 profitShare =\\n            gardenCustomProfitSharing[_garden] ? gardenProfitSharing[_garden][1] : PROFIT_STEWARD_SHARE;\\n        if (_profit == true) {\\n            if (userVotes > 0) {\\n                return\\n                    _profitValue.multiplyDecimal(profitShare).preciseMul(uint256(userVotes)).preciseDiv(\\n                        strategy.totalPositiveVotes()\\n                    );\\n            } else if ((userVotes < 0) && _distance == false) {\\n                return\\n                    _profitValue.multiplyDecimal(profitShare).preciseMul(uint256(Math.abs(userVotes))).preciseDiv(\\n                        strategy.totalNegativeVotes()\\n                    );\\n            } else if ((userVotes < 0) && _distance == true) {\\n                // Voted against a very profit strategy above expected returns, get no profit at all\\n                return 0;\\n            }\\n        }\\n        return 0; // No profits at all\\n    }\\n\\n    /**\\n     * Get the BABL rewards (Mining program) for a Strategist profile\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     * @param _profit           Whether or not the strategy had profits\\n     * @param _distance         If true the results were above expected returns, false means opposite\\n     */\\n    function _getStrategyStrategistBabl(\\n        address _strategy,\\n        address _contributor,\\n        bool _profit,\\n        uint256, /* _profitValue */\\n        bool _distance,\\n        uint256 /* _distanceValue */\\n    ) private view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        uint256 strategyRewards = strategy.strategyRewards();\\n        uint256 babl;\\n        uint256 allocated = strategy.capitalAllocated();\\n        uint256 returned = strategy.capitalReturned();\\n        uint256 bablCap;\\n        uint256 expected = allocated.add(allocated.preciseMul(strategy.expectedReturn()));\\n        if (strategy.strategist() == _contributor) {\\n            babl = strategyRewards.multiplyDecimal(BABL_STRATEGIST_SHARE); // Standard calculation to be ponderated\\n            if (_profit == true && _distance == true) {\\n                // Strategy with equal or higher profits than expected\\n                bablCap = babl.mul(2); // Max cap\\n                // The more the results are close to the expected the more bonus will get (limited by a x2 cap)\\n                babl = babl.add(babl.preciseMul(expected.preciseDiv(returned)));\\n                if (babl > bablCap) babl = bablCap; // We limit 2x by a Cap\\n            } else if (_profit == true && _distance == false) {\\n                //under expectations\\n                // The more the results are close to the expected the less penalization it might have\\n                babl = babl.sub(babl.sub(babl.preciseMul(returned.preciseDiv(expected))));\\n            } else {\\n                // No positive profit\\n                return 0;\\n            }\\n        } else {\\n            return 0;\\n        }\\n        return babl;\\n    }\\n\\n    /**\\n     * Get the rewards for a Strategist profile\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     * @param _profit           Whether or not the strategy had profits\\n     * @param _profitValue      The value of profits\\n     */\\n    function _getStrategyStrategistProfits(\\n        address _garden,\\n        address _strategy,\\n        address _contributor,\\n        bool _profit,\\n        uint256 _profitValue\\n    ) private view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        // Get proportional voter (stewards) rewards in case the contributor was also a steward of the strategy\\n        if (_profit == true) {\\n            if (strategy.strategist() == _contributor) {\\n                // If the contributor was the strategist of the strategy\\n                uint256 profitShare =\\n                    gardenCustomProfitSharing[_garden] ? gardenProfitSharing[_garden][0] : PROFIT_STRATEGIST_SHARE;\\n                return _profitValue.multiplyDecimal(profitShare);\\n            }\\n        }\\n        return 0; // No profits at all\\n    }\\n\\n    /**\\n     * Get the BABL rewards (Mining program) for a LP profile\\n     * @param _garden           Garden address\\n     * @param _strategy         Strategy address\\n     * @param _contributor      Contributor address\\n     */\\n    function _getStrategyLPBabl(\\n        address _garden,\\n        address _strategy,\\n        address _contributor\\n    ) private view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        uint256 strategyRewards = strategy.strategyRewards();\\n        uint256 babl;\\n        uint256 allocated =\\n            SafeDecimalMath.normalizeAmountTokens(IGarden(_garden).reserveAsset(), DAI, strategy.capitalAllocated());\\n        uint256[] memory ts = new uint256[](3);\\n        // ts[0]: executedAt, ts[1]: exitedAt, ts[2]: updatedAt\\n        (, , , , ts[0], ts[1], ts[2]) = strategy.getStrategyState();\\n        uint256 contributorPower = _getContributorPower(_garden, _contributor, ts[0], ts[1]);\\n        // We take care of normalization into 18 decimals for capital allocated in less decimals than 18\\n        babl = strategyRewards.multiplyDecimal(BABL_LP_SHARE).preciseMul(contributorPower.preciseDiv(allocated));\\n        return babl;\\n    }\\n\\n    /**\\n     * Add protocol power timestamps for each quarter\\n     * @param _time         Timestamp\\n     */\\n    function _addProtocolPowerPerQuarter(uint256 _time) private onlyMiningActive {\\n        uint256 quarter = _getQuarter(_time);\\n        ProtocolPerQuarter storage protocolCheckpoint = protocolPerQuarter[quarter];\\n\\n        if (!isProtocolPerQuarter[quarter.sub(1)]) {\\n            // The quarter is not yet initialized then we create it\\n            protocolCheckpoint.quarterNumber = quarter;\\n            if (pid == 0) {\\n                // The first strategy added in the first epoch\\n                protocolCheckpoint.quarterPower = 0;\\n                protocolCheckpoint.supplyPerQuarter = _tokenSupplyPerQuarter(quarter);\\n            } else {\\n                uint256 prevPid = pid.sub(1);\\n                // Each time a new epoch starts with either a new strategy execution or finalization\\n                // We just take the proportional power for this quarter from previous checkpoint\\n                uint256 powerToSplit =\\n                    protocolPerTimestamp[_time].power.sub(protocolPerTimestamp[timeList[prevPid]].power);\\n                if (protocolPerTimestamp[timeList[prevPid]].quarterBelonging == quarter.sub(1)) {\\n                    // There were no intermediate epochs without checkpoints\\n                    // We re-initialize the protocol power counting for this new quarter\\n                    protocolCheckpoint.quarterPower = powerToSplit\\n                        .mul(_time.sub(START_TIME.add(quarter.mul(EPOCH_DURATION).sub(EPOCH_DURATION))))\\n                        .div(_time.sub(protocolPerTimestamp[timeList[prevPid]].time));\\n                    protocolCheckpoint.supplyPerQuarter = _tokenSupplyPerQuarter(quarter);\\n\\n                    protocolPerQuarter[quarter.sub(1)].quarterPower = protocolPerQuarter[quarter.sub(1)]\\n                        .quarterPower\\n                        .add(powerToSplit.sub(protocolCheckpoint.quarterPower));\\n                } else {\\n                    // There were intermediate epochs without checkpoints - we need to create their protocolPerQuarter's and update the last one\\n                    // We have to update all the quarters including where the previous checkpoint is and the one were we are now\\n                    for (\\n                        uint256 i = 0;\\n                        i <= quarter.sub(protocolPerTimestamp[timeList[prevPid]].quarterBelonging);\\n                        i++\\n                    ) {\\n                        ProtocolPerQuarter storage newCheckpoint =\\n                            protocolPerQuarter[protocolPerTimestamp[timeList[prevPid]].quarterBelonging.add(i)];\\n                        uint256 slotEnding =\\n                            START_TIME.add(\\n                                protocolPerTimestamp[timeList[prevPid]].quarterBelonging.add(i).mul(EPOCH_DURATION)\\n                            );\\n                        if (i == 0) {\\n                            // We are in the first quarter to update, we add the corresponding part\\n\\n                            newCheckpoint.quarterPower = newCheckpoint.quarterPower.add(\\n                                powerToSplit.mul(slotEnding.sub(protocolPerTimestamp[timeList[prevPid]].time)).div(\\n                                    _time.sub(protocolPerTimestamp[timeList[prevPid]].time)\\n                                )\\n                            );\\n                            newCheckpoint.quarterPrincipal = protocolPerTimestamp[timeList[prevPid]].principal;\\n                        } else if (i < quarter.sub(protocolPerTimestamp[timeList[prevPid]].quarterBelonging)) {\\n                            // We are in an intermediate quarter\\n                            newCheckpoint.quarterPower = powerToSplit.mul(EPOCH_DURATION).div(\\n                                _time.sub(protocolPerTimestamp[timeList[prevPid]].time)\\n                            );\\n                            newCheckpoint.supplyPerQuarter = _tokenSupplyPerQuarter(\\n                                protocolPerTimestamp[timeList[prevPid]].quarterBelonging.add(i)\\n                            );\\n                            newCheckpoint.quarterNumber = protocolPerTimestamp[timeList[prevPid]].quarterBelonging.add(\\n                                i\\n                            );\\n                            newCheckpoint.quarterPrincipal = protocolPerTimestamp[timeList[prevPid]].principal;\\n                        } else {\\n                            // We are in the last quarter of the strategy\\n                            protocolCheckpoint.quarterPower = powerToSplit\\n                                .mul(_time.sub(START_TIME.add(quarter.mul(EPOCH_DURATION).sub(EPOCH_DURATION))))\\n                                .div(_time.sub(protocolPerTimestamp[timeList[prevPid]].time));\\n                            protocolCheckpoint.supplyPerQuarter = _tokenSupplyPerQuarter(quarter);\\n                            protocolCheckpoint.quarterNumber = quarter;\\n                            protocolCheckpoint.quarterPrincipal = protocolPrincipal;\\n                        }\\n                    }\\n                }\\n            }\\n            isProtocolPerQuarter[quarter.sub(1)] = true;\\n        } else {\\n            // Quarter checkpoint already created, it must have been filled with general info\\n            // We update the power of the quarter by adding the new difference between last quarter checkpoint and this checkpoint\\n            protocolCheckpoint.quarterPower = protocolCheckpoint.quarterPower.add(\\n                protocolPerTimestamp[_time].power.sub(protocolPerTimestamp[timeList[pid.sub(1)]].power)\\n            );\\n        }\\n        protocolCheckpoint.quarterPrincipal = protocolPrincipal;\\n    }\\n\\n    /**\\n     * Updates the strategy power per quarter for rewards calculations of each strategy out of the whole protocol\\n     * @param _strategy      Strategy\\n     * @param _capital       New capital normalized in DAI\\n     */\\n    function _updateStrategyPowerPerQuarter(\\n        IStrategy _strategy,\\n        uint256 _capital,\\n        bool _addOrSubstract\\n    ) private onlyMiningActive {\\n        StrategyPerQuarter storage strategyCheckpoint =\\n            strategyPerQuarter[address(_strategy)][_getQuarter(block.timestamp)];\\n        // ts[0]: executedAt, ts[1]: exitedAt, ts[2]: updatedAt\\n        uint256[] memory ts = new uint256[](3);\\n        (, , , , ts[0], ts[1], ts[2]) = _strategy.getStrategyState();\\n        if (!strategyCheckpoint.initialized) {\\n            // The strategy quarter is not yet initialized then we create it\\n            if (_getQuarter(block.timestamp) == _getQuarter(ts[0])) {\\n                // The first checkpoint in the first executing epoch\\n                strategyCheckpoint.quarterPower = 0;\\n                strategyCheckpoint.quarterNumber = _getQuarter(block.timestamp);\\n            } else {\\n                // Each time a new epoch starts with either a new strategy execution or finalization\\n                // We just take the proportional power for this quarter from previous checkpoint\\n                uint256 powerToSplit =\\n                    strategyPerQuarter[address(_strategy)][_getQuarter(ts[2])].quarterPrincipal.mul(\\n                        block.timestamp.sub(ts[2])\\n                    );\\n                // We need to iterate since last update of the strategy capital\\n                (uint256 numQuarters, uint256 startingQuarter) = _getRewardsWindow(ts[2], block.timestamp);\\n\\n                // There were intermediate epochs without checkpoints - we need to create their protocolPerQuarter's and update the last one\\n                // We have to update all the quarters including where the previous checkpoint is and the one were we are now\\n                for (uint256 i = 0; i < numQuarters; i++) {\\n                    StrategyPerQuarter storage newCheckpoint =\\n                        strategyPerQuarter[address(_strategy)][startingQuarter.add(i)];\\n                    uint256 slotEnding = START_TIME.add(startingQuarter.add(i).mul(EPOCH_DURATION));\\n                    if (i == 0) {\\n                        // We are in the first quarter to update, we add the corresponding part\\n\\n                        newCheckpoint.quarterPower = newCheckpoint.quarterPower.add(\\n                            powerToSplit.mul(slotEnding.sub(ts[2])).div(block.timestamp.sub(ts[2]))\\n                        );\\n                    } else if (i > 0 && i.add(1) < numQuarters) {\\n                        // We are in an intermediate quarter\\n                        newCheckpoint.quarterPower = powerToSplit.mul(EPOCH_DURATION).div(block.timestamp.sub(ts[2]));\\n                        newCheckpoint.quarterNumber = startingQuarter.add(i);\\n                        newCheckpoint.quarterPrincipal = strategyPerQuarter[address(_strategy)][startingQuarter]\\n                            .quarterPrincipal;\\n                        newCheckpoint.initialized = true;\\n                    } else {\\n                        // We are in the last quarter of the strategy\\n                        newCheckpoint.quarterPower = powerToSplit\\n                            .mul(\\n                            block.timestamp.sub(\\n                                START_TIME.add(_getQuarter(block.timestamp).mul(EPOCH_DURATION).sub(EPOCH_DURATION))\\n                            )\\n                        )\\n                            .div(block.timestamp.sub(ts[2]));\\n                        newCheckpoint.quarterPrincipal = strategyPerQuarter[address(_strategy)][startingQuarter]\\n                            .quarterPrincipal;\\n                        newCheckpoint.quarterNumber = _getQuarter(block.timestamp);\\n                    }\\n                }\\n            }\\n            strategyCheckpoint.initialized = true;\\n        } else {\\n            // Quarter checkpoint already created, it must have been filled with general info\\n            // We update the power of the quarter by adding the new difference between last quarter checkpoint and this checkpoint\\n\\n            strategyCheckpoint.quarterPower = strategyCheckpoint.quarterPower.add(\\n                strategyCheckpoint.quarterPrincipal.mul(block.timestamp.sub(ts[2]))\\n            );\\n        }\\n        if (_addOrSubstract == true) {\\n            // Add\\n            strategyCheckpoint.quarterPrincipal = strategyCheckpoint.quarterPrincipal.add(_capital);\\n        } else {\\n            // Sub\\n            strategyCheckpoint.quarterPrincipal = strategyCheckpoint.quarterPrincipal.sub(_capital);\\n        }\\n    }\\n\\n    /**\\n     * Safe BABL rewards (Mining program) token transfer.\\n     * It handle cases when in case of rounding errors, RewardsDistributor might not have enough BABL.\\n     * @param _to               The receiver address of the contributor to send\\n     * @param _amount           The amount of BABL tokens to be rewarded during this claim\\n     */\\n    function _safeBABLTransfer(address _to, uint96 _amount) private onlyMiningActive {\\n        uint256 bablBal = babltoken.balanceOf(address(this));\\n        if (_amount > bablBal) {\\n            SafeERC20.safeTransfer(babltoken, _to, bablBal);\\n        } else {\\n            SafeERC20.safeTransfer(babltoken, _to, _amount);\\n        }\\n    }\\n\\n    /**\\n     * Gets the contributor power from a timestamp to a specific timestamp within a garden\\n     * @param _garden      Address of the garden\\n     * @param _contributor Address if the contributor\\n     * @param _from        Initial timestamp\\n     * @param _to          End timestamp\\n     * @return uint256     Contributor power during that period\\n     */\\n    function _getContributorPower(\\n        address _garden,\\n        address _contributor,\\n        uint256 _from,\\n        uint256 _to\\n    ) private view returns (uint256) {\\n        // Out of bounds\\n        _require(_to >= IGarden(_garden).gardenInitializedAt() && _to >= _from, Errors.CONTRIBUTOR_POWER_CHECK_WINDOW);\\n        ContributorPerGarden storage contributor = contributorPerGarden[address(_garden)][address(_contributor)];\\n        Checkpoints memory powerCheckpoints = checkpoints[address(_garden)][address(_contributor)];\\n\\n        if (contributor.initialDepositAt == 0 || contributor.initialDepositAt > _to) {\\n            return 0;\\n        } else {\\n            if (_from <= IGarden(_garden).gardenInitializedAt()) {\\n                // Avoid division by zero in case of _from parameter is not passed\\n                _from = IGarden(_garden).gardenInitializedAt();\\n            }\\n            // Find closest point to _from and _to either contributor and garden checkpoints at their left\\n            (powerCheckpoints.fromDepositAt, powerCheckpoints.lastDepositAt) = _locateCheckpointsContributor(\\n                _garden,\\n                _contributor,\\n                _from,\\n                _to\\n            );\\n            (powerCheckpoints.gardenFromDepositAt, powerCheckpoints.gardenLastDepositAt) = _locateCheckpointsGarden(\\n                _garden,\\n                _from,\\n                _to\\n            );\\n\\n            // origin must be less than end window\\n            _require(\\n                powerCheckpoints.fromDepositAt <= powerCheckpoints.lastDepositAt &&\\n                    powerCheckpoints.gardenFromDepositAt <= powerCheckpoints.gardenLastDepositAt,\\n                Errors.CONTRIBUTOR_POWER_CHECK_DEPOSITS\\n            );\\n            uint256 contributorPower;\\n            uint256 gardenPower;\\n\\n            // \\\"FROM power calculations\\\" PART\\n            // Avoid underflows\\n\\n            if (_from < powerCheckpoints.fromDepositAt) {\\n                // Contributor still has no power but _from is later than the start of the garden\\n                contributorPower = 0;\\n            } else if (_from > powerCheckpoints.fromDepositAt) {\\n                contributorPower = contributor.tsContributions[powerCheckpoints.fromDepositAt].power.add(\\n                    (_from.sub(powerCheckpoints.fromDepositAt)).mul(\\n                        contributor.tsContributions[powerCheckpoints.fromDepositAt].supply\\n                    )\\n                );\\n            } else {\\n                // _from == fromDepositAt\\n                contributorPower = contributor.tsContributions[powerCheckpoints.fromDepositAt].power;\\n            }\\n            gardenPower = gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenFromDepositAt].power.add(\\n                (_from.sub(powerCheckpoints.gardenFromDepositAt)).mul(\\n                    gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenFromDepositAt].supply\\n                )\\n            );\\n            // \\\"TO power calculations\\\" PART\\n            // We go for accurate power calculations avoiding overflows\\n            // contributor power overflow\\n            _require(contributorPower <= gardenPower, Errors.CONTRIBUTOR_POWER_OVERFLOW);\\n            if (_from == _to) {\\n                // Requested a specific checkpoint calculation (no slot)\\n                if (gardenPower == 0) {\\n                    return 0;\\n                } else {\\n                    return contributorPower.preciseDiv(gardenPower);\\n                }\\n                // Not a checkpoint anymore but a slot\\n            } else if (_to < powerCheckpoints.lastDepositAt) {\\n                // contributor has not deposited yet\\n                return 0;\\n            } else if (\\n                _to == powerCheckpoints.lastDepositAt &&\\n                powerCheckpoints.fromDepositAt == powerCheckpoints.lastDepositAt\\n            ) {\\n                // no more contributor checkpoints in the slot\\n                gardenPower = (\\n                    gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenLastDepositAt].power.add(\\n                        (_to.sub(powerCheckpoints.gardenLastDepositAt)).mul(\\n                            gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenLastDepositAt].supply\\n                        )\\n                    )\\n                )\\n                    .sub(gardenPower);\\n                _require(contributorPower <= gardenPower, Errors.CONTRIBUTOR_POWER_OVERFLOW);\\n                return contributorPower.preciseDiv(gardenPower);\\n            } else {\\n                contributorPower = (\\n                    contributor.tsContributions[powerCheckpoints.lastDepositAt].power.add(\\n                        (_to.sub(powerCheckpoints.lastDepositAt)).mul(\\n                            contributor.tsContributions[powerCheckpoints.lastDepositAt].supply\\n                        )\\n                    )\\n                )\\n                    .sub(contributorPower);\\n\\n                gardenPower = (\\n                    gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenLastDepositAt].power.add(\\n                        (_to.sub(powerCheckpoints.gardenLastDepositAt)).mul(\\n                            gardenPowerByTimestamp[address(_garden)][powerCheckpoints.gardenLastDepositAt].supply\\n                        )\\n                    )\\n                )\\n                    .sub(gardenPower);\\n                _require(contributorPower <= gardenPower, Errors.CONTRIBUTOR_POWER_OVERFLOW);\\n\\n                return contributorPower.preciseDiv(gardenPower);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Gets the earlier and closest (deposit/withdrawal) checkpoints of a contributor in a specific range\\n     * @param _garden      Address of the garden\\n     * @param _contributor Address if the contributor\\n     * @param _from        Initial timestamp\\n     * @param _to          End timestamp\\n     * @return uint256     Contributor power during that period\\n     */\\n    function _locateCheckpointsContributor(\\n        address _garden,\\n        address _contributor,\\n        uint256 _from,\\n        uint256 _to\\n    ) private view returns (uint256, uint256) {\\n        ContributorPerGarden storage contributor = contributorPerGarden[address(_garden)][address(_contributor)];\\n\\n        uint256 lastDepositAt = contributor.timeListPointer[contributor.timeListPointer.length.sub(1)]; // Initialized with lastDeposit\\n        uint256 fromDepositAt = contributor.timeListPointer[0]; // Initialized with initialDeposit\\n\\n        if (lastDepositAt > _to || fromDepositAt < _from) {\\n            // We go to find the closest deposits of the contributor to _from and _to\\n            for (uint256 i = 0; i < contributor.timeListPointer.length; i++) {\\n                if (contributor.timeListPointer[i] <= _to) {\\n                    lastDepositAt = contributor.timeListPointer[i];\\n                }\\n                if (contributor.timeListPointer[i] <= _from) {\\n                    fromDepositAt = contributor.timeListPointer[i];\\n                }\\n            }\\n        }\\n        return (fromDepositAt, lastDepositAt);\\n    }\\n\\n    /**\\n     * Gets the earlier and closest (deposit/withdrawal) checkpoints of a garden in a specific range\\n     * @param _garden      Address of the garden\\n     * @param _from        Initial timestamp\\n     * @param _to          End timestamp\\n     * @return uint256     Contributor power during that period\\n     */\\n    function _locateCheckpointsGarden(\\n        address _garden,\\n        uint256 _from,\\n        uint256 _to\\n    ) private view returns (uint256, uint256) {\\n        uint256 gardenLastCheckpoint = gardenTimelist[address(_garden)].length.sub(1);\\n        uint256 gardenLastDepositAt = gardenTimelist[address(_garden)][gardenLastCheckpoint]; // Initialized to the last garden checkpoint\\n        uint256 gardenFromDepositAt = gardenTimelist[address(_garden)][0]; // Initialized to the first garden checkpoint\\n\\n        if (gardenLastDepositAt > _to || gardenFromDepositAt < _from) {\\n            // We go for the closest timestamp of garden to _to and _from\\n            for (uint256 i = 0; i <= gardenLastCheckpoint; i++) {\\n                uint256 gardenTime = gardenTimelist[address(_garden)][i];\\n                if (gardenTime <= _to) {\\n                    gardenLastDepositAt = gardenTime;\\n                }\\n                if (gardenTime <= _from) {\\n                    gardenFromDepositAt = gardenTime;\\n                }\\n            }\\n        }\\n        return (gardenFromDepositAt, gardenLastDepositAt);\\n    }\\n\\n    /**\\n     * Function that keeps checkpoints of the garden power (deposits and withdrawals) per timestamp\\n     * @param _garden               Garden address\\n     */\\n    function _updateGardenPower(address _garden) private {\\n        IGarden garden = IGarden(_garden);\\n        GardenPowerByTimestamp storage gardenTimestamp = gardenPowerByTimestamp[address(garden)][block.timestamp];\\n        gardenTimestamp.supply = IERC20(address(IGarden(_garden))).totalSupply();\\n\\n        gardenTimestamp.timestamp = block.timestamp;\\n\\n        if (gardenPid[address(_garden)] == 0) {\\n            // The very first deposit of all contributors in the mining program\\n            gardenTimestamp.power = 0;\\n        } else {\\n            // Any other deposit different from the very first one (will have an antecesor)\\n            GardenPowerByTimestamp storage previousGardenTimestamp =\\n                gardenPowerByTimestamp[address(garden)][\\n                    gardenTimelist[address(garden)][gardenPid[address(garden)].sub(1)]\\n                ];\\n            gardenTimestamp.power = previousGardenTimestamp.power.add(\\n                gardenTimestamp.timestamp.sub(previousGardenTimestamp.timestamp).mul(previousGardenTimestamp.supply)\\n            );\\n        }\\n\\n        gardenTimelist[address(garden)].push(block.timestamp); // Register of deposit timestamps in the array for iteration\\n        gardenPid[address(garden)]++;\\n    }\\n\\n    /**\\n     * Updates contributor timestamps params\\n     * @param _garden               Garden address\\n     * @param _contributor          Contributor address\\n     * @param _previousBalance      Previous balance\\n     * @param _depositOrWithdraw    Whether it is a deposit or a withdraw\\n     */\\n    function _setContributorTimestampParams(\\n        address _garden,\\n        address _contributor,\\n        uint256 _previousBalance,\\n        bool _depositOrWithdraw\\n    ) private {\\n        // We make checkpoints around contributor deposits to give the right rewards afterwards\\n        ContributorPerGarden storage contributor = contributorPerGarden[address(_garden)][_contributor];\\n        TimestampContribution storage contributorDetail = contributor.tsContributions[block.timestamp];\\n        contributorDetail.supply = IERC20(address(IGarden(_garden))).balanceOf(address(_contributor));\\n\\n        contributorDetail.timestamp = block.timestamp;\\n\\n        contributorDetail.timePointer = contributor.pid;\\n\\n        if (contributor.pid == 0) {\\n            // The very first deposit\\n            contributorDetail.power = 0;\\n        } else {\\n            // Any other deposits or withdrawals different from the very first one (will have an antecesor)\\n            contributorDetail.power = contributor.tsContributions[contributor.lastDepositAt].power.add(\\n                (block.timestamp.sub(contributor.lastDepositAt)).mul(\\n                    contributor.tsContributions[contributor.lastDepositAt].supply\\n                )\\n            );\\n        }\\n        if (_depositOrWithdraw == true) {\\n            // Deposit\\n            if (_previousBalance == 0 || contributor.initialDepositAt == 0) {\\n                contributor.initialDepositAt = block.timestamp;\\n            }\\n            contributor.lastDepositAt = block.timestamp;\\n        } else {\\n            // Withdrawals\\n            if (contributorDetail.supply == 0) {\\n                contributor.lastDepositAt = 0;\\n                contributor.initialDepositAt = 0;\\n                delete contributor.timeListPointer;\\n            }\\n        }\\n\\n        contributor.timeListPointer.push(block.timestamp);\\n        contributor.pid++;\\n    }\\n\\n    /**\\n     * Calculates the BABL rewards supply for each quarter\\n     * @param _quarter      Number of the epoch (quarter)\\n     */\\n    function _tokenSupplyPerQuarter(uint256 _quarter) internal pure returns (uint96) {\\n        _require(_quarter >= 1, Errors.QUARTERS_MIN_1);\\n        if (_quarter >= 513) {\\n            return 0; // Avoid math overflow\\n        } else {\\n            uint256 firstFactor = (SafeDecimalMath.unit().add(DECAY_RATE)).powDecimal(_quarter.sub(1));\\n            uint256 supplyForQuarter = Q1_REWARDS.divideDecimal(firstFactor);\\n            return Safe3296.safe96(supplyForQuarter, 'overflow 96 bits');\\n        }\\n    }\\n\\n    /**\\n     * Calculates the quarter number for a specific time since START_TIME\\n     * @param _now      Timestamp to calculate its quarter\\n     */\\n    function _getQuarter(uint256 _now) internal view returns (uint256) {\\n        uint256 quarter = (_now.sub(START_TIME).preciseDivCeil(EPOCH_DURATION)).div(1e18);\\n        return quarter.add(1);\\n    }\\n\\n    /**\\n     * Calculates the range (starting quarter and ending quarter since START_TIME)\\n     * @param _from   Starting timestamp\\n     * @param _to     Ending timestamp\\n     */\\n    function _getRewardsWindow(uint256 _from, uint256 _to) internal view returns (uint256, uint256) {\\n        uint256 quarters = (_to.sub(_from).preciseDivCeil(EPOCH_DURATION)).div(1e18);\\n\\n        uint256 startingQuarter = (_from.sub(START_TIME).preciseDivCeil(EPOCH_DURATION)).div(1e18);\\n        uint256 endingQuarter = (_to.sub(START_TIME).preciseDivCeil(EPOCH_DURATION)).div(1e18);\\n\\n        if (\\n            startingQuarter != endingQuarter &&\\n            endingQuarter == startingQuarter.add(1) &&\\n            _to.sub(_from) < EPOCH_DURATION\\n        ) {\\n            quarters = quarters.add(1);\\n        }\\n        return (quarters.add(1), startingQuarter.add(1));\\n    }\\n\\n    /**\\n     * Set a customized profit rewards\\n     * @param _garden           Address of the garden\\n     * @param _strategistShare  New sharing profit % for strategist\\n     * @param _stewardsShare    New sharing profit % for stewards\\n     * @param _lpShare          New sharing profit % for lp\\n     */\\n    function _setProfitRewards(\\n        address _garden,\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare\\n    ) internal {\\n        _require(_strategistShare.add(_stewardsShare).add(_lpShare) == 95e16, Errors.PROFIT_SHARING_MISMATCH);\\n        // [0]: _strategistProfit , [1]: _stewardsProfit, [2]: _lpProfit\\n        if (\\n            _strategistShare != PROFIT_STRATEGIST_SHARE ||\\n            _stewardsShare != PROFIT_STEWARD_SHARE ||\\n            _lpShare != PROFIT_LP_SHARE\\n        ) {\\n            // Different from standard %\\n            gardenCustomProfitSharing[_garden] = true;\\n            gardenProfitSharing[_garden][0] = _strategistShare;\\n            gardenProfitSharing[_garden][1] = _stewardsShare;\\n            gardenProfitSharing[_garden][2] = _lpShare;\\n        }\\n    }\\n\\n    /**\\n     * Gives creator bonus to the user and returns original + bonus\\n     * @param _garden           Address of the garden\\n     * @param _contributor      Address of the contributor\\n     * @param _contributorBABL  BABL obtained in the strategy\\n     */\\n    function _getCreatorBonus(\\n        address _garden,\\n        address _contributor,\\n        uint256 _contributorBABL\\n    ) private view returns (uint256) {\\n        IGarden garden = IGarden(_garden);\\n        bool isCreator = garden.creator() == _contributor;\\n        uint8 creatorCount = garden.creator() != address(0) ? 1 : 0;\\n        for (uint8 i = 0; i < 4; i++) {\\n            address _extraCreator = garden.extraCreators(i);\\n            if (_extraCreator != address(0)) {\\n                creatorCount++;\\n                isCreator = isCreator || _extraCreator == _contributor;\\n            }\\n        }\\n        // Get a multiplier bonus in case the contributor is the garden creator\\n        if (creatorCount == 0) {\\n            // If there is no creator divide the 15% bonus across al members\\n            return\\n                _contributorBABL.add(\\n                    _contributorBABL.multiplyDecimal(CREATOR_BONUS).div(IGarden(_garden).totalContributors())\\n                );\\n        } else {\\n            if (isCreator) {\\n                // Check other creators and divide by number of creators or members if creator address is 0\\n                return _contributorBABL.add(_contributorBABL.multiplyDecimal(CREATOR_BONUS).div(creatorCount));\\n            }\\n        }\\n        return _contributorBABL;\\n    }\\n}\\n\\ncontract RewardsDistributorV5 is RewardsDistributor {}\\n\",\"keccak256\":\"0x254b354d8e6d85bd8bdf4219e31a3e53e0523c1c6cff9c8c094c3baf50629e9f\",\"license\":\"Apache License\"},\"contracts/token/TimeLockRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma experimental ABIEncoderV2;\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {TimeLockedToken} from './TimeLockedToken.sol';\\nimport {AddressArrayUtils} from '../lib/AddressArrayUtils.sol';\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\n\\n/**\\n * @title TimeLockRegistry\\n * @notice Register Lockups for TimeLocked ERC20 Token BABL (e.g. vesting)\\n * @author Babylon Finance\\n * @dev This contract allows owner to register distributions for a TimeLockedToken\\n *\\n * To register a distribution, register method should be called by the owner.\\n * claim() should be called only by the BABL Token smartcontract (modifier onlyBABLToken)\\n *  when any account registered to receive tokens make its own claim\\n * If case of a mistake, owner can cancel registration before the claim is done by the account\\n *\\n * Note this contract address must be setup in the TimeLockedToken's contract pointing\\n * to interact with (e.g. setTimeLockRegistry() function)\\n */\\n\\ncontract TimeLockRegistry is Ownable {\\n    using LowGasSafeMath for uint256;\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event Register(address receiver, uint256 distribution);\\n    event Cancel(address receiver, uint256 distribution);\\n    event Claim(address account, uint256 distribution);\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyBABLToken() {\\n        require(msg.sender == address(token), 'only BABL Token');\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // time locked token\\n    TimeLockedToken public token;\\n\\n    /**\\n     * @notice The profile of each token owner under vesting conditions and its special conditions\\n     * @param receiver Account being registered\\n     * @param investorType Indicates whether or not is a Team member (true = team member / advisor, false = private investor)\\n     * @param vestingStarting Date When the vesting begins for such token owner\\n     * @param distribution Tokens amount that receiver is due to get\\n     */\\n    struct Registration {\\n        address receiver;\\n        uint256 distribution;\\n        bool investorType;\\n        uint256 vestingStartingDate;\\n    }\\n\\n    /**\\n     * @notice The profile of each token owner under vesting conditions and its special conditions\\n     * @param team Indicates whether or not is a Team member (true = team member / advisor, false = private investor)\\n     * @param vestingBegin When the vesting begins for such token owner\\n     * @param vestingEnd When the vesting ends for such token owner\\n     * @param lastClaim When the last claim was done\\n     */\\n    struct TokenVested {\\n        bool team;\\n        bool cliff;\\n        uint256 vestingBegin;\\n        uint256 vestingEnd;\\n        uint256 lastClaim;\\n    }\\n\\n    /// @notice A record of token owners under vesting conditions for each account, by index\\n    mapping(address => TokenVested) public tokenVested;\\n\\n    // mapping from token owners under vesting conditions to BABL due amount (e.g. SAFT addresses, team members, advisors)\\n    mapping(address => uint256) public registeredDistributions;\\n\\n    // array of all registrations\\n    address[] public registrations;\\n\\n    // total amount of tokens registered\\n    uint256 public totalTokens;\\n\\n    // vesting for Team Members\\n    uint256 private constant teamVesting = 365 days * 4;\\n\\n    // vesting for Investors and Advisors\\n    uint256 private constant investorVesting = 365 days * 3;\\n\\n    /* ============ Functions ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * @notice Construct a new Time Lock Registry and gives ownership to sender\\n     * @param _token TimeLockedToken contract to use in this registry\\n     */\\n    constructor(TimeLockedToken _token) {\\n        token = _token;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Gets registrations\\n     *\\n     * @return  address[]        Returns list of registrations\\n     */\\n\\n    function getRegistrations() external view returns (address[] memory) {\\n        return registrations;\\n    }\\n\\n    /* ===========  Token related Gov Functions ====== */\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION\\n     *\\n     * @notice Register multiple investors/team in a batch\\n     * @param _registrations Registrations to process\\n     */\\n    function registerBatch(Registration[] memory _registrations) external onlyOwner {\\n        for (uint256 i = 0; i < _registrations.length; i++) {\\n            register(\\n                _registrations[i].receiver,\\n                _registrations[i].distribution,\\n                _registrations[i].investorType,\\n                _registrations[i].vestingStartingDate\\n            );\\n        }\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION\\n     *\\n     * @notice Register new account under vesting conditions (Team, Advisors, Investors e.g. SAFT purchaser)\\n     * @param receiver Address belonging vesting conditions\\n     * @param distribution Tokens amount that receiver is due to get\\n     */\\n    function register(\\n        address receiver,\\n        uint256 distribution,\\n        bool investorType,\\n        uint256 vestingStartingDate\\n    ) public onlyOwner {\\n        require(receiver != address(0), 'TimeLockRegistry::register: cannot register the zero address');\\n        require(\\n            receiver != address(this),\\n            'TimeLockRegistry::register: Time Lock Registry contract cannot be an investor'\\n        );\\n        require(distribution != 0, 'TimeLockRegistry::register: Distribution = 0');\\n        require(\\n            registeredDistributions[receiver] == 0,\\n            'TimeLockRegistry::register:Distribution for this address is already registered'\\n        );\\n        require(vestingStartingDate >= 1614553200, 'Cannot register earlier than March 2021'); // 1614553200 is UNIX TIME of 2021 March the 1st\\n        require(\\n            vestingStartingDate <= block.timestamp.add(30 days),\\n            'Cannot register more than 30 days ahead in the future'\\n        );\\n        require(totalTokens.add(distribution) <= IERC20(token).balanceOf(address(this)), 'Not enough tokens');\\n\\n        totalTokens = totalTokens.add(distribution);\\n        // register distribution\\n        registeredDistributions[receiver] = distribution;\\n        registrations.push(receiver);\\n\\n        // register token vested conditions\\n        TokenVested storage newTokenVested = tokenVested[receiver];\\n        newTokenVested.team = investorType;\\n        newTokenVested.vestingBegin = vestingStartingDate;\\n\\n        if (newTokenVested.team == true) {\\n            newTokenVested.vestingEnd = vestingStartingDate.add(teamVesting);\\n        } else {\\n            newTokenVested.vestingEnd = vestingStartingDate.add(investorVesting);\\n        }\\n        newTokenVested.lastClaim = vestingStartingDate;\\n\\n        tokenVested[receiver] = newTokenVested;\\n\\n        // emit register event\\n        emit Register(receiver, distribution);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Cancel distribution registration in case of mistake and before a claim is done\\n     *\\n     * @notice Cancel distribution registration\\n     * @dev A claim has not to be done earlier\\n     * @param receiver Address that should have it's distribution removed\\n     * @return Whether or not it succeeded\\n     */\\n    function cancelRegistration(address receiver) external onlyOwner returns (bool) {\\n        require(registeredDistributions[receiver] != 0, 'Not registered');\\n\\n        // get amount from distributions\\n        uint256 amount = registeredDistributions[receiver];\\n\\n        // set distribution mapping to 0\\n        delete registeredDistributions[receiver];\\n\\n        // set tokenVested mapping to 0\\n        delete tokenVested[receiver];\\n\\n        // remove from the list of all registrations\\n        registrations.remove(receiver);\\n\\n        // decrease total tokens\\n        totalTokens = totalTokens.sub(amount);\\n\\n        // emit cancel event\\n        emit Cancel(receiver, amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Cancel distribution registration in case of mistake and before a claim is done\\n     *\\n     * @notice Cancel already delivered tokens. It might only apply when non-completion of vesting period of Team members or Advisors\\n     * @dev An automatic override allowance is granted during the claim process\\n     * @param account Address that should have it's distribution removed\\n     * @return Whether or not it succeeded\\n     */\\n    function cancelDeliveredTokens(address account) external onlyOwner returns (bool) {\\n        uint256 loosingAmount = token.cancelVestedTokens(account);\\n\\n        // emit cancel event\\n        emit Cancel(account, loosingAmount);\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Recover tokens in Time Lock Registry smartcontract address by the owner\\n     *\\n     * @notice Send tokens from smartcontract address to the owner.\\n     * It might only apply after a cancellation of vested tokens\\n     * @param amount Amount to be recovered by the owner of the Time Lock Registry smartcontract from its balance\\n     * @return Whether or not it succeeded\\n     */\\n    function transferToOwner(uint256 amount) external onlyOwner returns (bool) {\\n        SafeERC20.safeTransfer(token, msg.sender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Claim locked tokens by the registered account\\n     *\\n     * @notice Claim tokens due amount.\\n     * @dev Claim is done by the user in the TimeLocked contract and the contract is the only allowed to call\\n     * this function on behalf of the user to make the claim\\n     * @return The amount of tokens registered and delivered after the claim\\n     */\\n    function claim(address _receiver) external onlyBABLToken returns (uint256) {\\n        require(registeredDistributions[_receiver] != 0, 'Not registered');\\n\\n        // get amount from distributions\\n        uint256 amount = registeredDistributions[_receiver];\\n        TokenVested storage claimTokenVested = tokenVested[_receiver];\\n\\n        claimTokenVested.lastClaim = block.timestamp;\\n\\n        // set distribution mapping to 0\\n        delete registeredDistributions[_receiver];\\n\\n        // decrease total tokens\\n        totalTokens = totalTokens.sub(amount);\\n\\n        // register lockup in TimeLockedToken\\n        // this will transfer funds from this contract and lock them for sender\\n        token.registerLockup(\\n            _receiver,\\n            amount,\\n            claimTokenVested.team,\\n            claimTokenVested.vestingBegin,\\n            claimTokenVested.vestingEnd,\\n            claimTokenVested.lastClaim\\n        );\\n\\n        // set tokenVested mapping to 0\\n        delete tokenVested[_receiver];\\n\\n        // emit claim event\\n        emit Claim(_receiver, amount);\\n\\n        return amount;\\n    }\\n\\n    /* ============ Getter Functions ============ */\\n\\n    function checkVesting(address address_)\\n        external\\n        view\\n        returns (\\n            bool team,\\n            uint256 start,\\n            uint256 end,\\n            uint256 last\\n        )\\n    {\\n        TokenVested storage checkTokenVested = tokenVested[address_];\\n\\n        return (\\n            checkTokenVested.team,\\n            checkTokenVested.vestingBegin,\\n            checkTokenVested.vestingEnd,\\n            checkTokenVested.lastClaim\\n        );\\n    }\\n\\n    function checkRegisteredDistribution(address address_) external view returns (uint256 amount) {\\n        return registeredDistributions[address_];\\n    }\\n}\\n\",\"keccak256\":\"0xd059503554dc556e20b8763b4e37e288273a048250b0761f1fb21884dc4c4af2\",\"license\":\"Apache License\"},\"contracts/token/TimeLockedToken.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport 'hardhat/console.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {TimeLockRegistry} from './TimeLockRegistry.sol';\\nimport {IRewardsDistributor} from '../interfaces/IRewardsDistributor.sol';\\nimport {VoteToken} from './VoteToken.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {Errors, _require} from '../lib/BabylonErrors.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\n/**\\n * @title TimeLockedToken\\n * @notice Time Locked ERC20 Token\\n * @author Babylon Finance\\n * @dev Contract which gives the ability to time-lock tokens specially for vesting purposes usage\\n *\\n * By overriding the balanceOf() and transfer() functions in ERC20,\\n * an account can show its full, post-distribution balance and use it for voting power\\n * but only transfer or spend up to an allowed amount\\n *\\n * A portion of previously non-spendable tokens are allowed to be transferred\\n * along the time depending on each vesting conditions, and after all epochs have passed, the full\\n * account balance is unlocked. In case on non-completion vesting period, only the Time Lock Registry can cancel\\n * the delivery of the pending tokens and only can cancel the remaining locked ones.\\n */\\n\\nabstract contract TimeLockedToken is VoteToken {\\n    using LowGasSafeMath for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    /// @notice An event that emitted when a new lockout ocurr\\n    event NewLockout(\\n        address account,\\n        uint256 tokenslocked,\\n        bool isTeamOrAdvisor,\\n        uint256 startingVesting,\\n        uint256 endingVesting\\n    );\\n\\n    /// @notice An event that emitted when a new Time Lock is registered\\n    event NewTimeLockRegistration(address previousAddress, address newAddress);\\n\\n    /// @notice An event that emitted when a new Rewards Distributor is registered\\n    event NewRewardsDistributorRegistration(address previousAddress, address newAddress);\\n\\n    /// @notice An event that emitted when a cancellation of Lock tokens is registered\\n    event Cancel(address account, uint256 amount);\\n\\n    /// @notice An event that emitted when a claim of tokens are registered\\n    event Claim(address _receiver, uint256 amount);\\n\\n    /// @notice An event that emitted when a lockedBalance query is done\\n    event LockedBalance(address _account, uint256 amount);\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyTimeLockRegistry() {\\n        require(\\n            msg.sender == address(timeLockRegistry),\\n            'TimeLockedToken:: onlyTimeLockRegistry: can only be executed by TimeLockRegistry'\\n        );\\n        _;\\n    }\\n\\n    modifier onlyTimeLockOwner() {\\n        if (address(timeLockRegistry) != address(0)) {\\n            require(\\n                msg.sender == Ownable(timeLockRegistry).owner(),\\n                'TimeLockedToken:: onlyTimeLockOwner: can only be executed by the owner of TimeLockRegistry'\\n            );\\n        }\\n        _;\\n    }\\n    modifier onlyUnpaused() {\\n        // Do not execute if Globally or individually paused\\n        _require(!IBabController(controller).isPaused(address(this)), Errors.ONLY_UNPAUSED);\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // represents total distribution for locked balances\\n    mapping(address => uint256) distribution;\\n\\n    /// @notice The profile of each token owner under its particular vesting conditions\\n    /**\\n     * @param team Indicates whether or not is a Team member or Advisor (true = team member/advisor, false = private investor)\\n     * @param vestingBegin When the vesting begins for such token owner\\n     * @param vestingEnd When the vesting ends for such token owner\\n     * @param lastClaim When the last claim was done\\n     */\\n    struct VestedToken {\\n        bool teamOrAdvisor;\\n        uint256 vestingBegin;\\n        uint256 vestingEnd;\\n        uint256 lastClaim;\\n    }\\n\\n    /// @notice A record of token owners under vesting conditions for each account, by index\\n    mapping(address => VestedToken) public vestedToken;\\n\\n    // address of Time Lock Registry contract\\n    IBabController public controller;\\n\\n    // address of Time Lock Registry contract\\n    TimeLockRegistry public timeLockRegistry;\\n\\n    // address of Rewards Distriburor contract\\n    IRewardsDistributor public rewardsDistributor;\\n\\n    // Enable Transfer of ERC20 BABL Tokens\\n    // Only Minting or transfers from/to TimeLockRegistry and Rewards Distributor can transfer tokens until the protocol is fully decentralized\\n    bool private tokenTransfersEnabled;\\n    bool private tokenTransfersWereDisabled;\\n\\n    /* ============ Functions ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(string memory _name, string memory _symbol) VoteToken(_name, _symbol) {\\n        tokenTransfersEnabled = true;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ===========  Token related Gov Functions ====== */\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Disables transfers of ERC20 BABL Tokens\\n     */\\n    function disableTokensTransfers() external onlyOwner {\\n        require(!tokenTransfersWereDisabled, 'BABL must flow');\\n        tokenTransfersEnabled = false;\\n        tokenTransfersWereDisabled = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Allows transfers of ERC20 BABL Tokens\\n     * Can only happen after the protocol is fully decentralized.\\n     */\\n    function enableTokensTransfers() external onlyOwner {\\n        tokenTransfersEnabled = true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Set the Time Lock Registry contract to control token vesting conditions\\n     *\\n     * @notice Set the Time Lock Registry contract to control token vesting conditions\\n     * @param newTimeLockRegistry Address of TimeLockRegistry contract\\n     */\\n    function setTimeLockRegistry(TimeLockRegistry newTimeLockRegistry) external onlyTimeLockOwner returns (bool) {\\n        require(address(newTimeLockRegistry) != address(0), 'cannot be zero address');\\n        require(address(newTimeLockRegistry) != address(this), 'cannot be this contract');\\n        require(address(newTimeLockRegistry) != address(timeLockRegistry), 'must be new TimeLockRegistry');\\n        emit NewTimeLockRegistration(address(timeLockRegistry), address(newTimeLockRegistry));\\n\\n        timeLockRegistry = newTimeLockRegistry;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Set the Rewards Distributor contract to control either BABL Mining or profit rewards\\n     *\\n     * @notice Set the Rewards Distriburor contract to control both types of rewards (profit and BABL Mining program)\\n     * @param newRewardsDistributor Address of Rewards Distributor contract\\n     */\\n    function setRewardsDistributor(IRewardsDistributor newRewardsDistributor) external onlyOwner returns (bool) {\\n        require(address(newRewardsDistributor) != address(0), 'cannot be zero address');\\n        require(address(newRewardsDistributor) != address(this), 'cannot be this contract');\\n        require(address(newRewardsDistributor) != address(rewardsDistributor), 'must be new Rewards Distributor');\\n        emit NewRewardsDistributorRegistration(address(rewardsDistributor), address(newRewardsDistributor));\\n\\n        rewardsDistributor = newRewardsDistributor;\\n\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Register new token lockup conditions for vested tokens defined only by Time Lock Registry\\n     *\\n     * @notice Tokens are completely delivered during the registration however lockup conditions apply for vested tokens\\n     * locking them according to the distribution epoch periods and the type of recipient (Team, Advisor, Investor)\\n     * Emits a transfer event showing a transfer to the recipient\\n     * Only the registry can call this function\\n     * @param _receiver Address to receive the tokens\\n     * @param _amount Tokens to be transferred\\n     * @param _profile True if is a Team Member or Advisor\\n     * @param _vestingBegin Unix Time when the vesting for that particular address\\n     * @param _vestingEnd Unix Time when the vesting for that particular address\\n     * @param _lastClaim Unix Time when the claim was done from that particular address\\n     *\\n     */\\n    function registerLockup(\\n        address _receiver,\\n        uint256 _amount,\\n        bool _profile,\\n        uint256 _vestingBegin,\\n        uint256 _vestingEnd,\\n        uint256 _lastClaim\\n    ) external onlyTimeLockRegistry returns (bool) {\\n        require(balanceOf(msg.sender) >= _amount, 'insufficient balance');\\n        require(_receiver != address(0), 'cannot be zero address');\\n        require(_receiver != address(this), 'cannot be this contract');\\n        require(_receiver != address(timeLockRegistry), 'cannot be the TimeLockRegistry contract itself');\\n        require(_receiver != msg.sender, 'the owner cannot lockup itself');\\n\\n        // update amount of locked distribution\\n        distribution[_receiver] = distribution[_receiver].add(_amount);\\n\\n        VestedToken storage newVestedToken = vestedToken[_receiver];\\n\\n        newVestedToken.teamOrAdvisor = _profile;\\n        newVestedToken.vestingBegin = _vestingBegin;\\n        newVestedToken.vestingEnd = _vestingEnd;\\n        newVestedToken.lastClaim = _lastClaim;\\n\\n        // transfer tokens to the recipient\\n        _transfer(msg.sender, _receiver, _amount);\\n        emit NewLockout(_receiver, _amount, _profile, _vestingBegin, _vestingEnd);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Cancel and remove locked tokens due to non-completion of vesting period\\n     * applied only by Time Lock Registry and specifically to Team or Advisors as it does not apply to investors.\\n     *\\n     * @dev Cancel distribution registration\\n     * @param lockedAccount that should have its still locked distribution removed due to non-completion of its vesting period\\n     */\\n    function cancelVestedTokens(address lockedAccount) external onlyTimeLockRegistry returns (uint256) {\\n        return _cancelVestedTokensFromTimeLock(lockedAccount);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Each token owner can claim its own specific tokens with its own specific vesting conditions from the Time Lock Registry\\n     *\\n     * @dev Claim msg.sender tokens (if any available in the registry)\\n     */\\n    function claimMyTokens() external {\\n        // claim msg.sender tokens from timeLockRegistry\\n        uint256 amount = timeLockRegistry.claim(msg.sender);\\n        // After a proper claim, locked tokens of Team and Advisors profiles are under restricted special vesting conditions so they automatic grant\\n        // rights to the Time Lock Registry to only retire locked tokens if non-compliance vesting conditions take places along the vesting periods.\\n        // It does not apply to Investors under vesting (their locked tokens cannot be removed).\\n        if (vestedToken[msg.sender].teamOrAdvisor == true) {\\n            approve(address(timeLockRegistry), amount);\\n        }\\n        // emit claim event\\n        emit Claim(msg.sender, amount);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Get unlocked balance for an account\\n     *\\n     * @notice Get unlocked balance for an account\\n     * @param account Account to check\\n     * @return Amount that is unlocked and available eg. to transfer\\n     */\\n    function unlockedBalance(address account) public returns (uint256) {\\n        // totalBalance - lockedBalance\\n        return balanceOf(account).sub(lockedBalance(account));\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. View the locked balance for an account\\n     *\\n     * @notice View locked balance for an account\\n     * @param account Account to check\\n     * @return Amount locked in the time of checking\\n     */\\n\\n    function viewLockedBalance(address account) public view returns (uint256) {\\n        // distribution of locked tokens\\n        // get amount from distributions\\n\\n        uint256 amount = distribution[account];\\n        uint256 lockedAmount = amount;\\n\\n        // Team and investors cannot transfer tokens in the first year\\n        if (vestedToken[account].vestingBegin.add(365 days) > block.timestamp && amount != 0) {\\n            return lockedAmount;\\n        }\\n\\n        // in case of vesting has passed, all tokens are now available, if no vesting lock is 0 as well\\n        if (block.timestamp >= vestedToken[account].vestingEnd || amount == 0) {\\n            lockedAmount = 0;\\n        } else if (amount != 0) {\\n            // in case of still under vesting period, locked tokens are recalculated\\n            lockedAmount = amount.mul(vestedToken[account].vestingEnd.sub(block.timestamp)).div(\\n                vestedToken[account].vestingEnd.sub(vestedToken[account].vestingBegin)\\n            );\\n        }\\n        return lockedAmount;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Get locked balance for an account\\n     *\\n     * @notice Get locked balance for an account\\n     * @param account Account to check\\n     * @return Amount locked in the time of checking\\n     */\\n    function lockedBalance(address account) public returns (uint256) {\\n        // get amount from distributions locked tokens (if any)\\n        uint256 lockedAmount = viewLockedBalance(account);\\n        // in case of vesting has passed, all tokens are now available so we set mapping to 0 only for accounts under vesting\\n        if (\\n            block.timestamp >= vestedToken[account].vestingEnd &&\\n            msg.sender == account &&\\n            lockedAmount == 0 &&\\n            vestedToken[account].vestingEnd != 0\\n        ) {\\n            delete distribution[account];\\n        }\\n        emit LockedBalance(account, lockedAmount);\\n        return lockedAmount;\\n    }\\n\\n    /**\\n     * PUBLIC FUNCTION. Get the address of Time Lock Registry\\n     *\\n     * @notice Get the address of Time Lock Registry\\n     * @return Address of the Time Lock Registry\\n     */\\n    function getTimeLockRegistry() external view returns (address) {\\n        return address(timeLockRegistry);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Override the Approval of allowances of ERC20 with special conditions for vesting\\n     *\\n     * @notice Override of \\\"Approve\\\" function to allow the `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender` except in the case of spender is Time Lock Registry\\n     * and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 rawAmount) public override nonReentrant returns (bool) {\\n        require(spender != address(0), 'TimeLockedToken::approve: spender cannot be zero address');\\n        require(spender != msg.sender, 'TimeLockedToken::approve: spender cannot be the msg.sender');\\n\\n        uint96 amount;\\n        if (rawAmount == uint256(-1)) {\\n            amount = uint96(-1);\\n        } else {\\n            amount = safe96(rawAmount, 'TimeLockedToken::approve: amount exceeds 96 bits');\\n        }\\n\\n        // There is no option to decreaseAllowance to timeLockRegistry in case of vested tokens\\n        if ((spender == address(timeLockRegistry)) && (amount < allowance(msg.sender, address(timeLockRegistry)))) {\\n            amount = safe96(\\n                allowance(msg.sender, address(timeLockRegistry)),\\n                'TimeLockedToken::approve: cannot decrease allowance to timelockregistry'\\n            );\\n        }\\n        _approve(msg.sender, spender, amount);\\n        emit Approval(msg.sender, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Override the Increase of allowances of ERC20 with special conditions for vesting\\n     *\\n     * @notice Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * @dev This is an override with respect to the fulfillment of vesting conditions along the way\\n     * However an user can increase allowance many times, it will never be able to transfer locked tokens during vesting period\\n     * @return Whether or not the increaseAllowance succeeded\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public override nonReentrant returns (bool) {\\n        require(\\n            unlockedBalance(msg.sender) >= allowance(msg.sender, spender).add(addedValue) ||\\n                spender == address(timeLockRegistry),\\n            'TimeLockedToken::increaseAllowance:Not enough unlocked tokens'\\n        );\\n        require(spender != address(0), 'TimeLockedToken::increaseAllowance:Spender cannot be zero address');\\n        require(spender != msg.sender, 'TimeLockedToken::increaseAllowance:Spender cannot be the msg.sender');\\n        _approve(msg.sender, spender, allowance(msg.sender, spender).add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Override the decrease of allowances of ERC20 with special conditions for vesting\\n     *\\n     * @notice Atomically decrease the allowance granted to `spender` by the caller.\\n     *\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     * This is an override with respect to the fulfillment of vesting conditions along the way\\n     * An user cannot decrease the allowance to the Time Lock Registry who is in charge of vesting conditions\\n     * @return Whether or not the decreaseAllowance succeeded\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override nonReentrant returns (bool) {\\n        require(spender != address(0), 'TimeLockedToken::decreaseAllowance:Spender cannot be zero address');\\n        require(spender != msg.sender, 'TimeLockedToken::decreaseAllowance:Spender cannot be the msg.sender');\\n        require(\\n            allowance(msg.sender, spender) >= subtractedValue,\\n            'TimeLockedToken::decreaseAllowance:Underflow condition'\\n        );\\n\\n        // There is no option to decreaseAllowance to timeLockRegistry in case of vested tokens\\n        require(\\n            address(spender) != address(timeLockRegistry),\\n            'TimeLockedToken::decreaseAllowance:cannot decrease allowance to timeLockRegistry'\\n        );\\n\\n        _approve(msg.sender, spender, allowance(msg.sender, spender).sub(subtractedValue));\\n        return true;\\n    }\\n\\n    /* ============ Internal Only Function ============ */\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Override the _transfer of ERC20 BABL tokens only allowing the transfer of unlocked tokens\\n     *\\n     * @dev Transfer function which includes only unlocked tokens\\n     * Locked tokens can always be transfered back to the returns address\\n     * Transferring to owner allows re-issuance of funds through registry\\n     *\\n     * @param _from The address to send tokens from\\n     * @param _to The address that will receive the tokens\\n     * @param _value The amount of tokens to be transferred\\n     */\\n    function _transfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal override onlyUnpaused {\\n        require(_from != address(0), 'TimeLockedToken:: _transfer: cannot transfer from the zero address');\\n        require(_to != address(0), 'TimeLockedToken:: _transfer: cannot transfer to the zero address');\\n        require(\\n            _to != address(this),\\n            'TimeLockedToken:: _transfer: do not transfer tokens to the token contract itself'\\n        );\\n\\n        require(balanceOf(_from) >= _value, 'TimeLockedToken:: _transfer: insufficient balance');\\n\\n        // check if enough unlocked balance to transfer\\n        require(unlockedBalance(_from) >= _value, 'TimeLockedToken:: _transfer: attempting to transfer locked funds');\\n        super._transfer(_from, _to, _value);\\n        // voting power\\n        _moveDelegates(\\n            delegates[_from],\\n            delegates[_to],\\n            safe96(_value, 'TimeLockedToken:: _transfer: uint96 overflow')\\n        );\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Disable BABL token transfer until certain conditions are met\\n     *\\n     * @dev Override the _beforeTokenTransfer of ERC20 BABL tokens until certain conditions are met:\\n     * Only allowing minting or transfers from Time Lock Registry and Rewards Distributor until transfers are allowed in the controller\\n     * Transferring to owner allows re-issuance of funds through registry\\n     *\\n     * @param _from The address to send tokens from\\n     * @param _to The address that will receive the tokens\\n     * @param _value The amount of tokens to be transferred\\n     */\\n\\n    // Disable garden token transfers. Allow minting and burning.\\n    function _beforeTokenTransfer(\\n        address _from,\\n        address _to,\\n        uint256 _value\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(_from, _to, _value);\\n        _require(\\n            _from == address(0) ||\\n                _from == address(timeLockRegistry) ||\\n                _from == address(rewardsDistributor) ||\\n                _to == address(timeLockRegistry) ||\\n                tokenTransfersEnabled,\\n            Errors.BABL_TRANSFERS_DISABLED\\n        );\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Cancel and remove locked tokens due to non-completion of  vesting period\\n     * applied only by Time Lock Registry and specifically to Team or Advisors\\n     *\\n     * @dev Cancel distribution registration\\n     * @param lockedAccount that should have its still locked distribution removed due to non-completion of its vesting period\\n     */\\n    function _cancelVestedTokensFromTimeLock(address lockedAccount) internal onlyTimeLockRegistry returns (uint256) {\\n        require(distribution[lockedAccount] != 0, 'TimeLockedToken::cancelTokens:Not registered');\\n\\n        // get an update on locked amount from distributions at this precise moment\\n        uint256 loosingAmount = lockedBalance(lockedAccount);\\n\\n        require(loosingAmount > 0, 'TimeLockedToken::cancelTokens:There are no more locked tokens');\\n        require(\\n            vestedToken[lockedAccount].teamOrAdvisor == true,\\n            'TimeLockedToken::cancelTokens:cannot cancel locked tokens to Investors'\\n        );\\n\\n        // set distribution mapping to 0\\n        delete distribution[lockedAccount];\\n\\n        // set tokenVested mapping to 0\\n        delete vestedToken[lockedAccount];\\n\\n        // transfer only locked tokens back to TimeLockRegistry Owner (msg.sender)\\n        require(\\n            transferFrom(lockedAccount, address(timeLockRegistry), loosingAmount),\\n            'TimeLockedToken::cancelTokens:Transfer failed'\\n        );\\n\\n        // emit cancel event\\n        emit Cancel(lockedAccount, loosingAmount);\\n\\n        return loosingAmount;\\n    }\\n}\\n\",\"keccak256\":\"0x25fee22ead7935a7fad318fb920a4481183316884b7362ef75b24195b92d50f8\",\"license\":\"Apache License\"},\"contracts/token/VoteToken.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport 'hardhat/console.sol';\\n\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IVoteToken} from '../interfaces/IVoteToken.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {Context} from '@openzeppelin/contracts/utils/Context.sol';\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\n\\n/**\\n * @title VoteToken\\n * @notice Custom token which tracks voting power for governance\\n * @dev This is an abstraction of a fork of the Compound governance contract\\n * VoteToken is used by BABL to allow tracking voting power\\n * Checkpoints are created every time state is changed which record voting power\\n * Inherits standard ERC20 behavior\\n */\\n\\nabstract contract VoteToken is Context, ERC20, Ownable, IVoteToken, ReentrancyGuard {\\n    using LowGasSafeMath for uint256;\\n    using Address for address;\\n\\n    /* ============ Events ============ */\\n\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ State Variables ============ */\\n\\n    /// @notice The EIP-712 typehash for the contract's domain\\n    bytes32 public constant DOMAIN_TYPEHASH =\\n        keccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\\n\\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\\n    bytes32 public constant DELEGATION_TYPEHASH =\\n        keccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\\n\\n    /// @dev A record of votes checkpoints for each account, by index\\n    mapping(address => address) public delegates;\\n\\n    /// @notice A checkpoint for marking number of votes from a given block\\n    struct Checkpoint {\\n        uint32 fromBlock;\\n        uint96 votes;\\n    }\\n\\n    /// @notice A record of votes checkpoints for each account, by index\\n    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\\n\\n    /// @notice The number of checkpoints for each account\\n    mapping(address => uint32) public numCheckpoints;\\n\\n    /// @notice A record of states for signing / validating signatures\\n    mapping(address => uint256) public nonces;\\n\\n    /* ============ Functions ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ===========  Token related Gov Functions ====== */\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Delegating votes from msg.sender to delegatee\\n     *\\n     * @notice Delegate votes from `msg.sender` to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     */\\n\\n    function delegate(address delegatee) external override {\\n        return _delegate(msg.sender, delegatee);\\n    }\\n\\n    /**\\n     * PRIVILEGED GOVERNANCE FUNCTION. Delegate votes using signature to 'delegatee'\\n     *\\n     * @notice Delegates votes from signatory to `delegatee`\\n     * @param delegatee The address to delegate votes to\\n     * @param nonce The contract state required to match the signature\\n     * @param expiry The time at which to expire the signature\\n     * @param v The recovery byte of the signature\\n     * @param r Half of the ECDSA signature pair\\n     * @param s Half of the ECDSA signature pair\\n     */\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bool prefix\\n    ) external override {\\n        address signatory;\\n        bytes32 domainSeparator =\\n            keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\\n        bytes32 digest = keccak256(abi.encodePacked('\\\\x19\\\\x01', domainSeparator, structHash));\\n        if (prefix) {\\n            bytes32 digestHash = keccak256(abi.encodePacked('\\\\x19Ethereum Signed Message:\\\\n32', digest));\\n            signatory = ecrecover(digestHash, v, r, s);\\n        } else {\\n            signatory = ecrecover(digest, v, r, s);\\n        }\\n\\n        require(balanceOf(signatory) > 0, 'VoteToken::delegateBySig: invalid delegator');\\n        require(signatory != address(0), 'VoteToken::delegateBySig: invalid signature');\\n        require(nonce == nonces[signatory], 'VoteToken::delegateBySig: invalid nonce');\\n        nonces[signatory]++;\\n        require(block.timestamp <= expiry, 'VoteToken::delegateBySig: signature expired');\\n        return _delegate(signatory, delegatee);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Check Delegate votes using signature to 'delegatee'\\n     *\\n     * @notice Get current voting power for an account\\n     * @param account Account to get voting power for\\n     * @return Voting power for an account\\n     */\\n    function getCurrentVotes(address account) external view virtual override returns (uint96) {\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Get voting power at a specific block for an account\\n     *\\n     * @param account Account to get voting power for\\n     * @param blockNumber Block to get voting power at\\n     * @return Voting power for an account at specific block\\n     */\\n    function getPriorVotes(address account, uint256 blockNumber) external view virtual override returns (uint96) {\\n        require(blockNumber < block.number, 'BABLToken::getPriorVotes: not yet determined');\\n        uint32 nCheckpoints = numCheckpoints[account];\\n        if (nCheckpoints == 0) {\\n            return 0;\\n        }\\n\\n        // First check most recent balance\\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\\n            return checkpoints[account][nCheckpoints - 1].votes;\\n        }\\n\\n        // Next check implicit zero balance\\n        if (checkpoints[account][0].fromBlock > blockNumber) {\\n            return 0;\\n        }\\n\\n        uint32 lower = 0;\\n        uint32 upper = nCheckpoints - 1;\\n        while (upper > lower) {\\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\\n            Checkpoint memory cp = checkpoints[account][center];\\n            if (cp.fromBlock == blockNumber) {\\n                return cp.votes;\\n            } else if (cp.fromBlock < blockNumber) {\\n                lower = center;\\n            } else {\\n                upper = center - 1;\\n            }\\n        }\\n        return checkpoints[account][lower].votes;\\n    }\\n\\n    function getMyDelegatee() external view override returns (address) {\\n        return delegates[msg.sender];\\n    }\\n\\n    function getDelegatee(address account) external view override returns (address) {\\n        return delegates[account];\\n    }\\n\\n    function getCheckpoints(address account, uint32 id)\\n        external\\n        view\\n        override\\n        returns (uint32 fromBlock, uint96 votes)\\n    {\\n        Checkpoint storage getCheckpoint = checkpoints[account][id];\\n        return (getCheckpoint.fromBlock, getCheckpoint.votes);\\n    }\\n\\n    function getNumberOfCheckpoints(address account) external view override returns (uint32) {\\n        return numCheckpoints[account];\\n    }\\n\\n    /* ============ Internal Only Function ============ */\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Make a delegation\\n     *\\n     * @dev Internal function to delegate voting power to an account\\n     * @param delegator The address of the account delegating votes from\\n     * @param delegatee The address to delegate votes to\\n     */\\n\\n    function _delegate(address delegator, address delegatee) internal {\\n        address currentDelegate = delegates[delegator];\\n        uint96 delegatorBalance = safe96(_balanceOf(delegator), 'VoteToken::_delegate: uint96 overflow');\\n        delegates[delegator] = delegatee;\\n\\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\\n\\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\\n    }\\n\\n    function _balanceOf(address account) internal view virtual returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Move the delegates\\n     *\\n     * @dev Internal function to move delegates between accounts\\n     * @param srcRep The address of the account delegating votes from\\n     * @param dstRep The address of the account delegating votes to\\n     * @param amount The voting power to move\\n     */\\n    function _moveDelegates(\\n        address srcRep,\\n        address dstRep,\\n        uint96 amount\\n    ) internal {\\n        if (srcRep != dstRep && amount > 0) {\\n            // It must not revert but do nothing in cases of address(0) being part of the move\\n            // Sub voting amount to source in case it is not the zero address (e.g. transfers)\\n            if (srcRep != address(0)) {\\n                uint32 srcRepNum = numCheckpoints[srcRep];\\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\\n                uint96 srcRepNew = sub96(srcRepOld, amount, 'VoteToken::_moveDelegates: vote amount underflows');\\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\\n            }\\n            if (dstRep != address(0)) {\\n                // Add it to destination in case it is not the zero address (e.g. any transfer of tokens or delegations except a first mint to a specific address)\\n                uint32 dstRepNum = numCheckpoints[dstRep];\\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\\n                uint96 dstRepNew = add96(dstRepOld, amount, 'VoteToken::_moveDelegates: vote amount overflows');\\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION. Internal function to write a checkpoint for voting power\\n     *\\n     * @dev internal function to write a checkpoint for voting power\\n     * @param delegatee The address of the account delegating votes to\\n     * @param nCheckpoints The num checkpoint\\n     * @param oldVotes The previous voting power\\n     * @param newVotes The new voting power\\n     */\\n    function _writeCheckpoint(\\n        address delegatee,\\n        uint32 nCheckpoints,\\n        uint96 oldVotes,\\n        uint96 newVotes\\n    ) internal {\\n        uint32 blockNumber = safe32(block.number, 'VoteToken::_writeCheckpoint: block number exceeds 32 bits');\\n\\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\\n        } else {\\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\\n            numCheckpoints[delegatee] = nCheckpoints + 1;\\n        }\\n\\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to convert from uint256 to uint32\\n     *\\n     * @dev internal function to convert from uint256 to uint32\\n     */\\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\\n        require(n < 2**32, errorMessage);\\n        return uint32(n);\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to convert from uint256 to uint96\\n     *\\n     * @dev internal function to convert from uint256 to uint96\\n     */\\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\\n        require(n < 2**96, errorMessage);\\n        return uint96(n);\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to add two uint96 numbers\\n     *\\n     * @dev internal safe math function to add two uint96 numbers\\n     */\\n    function add96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        uint96 c = a + b;\\n        require(c >= a, errorMessage);\\n        return c;\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to subtract two uint96 numbers\\n     *\\n     * @dev internal safe math function to subtract two uint96 numbers\\n     */\\n    function sub96(\\n        uint96 a,\\n        uint96 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint96) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * INTERNAL FUNCTION. Internal function to get chain ID\\n     *\\n     * @dev internal function to get chain ID\\n     */\\n    function getChainId() internal pure returns (uint256) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        return chainId;\\n    }\\n}\\n\",\"keccak256\":\"0x0596c61f16a4a76c9c94308e95af63e66cd5e59006a6add46b54c059415b86ca\",\"license\":\"Apache License\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615f4380620000216000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c806380334dbe116100d8578063bad67dd11161008c578063ddaa26ad11610066578063ddaa26ad146105e8578063ef9f3450146105f0578063f2fde38b1461061657610177565b8063bad67dd114610537578063cf1493871461057b578063d717a506146105c357610177565b80639de9a052116100bd5780639de9a052146104915780639e839e1b146104b7578063a8d9a7811461050b57610177565b806380334dbe146104355780638da5cb5b1461046d57610177565b806369795e931161012f57806373a9fd9f1161011457806373a9fd9f146103a15780637602bdde146103df57806379fc904f1461042d57610177565b806369795e93146102c0578063715018a61461039957610177565b806340a323ae1161016057806340a323ae1461022b578063485cc9551461026a5780635668c8f01461029a57610177565b8063070e8a4a1461017c5780632544dc18146101da575b600080fd5b6101a26004803603602081101561019257600080fd5b50356001600160a01b031661063c565b6040518082606080838360005b838110156101c75781810151838201526020016101af565b5050505090500191505060405180910390f35b6101f7600480360360208110156101f057600080fd5b50356106d8565b604080519485526020850193909352838301919091526bffffffffffffffffffffffff166060830152519081900360800190f35b6102516004803603602081101561024157600080fd5b50356001600160a01b031661070e565b6040805192835260208301919091528051918290030190f35b6102986004803603604081101561028057600080fd5b506001600160a01b0381358116916020013516610731565b005b610251600480360360208110156102b057600080fd5b50356001600160a01b0316610964565b610349600480360360608110156102d657600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561030a57600080fd5b82018360208201111561031c57600080fd5b8035906020019184602083028401116401000000008311171561033e57600080fd5b50909250905061097d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561038557818101518382015260200161036d565b505050509050019250505060405180910390f35b610298610c5d565b6103be600480360360208110156103b757600080fd5b5035610d1b565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b61041b600480360360808110156103f557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610d2c565b60408051918252519081900360200190f35b610298610d43565b6102986004803603608081101561044b57600080fd5b506001600160a01b038135169060208101359060408101359060600135610e69565b610475610f32565b604080516001600160a01b039092168252519081900360200190f35b6103be600480360360208110156104a757600080fd5b50356001600160a01b0316610f41565b6104e3600480360360408110156104cd57600080fd5b506001600160a01b0381351690602001356117c3565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102986004803603604081101561052157600080fd5b506001600160a01b0381351690602001356117f8565b610298600480360360a081101561054d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013515159060800135611969565b6105986004803603602081101561059157600080fd5b5035611a0c565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b610298600480360360408110156105d957600080fd5b50803590602001351515611a3b565b61041b611cf1565b6102986004803603602081101561060657600080fd5b50356001600160a01b0316611cf7565b6102986004803603602081101561062c57600080fd5b50356001600160a01b0316611e09565b610644615e43565b6001600160a01b03821660009081526080602052604090205460ff16156106af576001600160a01b0382166000908152607f602052604090819020815160608101928390529160039082845b81548152602001906001019080831161069057505050505090506106d3565b60405180606001604052806069548152602001606a548152602001606b5481525090505b919050565b600090815260746020526040902080546001820154600283015460039093015491939092916bffffffffffffffffffffffff1690565b6001600160a01b03166000908152607d6020526040902080546001909101549091565b610739611f1e565b61074f6001600160a01b03831615156017611fd0565b6107656001600160a01b03821615156017611fd0565b606f80546001600160a01b038085166001600160a01b031992831617909255606e805484841692169190911790819055604080517ff142c3bc0000000000000000000000000000000000000000000000000000000081529051919092169163f142c3bc916004808301926080929190829003018186803b1580156107e857600080fd5b505afa1580156107fc573d6000803e3d6000fd5b505050506040513d608081101561081257600080fd5b5080516020820151604080840151606094850151606d55606855606791909155606691909155606e5481517f2e0519cf00000000000000000000000000000000000000000000000000000000815291516001600160a01b0390911692632e0519cf9260048082019391829003018186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d60608110156108b957600080fd5b508051602080830151604093840151606b55606a55606991909155606e5482517f568c081300000000000000000000000000000000000000000000000000000000815292516001600160a01b039091169263568c0813926004808301939192829003018186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d602081101561095657600080fd5b5051606c5550506001607e55565b607d602052600090815260409020805460019091015482565b6040805160078082526101008201909252606091600091906020820160e08036833701905050606e546040805163364d118160e01b81526001600160a01b038a811660048301529151939450610a2a93919092169163364d1181916024808301926020929190829003018186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d6020811015610a2157600080fd5b50516023611fd0565b60005b83811015610c515760408051600780825261010082019092526000916020820160e080368337019050509050610a7f88878785818110610a6957fe5b905060200201356001600160a01b031689611fe2565b9050610abc81600081518110610a9157fe5b602002602001015184600081518110610aa657fe5b60200260200101516124f390919063ffffffff16565b83600081518110610ac957fe5b602002602001018181525050610afa81600181518110610ae557fe5b602002602001015184600181518110610aa657fe5b83600181518110610b0757fe5b602002602001018181525050610b3881600281518110610b2357fe5b602002602001015184600281518110610aa657fe5b83600281518110610b4557fe5b602002602001018181525050610b7681600381518110610b6157fe5b602002602001015184600381518110610aa657fe5b83600381518110610b8357fe5b602002602001018181525050610bb481600481518110610b9f57fe5b602002602001015184600481518110610aa657fe5b83600481518110610bc157fe5b602002602001018181525050610bf281600581518110610bdd57fe5b602002602001015184600581518110610aa657fe5b83600581518110610bff57fe5b602002602001018181525050610c3081600681518110610c1b57fe5b602002602001015184600681518110610aa657fe5b83600681518110610c3d57fe5b602090810291909101015250600101610a2d565b5090505b949350505050565b610c65612503565b6001600160a01b0316610c76610f32565b6001600160a01b031614610cd1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6000610d2682612507565b92915050565b6000610d3a858585856125ae565b95945050505050565b606e54604080516313bc6d4b60e01b81523360048201529051610dc2926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b505afa158015610da3573d6000803e3d6000fd5b505050506040513d6020811015610db957600080fd5b50516048611fd0565b606e54610ddb906001600160a01b031633146010611fd0565b606e5460408051635b14f18360e01b81523060048201529051610e5b926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d6020811015610e5157600080fd5b5051156053611fd0565b606554610e6757426065555b565b606e54604080516313bc6d4b60e01b81523360048201529051610eb5926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b606e54610ece906001600160a01b031633146010611fd0565b606e546040805163364d118160e01b81526001600160a01b0387811660048301529151610f2093929092169163364d118191602480820192602092909190829003018186803b1580156109f757600080fd5b610f2c84848484612a77565b50505050565b6033546001600160a01b031690565b604080516003808252608082019092526000918391839160208201606080368337019050509050816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b158015610fa157600080fd5b505afa158015610fb5573d6000803e3d6000fd5b505050506040513d60e0811015610fcb57600080fd5b50608081015160a082015160c09092015183519192918490600090610fec57fe5b602002602001018460018151811061100057fe5b602002602001018560028151811061101457fe5b6020026020010183815250838152508381525050505061104d8160018151811061103a57fe5b6020026020010151600014156031611fd0565b606e54604080517f2630c12f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691632630c12f916004808301926020929190829003018186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d60208110156110d557600080fd5b505160408051630ad7511760e31b815290519192506000916112c2916001600160a01b038086169263ac41865a92918916916356ba88b8916004808301926020929190829003018186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d602081101561115657600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d60208110156111c457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d602081101561124f57600080fd5b50516040805162f376cb60e21b815290516001600160a01b038816916303cddb2c916004808301926020929190829003018186803b15801561129057600080fd5b505afa1580156112a4573d6000803e3d6000fd5b505050506040513d60208110156112ba57600080fd5b505190612afd565b90506000611475836001600160a01b031663ac41865a876001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561131157600080fd5b505afa158015611325573d6000803e3d6000fd5b505050506040513d602081101561133b57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d60208110156113a957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b5051604080516272edc760e31b815290516001600160a01b038916916303976e38916004808301926020929190829003018186803b15801561129057600080fd5b9050606554856001600160a01b0316636db9cc996040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b357600080fd5b505afa1580156114c7573d6000803e3d6000fd5b505050506040513d60208110156114dd57600080fd5b5051108015906114ee575060655415155b156117b5576000856001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561152e57600080fd5b505afa158015611542573d6000803e3d6000fd5b505050506040513d602081101561155857600080fd5b5051905080156115a157611594816040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b96505050505050506106d3565b6000806115d6876000815181106115b457fe5b6020026020010151886001815181106115c957fe5b6020026020010151612bbe565b9092509050670de0b6b3a764000060005b8381101561173c57600061161461160b6276a70061160587866124f3565b90612ca6565b606554906124f3565b6001600160a01b038e166000908152607c60205260408120919250908161163b87866124f3565b815260200190815260200160002060020154905060006074600061166886896124f390919063ffffffff16565b815260200190815260200160002060020154905061168a818311156047611fd0565b866116968560016124f3565b14156116d6576116d36116b66116af856276a700612cca565b8590612cca565b6116cd6116c6866276a700612cca565b4290612cca565b90612cda565b94505b600061171e866117186074846116ec8c8b6124f3565b81526020810191909152604001600020600301546bffffffffffffffffffffffff166117188787612cda565b90612afd565b905061172a89826124f3565b985050600190930192506115e7915050565b5060006117498688612cda565b9050671bc16d674ec800008111156117665750671bc16d674ec800005b6117708582612afd565b94506117a4856040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b9a50505050505050505050506106d3565b6000955050505050506106d3565b607c60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909160ff1684565b6118096002607e5414156054611fd0565b6002607e55606e546040805163184a263160e11b81529051611887926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b50516045611fd0565b606e5460408051635b14f18360e01b815230600482015290516118d3926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b606e54604080516313bc6d4b60e01b8152336004820152905161191f926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b6000611953826040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b905061195f8382612cf2565b50506001607e5550565b61197a6002607e5414156054611fd0565b6002607e55606e546040805163364d118160e01b81526001600160a01b0380891660048301529151889385936119d39391169163364d118191602480820192602092909190829003018186803b1580156109f757600080fd5b6119e9336001600160a01b038416146023611fd0565b6119f287612e08565b6119fe87878787612fb0565b50506001607e555050505050565b600090815260716020526040902080546001820154600283015460038401546004909401549294919390929091565b606e5460408051630ad7511760e31b81529051611b2d926001600160a01b0316916313bc6d4b9133916356ba88b8916004808301926020929190829003018186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152516024808301926020929190829003018186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d6020811015611b2457600080fd5b50516014611fd0565b611c29336001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d6020811015611b9357600080fd5b5051604080517f06061dfa00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b03909216916306061dfa91602480820192602092909190829003018186803b158015611bf657600080fd5b505afa158015611c0a573d6000803e3d6000fd5b505050506040513d6020811015611c2057600080fd5b50516049611fd0565b606e546040805163184a263160e11b81529051611c6f926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b6000339050606554816001600160a01b0316636db9cc996040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d6020811015611cda57600080fd5b505110611cec57611cec818484613136565b505050565b60655481565b611cff612503565b6001600160a01b0316611d10610f32565b6001600160a01b031614611d6b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e5460408051635b14f18360e01b81523060048201529051611db7926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b611de76001600160a01b03821615801590611de05750606f546001600160a01b03838116911614155b6060611fd0565b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b611e11612503565b6001600160a01b0316611e22610f32565b6001600160a01b031614611e7d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611ec25760405162461bcd60e51b8152600401808060200182810382526026815260200180615e906026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611f375750611f37613388565b80611f45575060005460ff16155b611f805760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff16158015611fab576000805460ff1961ff0019909116610100171660011790555b611fb3613399565b611fbb613439565b8015611fcd576000805461ff00191690555b50565b81611fde57611fde81613532565b5050565b6060600083905061206c856001600160a01b0316826001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561202f57600080fd5b505afa158015612043573d6000803e3d6000fd5b505050506040513d602081101561205957600080fd5b50516001600160a01b0316146049611fd0565b6120bc856001600160a01b03166306061dfa866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bf657600080fd5b6040805160038082526080820190925260009160208201606080368337019050509050816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b15801561211857600080fd5b505afa15801561212c573d6000803e3d6000fd5b505050506040513d60e081101561214257600080fd5b50608081015160a082015160c0909201518351919291849060009061216357fe5b602002602001018460018151811061217757fe5b602002602001018560028151811061218b57fe5b60209081029190910101929092529190525260408051600780825261010082019092526000918160200160208202803683370190505090506000806000806000806121d589613585565b93509350935093506000808e6001600160a01b0316633d8270f58e6040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506101406040518083038186803b15801561222e57600080fd5b505afa158015612242573d6000803e3d6000fd5b505050506040513d61014081101561225957600080fd5b5060208101516040909101518b51919350915081908b90600190811061227b57fe5b60200260200101511180156122a45750818a60008151811061229957fe5b602002602001015110155b801561232557508e6001600160a01b03168b6001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d602081101561231857600080fd5b50516001600160a01b0316145b156124de57600186151514156123575761235461234d606c54876137d190919063ffffffff16565b8690612cca565b94505b6123658e8e888888886137f5565b8960008151811061237257fe5b6020026020010181815250506123a58960008151811061238e57fe5b6020026020010151886124f390919063ffffffff16565b96506123b48f8f8f8989613b1a565b896001815181106123c157fe5b6020026020010181815250506123f4896001815181106123dd57fe5b6020026020010151896124f390919063ffffffff16565b97506124048e8e88888888613c0a565b8960028151811061241157fe5b60200260200101818152505061242d8960028151811061238e57fe5b965061243e8f8f8f89898989613ff8565b8960038151811061244b57fe5b602002602001018181525050612467896003815181106123dd57fe5b97506124748f8f8f61421f565b8960048151811061248157fe5b60200260200101818152505061249d8960048151811061238e57fe5b96506124aa8f8e896144d5565b896005815181106124b757fe5b60200260200101818152505087896006815181106124d157fe5b6020026020010181815250505b509699505050505050505050505b9392505050565b80820182811015610d2657600080fd5b3390565b60006125186001831015604a611fd0565b6102018210612529575060006106d3565b6000612559612539846001612cca565b6125536701aa535d3d0c000061254d61477a565b906124f3565b90614786565b90506000612571690b581ceb141f05c1ae0083612cda565b90506125a5816040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b925050506106d3565b600061262e856001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ec57600080fd5b505afa158015612600573d6000803e3d6000fd5b505050506040513d602081101561261657600080fd5b505183108015906126275750838310155b6041611fd0565b6001600160a01b03808616600081815260776020908152604080832094891680845294825280832093835260788252808320948352938152908390208351608081018552815481526001808301549382019390935260028201549481019490945260030154606084015281015490919015806126ad5750838260010154115b156126bd57600092505050610c55565b866001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f657600080fd5b505afa15801561270a573d6000803e3d6000fd5b505050506040513d602081101561272057600080fd5b5051851161279057866001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561276157600080fd5b505afa158015612775573d6000803e3d6000fd5b505050506040513d602081101561278b57600080fd5b505194505b61279c878787876147c7565b602083015281526127ae8786866148ec565b60608301526040820152602081015181516127e091108015906127d957508160600151826040015111155b6051611fd0565b60008082600001518710156127f85760009150612865565b825187111561284c578251600090815260048501602052604090205483516128459161282991611605908b90612cca565b84516000908152600487016020526040902060030154906124f3565b9150612865565b8251600090815260048501602052604090206003015491505b6001600160a01b03891660009081526079602090815260408083208682018051855292529091205490516128d2916128a291611605908b90612cca565b6001600160a01b038b166000908152607960209081526040808320888201518452909152902060020154906124f3565b90506128e2818311156050611fd0565b8587141561291157806128fc576000945050505050610c55565b6129068282612cda565b945050505050610c55565b826020015186101561292a576000945050505050610c55565b826020015186148015612941575060208301518351145b156129d1576001600160a01b0389166000908152607960209081526040808320606087018051855292529091205490516129c19183916129bb9161298a91611605908c90612cca565b6001600160a01b038d16600090815260796020908152604080832060608b01518452909152902060020154906124f3565b90612cca565b90506128fc818311156050611fd0565b612a2f826129bb612a0f876004016000886020015181526020019081526020016000206000015461160588602001518c612cca90919063ffffffff16565b602080880151600090815260048a019091526040902060030154906124f3565b6001600160a01b038a166000908152607960209081526040808320606088018051855292529091205490519193506129c19183916129bb9161298a9190611605908c90612cca565b612a99612a888261254d86866124f3565b670d2f13f7789f000014605c611fd0565b60695483141580612aac5750606a548214155b80612ab95750606b548114155b15610f2c576001600160a01b03939093166000908152608060209081526040808320805460ff19166001908117909155607f90925290912092835582015560020155565b60006124ec670de0b6b3a7640000612b158585612ca6565b90614a04565b6000816c010000000000000000000000008410612bb65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b7b578181015183820152602001612b63565b50505050905090810190601f168015612ba85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b60008080612be5670de0b6b3a7640000612b156276a700612bdf888a612cca565b90614a63565b90506000612c11670de0b6b3a7640000612b156276a700612bdf6065548b612cca90919063ffffffff16565b90506000612c3d670de0b6b3a7640000612b156276a700612bdf6065548b612cca90919063ffffffff16565b9050808214158015612c585750612c558260016124f3565b81145b8015612c6f57506276a700612c6d8789612cca565b105b15612c8257612c7f8360016124f3565b92505b612c8d8360016124f3565b612c988360016124f3565b945094505050509250929050565b6000821580612cc157505081810281838281612cbe57fe5b04145b610d2657600080fd5b80820382811115610d2657600080fd5b60006124ec82612b1585670de0b6b3a7640000612ca6565b606e546040805163184a263160e11b81529051612d38926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b606f54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612d8357600080fd5b505afa158015612d97573d6000803e3d6000fd5b505050506040513d6020811015612dad57600080fd5b505190506bffffffffffffffffffffffff8216811015612de357606f54612dde906001600160a01b03168483614ae5565b611cec565b606f54611cec906001600160a01b0316846bffffffffffffffffffffffff8516614ae5565b6001600160a01b038116600081815260796020908152604080832042845282529182902082517f18160ddd00000000000000000000000000000000000000000000000000000000815292518594919391926318160ddd9260048082019391829003018186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d6020811015612ea457600080fd5b505181554260018201556001600160a01b0383166000908152607b6020526040902054612ed75760006002820155612f6e565b6001600160a01b0382166000908152607960209081526040808320607a8352818420607b9093529083205490918391612f11906001612cca565b81548110612f1b57fe5b906000526020600020015481526020019081526020016000209050612f67612f5c826000015461160584600101548660010154612cca90919063ffffffff16565b6002830154906124f3565b6002830155505b506001600160a01b03166000818152607a6020908152604080832080546001818101835591855283852042910155938352607b90915290208054909101905550565b6001600160a01b038085166000818152607760209081526040808320948816808452948252808320428452600480820184529382902082516370a0823160e01b8152948501969096529051909493926370a08231926024808301939192829003018186803b15801561302157600080fd5b505afa158015613035573d6000803e3d6000fd5b505050506040513d602081101561304b57600080fd5b5051815542600182015560038201546002820181905561307157600060038201556130ba565b815460008181526004840160205260409020546130b4916130989190611605904290612cca565b83546000908152600485016020526040902060030154906124f3565b60038201555b600183151514156130e8578315806130d457506001820154155b156130e0574260018301555b428255613108565b805461310857600080835560018301819055613108906002840190615e61565b5060028101805460018181018355600092835260209092204291015560039091018054909101905550505050565b6000613143848484614b65565b905061323f846001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561318157600080fd5b505afa158015613195573d6000803e3d6000fd5b505050506040513d60208110156131ab57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b1580156131ef57600080fd5b505afa158015613203573d6000803e3d6000fd5b505050506040513d602081101561321957600080fd5b5051736b175474e89094c44da98b954eedeac495271d0f61323a8685612afd565b614ebc565b4260009081526071602052604090209093508261326b576070546132639085612cca565b60705561327c565b60705461327890856124f3565b6070555b6070548155426001820181905561329290615073565b6002820155607354600382018190556132b1576000600482015561332c565b60006071600060726132cf6001607354612cca90919063ffffffff16565b815481106132d957fe5b90600052602060002001548152602001908152602001600020905061332561331a826000015461160584600101548660010154612cca90919063ffffffff16565b6004830154906124f3565b6004830155505b60728054600181018255600091909152427fdffbd64cc7c1a7eb27984335d9416d51137a03d3fabec7141025c62663253fe190910181905561336d906150ab565b61337885858561573e565b5050607380546001019055505050565b600061339330615bc4565b15905090565b600054610100900460ff16806133b257506133b2613388565b806133c0575060005460ff16155b6133fb5760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff16158015611fbb576000805460ff1961ff0019909116610100171660011790558015611fcd576000805461ff001916905550565b600054610100900460ff16806134525750613452613388565b80613460575060005460ff16155b61349b5760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff161580156134c6576000805460ff1961ff0019909116610100171660011790555b60006134d0612503565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611fcd576000805461ff001916905550565b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008060008060008590506000816001600160a01b03166303976e386040518163ffffffff1660e01b815260040160206040518083038186803b1580156135cb57600080fd5b505afa1580156135df573d6000803e3d6000fd5b505050506040513d60208110156135f557600080fd5b50516040805163d3406abd60e01b815290519192506000916136b091613645916001600160a01b0387169163d3406abd916004808301926020929190829003018186803b15801561122557600080fd5b846001600160a01b03166303cddb2c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561367e57600080fd5b505afa158015613692573d6000803e3d6000fd5b505050506040513d60208110156136a857600080fd5b5051906124f3565b90506000836001600160a01b03166303cddb2c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136ed57600080fd5b505afa158015613701573d6000803e3d6000fd5b505050506040513d602081101561371757600080fd5b505190506000808080848711801561372f5750858710155b1561375857600193508392506137458786612cca565b91506137518787612cca565b90506137bd565b84871015801561376757508587105b1561378a57600193506000925061377e8786612cca565b91506137518688612cca565b848710801561379857508587105b156137bd57600093508392506137ae8588612cca565b91506137ba8688612cca565b90505b929a50985096509450505050509193509193565b6000670de0b6b3a76400006137e68484612ca6565b816137ed57fe5b049392505050565b6000808790506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561383657600080fd5b505afa15801561384a573d6000803e3d6000fd5b505050506040513d602081101561386057600080fd5b50516040805162f376cb60e21b8152905191925060009182916001600160a01b038616916303cddb2c91600480820192602092909190829003018186803b1580156138aa57600080fd5b505afa1580156138be573d6000803e3d6000fd5b505050506040513d60208110156138d457600080fd5b5051604080516272edc760e31b815290519192506000916001600160a01b038716916303976e38916004808301926020929190829003018186803b15801561391b57600080fd5b505afa15801561392f573d6000803e3d6000fd5b505050506040513d602081101561394557600080fd5b50516040805163d3406abd60e01b8152905191925060009182916139d2916139cb916001600160a01b038b169163d3406abd91600480820192602092909190829003018186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d60208110156139c257600080fd5b50518690612afd565b85906124f3565b90508c6001600160a01b0316876001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015613a1757600080fd5b505afa158015613a2b573d6000803e3d6000fd5b505050506040513d6020811015613a4157600080fd5b50516001600160a01b03161415613af657606654613a609087906137d1565b945060018c1515148015613a76575060018a1515145b15613ab957613a86856002612ca6565b9150613aa6613a9f613a988386612cda565b8790612afd565b86906124f3565b945081851115613ab4578194505b613b06565b60018c1515148015613ac9575089155b15613af657613aef61234d613ae8613ae18685612cda565b8890612afd565b8790612cca565b9450613b06565b6000975050505050505050613b10565b5092955050505050505b9695505050505050565b60008460018415151415613bfd57846001600160a01b0316816001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6b57600080fd5b505afa158015613b7f573d6000803e3d6000fd5b505050506040513d6020811015613b9557600080fd5b50516001600160a01b03161415613bfd576001600160a01b03871660009081526080602052604081205460ff16613bce57606954613be8565b6001600160a01b0388166000908152607f60205260409020545b9050613bf484826137d1565b92505050610d3a565b5060009695505050505050565b6000808790506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4b57600080fd5b505afa158015613c5f573d6000803e3d6000fd5b505050506040513d6020811015613c7557600080fd5b5051604080517f950c78220000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015291519293506000929185169163950c782291602480820192602092909190829003018186803b158015613ce057600080fd5b505afa158015613cf4573d6000803e3d6000fd5b505050506040513d6020811015613d0a57600080fd5b50516040805162f376cb60e21b815290519192506000916001600160a01b038616916303cddb2c916004808301926020929190829003018186803b158015613d5157600080fd5b505afa158015613d65573d6000803e3d6000fd5b505050506040513d6020811015613d7b57600080fd5b5051604080517fd40244cb00000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0387169163d40244cb916004808301926020929190829003018186803b158015613ddc57600080fd5b505afa158015613df0573d6000803e3d6000fd5b505050506040513d6020811015613e0657600080fd5b50516040805163d3406abd60e01b815290519192506000918291613e59916139cb916001600160a01b038b169163d3406abd91600480820192602092909190829003018186803b15801561399857600080fd5b905060008086138015613e6e575060018d1515145b8015613e7c575060018b1515145b15613ea357613e9c613e8e8786612cda565b606754611718908a906137d1565b9050613fe6565b600086138015613eb5575060018d1515145b8015613ebf57508a155b15613ef157613ed1613e8e8786612cda565b9050613e9c613eea613ee38c85612cda565b8390612afd565b8290612cca565b600086138015613eff57508c155b15613f0c57506000613fe6565b600086128015613f1a57508a155b15613fcb57613f93613e8e896001600160a01b031663449b98266040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5e57600080fd5b505afa158015613f72573d6000803e3d6000fd5b505050506040513d6020811015613f8857600080fd5b50516116cd89615bca565b9050613fa0816002612ca6565b9250613fb9613fb2613ee38c85612cda565b82906124f3565b905082811115613fc65750815b613fe6565b600086128015613fdd575060018b1515145b15613fe6575060005b9e9d5050505050505050505050505050565b6000808790506000816001600160a01b031663950c7822896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561404d57600080fd5b505afa158015614061573d6000803e3d6000fd5b505050506040513d602081101561407757600080fd5b50516001600160a01b038b166000908152608060205260408120549192509060ff166140a557606a546140c2565b6001600160a01b038b166000908152607f60205260409020600101545b90506001881515141561420c5760008213156141585761414e836001600160a01b031663d40244cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561411457600080fd5b505afa158015614128573d6000803e3d6000fd5b505050506040513d602081101561413e57600080fd5b50516116cd846117188b866137d1565b9350505050614214565b600082128015614166575085155b156141e95761414e836001600160a01b031663449b98266040518163ffffffff1660e01b815260040160206040518083038186803b1580156141a757600080fd5b505afa1580156141bb573d6000803e3d6000fd5b505050506040513d60208110156141d157600080fd5b50516116cd6141df85615bca565b6117188b866137d1565b6000821280156141fb57506001861515145b1561420c5760009350505050614214565b600093505050505b979650505050505050565b6000808390506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561426057600080fd5b505afa158015614274573d6000803e3d6000fd5b505050506040513d602081101561428a57600080fd5b505160408051631f0b96b960e31b81529051919250600091829161438b916001600160a01b038b169163f85cb5c8916004808301926020929190829003018186803b1580156142d857600080fd5b505afa1580156142ec573d6000803e3d6000fd5b505050506040513d602081101561430257600080fd5b50516040805162f376cb60e21b81529051736b175474e89094c44da98b954eedeac495271d0f916001600160a01b038916916303cddb2c91600480820192602092909190829003018186803b15801561435a57600080fd5b505afa15801561436e573d6000803e3d6000fd5b505050506040513d602081101561438457600080fd5b5051614ebc565b604080516003808252608082019092529192506000919060208201606080368337019050509050846001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b1580156143eb57600080fd5b505afa1580156143ff573d6000803e3d6000fd5b505050506040513d60e081101561441557600080fd5b50608081015160a082015160c0909201518351919291849060009061443657fe5b602002602001018460018151811061444a57fe5b602002602001018560028151811061445e57fe5b6020026020010183815250838152508381525050505060006144aa8a898460008151811061448857fe5b60200260200101518560018151811061449d57fe5b60200260200101516125ae565b90506144c76144b98285612cda565b6068546117189088906137d1565b9a9950505050505050505050565b6000808490506000846001600160a01b0316826001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561452057600080fd5b505afa158015614534573d6000803e3d6000fd5b505050506040513d602081101561454a57600080fd5b5051604080517f02d05d3f00000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831693909314935060009283928616916302d05d3f916004808301926020929190829003018186803b1580156145b357600080fd5b505afa1580156145c7573d6000803e3d6000fd5b505050506040513d60208110156145dd57600080fd5b50516001600160a01b031614156145f55760006145f8565b60015b905060005b60048160ff1610156146be576000846001600160a01b03166363f568b9836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561465257600080fd5b505afa158015614666573d6000803e3d6000fd5b505050506040513d602081101561467c57600080fd5b505190506001600160a01b038116156146b55760019092019183806146b25750876001600160a01b0316816001600160a01b0316145b93505b506001016145fd565b5060ff811661474a57614740613a9f886001600160a01b031663f251fc8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561470657600080fd5b505afa15801561471a573d6000803e3d6000fd5b505050506040513d602081101561473057600080fd5b5051606d54612b159089906137d1565b93505050506124ec565b811561476f57614740613a9f8260ff16612b15606d54896137d190919063ffffffff16565b509295945050505050565b670de0b6b3a764000090565b60008061479161477a565b90505b82156124ec5760028306156147b0576147ad81856137d1565b90505b6147ba84806137d1565b9350600283049250614794565b6001600160a01b03808516600090815260776020908152604080832093871683529290529081206002810180548392918391614804906001612cca565b8154811061480e57fe5b9060005260206000200154905060008260020160008154811061482d57fe5b906000526020600020015490508582118061484757508681105b156148df5760005b60028401548110156148dd578684600201828154811061486b57fe5b9060005260206000200154116148985783600201818154811061488a57fe5b906000526020600020015492505b878460020182815481106148a857fe5b9060005260206000200154116148d5578360020181815481106148c757fe5b906000526020600020015491505b60010161484f565b505b9890975095505050505050565b6001600160a01b0383166000908152607a602052604081205481908190614914906001612cca565b6001600160a01b0387166000908152607a60205260408120805492935090918390811061493d57fe5b906000526020600020015490506000607a6000896001600160a01b03166001600160a01b0316815260200190815260200160002060008154811061497d57fe5b906000526020600020015490508582118061499757508681105b156149f85760005b8381116149f6576001600160a01b0389166000908152607a602052604081208054839081106149ca57fe5b906000526020600020015490508781116149e2578093505b8881116149ed578092505b5060010161499f565b505b97909650945050505050565b6000808211614a5a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816137ed57fe5b600081614ab7576040805162461bcd60e51b815260206004820152601060248201527f43616e7420646976696465206279203000000000000000000000000000000000604482015290519081900360640190fd5b60008311614ac65760006124ec565b6124ec600161254d84612b15836129bb89670de0b6b3a7640000612ca6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611cec908490615be1565b600080606e60009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015614bb657600080fd5b505afa158015614bca573d6000803e3d6000fd5b505050506040513d6020811015614be057600080fd5b505160408051630ad7511760e31b815290519192506000916001600160a01b038085169263ac41865a92918a16916356ba88b891600480820192602092909190829003018186803b158015614c3457600080fd5b505afa158015614c48573d6000803e3d6000fd5b505050506040513d6020811015614c5e57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b158015614ca257600080fd5b505afa158015614cb6573d6000803e3d6000fd5b505050506040513d6020811015614ccc57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b158015614d2d57600080fd5b505afa158015614d41573d6000803e3d6000fd5b505050506040513d6020811015614d5757600080fd5b50516001600160a01b0387166000908152607d6020526040902054909150614da3576001600160a01b0386166000908152607d6020526040902085815560010181905591506124ec9050565b8315614e5b576001600160a01b0386166000908152607d6020526040902054614e1290614dd090876124f3565b6116cd670de0b6b3a7640000612b15614de98a87612ca6565b6001600160a01b038c166000908152607d60205260409020805460019091015461254d91612ca6565b6001600160a01b0387166000908152607d60205260409020600181019190915554614e3d90866124f3565b6001600160a01b0387166000908152607d6020526040902055614e98565b6001600160a01b0386166000908152607d6020526040902054614e7e9086612cca565b6001600160a01b0387166000908152607d60205260409020555b5050506001600160a01b0383166000908152607d60205260409020600101546124ec565b600080614ec885615c92565b614f3657846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f0557600080fd5b505afa158015614f19573d6000803e3d6000fd5b505050506040513d6020811015614f2f57600080fd5b5051614f39565b60125b60ff1690506000614f4985615c92565b614fb757846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f8657600080fd5b505afa158015614f9a573d6000803e3d6000fd5b505050506040513d6020811015614fb057600080fd5b5051614fba565b60125b60ff16905060128211158015614fd1575060128111155b615022576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b808214156150345783925050506124ec565b8181111561505c576150536150498284612cca565b8590600a0a612ca6565b925050506124ec565b613b106150698383612cca565b8590600a0a614a04565b60008061509e670de0b6b3a7640000612b156276a700612bdf60655488612cca90919063ffffffff16565b90506124ec8160016124f3565b606e546040805163184a263160e11b815290516150f1926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b60006150fc82615073565b600081815260746020526040812091925060759061511b846001612cca565b815260208101919091526040016000205460ff166156c15760018101829055607354615182576000600282015561515182612507565b6003820180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff9290921691909117905561568d565b607354600090615193906001612cca565b905060006151ed60716000607285815481106151ab57fe5b90600052602060002001548152602001908152602001600020600401546071600088815260200190815260200160002060040154612cca90919063ffffffff16565b90506151fa846001612cca565b607160006072858154811061520b57fe5b9060005260206000200154815260200190815260200160002060020154141561533e57615299615271607160006072868154811061524557fe5b906000526020600020015481526020019081526020016000206001015487612cca90919063ffffffff16565b612b1561529261528b61160b6276a7006129bb8b82612ca6565b8990612cca565b8490612ca6565b60028401556152a784612507565b6003840180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff929092169190911790556002830154615316906152e7908390612cca565b607460006152f6886001612cca565b8152602001908152602001600020600201546124f390919063ffffffff16565b60746000615325876001612cca565b815260208101919091526040016000206002015561568a565b60005b615381607160006072868154811061535557fe5b906000526020600020015481526020019081526020016000206002015486612cca90919063ffffffff16565b8111615688576000607460006153cd846071600060728a815481106153a257fe5b90600052602060002001548152602001908152602001600020600201546124f390919063ffffffff16565b8152602001908152602001600020905060006153fe61160b6276a700611605866071600060728c815481106153a257fe5b9050826154dc576154a061549561544b6071600060728a8154811061541f57fe5b90600052602060002001548152602001908152602001600020600101548b612cca90919063ffffffff16565b612b1561548e6071600060728c8154811061546257fe5b906000526020600020015481526020019081526020016000206001015486612cca90919063ffffffff16565b8890612ca6565b6002840154906124f3565b826002018190555060716000607287815481106154b957fe5b60009182526020808320909101548352820192909252604001902054825561567e565b61551c60716000607288815481106154f057fe5b906000526020600020015481526020019081526020016000206002015488612cca90919063ffffffff16565b8310156155f857615573615566607160006072898154811061553a57fe5b90600052602060002001548152602001908152602001600020600101548a612cca90919063ffffffff16565b612b15866276a700612ca6565b8260020181905550615598615593846071600060728a815481106153a257fe5b612507565b8260030160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506155df8360716000607289815481106153a257fe5b826001018190555060716000607287815481106154b957fe5b61563761560f607160006072898154811061553a57fe5b612b1561563061562961160b6276a7006129bb8e82612ca6565b8c90612cca565b8790612ca6565b600287015561564587612507565b6003870180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff929092169190911790556001860187905560705486555b5050600101615341565b505b50505b60016075600061569d8584612cca565b81526020810191909152604001600020805460ff1916911515919091179055615735565b61572f612f5c6071600060726156e36001607354612cca90919063ffffffff16565b815481106156ed57fe5b90600052602060002001548152602001908152602001600020600401546071600087815260200190815260200160002060040154612cca90919063ffffffff16565b60028201555b60705490555050565b606e546040805163184a263160e11b81529051615784926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b6001600160a01b0383166000908152607c60205260408120816157a642615073565b815260208101919091526040908101600090812082516003808252608082019094529093509091816020016020820280368337019050509050846001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b15801561581857600080fd5b505afa15801561582c573d6000803e3d6000fd5b505050506040513d60e081101561584257600080fd5b50608081015160a082015160c0909201518351919291849060009061586357fe5b602002602001018460018151811061587757fe5b602002602001018560028151811061588b57fe5b602090810291909101019290925291905252600382015460ff16615b6c576158c6816000815181106158b957fe5b6020026020010151615073565b6158cf42615073565b14156158ef57600060028301556158e542615073565b6001830155615b58565b600061596961591b8360028151811061590457fe5b602002602001015142612cca90919063ffffffff16565b607c6000896001600160a01b03166001600160a01b031681526020019081526020016000206000615952866002815181106158b957fe5b815260208101919091526040016000205490612ca6565b905060008061598c8460028151811061597e57fe5b602002602001015142612bbe565b9150915060005b82811015615b53576001600160a01b0389166000908152607c60205260408120816159be85856124f3565b8152602001908152602001600020905060006159ed61160b6276a70061160586886124f390919063ffffffff16565b905082615a4557615a3b615495615a0a8960028151811061590457fe5b612b15615a348b600281518110615a1d57fe5b602002602001015186612cca90919063ffffffff16565b8a90612ca6565b6002830155615b49565b600083118015615a5e575084615a5c8460016124f3565b105b15615ad557615a83615a768860028151811061590457fe5b612b15886276a700612ca6565b6002830155615a9284846124f3565b6001808401919091556001600160a01b038c166000908152607c60209081526040808320888452909152902054835560038301805460ff19169091179055615b49565b615b0f615ae88860028151811061590457fe5b612b15615b086116c661160b6276a7006129bb6276a70061160542615073565b8990612ca6565b60028301556001600160a01b038b166000908152607c602090815260408083208784529091529020548255615b4342615073565b60018301555b5050600101615993565b505050505b60038201805460ff19166001179055615b90565b615b8a615495615b828360028151811061590457fe5b845490612ca6565b60028301555b60018315151415615bae578154615ba790856124f3565b8255615bbd565b8154615bba9085612cca565b82555b5050505050565b3b151590565b600080821215615bdd5781600003610d26565b5090565b6000615c36826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615cc89092919063ffffffff16565b805190915015611cec57808060200190516020811015615c5557600080fd5b5051611cec5760405162461bcd60e51b815260040180806020018281038252602a815260200180615ee4602a913960400191505060405180910390fd5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0383161480610d265750506001600160a01b03161590565b6060610c55848460008585615cdc85615bc4565b615d2d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310615d6b5780518252601f199092019160209182019101615d4c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615dcd576040519150601f19603f3d011682016040523d82523d6000602084013e615dd2565b606091505b509150915061421482828660608315615dec5750816124ec565b825115615dfc5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315612b7b578181015183820152602001612b63565b60405180606001604052806003906020820280368337509192915050565b5080546000825590600052602060002090810190611fcd91905b80821115615bdd5760008155600101615e7b56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220128e58177cdbed14ba8f0388163dc90f11460d3c9f315c936c3591ad08a1fe3764736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c806380334dbe116100d8578063bad67dd11161008c578063ddaa26ad11610066578063ddaa26ad146105e8578063ef9f3450146105f0578063f2fde38b1461061657610177565b8063bad67dd114610537578063cf1493871461057b578063d717a506146105c357610177565b80639de9a052116100bd5780639de9a052146104915780639e839e1b146104b7578063a8d9a7811461050b57610177565b806380334dbe146104355780638da5cb5b1461046d57610177565b806369795e931161012f57806373a9fd9f1161011457806373a9fd9f146103a15780637602bdde146103df57806379fc904f1461042d57610177565b806369795e93146102c0578063715018a61461039957610177565b806340a323ae1161016057806340a323ae1461022b578063485cc9551461026a5780635668c8f01461029a57610177565b8063070e8a4a1461017c5780632544dc18146101da575b600080fd5b6101a26004803603602081101561019257600080fd5b50356001600160a01b031661063c565b6040518082606080838360005b838110156101c75781810151838201526020016101af565b5050505090500191505060405180910390f35b6101f7600480360360208110156101f057600080fd5b50356106d8565b604080519485526020850193909352838301919091526bffffffffffffffffffffffff166060830152519081900360800190f35b6102516004803603602081101561024157600080fd5b50356001600160a01b031661070e565b6040805192835260208301919091528051918290030190f35b6102986004803603604081101561028057600080fd5b506001600160a01b0381358116916020013516610731565b005b610251600480360360208110156102b057600080fd5b50356001600160a01b0316610964565b610349600480360360608110156102d657600080fd5b6001600160a01b03823581169260208101359091169181019060608101604082013564010000000081111561030a57600080fd5b82018360208201111561031c57600080fd5b8035906020019184602083028401116401000000008311171561033e57600080fd5b50909250905061097d565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561038557818101518382015260200161036d565b505050509050019250505060405180910390f35b610298610c5d565b6103be600480360360208110156103b757600080fd5b5035610d1b565b604080516bffffffffffffffffffffffff9092168252519081900360200190f35b61041b600480360360808110156103f557600080fd5b506001600160a01b03813581169160208101359091169060408101359060600135610d2c565b60408051918252519081900360200190f35b610298610d43565b6102986004803603608081101561044b57600080fd5b506001600160a01b038135169060208101359060408101359060600135610e69565b610475610f32565b604080516001600160a01b039092168252519081900360200190f35b6103be600480360360208110156104a757600080fd5b50356001600160a01b0316610f41565b6104e3600480360360408110156104cd57600080fd5b506001600160a01b0381351690602001356117c3565b6040805194855260208501939093528383019190915215156060830152519081900360800190f35b6102986004803603604081101561052157600080fd5b506001600160a01b0381351690602001356117f8565b610298600480360360a081101561054d57600080fd5b506001600160a01b038135811691602081013590911690604081013590606081013515159060800135611969565b6105986004803603602081101561059157600080fd5b5035611a0c565b6040805195865260208601949094528484019290925260608401526080830152519081900360a00190f35b610298600480360360408110156105d957600080fd5b50803590602001351515611a3b565b61041b611cf1565b6102986004803603602081101561060657600080fd5b50356001600160a01b0316611cf7565b6102986004803603602081101561062c57600080fd5b50356001600160a01b0316611e09565b610644615e43565b6001600160a01b03821660009081526080602052604090205460ff16156106af576001600160a01b0382166000908152607f602052604090819020815160608101928390529160039082845b81548152602001906001019080831161069057505050505090506106d3565b60405180606001604052806069548152602001606a548152602001606b5481525090505b919050565b600090815260746020526040902080546001820154600283015460039093015491939092916bffffffffffffffffffffffff1690565b6001600160a01b03166000908152607d6020526040902080546001909101549091565b610739611f1e565b61074f6001600160a01b03831615156017611fd0565b6107656001600160a01b03821615156017611fd0565b606f80546001600160a01b038085166001600160a01b031992831617909255606e805484841692169190911790819055604080517ff142c3bc0000000000000000000000000000000000000000000000000000000081529051919092169163f142c3bc916004808301926080929190829003018186803b1580156107e857600080fd5b505afa1580156107fc573d6000803e3d6000fd5b505050506040513d608081101561081257600080fd5b5080516020820151604080840151606094850151606d55606855606791909155606691909155606e5481517f2e0519cf00000000000000000000000000000000000000000000000000000000815291516001600160a01b0390911692632e0519cf9260048082019391829003018186803b15801561088f57600080fd5b505afa1580156108a3573d6000803e3d6000fd5b505050506040513d60608110156108b957600080fd5b508051602080830151604093840151606b55606a55606991909155606e5482517f568c081300000000000000000000000000000000000000000000000000000000815292516001600160a01b039091169263568c0813926004808301939192829003018186803b15801561092c57600080fd5b505afa158015610940573d6000803e3d6000fd5b505050506040513d602081101561095657600080fd5b5051606c5550506001607e55565b607d602052600090815260409020805460019091015482565b6040805160078082526101008201909252606091600091906020820160e08036833701905050606e546040805163364d118160e01b81526001600160a01b038a811660048301529151939450610a2a93919092169163364d1181916024808301926020929190829003018186803b1580156109f757600080fd5b505afa158015610a0b573d6000803e3d6000fd5b505050506040513d6020811015610a2157600080fd5b50516023611fd0565b60005b83811015610c515760408051600780825261010082019092526000916020820160e080368337019050509050610a7f88878785818110610a6957fe5b905060200201356001600160a01b031689611fe2565b9050610abc81600081518110610a9157fe5b602002602001015184600081518110610aa657fe5b60200260200101516124f390919063ffffffff16565b83600081518110610ac957fe5b602002602001018181525050610afa81600181518110610ae557fe5b602002602001015184600181518110610aa657fe5b83600181518110610b0757fe5b602002602001018181525050610b3881600281518110610b2357fe5b602002602001015184600281518110610aa657fe5b83600281518110610b4557fe5b602002602001018181525050610b7681600381518110610b6157fe5b602002602001015184600381518110610aa657fe5b83600381518110610b8357fe5b602002602001018181525050610bb481600481518110610b9f57fe5b602002602001015184600481518110610aa657fe5b83600481518110610bc157fe5b602002602001018181525050610bf281600581518110610bdd57fe5b602002602001015184600581518110610aa657fe5b83600581518110610bff57fe5b602002602001018181525050610c3081600681518110610c1b57fe5b602002602001015184600681518110610aa657fe5b83600681518110610c3d57fe5b602090810291909101015250600101610a2d565b5090505b949350505050565b610c65612503565b6001600160a01b0316610c76610f32565b6001600160a01b031614610cd1576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b6000610d2682612507565b92915050565b6000610d3a858585856125ae565b95945050505050565b606e54604080516313bc6d4b60e01b81523360048201529051610dc2926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b505afa158015610da3573d6000803e3d6000fd5b505050506040513d6020811015610db957600080fd5b50516048611fd0565b606e54610ddb906001600160a01b031633146010611fd0565b606e5460408051635b14f18360e01b81523060048201529051610e5b926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b505afa158015610e3b573d6000803e3d6000fd5b505050506040513d6020811015610e5157600080fd5b5051156053611fd0565b606554610e6757426065555b565b606e54604080516313bc6d4b60e01b81523360048201529051610eb5926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b606e54610ece906001600160a01b031633146010611fd0565b606e546040805163364d118160e01b81526001600160a01b0387811660048301529151610f2093929092169163364d118191602480820192602092909190829003018186803b1580156109f757600080fd5b610f2c84848484612a77565b50505050565b6033546001600160a01b031690565b604080516003808252608082019092526000918391839160208201606080368337019050509050816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b158015610fa157600080fd5b505afa158015610fb5573d6000803e3d6000fd5b505050506040513d60e0811015610fcb57600080fd5b50608081015160a082015160c09092015183519192918490600090610fec57fe5b602002602001018460018151811061100057fe5b602002602001018560028151811061101457fe5b6020026020010183815250838152508381525050505061104d8160018151811061103a57fe5b6020026020010151600014156031611fd0565b606e54604080517f2630c12f00000000000000000000000000000000000000000000000000000000815290516000926001600160a01b031691632630c12f916004808301926020929190829003018186803b1580156110ab57600080fd5b505afa1580156110bf573d6000803e3d6000fd5b505050506040513d60208110156110d557600080fd5b505160408051630ad7511760e31b815290519192506000916112c2916001600160a01b038086169263ac41865a92918916916356ba88b8916004808301926020929190829003018186803b15801561112c57600080fd5b505afa158015611140573d6000803e3d6000fd5b505050506040513d602081101561115657600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d60208110156111c457600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b15801561122557600080fd5b505afa158015611239573d6000803e3d6000fd5b505050506040513d602081101561124f57600080fd5b50516040805162f376cb60e21b815290516001600160a01b038816916303cddb2c916004808301926020929190829003018186803b15801561129057600080fd5b505afa1580156112a4573d6000803e3d6000fd5b505050506040513d60208110156112ba57600080fd5b505190612afd565b90506000611475836001600160a01b031663ac41865a876001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561131157600080fd5b505afa158015611325573d6000803e3d6000fd5b505050506040513d602081101561133b57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561137f57600080fd5b505afa158015611393573d6000803e3d6000fd5b505050506040513d60208110156113a957600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b15801561140a57600080fd5b505afa15801561141e573d6000803e3d6000fd5b505050506040513d602081101561143457600080fd5b5051604080516272edc760e31b815290516001600160a01b038916916303976e38916004808301926020929190829003018186803b15801561129057600080fd5b9050606554856001600160a01b0316636db9cc996040518163ffffffff1660e01b815260040160206040518083038186803b1580156114b357600080fd5b505afa1580156114c7573d6000803e3d6000fd5b505050506040513d60208110156114dd57600080fd5b5051108015906114ee575060655415155b156117b5576000856001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561152e57600080fd5b505afa158015611542573d6000803e3d6000fd5b505050506040513d602081101561155857600080fd5b5051905080156115a157611594816040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b96505050505050506106d3565b6000806115d6876000815181106115b457fe5b6020026020010151886001815181106115c957fe5b6020026020010151612bbe565b9092509050670de0b6b3a764000060005b8381101561173c57600061161461160b6276a70061160587866124f3565b90612ca6565b606554906124f3565b6001600160a01b038e166000908152607c60205260408120919250908161163b87866124f3565b815260200190815260200160002060020154905060006074600061166886896124f390919063ffffffff16565b815260200190815260200160002060020154905061168a818311156047611fd0565b866116968560016124f3565b14156116d6576116d36116b66116af856276a700612cca565b8590612cca565b6116cd6116c6866276a700612cca565b4290612cca565b90612cda565b94505b600061171e866117186074846116ec8c8b6124f3565b81526020810191909152604001600020600301546bffffffffffffffffffffffff166117188787612cda565b90612afd565b905061172a89826124f3565b985050600190930192506115e7915050565b5060006117498688612cda565b9050671bc16d674ec800008111156117665750671bc16d674ec800005b6117708582612afd565b94506117a4856040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b9a50505050505050505050506106d3565b6000955050505050506106d3565b607c60209081526000928352604080842090915290825290208054600182015460028301546003909301549192909160ff1684565b6118096002607e5414156054611fd0565b6002607e55606e546040805163184a263160e11b81529051611887926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b505afa158015611868573d6000803e3d6000fd5b505050506040513d602081101561187e57600080fd5b50516045611fd0565b606e5460408051635b14f18360e01b815230600482015290516118d3926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b606e54604080516313bc6d4b60e01b8152336004820152905161191f926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b158015610d8f57600080fd5b6000611953826040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b905061195f8382612cf2565b50506001607e5550565b61197a6002607e5414156054611fd0565b6002607e55606e546040805163364d118160e01b81526001600160a01b0380891660048301529151889385936119d39391169163364d118191602480820192602092909190829003018186803b1580156109f757600080fd5b6119e9336001600160a01b038416146023611fd0565b6119f287612e08565b6119fe87878787612fb0565b50506001607e555050505050565b600090815260716020526040902080546001820154600283015460038401546004909401549294919390929091565b606e5460408051630ad7511760e31b81529051611b2d926001600160a01b0316916313bc6d4b9133916356ba88b8916004808301926020929190829003018186803b158015611a8957600080fd5b505afa158015611a9d573d6000803e3d6000fd5b505050506040513d6020811015611ab357600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152516024808301926020929190829003018186803b158015611afa57600080fd5b505afa158015611b0e573d6000803e3d6000fd5b505050506040513d6020811015611b2457600080fd5b50516014611fd0565b611c29336001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015611b6957600080fd5b505afa158015611b7d573d6000803e3d6000fd5b505050506040513d6020811015611b9357600080fd5b5051604080517f06061dfa00000000000000000000000000000000000000000000000000000000815233600482015290516001600160a01b03909216916306061dfa91602480820192602092909190829003018186803b158015611bf657600080fd5b505afa158015611c0a573d6000803e3d6000fd5b505050506040513d6020811015611c2057600080fd5b50516049611fd0565b606e546040805163184a263160e11b81529051611c6f926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b6000339050606554816001600160a01b0316636db9cc996040518163ffffffff1660e01b815260040160206040518083038186803b158015611cb057600080fd5b505afa158015611cc4573d6000803e3d6000fd5b505050506040513d6020811015611cda57600080fd5b505110611cec57611cec818484613136565b505050565b60655481565b611cff612503565b6001600160a01b0316611d10610f32565b6001600160a01b031614611d6b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606e5460408051635b14f18360e01b81523060048201529051611db7926001600160a01b031691635b14f183916024808301926020929190829003018186803b158015610e2757600080fd5b611de76001600160a01b03821615801590611de05750606f546001600160a01b03838116911614155b6060611fd0565b606f80546001600160a01b0319166001600160a01b0392909216919091179055565b611e11612503565b6001600160a01b0316611e22610f32565b6001600160a01b031614611e7d576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116611ec25760405162461bcd60e51b8152600401808060200182810382526026815260200180615e906026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b600054610100900460ff1680611f375750611f37613388565b80611f45575060005460ff16155b611f805760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff16158015611fab576000805460ff1961ff0019909116610100171660011790555b611fb3613399565b611fbb613439565b8015611fcd576000805461ff00191690555b50565b81611fde57611fde81613532565b5050565b6060600083905061206c856001600160a01b0316826001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561202f57600080fd5b505afa158015612043573d6000803e3d6000fd5b505050506040513d602081101561205957600080fd5b50516001600160a01b0316146049611fd0565b6120bc856001600160a01b03166306061dfa866040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611bf657600080fd5b6040805160038082526080820190925260009160208201606080368337019050509050816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b15801561211857600080fd5b505afa15801561212c573d6000803e3d6000fd5b505050506040513d60e081101561214257600080fd5b50608081015160a082015160c0909201518351919291849060009061216357fe5b602002602001018460018151811061217757fe5b602002602001018560028151811061218b57fe5b60209081029190910101929092529190525260408051600780825261010082019092526000918160200160208202803683370190505090506000806000806000806121d589613585565b93509350935093506000808e6001600160a01b0316633d8270f58e6040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506101406040518083038186803b15801561222e57600080fd5b505afa158015612242573d6000803e3d6000fd5b505050506040513d61014081101561225957600080fd5b5060208101516040909101518b51919350915081908b90600190811061227b57fe5b60200260200101511180156122a45750818a60008151811061229957fe5b602002602001015110155b801561232557508e6001600160a01b03168b6001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156122ee57600080fd5b505afa158015612302573d6000803e3d6000fd5b505050506040513d602081101561231857600080fd5b50516001600160a01b0316145b156124de57600186151514156123575761235461234d606c54876137d190919063ffffffff16565b8690612cca565b94505b6123658e8e888888886137f5565b8960008151811061237257fe5b6020026020010181815250506123a58960008151811061238e57fe5b6020026020010151886124f390919063ffffffff16565b96506123b48f8f8f8989613b1a565b896001815181106123c157fe5b6020026020010181815250506123f4896001815181106123dd57fe5b6020026020010151896124f390919063ffffffff16565b97506124048e8e88888888613c0a565b8960028151811061241157fe5b60200260200101818152505061242d8960028151811061238e57fe5b965061243e8f8f8f89898989613ff8565b8960038151811061244b57fe5b602002602001018181525050612467896003815181106123dd57fe5b97506124748f8f8f61421f565b8960048151811061248157fe5b60200260200101818152505061249d8960048151811061238e57fe5b96506124aa8f8e896144d5565b896005815181106124b757fe5b60200260200101818152505087896006815181106124d157fe5b6020026020010181815250505b509699505050505050505050505b9392505050565b80820182811015610d2657600080fd5b3390565b60006125186001831015604a611fd0565b6102018210612529575060006106d3565b6000612559612539846001612cca565b6125536701aa535d3d0c000061254d61477a565b906124f3565b90614786565b90506000612571690b581ceb141f05c1ae0083612cda565b90506125a5816040518060400160405280601081526020016f6f766572666c6f77203936206269747360801b815250612b1b565b925050506106d3565b600061262e856001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156125ec57600080fd5b505afa158015612600573d6000803e3d6000fd5b505050506040513d602081101561261657600080fd5b505183108015906126275750838310155b6041611fd0565b6001600160a01b03808616600081815260776020908152604080832094891680845294825280832093835260788252808320948352938152908390208351608081018552815481526001808301549382019390935260028201549481019490945260030154606084015281015490919015806126ad5750838260010154115b156126bd57600092505050610c55565b866001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f657600080fd5b505afa15801561270a573d6000803e3d6000fd5b505050506040513d602081101561272057600080fd5b5051851161279057866001600160a01b031663cb12233b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561276157600080fd5b505afa158015612775573d6000803e3d6000fd5b505050506040513d602081101561278b57600080fd5b505194505b61279c878787876147c7565b602083015281526127ae8786866148ec565b60608301526040820152602081015181516127e091108015906127d957508160600151826040015111155b6051611fd0565b60008082600001518710156127f85760009150612865565b825187111561284c578251600090815260048501602052604090205483516128459161282991611605908b90612cca565b84516000908152600487016020526040902060030154906124f3565b9150612865565b8251600090815260048501602052604090206003015491505b6001600160a01b03891660009081526079602090815260408083208682018051855292529091205490516128d2916128a291611605908b90612cca565b6001600160a01b038b166000908152607960209081526040808320888201518452909152902060020154906124f3565b90506128e2818311156050611fd0565b8587141561291157806128fc576000945050505050610c55565b6129068282612cda565b945050505050610c55565b826020015186101561292a576000945050505050610c55565b826020015186148015612941575060208301518351145b156129d1576001600160a01b0389166000908152607960209081526040808320606087018051855292529091205490516129c19183916129bb9161298a91611605908c90612cca565b6001600160a01b038d16600090815260796020908152604080832060608b01518452909152902060020154906124f3565b90612cca565b90506128fc818311156050611fd0565b612a2f826129bb612a0f876004016000886020015181526020019081526020016000206000015461160588602001518c612cca90919063ffffffff16565b602080880151600090815260048a019091526040902060030154906124f3565b6001600160a01b038a166000908152607960209081526040808320606088018051855292529091205490519193506129c19183916129bb9161298a9190611605908c90612cca565b612a99612a888261254d86866124f3565b670d2f13f7789f000014605c611fd0565b60695483141580612aac5750606a548214155b80612ab95750606b548114155b15610f2c576001600160a01b03939093166000908152608060209081526040808320805460ff19166001908117909155607f90925290912092835582015560020155565b60006124ec670de0b6b3a7640000612b158585612ca6565b90614a04565b6000816c010000000000000000000000008410612bb65760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612b7b578181015183820152602001612b63565b50505050905090810190601f168015612ba85780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b509192915050565b60008080612be5670de0b6b3a7640000612b156276a700612bdf888a612cca565b90614a63565b90506000612c11670de0b6b3a7640000612b156276a700612bdf6065548b612cca90919063ffffffff16565b90506000612c3d670de0b6b3a7640000612b156276a700612bdf6065548b612cca90919063ffffffff16565b9050808214158015612c585750612c558260016124f3565b81145b8015612c6f57506276a700612c6d8789612cca565b105b15612c8257612c7f8360016124f3565b92505b612c8d8360016124f3565b612c988360016124f3565b945094505050509250929050565b6000821580612cc157505081810281838281612cbe57fe5b04145b610d2657600080fd5b80820382811115610d2657600080fd5b60006124ec82612b1585670de0b6b3a7640000612ca6565b606e546040805163184a263160e11b81529051612d38926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b606f54604080516370a0823160e01b815230600482015290516000926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612d8357600080fd5b505afa158015612d97573d6000803e3d6000fd5b505050506040513d6020811015612dad57600080fd5b505190506bffffffffffffffffffffffff8216811015612de357606f54612dde906001600160a01b03168483614ae5565b611cec565b606f54611cec906001600160a01b0316846bffffffffffffffffffffffff8516614ae5565b6001600160a01b038116600081815260796020908152604080832042845282529182902082517f18160ddd00000000000000000000000000000000000000000000000000000000815292518594919391926318160ddd9260048082019391829003018186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d6020811015612ea457600080fd5b505181554260018201556001600160a01b0383166000908152607b6020526040902054612ed75760006002820155612f6e565b6001600160a01b0382166000908152607960209081526040808320607a8352818420607b9093529083205490918391612f11906001612cca565b81548110612f1b57fe5b906000526020600020015481526020019081526020016000209050612f67612f5c826000015461160584600101548660010154612cca90919063ffffffff16565b6002830154906124f3565b6002830155505b506001600160a01b03166000818152607a6020908152604080832080546001818101835591855283852042910155938352607b90915290208054909101905550565b6001600160a01b038085166000818152607760209081526040808320948816808452948252808320428452600480820184529382902082516370a0823160e01b8152948501969096529051909493926370a08231926024808301939192829003018186803b15801561302157600080fd5b505afa158015613035573d6000803e3d6000fd5b505050506040513d602081101561304b57600080fd5b5051815542600182015560038201546002820181905561307157600060038201556130ba565b815460008181526004840160205260409020546130b4916130989190611605904290612cca565b83546000908152600485016020526040902060030154906124f3565b60038201555b600183151514156130e8578315806130d457506001820154155b156130e0574260018301555b428255613108565b805461310857600080835560018301819055613108906002840190615e61565b5060028101805460018181018355600092835260209092204291015560039091018054909101905550505050565b6000613143848484614b65565b905061323f846001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561318157600080fd5b505afa158015613195573d6000803e3d6000fd5b505050506040513d60208110156131ab57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b1580156131ef57600080fd5b505afa158015613203573d6000803e3d6000fd5b505050506040513d602081101561321957600080fd5b5051736b175474e89094c44da98b954eedeac495271d0f61323a8685612afd565b614ebc565b4260009081526071602052604090209093508261326b576070546132639085612cca565b60705561327c565b60705461327890856124f3565b6070555b6070548155426001820181905561329290615073565b6002820155607354600382018190556132b1576000600482015561332c565b60006071600060726132cf6001607354612cca90919063ffffffff16565b815481106132d957fe5b90600052602060002001548152602001908152602001600020905061332561331a826000015461160584600101548660010154612cca90919063ffffffff16565b6004830154906124f3565b6004830155505b60728054600181018255600091909152427fdffbd64cc7c1a7eb27984335d9416d51137a03d3fabec7141025c62663253fe190910181905561336d906150ab565b61337885858561573e565b5050607380546001019055505050565b600061339330615bc4565b15905090565b600054610100900460ff16806133b257506133b2613388565b806133c0575060005460ff16155b6133fb5760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff16158015611fbb576000805460ff1961ff0019909116610100171660011790558015611fcd576000805461ff001916905550565b600054610100900460ff16806134525750613452613388565b80613460575060005460ff16155b61349b5760405162461bcd60e51b815260040180806020018281038252602e815260200180615eb6602e913960400191505060405180910390fd5b600054610100900460ff161580156134c6576000805460ff1961ff0019909116610100171660011790555b60006134d0612503565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611fcd576000805461ff001916905550565b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008060008060008590506000816001600160a01b03166303976e386040518163ffffffff1660e01b815260040160206040518083038186803b1580156135cb57600080fd5b505afa1580156135df573d6000803e3d6000fd5b505050506040513d60208110156135f557600080fd5b50516040805163d3406abd60e01b815290519192506000916136b091613645916001600160a01b0387169163d3406abd916004808301926020929190829003018186803b15801561122557600080fd5b846001600160a01b03166303cddb2c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561367e57600080fd5b505afa158015613692573d6000803e3d6000fd5b505050506040513d60208110156136a857600080fd5b5051906124f3565b90506000836001600160a01b03166303cddb2c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156136ed57600080fd5b505afa158015613701573d6000803e3d6000fd5b505050506040513d602081101561371757600080fd5b505190506000808080848711801561372f5750858710155b1561375857600193508392506137458786612cca565b91506137518787612cca565b90506137bd565b84871015801561376757508587105b1561378a57600193506000925061377e8786612cca565b91506137518688612cca565b848710801561379857508587105b156137bd57600093508392506137ae8588612cca565b91506137ba8688612cca565b90505b929a50985096509450505050509193509193565b6000670de0b6b3a76400006137e68484612ca6565b816137ed57fe5b049392505050565b6000808790506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561383657600080fd5b505afa15801561384a573d6000803e3d6000fd5b505050506040513d602081101561386057600080fd5b50516040805162f376cb60e21b8152905191925060009182916001600160a01b038616916303cddb2c91600480820192602092909190829003018186803b1580156138aa57600080fd5b505afa1580156138be573d6000803e3d6000fd5b505050506040513d60208110156138d457600080fd5b5051604080516272edc760e31b815290519192506000916001600160a01b038716916303976e38916004808301926020929190829003018186803b15801561391b57600080fd5b505afa15801561392f573d6000803e3d6000fd5b505050506040513d602081101561394557600080fd5b50516040805163d3406abd60e01b8152905191925060009182916139d2916139cb916001600160a01b038b169163d3406abd91600480820192602092909190829003018186803b15801561399857600080fd5b505afa1580156139ac573d6000803e3d6000fd5b505050506040513d60208110156139c257600080fd5b50518690612afd565b85906124f3565b90508c6001600160a01b0316876001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015613a1757600080fd5b505afa158015613a2b573d6000803e3d6000fd5b505050506040513d6020811015613a4157600080fd5b50516001600160a01b03161415613af657606654613a609087906137d1565b945060018c1515148015613a76575060018a1515145b15613ab957613a86856002612ca6565b9150613aa6613a9f613a988386612cda565b8790612afd565b86906124f3565b945081851115613ab4578194505b613b06565b60018c1515148015613ac9575089155b15613af657613aef61234d613ae8613ae18685612cda565b8890612afd565b8790612cca565b9450613b06565b6000975050505050505050613b10565b5092955050505050505b9695505050505050565b60008460018415151415613bfd57846001600160a01b0316816001600160a01b0316631fe4a6866040518163ffffffff1660e01b815260040160206040518083038186803b158015613b6b57600080fd5b505afa158015613b7f573d6000803e3d6000fd5b505050506040513d6020811015613b9557600080fd5b50516001600160a01b03161415613bfd576001600160a01b03871660009081526080602052604081205460ff16613bce57606954613be8565b6001600160a01b0388166000908152607f60205260409020545b9050613bf484826137d1565b92505050610d3a565b5060009695505050505050565b6000808790506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b158015613c4b57600080fd5b505afa158015613c5f573d6000803e3d6000fd5b505050506040513d6020811015613c7557600080fd5b5051604080517f950c78220000000000000000000000000000000000000000000000000000000081526001600160a01b038b8116600483015291519293506000929185169163950c782291602480820192602092909190829003018186803b158015613ce057600080fd5b505afa158015613cf4573d6000803e3d6000fd5b505050506040513d6020811015613d0a57600080fd5b50516040805162f376cb60e21b815290519192506000916001600160a01b038616916303cddb2c916004808301926020929190829003018186803b158015613d5157600080fd5b505afa158015613d65573d6000803e3d6000fd5b505050506040513d6020811015613d7b57600080fd5b5051604080517fd40244cb00000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0387169163d40244cb916004808301926020929190829003018186803b158015613ddc57600080fd5b505afa158015613df0573d6000803e3d6000fd5b505050506040513d6020811015613e0657600080fd5b50516040805163d3406abd60e01b815290519192506000918291613e59916139cb916001600160a01b038b169163d3406abd91600480820192602092909190829003018186803b15801561399857600080fd5b905060008086138015613e6e575060018d1515145b8015613e7c575060018b1515145b15613ea357613e9c613e8e8786612cda565b606754611718908a906137d1565b9050613fe6565b600086138015613eb5575060018d1515145b8015613ebf57508a155b15613ef157613ed1613e8e8786612cda565b9050613e9c613eea613ee38c85612cda565b8390612afd565b8290612cca565b600086138015613eff57508c155b15613f0c57506000613fe6565b600086128015613f1a57508a155b15613fcb57613f93613e8e896001600160a01b031663449b98266040518163ffffffff1660e01b815260040160206040518083038186803b158015613f5e57600080fd5b505afa158015613f72573d6000803e3d6000fd5b505050506040513d6020811015613f8857600080fd5b50516116cd89615bca565b9050613fa0816002612ca6565b9250613fb9613fb2613ee38c85612cda565b82906124f3565b905082811115613fc65750815b613fe6565b600086128015613fdd575060018b1515145b15613fe6575060005b9e9d5050505050505050505050505050565b6000808790506000816001600160a01b031663950c7822896040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561404d57600080fd5b505afa158015614061573d6000803e3d6000fd5b505050506040513d602081101561407757600080fd5b50516001600160a01b038b166000908152608060205260408120549192509060ff166140a557606a546140c2565b6001600160a01b038b166000908152607f60205260409020600101545b90506001881515141561420c5760008213156141585761414e836001600160a01b031663d40244cb6040518163ffffffff1660e01b815260040160206040518083038186803b15801561411457600080fd5b505afa158015614128573d6000803e3d6000fd5b505050506040513d602081101561413e57600080fd5b50516116cd846117188b866137d1565b9350505050614214565b600082128015614166575085155b156141e95761414e836001600160a01b031663449b98266040518163ffffffff1660e01b815260040160206040518083038186803b1580156141a757600080fd5b505afa1580156141bb573d6000803e3d6000fd5b505050506040513d60208110156141d157600080fd5b50516116cd6141df85615bca565b6117188b866137d1565b6000821280156141fb57506001861515145b1561420c5760009350505050614214565b600093505050505b979650505050505050565b6000808390506000816001600160a01b0316636db40dc26040518163ffffffff1660e01b815260040160206040518083038186803b15801561426057600080fd5b505afa158015614274573d6000803e3d6000fd5b505050506040513d602081101561428a57600080fd5b505160408051631f0b96b960e31b81529051919250600091829161438b916001600160a01b038b169163f85cb5c8916004808301926020929190829003018186803b1580156142d857600080fd5b505afa1580156142ec573d6000803e3d6000fd5b505050506040513d602081101561430257600080fd5b50516040805162f376cb60e21b81529051736b175474e89094c44da98b954eedeac495271d0f916001600160a01b038916916303cddb2c91600480820192602092909190829003018186803b15801561435a57600080fd5b505afa15801561436e573d6000803e3d6000fd5b505050506040513d602081101561438457600080fd5b5051614ebc565b604080516003808252608082019092529192506000919060208201606080368337019050509050846001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b1580156143eb57600080fd5b505afa1580156143ff573d6000803e3d6000fd5b505050506040513d60e081101561441557600080fd5b50608081015160a082015160c0909201518351919291849060009061443657fe5b602002602001018460018151811061444a57fe5b602002602001018560028151811061445e57fe5b6020026020010183815250838152508381525050505060006144aa8a898460008151811061448857fe5b60200260200101518560018151811061449d57fe5b60200260200101516125ae565b90506144c76144b98285612cda565b6068546117189088906137d1565b9a9950505050505050505050565b6000808490506000846001600160a01b0316826001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b15801561452057600080fd5b505afa158015614534573d6000803e3d6000fd5b505050506040513d602081101561454a57600080fd5b5051604080517f02d05d3f00000000000000000000000000000000000000000000000000000000815290516001600160a01b0392831693909314935060009283928616916302d05d3f916004808301926020929190829003018186803b1580156145b357600080fd5b505afa1580156145c7573d6000803e3d6000fd5b505050506040513d60208110156145dd57600080fd5b50516001600160a01b031614156145f55760006145f8565b60015b905060005b60048160ff1610156146be576000846001600160a01b03166363f568b9836040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561465257600080fd5b505afa158015614666573d6000803e3d6000fd5b505050506040513d602081101561467c57600080fd5b505190506001600160a01b038116156146b55760019092019183806146b25750876001600160a01b0316816001600160a01b0316145b93505b506001016145fd565b5060ff811661474a57614740613a9f886001600160a01b031663f251fc8c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561470657600080fd5b505afa15801561471a573d6000803e3d6000fd5b505050506040513d602081101561473057600080fd5b5051606d54612b159089906137d1565b93505050506124ec565b811561476f57614740613a9f8260ff16612b15606d54896137d190919063ffffffff16565b509295945050505050565b670de0b6b3a764000090565b60008061479161477a565b90505b82156124ec5760028306156147b0576147ad81856137d1565b90505b6147ba84806137d1565b9350600283049250614794565b6001600160a01b03808516600090815260776020908152604080832093871683529290529081206002810180548392918391614804906001612cca565b8154811061480e57fe5b9060005260206000200154905060008260020160008154811061482d57fe5b906000526020600020015490508582118061484757508681105b156148df5760005b60028401548110156148dd578684600201828154811061486b57fe5b9060005260206000200154116148985783600201818154811061488a57fe5b906000526020600020015492505b878460020182815481106148a857fe5b9060005260206000200154116148d5578360020181815481106148c757fe5b906000526020600020015491505b60010161484f565b505b9890975095505050505050565b6001600160a01b0383166000908152607a602052604081205481908190614914906001612cca565b6001600160a01b0387166000908152607a60205260408120805492935090918390811061493d57fe5b906000526020600020015490506000607a6000896001600160a01b03166001600160a01b0316815260200190815260200160002060008154811061497d57fe5b906000526020600020015490508582118061499757508681105b156149f85760005b8381116149f6576001600160a01b0389166000908152607a602052604081208054839081106149ca57fe5b906000526020600020015490508781116149e2578093505b8881116149ed578092505b5060010161499f565b505b97909650945050505050565b6000808211614a5a576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816137ed57fe5b600081614ab7576040805162461bcd60e51b815260206004820152601060248201527f43616e7420646976696465206279203000000000000000000000000000000000604482015290519081900360640190fd5b60008311614ac65760006124ec565b6124ec600161254d84612b15836129bb89670de0b6b3a7640000612ca6565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052611cec908490615be1565b600080606e60009054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015614bb657600080fd5b505afa158015614bca573d6000803e3d6000fd5b505050506040513d6020811015614be057600080fd5b505160408051630ad7511760e31b815290519192506000916001600160a01b038085169263ac41865a92918a16916356ba88b891600480820192602092909190829003018186803b158015614c3457600080fd5b505afa158015614c48573d6000803e3d6000fd5b505050506040513d6020811015614c5e57600080fd5b505160408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b158015614ca257600080fd5b505afa158015614cb6573d6000803e3d6000fd5b505050506040513d6020811015614ccc57600080fd5b5051604080516001600160e01b031960e085901b1681526001600160a01b039092166004830152736b175474e89094c44da98b954eedeac495271d0f6024830152516044808301926020929190829003018186803b158015614d2d57600080fd5b505afa158015614d41573d6000803e3d6000fd5b505050506040513d6020811015614d5757600080fd5b50516001600160a01b0387166000908152607d6020526040902054909150614da3576001600160a01b0386166000908152607d6020526040902085815560010181905591506124ec9050565b8315614e5b576001600160a01b0386166000908152607d6020526040902054614e1290614dd090876124f3565b6116cd670de0b6b3a7640000612b15614de98a87612ca6565b6001600160a01b038c166000908152607d60205260409020805460019091015461254d91612ca6565b6001600160a01b0387166000908152607d60205260409020600181019190915554614e3d90866124f3565b6001600160a01b0387166000908152607d6020526040902055614e98565b6001600160a01b0386166000908152607d6020526040902054614e7e9086612cca565b6001600160a01b0387166000908152607d60205260409020555b5050506001600160a01b0383166000908152607d60205260409020600101546124ec565b600080614ec885615c92565b614f3657846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f0557600080fd5b505afa158015614f19573d6000803e3d6000fd5b505050506040513d6020811015614f2f57600080fd5b5051614f39565b60125b60ff1690506000614f4985615c92565b614fb757846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015614f8657600080fd5b505afa158015614f9a573d6000803e3d6000fd5b505050506040513d6020811015614fb057600080fd5b5051614fba565b60125b60ff16905060128211158015614fd1575060128111155b615022576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b808214156150345783925050506124ec565b8181111561505c576150536150498284612cca565b8590600a0a612ca6565b925050506124ec565b613b106150698383612cca565b8590600a0a614a04565b60008061509e670de0b6b3a7640000612b156276a700612bdf60655488612cca90919063ffffffff16565b90506124ec8160016124f3565b606e546040805163184a263160e11b815290516150f1926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b60006150fc82615073565b600081815260746020526040812091925060759061511b846001612cca565b815260208101919091526040016000205460ff166156c15760018101829055607354615182576000600282015561515182612507565b6003820180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff9290921691909117905561568d565b607354600090615193906001612cca565b905060006151ed60716000607285815481106151ab57fe5b90600052602060002001548152602001908152602001600020600401546071600088815260200190815260200160002060040154612cca90919063ffffffff16565b90506151fa846001612cca565b607160006072858154811061520b57fe5b9060005260206000200154815260200190815260200160002060020154141561533e57615299615271607160006072868154811061524557fe5b906000526020600020015481526020019081526020016000206001015487612cca90919063ffffffff16565b612b1561529261528b61160b6276a7006129bb8b82612ca6565b8990612cca565b8490612ca6565b60028401556152a784612507565b6003840180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff929092169190911790556002830154615316906152e7908390612cca565b607460006152f6886001612cca565b8152602001908152602001600020600201546124f390919063ffffffff16565b60746000615325876001612cca565b815260208101919091526040016000206002015561568a565b60005b615381607160006072868154811061535557fe5b906000526020600020015481526020019081526020016000206002015486612cca90919063ffffffff16565b8111615688576000607460006153cd846071600060728a815481106153a257fe5b90600052602060002001548152602001908152602001600020600201546124f390919063ffffffff16565b8152602001908152602001600020905060006153fe61160b6276a700611605866071600060728c815481106153a257fe5b9050826154dc576154a061549561544b6071600060728a8154811061541f57fe5b90600052602060002001548152602001908152602001600020600101548b612cca90919063ffffffff16565b612b1561548e6071600060728c8154811061546257fe5b906000526020600020015481526020019081526020016000206001015486612cca90919063ffffffff16565b8890612ca6565b6002840154906124f3565b826002018190555060716000607287815481106154b957fe5b60009182526020808320909101548352820192909252604001902054825561567e565b61551c60716000607288815481106154f057fe5b906000526020600020015481526020019081526020016000206002015488612cca90919063ffffffff16565b8310156155f857615573615566607160006072898154811061553a57fe5b90600052602060002001548152602001908152602001600020600101548a612cca90919063ffffffff16565b612b15866276a700612ca6565b8260020181905550615598615593846071600060728a815481106153a257fe5b612507565b8260030160006101000a8154816bffffffffffffffffffffffff02191690836bffffffffffffffffffffffff1602179055506155df8360716000607289815481106153a257fe5b826001018190555060716000607287815481106154b957fe5b61563761560f607160006072898154811061553a57fe5b612b1561563061562961160b6276a7006129bb8e82612ca6565b8c90612cca565b8790612ca6565b600287015561564587612507565b6003870180546bffffffffffffffffffffffff19166bffffffffffffffffffffffff929092169190911790556001860187905560705486555b5050600101615341565b505b50505b60016075600061569d8584612cca565b81526020810191909152604001600020805460ff1916911515919091179055615735565b61572f612f5c6071600060726156e36001607354612cca90919063ffffffff16565b815481106156ed57fe5b90600052602060002001548152602001908152602001600020600401546071600087815260200190815260200160002060040154612cca90919063ffffffff16565b60028201555b60705490555050565b606e546040805163184a263160e11b81529051615784926001600160a01b0316916330944c62916004808301926020929190829003018186803b15801561185457600080fd5b6001600160a01b0383166000908152607c60205260408120816157a642615073565b815260208101919091526040908101600090812082516003808252608082019094529093509091816020016020820280368337019050509050846001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b15801561581857600080fd5b505afa15801561582c573d6000803e3d6000fd5b505050506040513d60e081101561584257600080fd5b50608081015160a082015160c0909201518351919291849060009061586357fe5b602002602001018460018151811061587757fe5b602002602001018560028151811061588b57fe5b602090810291909101019290925291905252600382015460ff16615b6c576158c6816000815181106158b957fe5b6020026020010151615073565b6158cf42615073565b14156158ef57600060028301556158e542615073565b6001830155615b58565b600061596961591b8360028151811061590457fe5b602002602001015142612cca90919063ffffffff16565b607c6000896001600160a01b03166001600160a01b031681526020019081526020016000206000615952866002815181106158b957fe5b815260208101919091526040016000205490612ca6565b905060008061598c8460028151811061597e57fe5b602002602001015142612bbe565b9150915060005b82811015615b53576001600160a01b0389166000908152607c60205260408120816159be85856124f3565b8152602001908152602001600020905060006159ed61160b6276a70061160586886124f390919063ffffffff16565b905082615a4557615a3b615495615a0a8960028151811061590457fe5b612b15615a348b600281518110615a1d57fe5b602002602001015186612cca90919063ffffffff16565b8a90612ca6565b6002830155615b49565b600083118015615a5e575084615a5c8460016124f3565b105b15615ad557615a83615a768860028151811061590457fe5b612b15886276a700612ca6565b6002830155615a9284846124f3565b6001808401919091556001600160a01b038c166000908152607c60209081526040808320888452909152902054835560038301805460ff19169091179055615b49565b615b0f615ae88860028151811061590457fe5b612b15615b086116c661160b6276a7006129bb6276a70061160542615073565b8990612ca6565b60028301556001600160a01b038b166000908152607c602090815260408083208784529091529020548255615b4342615073565b60018301555b5050600101615993565b505050505b60038201805460ff19166001179055615b90565b615b8a615495615b828360028151811061590457fe5b845490612ca6565b60028301555b60018315151415615bae578154615ba790856124f3565b8255615bbd565b8154615bba9085612cca565b82555b5050505050565b3b151590565b600080821215615bdd5781600003610d26565b5090565b6000615c36826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615cc89092919063ffffffff16565b805190915015611cec57808060200190516020811015615c5557600080fd5b5051611cec5760405162461bcd60e51b815260040180806020018281038252602a815260200180615ee4602a913960400191505060405180910390fd5b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0383161480610d265750506001600160a01b03161590565b6060610c55848460008585615cdc85615bc4565b615d2d576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310615d6b5780518252601f199092019160209182019101615d4c565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615dcd576040519150601f19603f3d011682016040523d82523d6000602084013e615dd2565b606091505b509150915061421482828660608315615dec5750816124ec565b825115615dfc5782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315612b7b578181015183820152602001612b63565b60405180606001604052806003906020820280368337509192915050565b5080546000825590600052602060002090810190611fcd91905b80821115615bdd5760008155600101615e7b56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65645361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220128e58177cdbed14ba8f0388163dc90f11460d3c9f315c936c3591ad08a1fe3764736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkProtocol(uint256)": {
        "params": {
          "time": "Timestamp"
        }
      },
      "checkQuarter(uint256)": {
        "params": {
          "_num": "Number of quarter"
        }
      },
      "getContributorPower(address,address,uint256,uint256)": {
        "params": {
          "_contributor": "Address if the contributor",
          "_from": "Initial timestamp",
          "_garden": "Address of the garden where the contributor belongs to",
          "_to": "End timestamp"
        },
        "returns": {
          "_0": "uint256     Contributor power during that period"
        }
      },
      "getGardenProfitsSharing(address)": {
        "params": {
          "_garden": "Address of the garden"
        }
      },
      "getRewards(address,address,address[])": {
        "params": {
          "_contributor": "Address of the contributor to check",
          "_finalizedStrategies": "List of addresses of the finalized strategies to check",
          "_garden": "Garden to which the strategies and the user must belong to"
        },
        "returns": {
          "_0": "Array of size 7 with the following distribution: rewards[0]: Strategist BABL , rewards[1]: Strategist Profit, rewards[2]: Steward BABL, rewards[3]: Steward Profit, rewards[4]: LP BABL, rewards[5]: total BABL, rewards[6]: total Profits"
        }
      },
      "getStrategyRewards(address)": {
        "params": {
          "_strategy": "Strategy to check"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sendTokensToContributor(address,uint256)": {
        "params": {
          "_amount": "Amount of tokens to send the address to",
          "_to": "Address to send the tokens to"
        }
      },
      "setBablToken(address)": {
        "params": {
          "_bablToken": "BABLToken address"
        }
      },
      "setProfitRewards(address,uint256,uint256,uint256)": {
        "params": {
          "_lpShare": "New % of lpShare",
          "_stewardsShare": "New % of stewardsShare",
          "_strategistShare": "New % of strategistShare"
        }
      },
      "tokenSupplyPerQuarter(uint256)": {
        "params": {
          "_quarter": "Number of the epoch (quarter)"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateGardenPowerAndContributor(address,address,uint256,bool,uint256)": {
        "params": {
          "_contributor": "Address of the contributor",
          "_depositOrWithdraw": "If the timestamp is a deposit (true) or a withdraw (false)",
          "_garden": "Address of the garden the contributor belongs to",
          "_pid": "The pid # of the Garden timestamps",
          "_previousBalance": "Previous balance of the contributor"
        }
      },
      "updateProtocolPrincipal(uint256,bool)": {
        "params": {
          "_addOrSubstract": "Whether we are adding or substracting capital",
          "_capital": "Amount of capital in any type of asset to be normalized into DAI"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkProtocol(uint256)": {
        "notice": "Check the protocol state in a certain timestamp"
      },
      "checkQuarter(uint256)": {
        "notice": "Check the quarter state for a specific quarter"
      },
      "getContributorPower(address,address,uint256,uint256)": {
        "notice": "Gets the contributor power from one timestamp to the other"
      },
      "getGardenProfitsSharing(address)": {
        "notice": "Check the garden profit sharing % if different from default"
      },
      "getRewards(address,address,address[])": {
        "notice": "Calculates the profits and BABL that a contributor should receive from a series of finalized strategies"
      },
      "getStrategyRewards(address)": {
        "notice": "Gets the total amount of rewards for a given strategy"
      },
      "sendTokensToContributor(address,uint256)": {
        "notice": "Sends BABL tokens rewards to a contributor after a claim is requested to the protocol."
      },
      "setBablToken(address)": {
        "notice": "Function that set the babl Token address as it is going to be released in a future date"
      },
      "setProfitRewards(address,uint256,uint256,uint256)": {
        "notice": "Set customized profit shares for a specific garden by the gardener"
      },
      "startBABLRewards()": {
        "notice": "Starts BABL Rewards Mining Program from the controller."
      },
      "tokenSupplyPerQuarter(uint256)": {
        "notice": "Calculates the BABL rewards supply for each quarter"
      },
      "updateGardenPowerAndContributor(address,address,uint256,bool,uint256)": {
        "notice": "Function that set each contributor timestamp per garden"
      },
      "updateProtocolPrincipal(uint256,bool)": {
        "notice": "Function that adds/substract the capital received to the total principal of the protocol per timestamp"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1447,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 48652,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "START_TIME",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 48654,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "BABL_STRATEGIST_SHARE",
        "offset": 0,
        "slot": "102",
        "type": "t_uint256"
      },
      {
        "astId": 48656,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "BABL_STEWARD_SHARE",
        "offset": 0,
        "slot": "103",
        "type": "t_uint256"
      },
      {
        "astId": 48658,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "BABL_LP_SHARE",
        "offset": 0,
        "slot": "104",
        "type": "t_uint256"
      },
      {
        "astId": 48660,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "PROFIT_STRATEGIST_SHARE",
        "offset": 0,
        "slot": "105",
        "type": "t_uint256"
      },
      {
        "astId": 48662,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "PROFIT_STEWARD_SHARE",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 48664,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "PROFIT_LP_SHARE",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 48666,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "PROFIT_PROTOCOL_FEE",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 48668,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "CREATOR_BONUS",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 48738,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "controller",
        "offset": 0,
        "slot": "110",
        "type": "t_contract(IBabController)33636"
      },
      {
        "astId": 48740,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "babltoken",
        "offset": 0,
        "slot": "111",
        "type": "t_contract(TimeLockedToken)54902"
      },
      {
        "astId": 48742,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "protocolPrincipal",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 48746,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "protocolPerTimestamp",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_uint256,t_struct(ProtocolPerTimestamp)48688_storage)"
      },
      {
        "astId": 48749,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "timeList",
        "offset": 0,
        "slot": "114",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 48751,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "pid",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 48755,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "protocolPerQuarter",
        "offset": 0,
        "slot": "116",
        "type": "t_mapping(t_uint256,t_struct(ProtocolPerQuarter)48697_storage)"
      },
      {
        "astId": 48759,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "isProtocolPerQuarter",
        "offset": 0,
        "slot": "117",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 48765,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "rewardsPowerOverhead",
        "offset": 0,
        "slot": "118",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 48771,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "contributorPerGarden",
        "offset": 0,
        "slot": "119",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(ContributorPerGarden)48718_storage))"
      },
      {
        "astId": 48777,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "checkpoints",
        "offset": 0,
        "slot": "120",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(Checkpoints)48736_storage))"
      },
      {
        "astId": 48783,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "gardenPowerByTimestamp",
        "offset": 0,
        "slot": "121",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(GardenPowerByTimestamp)48704_storage))"
      },
      {
        "astId": 48788,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "gardenTimelist",
        "offset": 0,
        "slot": "122",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 48792,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "gardenPid",
        "offset": 0,
        "slot": "123",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 48812,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "strategyPerQuarter",
        "offset": 0,
        "slot": "124",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(StrategyPerQuarter)48801_storage))"
      },
      {
        "astId": 48816,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "strategyPricePerTokenUnit",
        "offset": 0,
        "slot": "125",
        "type": "t_mapping(t_address,t_struct(StrategyPricePerTokenUnit)48806_storage)"
      },
      {
        "astId": 48818,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "status",
        "offset": 0,
        "slot": "126",
        "type": "t_uint256"
      },
      {
        "astId": 48824,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "gardenProfitSharing",
        "offset": 0,
        "slot": "127",
        "type": "t_mapping(t_address,t_array(t_uint256)3_storage)"
      },
      {
        "astId": 48828,
        "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
        "label": "gardenCustomProfitSharing",
        "offset": 0,
        "slot": "128",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)3_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[3]",
        "numberOfBytes": "96"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)33636": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_contract(TimeLockedToken)54902": {
        "encoding": "inplace",
        "label": "contract TimeLockedToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)3_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[3])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)3_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(Checkpoints)48736_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RewardsDistributor.Checkpoints))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(Checkpoints)48736_storage)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(ContributorPerGarden)48718_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct RewardsDistributor.ContributorPerGarden))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(ContributorPerGarden)48718_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(GardenPowerByTimestamp)48704_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct RewardsDistributor.GardenPowerByTimestamp))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(GardenPowerByTimestamp)48704_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(StrategyPerQuarter)48801_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct RewardsDistributor.StrategyPerQuarter))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(StrategyPerQuarter)48801_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Checkpoints)48736_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.Checkpoints)",
        "numberOfBytes": "32",
        "value": "t_struct(Checkpoints)48736_storage"
      },
      "t_mapping(t_address,t_struct(ContributorPerGarden)48718_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.ContributorPerGarden)",
        "numberOfBytes": "32",
        "value": "t_struct(ContributorPerGarden)48718_storage"
      },
      "t_mapping(t_address,t_struct(StrategyPricePerTokenUnit)48806_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RewardsDistributor.StrategyPricePerTokenUnit)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyPricePerTokenUnit)48806_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(GardenPowerByTimestamp)48704_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardsDistributor.GardenPowerByTimestamp)",
        "numberOfBytes": "32",
        "value": "t_struct(GardenPowerByTimestamp)48704_storage"
      },
      "t_mapping(t_uint256,t_struct(ProtocolPerQuarter)48697_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardsDistributor.ProtocolPerQuarter)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtocolPerQuarter)48697_storage"
      },
      "t_mapping(t_uint256,t_struct(ProtocolPerTimestamp)48688_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardsDistributor.ProtocolPerTimestamp)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtocolPerTimestamp)48688_storage"
      },
      "t_mapping(t_uint256,t_struct(StrategyPerQuarter)48801_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardsDistributor.StrategyPerQuarter)",
        "numberOfBytes": "32",
        "value": "t_struct(StrategyPerQuarter)48801_storage"
      },
      "t_mapping(t_uint256,t_struct(TimestampContribution)48727_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct RewardsDistributor.TimestampContribution)",
        "numberOfBytes": "32",
        "value": "t_struct(TimestampContribution)48727_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Checkpoints)48736_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.Checkpoints",
        "members": [
          {
            "astId": 48729,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "fromDepositAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48731,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48733,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "gardenFromDepositAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 48735,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "gardenLastDepositAt",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ContributorPerGarden)48718_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.ContributorPerGarden",
        "members": [
          {
            "astId": 48706,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48708,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "initialDepositAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48711,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "timeListPointer",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 48713,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "pid",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 48717,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "tsContributions",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_struct(TimestampContribution)48727_storage)"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(GardenPowerByTimestamp)48704_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.GardenPowerByTimestamp",
        "members": [
          {
            "astId": 48699,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48701,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48703,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "power",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(ProtocolPerQuarter)48697_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.ProtocolPerQuarter",
        "members": [
          {
            "astId": 48690,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48692,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48694,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterPower",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 48696,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "supplyPerQuarter",
            "offset": 0,
            "slot": "3",
            "type": "t_uint96"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(ProtocolPerTimestamp)48688_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.ProtocolPerTimestamp",
        "members": [
          {
            "astId": 48679,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48681,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "time",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48683,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterBelonging",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 48685,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "timeListPointer",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 48687,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "power",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_struct(StrategyPerQuarter)48801_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.StrategyPerQuarter",
        "members": [
          {
            "astId": 48794,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterPrincipal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48796,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterNumber",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48798,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "quarterPower",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 48800,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "initialized",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(StrategyPricePerTokenUnit)48806_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.StrategyPricePerTokenUnit",
        "members": [
          {
            "astId": 48803,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "preallocated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48805,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "pricePerTokenUnit",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TimestampContribution)48727_storage": {
        "encoding": "inplace",
        "label": "struct RewardsDistributor.TimestampContribution",
        "members": [
          {
            "astId": 48720,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "supply",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48722,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 48724,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "timePointer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 48726,
            "contract": "contracts/token/RewardsDistributor.sol:RewardsDistributorV5",
            "label": "power",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint96": {
        "encoding": "inplace",
        "label": "uint96",
        "numberOfBytes": "12"
      }
    }
  }
}