{
  "address": "0x4bEB127e735647116cf428A3C951c93f46B49fA7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_uniswapAnchoredView",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "AdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "AdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapAnchoredView",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "uniswapAssets",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "updateAdapters",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e2f5b0f0209a441657b1d7eddce1db5ddc1241c434e13d2d26ff29d7cd1dbc2",
  "receipt": {
    "to": null,
    "from": "0x040cC3AF8455F3c34D1df1D2a305e047a062BeBf",
    "contractAddress": "0x4bEB127e735647116cf428A3C951c93f46B49fA7",
    "transactionIndex": 197,
    "gasUsed": "1607860",
    "logsBloom": "0x
    "blockHash": "0x83ed39e0572480a6432d382015fbbbb0b40a265d9b9f5a094b20b11b2de6d60f",
    "transactionHash": "0x7e2f5b0f0209a441657b1d7eddce1db5ddc1241c434e13d2d26ff29d7cd1dbc2",
    "logs": [
      {
        "transactionIndex": 197,
        "blockNumber": 12545185,
        "transactionHash": "0x7e2f5b0f0209a441657b1d7eddce1db5ddc1241c434e13d2d26ff29d7cd1dbc2",
        "address": "0x4bEB127e735647116cf428A3C951c93f46B49fA7",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000040cc3af8455f3c34d1df1d2a305e047a062bebf"
        ],
        "data": "0x",
        "logIndex": 309,
        "blockHash": "0x83ed39e0572480a6432d382015fbbbb0b40a265d9b9f5a094b20b11b2de6d60f"
      }
    ],
    "blockNumber": 12545185,
    "cumulativeGasUsed": "13070083",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0x922018674c12a7f0d394ebeef9b58f186cde13c1",
    [
      "0xDB1Bf4f4976A4BEd769B9106bd41E0211E342446"
    ]
  ],
  "solcInputHash": "3d00fad6e2a8def9880d61c8c4c2d9ca",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_uniswapAnchoredView\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"AdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapAnchoredView\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"uniswapAssets\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"updateAdapters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle, calculated using common asset pairs, or uses external data to calculate price. Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\",\"kind\":\"dev\",\"methods\":{\"addAdapter(address)\":{\"params\":{\"_adapter\":\"Address of new adapter\"}},\"constructor\":{\"params\":{\"_adapters\":\"List of adapters used to price assets created by other protocols\",\"_controller\":\"Address of controller contract\",\"_uniswapAnchoredView\":\"Address of the uniswap anchored view that compound maintains\"}},\"getPrice(address,address)\":{\"params\":{\"_assetOne\":\"Address of first asset in pair\",\"_assetTwo\":\"Address of second asset in pair\"},\"returns\":{\"_0\":\"Price of asset pair to 18 decimals of precision\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAdapter(address)\":{\"params\":{\"_adapter\":\"Address of  adapter to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAdapters(address,address)\":{\"params\":{\"_assetOne\":\"First Asset of the pair\",\"_assetTwo\":\"Second Asset of the pair\"}}},\"title\":\"PriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdapter(address)\":{\"notice\":\"GOVERNANCE FUNCTION: Add new oracle adapter.\"},\"constructor\":{\"notice\":\"Set state variables and map asset pairs to their oracles\"},\"getAdapters()\":{\"notice\":\"Returns an array of adapters\"},\"getPrice(address,address)\":{\"notice\":\"SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:  1) Check to see if a direct or inverse oracle of the pair exists,  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC     could be used to calculate BTC/USDC).  3) If not, check oracle adapters in case one or more of the assets needs external protocol data     to price.  4) If all steps fail, revert.\"},\"removeAdapter(address)\":{\"notice\":\"GOVERNANCE FUNCTION: Remove oracle adapter.\"},\"updateAdapters(address,address)\":{\"notice\":\"Calls the update function in every adapter. e.g Uniswap TWAP\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol SetValuer)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport {AddressArrayUtils} from './lib/AddressArrayUtils.sol';\\nimport {PreciseUnitMath} from './lib/PreciseUnitMath.sol';\\n\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {IUniswapAnchoredView} from './interfaces/external/compound/IUniswapAnchoredView.sol';\\nimport {IOracleAdapter} from './interfaces/IOracleAdapter.sol';\\nimport {IPriceOracle} from './interfaces/IPriceOracle.sol';\\n\\n/**\\n * @title PriceOracle\\n * @author Babylon Finance\\n *\\n * Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle,\\n * calculated using common asset pairs, or uses external data to calculate price.\\n * Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\\n */\\ncontract PriceOracle is Ownable, IPriceOracle {\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event AdapterAdded(address _adapter);\\n    event AdapterRemoved(address _adapter);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller contract\\n    IBabController public controller;\\n\\n    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    mapping(address => bool) public uniswapAssets;\\n\\n    // Address of uniswap anchored view contract. See https://compound.finance/docs/prices#price\\n    address public immutable uniswapAnchoredView;\\n\\n    // List of IOracleAdapters used to return prices of third party protocols (e.g. Uniswap, Compound, Balancer)\\n    address[] public adapters;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _controller                   Address of controller contract\\n     * @param _uniswapAnchoredView          Address of the uniswap anchored view that compound maintains\\n     * @param _adapters                     List of adapters used to price assets created by other protocols\\n     */\\n    constructor(\\n        IBabController _controller,\\n        address _uniswapAnchoredView,\\n        address[] memory _adapters\\n    ) {\\n        controller = _controller;\\n        uniswapAnchoredView = _uniswapAnchoredView;\\n        adapters = _adapters;\\n\\n        uniswapAssets[0x6B175474E89094C44Da98b954EedeAC495271d0F] = true; // dai\\n        uniswapAssets[0x1985365e9f78359a9B6AD760e32412f4a445E862] = true; // rep\\n        uniswapAssets[0xE41d2489571d322189246DaFA5ebDe1F4699F498] = true; // zrx\\n        uniswapAssets[0x0D8775F648430679A709E98d2b0Cb6250d2887EF] = true; // bat\\n        uniswapAssets[0xdd974D5C2e2928deA5F71b9825b8b646686BD200] = true; // knc\\n        uniswapAssets[0x514910771AF9Ca656af840dff83E8264EcF986CA] = true; // link\\n        uniswapAssets[0xc00e94Cb662C3520282E6f5717214004A7f26888] = true; // comp\\n        uniswapAssets[0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48] = true; // USDC\\n        uniswapAssets[0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984] = true; // uni\\n        uniswapAssets[address(0)] = true; // eth\\n        uniswapAssets[WETH] = true; // weth\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:\\n     *  1) Check to see if a direct or inverse oracle of the pair exists,\\n     *  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC\\n     *     could be used to calculate BTC/USDC).\\n     *  3) If not, check oracle adapters in case one or more of the assets needs external protocol data\\n     *     to price.\\n     *  4) If all steps fail, revert.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return                  Price of asset pair to 18 decimals of precision\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view override returns (uint256) {\\n        require(controller.isSystemContract(msg.sender) || msg.sender == owner(), 'Caller must be system contract');\\n        // Same asset. Returns base unit\\n        if (_assetOne == _assetTwo) {\\n            return 10**ERC20(_assetOne).decimals();\\n        }\\n\\n        bool priceFound;\\n        uint256 price;\\n\\n        (priceFound, price) = _getPriceFromUniswapAnchoredView(_assetOne, _assetTwo);\\n        if (!priceFound) {\\n            (priceFound, price) = _getPriceFromAdapters(_assetOne, _assetTwo);\\n        }\\n        require(priceFound, 'Price not found');\\n        return price;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add new oracle adapter.\\n     *\\n     * @param _adapter         Address of new adapter\\n     */\\n    function addAdapter(address _adapter) external onlyOwner {\\n        require(!adapters.contains(_adapter), 'Adapter already exists');\\n        adapters.push(_adapter);\\n\\n        emit AdapterAdded(_adapter);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove oracle adapter.\\n     *\\n     * @param _adapter         Address of  adapter to remove\\n     */\\n    function removeAdapter(address _adapter) external onlyOwner {\\n        adapters = adapters.remove(_adapter);\\n\\n        emit AdapterRemoved(_adapter);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Returns an array of adapters\\n     */\\n    function getAdapters() external view returns (address[] memory) {\\n        return adapters;\\n    }\\n\\n    /**\\n     * Calls the update function in every adapter.\\n     * e.g Uniswap TWAP\\n     * @param _assetOne       First Asset of the pair\\n     * @param _assetTwo       Second Asset of the pair\\n     */\\n    function updateAdapters(address _assetOne, address _assetTwo) external override {\\n        for (uint256 i = 0; i < adapters.length; i += 1) {\\n            IOracleAdapter(adapters[i]).update(_assetOne, _assetTwo);\\n        }\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Try to calculate asset pair price by getting each asset in the pair's price relative to USD.\\n     * Both prices must exist otherwise function returns false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if oracle exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromUniswapAnchoredView(address _assetOne, address _assetTwo)\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        if (uniswapAssets[_assetOne] && uniswapAssets[_assetTwo]) {\\n            IUniswapAnchoredView anchoredView = IUniswapAnchoredView(uniswapAnchoredView);\\n            string memory symbol1 = _assetOne == WETH ? 'ETH' : ERC20(_assetOne).symbol();\\n            string memory symbol2 = _assetTwo == WETH ? 'ETH' : ERC20(_assetTwo).symbol();\\n            uint256 assetOnePrice = anchoredView.price(symbol1);\\n            uint256 assetTwoPrice = anchoredView.price(symbol2);\\n\\n            if (assetOnePrice > 0 && assetTwoPrice > 0) {\\n                return (true, assetOnePrice.preciseDiv(assetTwoPrice));\\n            }\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Scan adapters to see if one or more of the assets needs external protocol data to be priced. If\\n     * does not exist return false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if oracle exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromAdapters(address _assetOne, address _assetTwo) internal view returns (bool, uint256) {\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            (bool priceFound, uint256 price) = IOracleAdapter(adapters[i]).getPrice(_assetOne, _assetTwo);\\n\\n            if (priceFound) {\\n                return (priceFound, price);\\n            }\\n        }\\n\\n        return (false, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x9059334de48d459c581f408aac8b75386932ab44420a3b31b46b389340dbb1b1\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function disableGarden(address _garden) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editIshtarGate(address _ishtarGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function editUniswapFactory(address _newUniswapFactory) external;\\n\\n    function addIntegration(string memory _name, address _integration) external;\\n\\n    function editIntegration(string memory _name, address _integration) external;\\n\\n    function removeIntegration(string memory _name) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setDefaultTradeIntegration(address _newDefaultTradeIntegation) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function enableBABLMiningProgram() external;\\n\\n    function setAllowPublicGardens() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function maxContributorsPerGarden() external view returns (uint256);\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function openPublicGardenCreation() external;\\n\\n    function setMaxContributorsPerGarden(uint256 _newMax) external;\\n\\n    function owner() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function defaultTradeIntegration() external view returns (address);\\n\\n    function protocolDepositGardenTokenFee() external view returns (uint256);\\n\\n    function protocolWithdrawalGardenTokenFee() external view returns (uint256);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getProfitSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getBABLSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function getIntegrationByName(string memory _name) external view returns (address);\\n\\n    function getIntegrationWithHash(bytes32 _nameHashP) external view returns (address);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function isValidIntegration(string memory _name, address _integration) external view returns (bool);\\n\\n    function getMinCooldownPeriod() external view returns (uint256);\\n\\n    function getMaxCooldownPeriod() external view returns (uint256);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n\\n    function uniswapFactory() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7b004d4283f4160790705e75b63d50bb87300be2e32bafb56a0b7d11028739c3\",\"license\":\"Apache License\"},\"contracts/interfaces/IOracleAdapter.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IOracleAdapter)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IOracleAdapter\\n * @author Babylon Finance\\n *\\n * Interface for calling an oracle adapter.\\n */\\ninterface IOracleAdapter {\\n    /**\\n     * Function for retrieving a price that requires sourcing data from outside protocols to calculate.\\n     *\\n     * @param  _assetOne    First asset in pair\\n     * @param  _assetTwo    Second asset in pair\\n     * @return                  Boolean indicating if oracle exists\\n     * @return              Current price of asset represented in uint256\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (bool, uint256);\\n\\n    function update(address _assetOne, address _assetTwo) external;\\n}\\n\",\"keccak256\":\"0xe77f738e9740ce5a33165dbe4027b455eea635812cdceec302863f34952ce388\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateAdapters(address _assetOne, address _assetTwo) external;\\n}\\n\",\"keccak256\":\"0xa22e0e5e166f6f6714553b736ee921b916c37bc5b557042bf6042cc010d2a041\",\"license\":\"Apache License\"},\"contracts/interfaces/external/compound/IUniswapAnchoredView.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IOracleAdapter)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IOracleAdapter\\n * @author Babylon Finance\\n *\\n * Interface for calling an oracle adapter.\\n */\\ninterface IUniswapAnchoredView {\\n    function price(string memory symbol) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x60e2ddf7ad8a78bd54d9dbaa35cce8cf375aef9fa1fdf01e41083d5e4b72897f\",\"license\":\"Apache License\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0x409127cd8cadb573e5de48fd992efbd8b0f1e243d235abc3c5f2fa873195c16a\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb9e221da0132ab13fc991f633d3daac43cc3a99596e63b175e4c85675bd94017\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620019dc380380620019dc833981810160405260608110156200003757600080fd5b815160208301516040808501805191519395929483019291846401000000008211156200006357600080fd5b9083019060208201858111156200007957600080fd5b82518660208202830111640100000000821117156200009757600080fd5b82525081516020918201928201910280838360005b83811015620000c6578181015183820152602001620000ac565b505050509050016040525050506000620000e56200036460201b60201c565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b0319166001600160a01b038516179055606082901b6001600160601b03191660805280516200017190600390602084019062000368565b5050600260205250507ff02f5385b52432c1a270c20c346d380219f286755cbd16bede4ce0fb454a47228054600160ff1991821681179092557fbc4f91af6423551ffb095ab57fd8affaf8c0c400f88b85432aa0b71ca6d09ab380548216831790557fc29c4999a78c3ebf71622ad23dd87d0a73f0b43e94d51a582a710fc0a0921d5780548216831790557f7be26d2af1bea3dd5deab9fbd0b6e87e4de83102162a2c5d67a45f045affba2280548216831790557f1f4dd463c37659e35d28ba19019b4855faa73d28cfc23cf4537ed418b65536d780548216831790557f698237dfa634d11da10159d70f72b31f9b252a79768d52db914572ce99f0c7b080548216831790557fb1c2a895b81f98ee8aadc4d2e6de299902d38600ad58ce7d06c7d9ac3e628c5e80548216831790557fb7598821b71eb990d952f174dec3507a6d48dc93be8e23cae785c98ca310bfbb80548216831790557f8e26ad65a8968434acdb37383cda23018c5945aba6d6e7c8399e7184ccde361780548216831790557fac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b805482168317905573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26000527fde032e96a833a2191f55c5766e34554d9b07734477ea9cb69c40158c1078e79380549091169091179055620003e9565b3390565b828054828255906000526020600020908101928215620003c0579160200282015b82811115620003c057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000389565b50620003ce929150620003d2565b5090565b5b80821115620003ce5760008155600101620003d3565b60805160601c6115d06200040c600039806102bb5280610c4152506115d06000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063b82e16e311610066578063b82e16e3146101f9578063d2179e8d14610251578063f2fde38b1461028b578063f77c4791146102b1576100df565b80638da5cb5b146101a9578063ac41865a146101b1578063ad5c4648146101f1576100df565b80635e684bb3116100bd5780635e684bb31461014d57806360d54d411461017b578063715018a6146101a1576100df565b80630af45704146100e45780634ef501ac14610108578063585cd34b14610125575b600080fd5b6100ec6102b9565b604080516001600160a01b039092168252519081900360200190f35b6100ec6004803603602081101561011e57600080fd5b50356102dd565b61014b6004803603602081101561013b57600080fd5b50356001600160a01b0316610307565b005b61014b6004803603604081101561016357600080fd5b506001600160a01b038135811691602001351661043c565b61014b6004803603602081101561019157600080fd5b50356001600160a01b03166104f1565b61014b6106b5565b6100ec610780565b6101df600480360360408110156101c757600080fd5b506001600160a01b038135811691602001351661078f565b60408051918252519081900360200190f35b6100ec6109a2565b6102016109ba565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023d578181015183820152602001610225565b505050509050019250505060405180910390f35b6102776004803603602081101561026757600080fd5b50356001600160a01b0316610a1c565b604080519115158252519081900360200190f35b61014b600480360360208110156102a157600080fd5b50356001600160a01b0316610a31565b6100ec610b52565b7f000000000000000000000000000000000000000000000000000000000000000081565b600381815481106102ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61030f610b61565b6001600160a01b0316610320610780565b6001600160a01b03161461037b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103e88160038054806020026020016040519081016040528092919081815260200182805480156103d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103b7575b5050505050610b6590919063ffffffff16565b80516103fc916003916020909101906114cc565b50604080516001600160a01b038316815290517fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d9181900360200190a150565b60005b6003548110156104ec576003818154811061045657fe5b6000918252602082200154604080517fc640752d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529151919092169263c640752d926044808201939182900301818387803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b5050505060018101905061043f565b505050565b6104f9610b61565b6001600160a01b031661050a610780565b6001600160a01b031614610565576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6105d28160038054806020026020016040519081016040528092919081815260200182805480156105bf57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105a1575b5050505050610be290919063ffffffff16565b15610624576040805162461bcd60e51b815260206004820152601660248201527f4164617074657220616c72656164792065786973747300000000000000000000604482015290519081900360640190fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa269181900360200190a150565b6106bd610b61565b6001600160a01b03166106ce610780565b6001600160a01b031614610729576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031690565b600154604080517f13bc6d4b00000000000000000000000000000000000000000000000000000000815233600482015290516000926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b1580156107f357600080fd5b505afa158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505180610842575061082d610780565b6001600160a01b0316336001600160a01b0316145b610893576040805162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206d7573742062652073797374656d20636f6e74726163740000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561091f57826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b505160ff16600a0a905061099c565b60008061092c8585610bf8565b90925090508161094657610940858561112c565b90925090505b81610998576040805162461bcd60e51b815260206004820152600f60248201527f5072696365206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b9150505b92915050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b60606003805480602002602001604051908101604052809291908181526020018280548015610a1257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f4575b5050505050905090565b60026020526000908152604090205460ff1681565b610a39610b61565b6001600160a01b0316610a4a610780565b6001600160a01b031614610aa5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610aea5760405162461bcd60e51b81526004018080602001828103825260268152602001806115546026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b3390565b6060600080610b748585611220565b9150915080610bca576040805162461bcd60e51b815260206004820152601560248201527f41646472657373206e6f7420696e2061727261792e0000000000000000000000604482015290519081900360640190fd5b6000610bd68684611283565b50935061099c92505050565b600080610bef8484611220565b95945050505050565b6001600160a01b038216600090815260026020526040812054819060ff168015610c3a57506001600160a01b03831660009081526002602052604090205460ff165b1561111e577f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610db157856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610cbf57600080fd5b505afa158015610cd3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cfc57600080fd5b8101908080516040519392919084640100000000821115610d1c57600080fd5b908301906020820185811115610d3157600080fd5b8251640100000000811182820188101715610d4b57600080fd5b82525081516020918201929091019080838360005b83811015610d78578181015183820152602001610d60565b50505050905090810190601f168015610da55780820380516001836020036101000a031916815260200191505b50604052505050610dce565b6040518060400160405280600381526020016208aa8960eb1b8152505b905060006001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610f2157856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e6c57600080fd5b8101908080516040519392919084640100000000821115610e8c57600080fd5b908301906020820185811115610ea157600080fd5b8251640100000000811182820188101715610ebb57600080fd5b82525081516020918201929091019080838360005b83811015610ee8578181015183820152602001610ed0565b50505050905090810190601f168015610f155780820380516001836020036101000a031916815260200191505b50604052505050610f3e565b6040518060400160405280600381526020016208aa8960eb1b8152505b604051631fc58c3360e31b81526020600482018181528551602484015285519394506000936001600160a01b0388169363fe2c6198938893928392604401918501908083838b5b83811015610f9d578181015183820152602001610f85565b50505050905090810190601f168015610fca5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610fe757600080fd5b505afa158015610ffb573d6000803e3d6000fd5b505050506040513d602081101561101157600080fd5b5051604051631fc58c3360e31b81526020600482018181528551602484015285519394506000936001600160a01b0389169363fe2c6198938893928392604401918501908083838b5b8381101561107257818101518382015260200161105a565b50505050905090810190601f16801561109f5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d60208110156110e657600080fd5b5051905081158015906110f95750600081115b1561111857600161110a83836113e7565b965096505050505050611125565b50505050505b5060009050805b9250929050565b60008060005b600354811015611213576000806003838154811061114c57fe5b600091825260209091200154604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152825193169263ac41865a92604480840193919291829003018186803b1580156111bf57600080fd5b505afa1580156111d3573d6000803e3d6000fd5b505050506040513d60408110156111e957600080fd5b508051602090910151909250905081156112095790935091506111259050565b5050600101611132565b5060009485945092505050565b81516000908190815b8181101561127357846001600160a01b031686828151811061124757fe5b60200260200101516001600160a01b0316141561126b579250600191506111259050565b600101611229565b5060001995600095509350505050565b81516060906000908084106112df576040805162461bcd60e51b815260206004820152601860248201527f496e646578206d757374206265203c2041206c656e6774680000000000000000604482015290519081900360640190fd5b60006001820367ffffffffffffffff811180156112fb57600080fd5b50604051908082528060200260200182016040528015611325578160200160208202803683370190505b50905060005b858110156113735786818151811061133f57fe5b602002602001015182828151811061135357fe5b6001600160a01b039092166020928302919091019091015260010161132b565b50600185015b828110156113c45786818151811061138d57fe5b60200260200101518260018303815181106113a457fe5b6001600160a01b0390921660209283029190910190910152600101611379565b50808686815181106113d257fe5b60200260200101519350935050509250929050565b6000611405826113ff85670de0b6b3a764000061140c565b90611465565b9392505050565b60008261141b5750600061099c565b8282028284828161142857fe5b04146114055760405162461bcd60e51b815260040180806020018281038252602181526020018061157a6021913960400191505060405180910390fd5b60008082116114bb576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816114c457fe5b049392505050565b82805482825590600052602060002090810192821561152e579160200282015b8281111561152e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906114ec565b5061153a92915061153e565b5090565b5b8082111561153a576000815560010161153f56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220b759d78ed7501c7f1b9083c8f3b591013479b9d224fb720b56affc8c5b7fdaea64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100df5760003560e01c80638da5cb5b1161008c578063b82e16e311610066578063b82e16e3146101f9578063d2179e8d14610251578063f2fde38b1461028b578063f77c4791146102b1576100df565b80638da5cb5b146101a9578063ac41865a146101b1578063ad5c4648146101f1576100df565b80635e684bb3116100bd5780635e684bb31461014d57806360d54d411461017b578063715018a6146101a1576100df565b80630af45704146100e45780634ef501ac14610108578063585cd34b14610125575b600080fd5b6100ec6102b9565b604080516001600160a01b039092168252519081900360200190f35b6100ec6004803603602081101561011e57600080fd5b50356102dd565b61014b6004803603602081101561013b57600080fd5b50356001600160a01b0316610307565b005b61014b6004803603604081101561016357600080fd5b506001600160a01b038135811691602001351661043c565b61014b6004803603602081101561019157600080fd5b50356001600160a01b03166104f1565b61014b6106b5565b6100ec610780565b6101df600480360360408110156101c757600080fd5b506001600160a01b038135811691602001351661078f565b60408051918252519081900360200190f35b6100ec6109a2565b6102016109ba565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561023d578181015183820152602001610225565b505050509050019250505060405180910390f35b6102776004803603602081101561026757600080fd5b50356001600160a01b0316610a1c565b604080519115158252519081900360200190f35b61014b600480360360208110156102a157600080fd5b50356001600160a01b0316610a31565b6100ec610b52565b7f000000000000000000000000000000000000000000000000000000000000000081565b600381815481106102ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61030f610b61565b6001600160a01b0316610320610780565b6001600160a01b03161461037b576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6103e88160038054806020026020016040519081016040528092919081815260200182805480156103d557602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116103b7575b5050505050610b6590919063ffffffff16565b80516103fc916003916020909101906114cc565b50604080516001600160a01b038316815290517fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d9181900360200190a150565b60005b6003548110156104ec576003818154811061045657fe5b6000918252602082200154604080517fc640752d0000000000000000000000000000000000000000000000000000000081526001600160a01b03878116600483015286811660248301529151919092169263c640752d926044808201939182900301818387803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b5050505060018101905061043f565b505050565b6104f9610b61565b6001600160a01b031661050a610780565b6001600160a01b031614610565576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6105d28160038054806020026020016040519081016040528092919081815260200182805480156105bf57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116105a1575b5050505050610be290919063ffffffff16565b15610624576040805162461bcd60e51b815260206004820152601660248201527f4164617074657220616c72656164792065786973747300000000000000000000604482015290519081900360640190fd5b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116811790915560408051918252517fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa269181900360200190a150565b6106bd610b61565b6001600160a01b03166106ce610780565b6001600160a01b031614610729576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b6000546001600160a01b031690565b600154604080517f13bc6d4b00000000000000000000000000000000000000000000000000000000815233600482015290516000926001600160a01b0316916313bc6d4b916024808301926020929190829003018186803b1580156107f357600080fd5b505afa158015610807573d6000803e3d6000fd5b505050506040513d602081101561081d57600080fd5b505180610842575061082d610780565b6001600160a01b0316336001600160a01b0316145b610893576040805162461bcd60e51b815260206004820152601e60248201527f43616c6c6572206d7573742062652073797374656d20636f6e74726163740000604482015290519081900360640190fd5b816001600160a01b0316836001600160a01b0316141561091f57826001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156108e657600080fd5b505afa1580156108fa573d6000803e3d6000fd5b505050506040513d602081101561091057600080fd5b505160ff16600a0a905061099c565b60008061092c8585610bf8565b90925090508161094657610940858561112c565b90925090505b81610998576040805162461bcd60e51b815260206004820152600f60248201527f5072696365206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b9150505b92915050565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b60606003805480602002602001604051908101604052809291908181526020018280548015610a1257602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116109f4575b5050505050905090565b60026020526000908152604090205460ff1681565b610a39610b61565b6001600160a01b0316610a4a610780565b6001600160a01b031614610aa5576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b038116610aea5760405162461bcd60e51b81526004018080602001828103825260268152602001806115546026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b3390565b6060600080610b748585611220565b9150915080610bca576040805162461bcd60e51b815260206004820152601560248201527f41646472657373206e6f7420696e2061727261792e0000000000000000000000604482015290519081900360640190fd5b6000610bd68684611283565b50935061099c92505050565b600080610bef8484611220565b95945050505050565b6001600160a01b038216600090815260026020526040812054819060ff168015610c3a57506001600160a01b03831660009081526002602052604090205460ff165b1561111e577f000000000000000000000000000000000000000000000000000000000000000060006001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610db157856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610cbf57600080fd5b505afa158015610cd3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610cfc57600080fd5b8101908080516040519392919084640100000000821115610d1c57600080fd5b908301906020820185811115610d3157600080fd5b8251640100000000811182820188101715610d4b57600080fd5b82525081516020918201929091019080838360005b83811015610d78578181015183820152602001610d60565b50505050905090810190601f168015610da55780820380516001836020036101000a031916815260200191505b50604052505050610dce565b6040518060400160405280600381526020016208aa8960eb1b8152505b905060006001600160a01b03861673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214610f2157856001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610e2f57600080fd5b505afa158015610e43573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e6c57600080fd5b8101908080516040519392919084640100000000821115610e8c57600080fd5b908301906020820185811115610ea157600080fd5b8251640100000000811182820188101715610ebb57600080fd5b82525081516020918201929091019080838360005b83811015610ee8578181015183820152602001610ed0565b50505050905090810190601f168015610f155780820380516001836020036101000a031916815260200191505b50604052505050610f3e565b6040518060400160405280600381526020016208aa8960eb1b8152505b604051631fc58c3360e31b81526020600482018181528551602484015285519394506000936001600160a01b0388169363fe2c6198938893928392604401918501908083838b5b83811015610f9d578181015183820152602001610f85565b50505050905090810190601f168015610fca5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b158015610fe757600080fd5b505afa158015610ffb573d6000803e3d6000fd5b505050506040513d602081101561101157600080fd5b5051604051631fc58c3360e31b81526020600482018181528551602484015285519394506000936001600160a01b0389169363fe2c6198938893928392604401918501908083838b5b8381101561107257818101518382015260200161105a565b50505050905090810190601f16801561109f5780820380516001836020036101000a031916815260200191505b509250505060206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d60208110156110e657600080fd5b5051905081158015906110f95750600081115b1561111857600161110a83836113e7565b965096505050505050611125565b50505050505b5060009050805b9250929050565b60008060005b600354811015611213576000806003838154811061114c57fe5b600091825260209091200154604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301528981166024830152825193169263ac41865a92604480840193919291829003018186803b1580156111bf57600080fd5b505afa1580156111d3573d6000803e3d6000fd5b505050506040513d60408110156111e957600080fd5b508051602090910151909250905081156112095790935091506111259050565b5050600101611132565b5060009485945092505050565b81516000908190815b8181101561127357846001600160a01b031686828151811061124757fe5b60200260200101516001600160a01b0316141561126b579250600191506111259050565b600101611229565b5060001995600095509350505050565b81516060906000908084106112df576040805162461bcd60e51b815260206004820152601860248201527f496e646578206d757374206265203c2041206c656e6774680000000000000000604482015290519081900360640190fd5b60006001820367ffffffffffffffff811180156112fb57600080fd5b50604051908082528060200260200182016040528015611325578160200160208202803683370190505b50905060005b858110156113735786818151811061133f57fe5b602002602001015182828151811061135357fe5b6001600160a01b039092166020928302919091019091015260010161132b565b50600185015b828110156113c45786818151811061138d57fe5b60200260200101518260018303815181106113a457fe5b6001600160a01b0390921660209283029190910190910152600101611379565b50808686815181106113d257fe5b60200260200101519350935050509250929050565b6000611405826113ff85670de0b6b3a764000061140c565b90611465565b9392505050565b60008261141b5750600061099c565b8282028284828161142857fe5b04146114055760405162461bcd60e51b815260040180806020018281038252602181526020018061157a6021913960400191505060405180910390fd5b60008082116114bb576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816114c457fe5b049392505050565b82805482825590600052602060002090810192821561152e579160200282015b8281111561152e578251825473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b039091161782556020909201916001909101906114ec565b5061153a92915061153e565b5090565b5b8082111561153a576000815560010161153f56fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220b759d78ed7501c7f1b9083c8f3b591013479b9d224fb720b56affc8c5b7fdaea64736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle, calculated using common asset pairs, or uses external data to calculate price. Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)",
    "kind": "dev",
    "methods": {
      "addAdapter(address)": {
        "params": {
          "_adapter": "Address of new adapter"
        }
      },
      "constructor": {
        "params": {
          "_adapters": "List of adapters used to price assets created by other protocols",
          "_controller": "Address of controller contract",
          "_uniswapAnchoredView": "Address of the uniswap anchored view that compound maintains"
        }
      },
      "getPrice(address,address)": {
        "params": {
          "_assetOne": "Address of first asset in pair",
          "_assetTwo": "Address of second asset in pair"
        },
        "returns": {
          "_0": "Price of asset pair to 18 decimals of precision"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAdapter(address)": {
        "params": {
          "_adapter": "Address of  adapter to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAdapters(address,address)": {
        "params": {
          "_assetOne": "First Asset of the pair",
          "_assetTwo": "Second Asset of the pair"
        }
      }
    },
    "title": "PriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdapter(address)": {
        "notice": "GOVERNANCE FUNCTION: Add new oracle adapter."
      },
      "constructor": {
        "notice": "Set state variables and map asset pairs to their oracles"
      },
      "getAdapters()": {
        "notice": "Returns an array of adapters"
      },
      "getPrice(address,address)": {
        "notice": "SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:  1) Check to see if a direct or inverse oracle of the pair exists,  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC     could be used to calculate BTC/USDC).  3) If not, check oracle adapters in case one or more of the assets needs external protocol data     to price.  4) If all steps fail, revert."
      },
      "removeAdapter(address)": {
        "notice": "GOVERNANCE FUNCTION: Remove oracle adapter."
      },
      "updateAdapters(address,address)": {
        "notice": "Calls the update function in every adapter. e.g Uniswap TWAP"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1456,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 14610,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "controller",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBabController)25452"
      },
      {
        "astId": 14617,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "uniswapAssets",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 14622,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "adapters",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)25452": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}