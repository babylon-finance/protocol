{
  "address": "0x34cbDae377eBeBD7d50Ac3249631f78e072944cB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITokenIdentifier",
          "name": "_tokenIdentifier",
          "type": "address"
        },
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "getCompoundExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "getCreamExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "getPriceNAV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hopTokens",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hopTokensList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenIdentifier",
      "outputs": [
        {
          "internalType": "contract ITokenIdentifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int24",
          "name": "_maxTwapDeviation",
          "type": "int24"
        }
      ],
      "name": "updateMaxTwapDeviation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "list",
          "type": "address[]"
        }
      ],
      "name": "updateReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITokenIdentifier",
          "name": "_tokenIdentifier",
          "type": "address"
        }
      ],
      "name": "updateTokenIdentifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x249a150658efa10aecfcdd7eac5153f67e3fd0baba7fe40e0d49131df79e26a4",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x34cbDae377eBeBD7d50Ac3249631f78e072944cB",
    "transactionIndex": 206,
    "gasUsed": "3743297",
    "logsBloom": "0x
    "blockHash": "0xc6878b74c5bc366f54da370fdef38ab31287957d82a9dd9118df8e4cf5fcde89",
    "transactionHash": "0x249a150658efa10aecfcdd7eac5153f67e3fd0baba7fe40e0d49131df79e26a4",
    "logs": [
      {
        "transactionIndex": 206,
        "blockNumber": 14254272,
        "transactionHash": "0x249a150658efa10aecfcdd7eac5153f67e3fd0baba7fe40e0d49131df79e26a4",
        "address": "0x34cbDae377eBeBD7d50Ac3249631f78e072944cB",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aec6233a45a3866e9f1c64ab121e4ee9dbeafbff"
        ],
        "data": "0x",
        "logIndex": 303,
        "blockHash": "0xc6878b74c5bc366f54da370fdef38ab31287957d82a9dd9118df8e4cf5fcde89"
      }
    ],
    "blockNumber": 14254272,
    "cumulativeGasUsed": "23604517",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5556F72135b4c3579158a9b62031fE955387c2aD",
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 4,
  "solcInputHash": "c82f0c2162f71ad0152ea6148afe1725",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITokenIdentifier\",\"name\":\"_tokenIdentifier\",\"type\":\"address\"},{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"getCompoundExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"getCreamExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"getPriceNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hopTokens\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hopTokensList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenIdentifier\",\"outputs\":[{\"internalType\":\"contract ITokenIdentifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int24\",\"name\":\"_maxTwapDeviation\",\"type\":\"int24\"}],\"name\":\"updateMaxTwapDeviation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"list\",\"type\":\"address[]\"}],\"name\":\"updateReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITokenIdentifier\",\"name\":\"_tokenIdentifier\",\"type\":\"address\"}],\"name\":\"updateTokenIdentifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Uses Uniswap V3 to get a price of a token pair\",\"kind\":\"dev\",\"methods\":{\"getPrice(address,address)\":{\"params\":{\"_tokenIn\":\"Address of the first token\",\"_tokenOut\":\"Address of the second token\"},\"returns\":{\"price\":\"               Price of the pair\"}},\"getPriceNAV(address,address)\":{\"params\":{\"_tokenIn\":\"Address of the first token\",\"_tokenOut\":\"Address of the second token\"},\"returns\":{\"price\":\"               Price of the pair\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PriceOracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getPrice(address,address)\":{\"notice\":\"Returns the amount out corresponding to the amount in for a given token\"},\"getPriceNAV(address,address)\":{\"notice\":\"Returns the amount out corresponding to the amount in for a given token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.0;\\n\\n/// @title Contains 512-bit math functions\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\nlibrary FullMath {\\n    /// @notice Calculates floor(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\n    function mulDiv(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        // 512-bit multiply [prod1 prod0] = a * b\\n        // Compute the product mod 2**256 and mod 2**256 - 1\\n        // then use the Chinese Remainder Theorem to reconstruct\\n        // the 512 bit result. The result is stored in two 256\\n        // variables such that product = prod1 * 2**256 + prod0\\n        uint256 prod0; // Least significant 256 bits of the product\\n        uint256 prod1; // Most significant 256 bits of the product\\n        assembly {\\n            let mm := mulmod(a, b, not(0))\\n            prod0 := mul(a, b)\\n            prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n        }\\n\\n        // Handle non-overflow cases, 256 by 256 division\\n        if (prod1 == 0) {\\n            require(denominator > 0);\\n            assembly {\\n                result := div(prod0, denominator)\\n            }\\n            return result;\\n        }\\n\\n        // Make sure the result is less than 2**256.\\n        // Also prevents denominator == 0\\n        require(denominator > prod1);\\n\\n        ///////////////////////////////////////////////\\n        // 512 by 256 division.\\n        ///////////////////////////////////////////////\\n\\n        // Make division exact by subtracting the remainder from [prod1 prod0]\\n        // Compute remainder using mulmod\\n        uint256 remainder;\\n        assembly {\\n            remainder := mulmod(a, b, denominator)\\n        }\\n        // Subtract 256 bit number from 512 bit number\\n        assembly {\\n            prod1 := sub(prod1, gt(remainder, prod0))\\n            prod0 := sub(prod0, remainder)\\n        }\\n\\n        // Factor powers of two out of denominator\\n        // Compute largest power of two divisor of denominator.\\n        // Always >= 1.\\n        uint256 twos = -denominator & denominator;\\n        // Divide denominator by power of two\\n        assembly {\\n            denominator := div(denominator, twos)\\n        }\\n\\n        // Divide [prod1 prod0] by the factors of two\\n        assembly {\\n            prod0 := div(prod0, twos)\\n        }\\n        // Shift in bits from prod1 into prod0. For this we need\\n        // to flip `twos` such that it is 2**256 / twos.\\n        // If twos is zero, then it becomes one\\n        assembly {\\n            twos := add(div(sub(0, twos), twos), 1)\\n        }\\n        prod0 |= prod1 * twos;\\n\\n        // Invert denominator mod 2**256\\n        // Now that denominator is an odd number, it has an inverse\\n        // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\n        // Compute the inverse by starting with a seed that is correct\\n        // correct for four bits. That is, denominator * inv = 1 mod 2**4\\n        uint256 inv = (3 * denominator) ^ 2;\\n        // Now use Newton-Raphson iteration to improve the precision.\\n        // Thanks to Hensel's lifting lemma, this also works in modular\\n        // arithmetic, doubling the correct bits in each step.\\n        inv *= 2 - denominator * inv; // inverse mod 2**8\\n        inv *= 2 - denominator * inv; // inverse mod 2**16\\n        inv *= 2 - denominator * inv; // inverse mod 2**32\\n        inv *= 2 - denominator * inv; // inverse mod 2**64\\n        inv *= 2 - denominator * inv; // inverse mod 2**128\\n        inv *= 2 - denominator * inv; // inverse mod 2**256\\n\\n        // Because the division is now exact we can divide by multiplying\\n        // with the modular inverse of denominator. This will give us the\\n        // correct result modulo 2**256. Since the precoditions guarantee\\n        // that the outcome is less than 2**256, this is the final result.\\n        // We don't need to compute the high bits of the result and prod1\\n        // is no longer required.\\n        result = prod0 * inv;\\n        return result;\\n    }\\n\\n    /// @notice Calculates ceil(a\\u00d7b\\u00f7denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n    /// @param a The multiplicand\\n    /// @param b The multiplier\\n    /// @param denominator The divisor\\n    /// @return result The 256-bit result\\n    function mulDivRoundingUp(\\n        uint256 a,\\n        uint256 b,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        result = mulDiv(a, b, denominator);\\n        if (mulmod(a, b, denominator) > 0) {\\n            require(result < type(uint256).max);\\n            result++;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe511530871deaef86692cea9adb6076d26d7b47fd4815ce51af52af981026057\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.0;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n}\\n\",\"keccak256\":\"0x86715eb960f18e01ac94e3bba4614ed51a887fa3c5bd1c43bf80aa98e019cf2d\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\n/// prices between 2**-128 and 2**128\\nlibrary TickMath {\\n    /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\n    int24 internal constant MIN_TICK = -887272;\\n    /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\n    int24 internal constant MAX_TICK = -MIN_TICK;\\n\\n    /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\n    uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\n    /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\n    uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\n\\n    /// @notice Calculates sqrt(1.0001^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return sqrtPriceX96 A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\n    /// at the given tick\\n    function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 sqrtPriceX96) {\\n        uint256 absTick = tick < 0 ? uint256(-int256(tick)) : uint256(int256(tick));\\n        require(absTick <= uint256(MAX_TICK), 'T');\\n\\n        uint256 ratio = absTick & 0x1 != 0 ? 0xfffcb933bd6fad37aa2d162d1a594001 : 0x100000000000000000000000000000000;\\n        if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\n        if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\n        if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\n        if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\n        if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\n        if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\n        if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\n        if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\n        if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\n        if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\n        if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\n        if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\n        if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\n        if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\n        if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\n        if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\n        if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\n\\n        if (tick > 0) ratio = type(uint256).max / ratio;\\n\\n        // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\n        // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\n        // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\n        sqrtPriceX96 = uint160((ratio >> 32) + (ratio % (1 << 32) == 0 ? 0 : 1));\\n    }\\n\\n    /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\n    /// @dev Throws in case sqrtPriceX96 < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\n    /// ever return.\\n    /// @param sqrtPriceX96 The sqrt ratio for which to compute the tick as a Q64.96\\n    /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\n    function getTickAtSqrtRatio(uint160 sqrtPriceX96) internal pure returns (int24 tick) {\\n        // second inequality must be < because the price can never reach the price at the max tick\\n        require(sqrtPriceX96 >= MIN_SQRT_RATIO && sqrtPriceX96 < MAX_SQRT_RATIO, 'R');\\n        uint256 ratio = uint256(sqrtPriceX96) << 32;\\n\\n        uint256 r = ratio;\\n        uint256 msb = 0;\\n\\n        assembly {\\n            let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(5, gt(r, 0xFFFFFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(4, gt(r, 0xFFFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(3, gt(r, 0xFF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(2, gt(r, 0xF))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := shl(1, gt(r, 0x3))\\n            msb := or(msb, f)\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            let f := gt(r, 0x1)\\n            msb := or(msb, f)\\n        }\\n\\n        if (msb >= 128) r = ratio >> (msb - 127);\\n        else r = ratio << (127 - msb);\\n\\n        int256 log_2 = (int256(msb) - 128) << 64;\\n\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(63, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(62, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(61, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(60, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(59, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(58, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(57, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(56, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(55, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(54, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(53, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(52, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(51, f))\\n            r := shr(f, r)\\n        }\\n        assembly {\\n            r := shr(127, mul(r, r))\\n            let f := shr(128, r)\\n            log_2 := or(log_2, shl(50, f))\\n        }\\n\\n        int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\n\\n        int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\n        int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\n\\n        tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= sqrtPriceX96 ? tickHi : tickLow;\\n    }\\n}\\n\",\"keccak256\":\"0x1f864a2bf61ba05f3173eaf2e3f94c5e1da4bec0554757527b6d1ef1fe439e4e\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0 <0.8.0;\\n\\nimport '@uniswap/v3-core/contracts/libraries/FullMath.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport '@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol';\\nimport '../libraries/PoolAddress.sol';\\n\\n/// @title Oracle library\\n/// @notice Provides functions to integrate with V3 pool oracle\\nlibrary OracleLibrary {\\n    /// @notice Fetches time-weighted average tick using Uniswap V3 oracle\\n    /// @param pool Address of Uniswap V3 pool that we want to observe\\n    /// @param period Number of seconds in the past to start calculating time-weighted average\\n    /// @return timeWeightedAverageTick The time-weighted average tick from (block.timestamp - period) to block.timestamp\\n    function consult(address pool, uint32 period) internal view returns (int24 timeWeightedAverageTick) {\\n        require(period != 0, 'BP');\\n\\n        uint32[] memory secondAgos = new uint32[](2);\\n        secondAgos[0] = period;\\n        secondAgos[1] = 0;\\n\\n        (int56[] memory tickCumulatives, ) = IUniswapV3Pool(pool).observe(secondAgos);\\n        int56 tickCumulativesDelta = tickCumulatives[1] - tickCumulatives[0];\\n\\n        timeWeightedAverageTick = int24(tickCumulativesDelta / period);\\n\\n        // Always round to negative infinity\\n        if (tickCumulativesDelta < 0 && (tickCumulativesDelta % period != 0)) timeWeightedAverageTick--;\\n    }\\n\\n    /// @notice Given a tick and a token amount, calculates the amount of token received in exchange\\n    /// @param tick Tick value used to calculate the quote\\n    /// @param baseAmount Amount of token to be converted\\n    /// @param baseToken Address of an ERC20 token contract used as the baseAmount denomination\\n    /// @param quoteToken Address of an ERC20 token contract used as the quoteAmount denomination\\n    /// @return quoteAmount Amount of quoteToken received for baseAmount of baseToken\\n    function getQuoteAtTick(\\n        int24 tick,\\n        uint128 baseAmount,\\n        address baseToken,\\n        address quoteToken\\n    ) internal pure returns (uint256 quoteAmount) {\\n        uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\n\\n        // Calculate quoteAmount with better precision if it doesn't overflow when multiplied by itself\\n        if (sqrtRatioX96 <= type(uint128).max) {\\n            uint256 ratioX192 = uint256(sqrtRatioX96) * sqrtRatioX96;\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX192, baseAmount, 1 << 192)\\n                : FullMath.mulDiv(1 << 192, baseAmount, ratioX192);\\n        } else {\\n            uint256 ratioX128 = FullMath.mulDiv(sqrtRatioX96, sqrtRatioX96, 1 << 64);\\n            quoteAmount = baseToken < quoteToken\\n                ? FullMath.mulDiv(ratioX128, baseAmount, 1 << 128)\\n                : FullMath.mulDiv(1 << 128, baseAmount, ratioX128);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x19517bf2478c3ec56253f37b48adde7f34a6acdb467e329f74d79f9e72e2a63f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Provides functions for deriving a pool address from the factory, tokens, and the fee\\nlibrary PoolAddress {\\n    bytes32 internal constant POOL_INIT_CODE_HASH = 0xe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b54;\\n\\n    /// @notice The identifying key of the pool\\n    struct PoolKey {\\n        address token0;\\n        address token1;\\n        uint24 fee;\\n    }\\n\\n    /// @notice Returns PoolKey: the ordered tokens with the matched fee levels\\n    /// @param tokenA The first token of a pool, unsorted\\n    /// @param tokenB The second token of a pool, unsorted\\n    /// @param fee The fee level of the pool\\n    /// @return Poolkey The pool details with ordered token0 and token1 assignments\\n    function getPoolKey(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) internal pure returns (PoolKey memory) {\\n        if (tokenA > tokenB) (tokenA, tokenB) = (tokenB, tokenA);\\n        return PoolKey({token0: tokenA, token1: tokenB, fee: fee});\\n    }\\n\\n    /// @notice Deterministically computes the pool address given the factory and PoolKey\\n    /// @param factory The Uniswap V3 factory contract address\\n    /// @param key The PoolKey\\n    /// @return pool The contract address of the V3 pool\\n    function computeAddress(address factory, PoolKey memory key) internal pure returns (address pool) {\\n        require(key.token0 < key.token1);\\n        pool = address(\\n            uint256(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex'ff',\\n                        factory,\\n                        keccak256(abi.encode(key.token0, key.token1, key.fee)),\\n                        POOL_INIT_CODE_HASH\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5edd84eb8ba7c12fd8cb6cffe52e1e9f3f6464514ee5f539c2283826209035a2\",\"license\":\"GPL-2.0-or-later\"},\"contracts/PriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\nimport '@uniswap/v3-core/contracts/libraries/TickMath.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol';\\n\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {IPriceOracle} from './interfaces/IPriceOracle.sol';\\nimport {ICToken} from './interfaces/external/compound/ICToken.sol';\\nimport {ITokenIdentifier} from './interfaces/ITokenIdentifier.sol';\\nimport {ISnxExchangeRates} from './interfaces/external/synthetix/ISnxExchangeRates.sol';\\nimport {ICurveMetaRegistry} from './interfaces/ICurveMetaRegistry.sol';\\nimport {ICurvePoolV3} from './interfaces/external/curve/ICurvePoolV3.sol';\\nimport {ICurvePoolV3DY} from './interfaces/external/curve/ICurvePoolV3DY.sol';\\nimport {IUniswapV2Router} from './interfaces/external/uniswap/IUniswapV2Router.sol';\\nimport {ISnxSynth} from './interfaces/external/synthetix/ISnxSynth.sol';\\nimport {ISnxProxy} from './interfaces/external/synthetix/ISnxProxy.sol';\\nimport {IYearnRegistry} from './interfaces/external/yearn/IYearnRegistry.sol';\\nimport {IYearnVault} from './interfaces/external/yearn/IYearnVault.sol';\\nimport {IStETH} from './interfaces/external/lido/IStETH.sol';\\nimport {IWstETH} from './interfaces/external/lido/IWstETH.sol';\\n\\nimport {PreciseUnitMath} from './lib/PreciseUnitMath.sol';\\nimport {SafeDecimalMath} from './lib/SafeDecimalMath.sol';\\nimport {LowGasSafeMath as SafeMath} from './lib/LowGasSafeMath.sol';\\nimport {AddressArrayUtils} from './lib/AddressArrayUtils.sol';\\nimport {ControllerLib} from './lib/ControllerLib.sol';\\n\\n/**\\n * @title PriceOracle\\n * @author Babylon Finance Protocol\\n *\\n * Uses Uniswap V3 to get a price of a token pair\\n */\\ncontract PriceOracle is Ownable, IPriceOracle {\\n    using PreciseUnitMath for int256;\\n    using PreciseUnitMath for uint256;\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constants ============ */\\n\\n    // Address of Uniswap factory\\n    IUniswapV3Factory internal constant factory = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\n    ISnxExchangeRates internal constant snxEchangeRates = ISnxExchangeRates(0xd69b189020EF614796578AfE4d10378c5e7e1138);\\n    IUniswapV2Router internal constant uniRouterV2 = IUniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\\n    IYearnRegistry private constant yearnRegistry = IYearnRegistry(0xE15461B18EE31b7379019Dc523231C57d1Cbc18c);\\n\\n    address internal constant ETH_ADD_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant BABL = 0xF4Dc48D260C93ad6a96c5Ce563E70CA578987c74;\\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    IStETH private constant stETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    IWstETH private constant wstETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n\\n    address private constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n    address private constant palStkAAVE = 0x24E79e946dEa5482212c38aaB2D0782F04cdB0E0;\\n    address private constant curvePalStkAave = 0x48536EC5233297C367fd0b6979B75d9270bB6B15;\\n\\n    // the desired seconds agos array passed to the observe method\\n    uint32 private constant SECONDS_GRANULARITY = 30;\\n    uint256 private constant CURVE_SLIPPAGE = 6e16;\\n\\n    uint24 private constant FEE_LOW = 500;\\n    uint24 private constant FEE_MEDIUM = 3000;\\n    uint24 private constant FEE_HIGH = 10000;\\n    int24 private constant baseThreshold = 1000;\\n    int24 private constant INITIAL_TWAP_DEVIATION = 700; // locally for testing. It should be halved in main\\n\\n    /* ============ State Variables ============ */\\n\\n    ITokenIdentifier public tokenIdentifier;\\n    IBabController public controller;\\n    mapping(address => bool) public hopTokens;\\n    address[] public hopTokensList;\\n    int24 private maxTwapDeviation;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(ITokenIdentifier _tokenIdentifier, IBabController _controller) {\\n        tokenIdentifier = _tokenIdentifier;\\n        controller = _controller;\\n        maxTwapDeviation = INITIAL_TWAP_DEVIATION;\\n\\n        _updateReserves(AddressArrayUtils.toDynamic(WETH, DAI, USDC, WBTC));\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        require(address(_tokenIdentifier) != address(0), 'Address needs to exist');\\n        tokenIdentifier = _tokenIdentifier;\\n    }\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        require(_maxTwapDeviation < 1500, 'Max twap deviation must be within range');\\n        maxTwapDeviation = _maxTwapDeviation;\\n    }\\n\\n    function updateReserves(address[] memory list) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateReserves(list);\\n    }\\n\\n    /**\\n     * Returns the amount out corresponding to the amount in for a given token\\n     * @param _tokenIn              Address of the first token\\n     * @param _tokenOut             Address of the second token\\n     * @return price                Price of the pair\\n     */\\n    function getPriceNAV(address _tokenIn, address _tokenOut) public view override returns (uint256 price) {\\n        price = _getPrice(_tokenIn, _tokenOut, true);\\n        require(price != 0, 'Price not found');\\n        return price;\\n    }\\n\\n    /**\\n     * Returns the amount out corresponding to the amount in for a given token\\n     * @param _tokenIn              Address of the first token\\n     * @param _tokenOut             Address of the second token\\n     * @return price                Price of the pair\\n     */\\n    function getPrice(address _tokenIn, address _tokenOut) public view virtual override returns (uint256 price) {\\n        price = _getPrice(_tokenIn, _tokenOut, false);\\n        require(price != 0, 'Price not found');\\n        return price;\\n    }\\n\\n    function getCompoundExchangeRate(address _asset, address _underlying) public view override returns (uint256) {\\n        uint256 exchangeRateNormalized = ICToken(_asset).exchangeRateStored();\\n        if (ERC20(_underlying).decimals() > 8) {\\n            exchangeRateNormalized = exchangeRateNormalized.div(10**(ERC20(_underlying).decimals() - 8));\\n        } else {\\n            exchangeRateNormalized = exchangeRateNormalized.mul(10**(8 - ERC20(_underlying).decimals()));\\n        }\\n        return exchangeRateNormalized;\\n    }\\n\\n    function getCreamExchangeRate(address _asset, address _underlying) public view override returns (uint256) {\\n        uint256 exchangeRateNormalized = ICToken(_asset).exchangeRateStored();\\n        if (ERC20(_underlying).decimals() > 8) {\\n            exchangeRateNormalized = exchangeRateNormalized.div(10**(ERC20(_underlying).decimals() - 8));\\n        } else {\\n            exchangeRateNormalized = exchangeRateNormalized.mul(10**(8 - ERC20(_underlying).decimals()));\\n        }\\n        return exchangeRateNormalized;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Returns the amount out corresponding to the amount in for a given token\\n     * @param _tokenIn              Address of the first token\\n     * @param _tokenOut             Address of the second token\\n     * @param _forNAV               Whether it is just for display purposes\\n     * @return price                Price of the pair\\n     */\\n    function _getPrice(\\n        address _tokenIn,\\n        address _tokenOut,\\n        bool _forNAV\\n    ) private view returns (uint256 price) {\\n        // Same asset. Returns base unit\\n        if (_tokenIn == _tokenOut) {\\n            return 10**18;\\n        }\\n\\n        _tokenIn = _tokenIn == address(0) ? WETH : _tokenIn;\\n        _tokenOut = _tokenOut == address(0) ? WETH : _tokenOut;\\n\\n        ICurveMetaRegistry curveMetaRegistry = ICurveMetaRegistry(controller.curveMetaRegistry());\\n        (uint8 tokenInType, uint8 tokenOutType, address _finalAssetIn, address _finalAssetOut) =\\n            tokenIdentifier.identifyTokens(_tokenIn, _tokenOut, curveMetaRegistry);\\n\\n        // Comp assets\\n        uint256 exchangeRate;\\n        if (tokenInType == 1) {\\n            exchangeRate = getCompoundExchangeRate(_tokenIn, _finalAssetIn);\\n            return getPrice(_finalAssetIn, _tokenOut).preciseMul(exchangeRate);\\n        }\\n        if (tokenOutType == 1) {\\n            exchangeRate = getCompoundExchangeRate(_tokenOut, _finalAssetOut);\\n            return getPrice(_tokenIn, _finalAssetOut).preciseDiv(exchangeRate);\\n        }\\n\\n        // aave tokens. 1 to 1 with underlying\\n        if (tokenInType == 2) {\\n            return getPrice(_finalAssetIn, _tokenOut);\\n        }\\n\\n        if (tokenOutType == 2) {\\n            return getPrice(_tokenIn, _finalAssetOut);\\n        }\\n\\n        // crTokens Cream prices 0xde19f5a7cF029275Be9cEC538E81Aa298E297266\\n        // cTkens use same interface as compound\\n        if (tokenInType == 3) {\\n            exchangeRate = getCreamExchangeRate(_tokenIn, _finalAssetIn);\\n            return getPrice(_finalAssetIn, _tokenOut).preciseMul(exchangeRate);\\n        }\\n        if (tokenOutType == 3) {\\n            exchangeRate = getCreamExchangeRate(_tokenOut, _finalAssetOut);\\n            return getPrice(_tokenIn, _finalAssetOut).preciseDiv(exchangeRate);\\n        }\\n\\n        // Checks Synthetix\\n        if (tokenInType == 4) {\\n            address targetImpl = ISnxProxy(_tokenIn).target();\\n            exchangeRate = snxEchangeRates.rateForCurrency(ISnxSynth(targetImpl).currencyKey());\\n            return getPrice(USDC, _tokenOut).preciseMul(exchangeRate);\\n        }\\n\\n        if (tokenOutType == 4) {\\n            address targetImpl = ISnxProxy(_tokenOut).target();\\n            exchangeRate = snxEchangeRates.rateForCurrency(ISnxSynth(targetImpl).currencyKey());\\n            return getPrice(_tokenIn, USDC).preciseDiv(exchangeRate);\\n        }\\n\\n        if (tokenInType == 5) {\\n            address crvPool = curveMetaRegistry.getPoolFromLpToken(_tokenIn);\\n            if (crvPool != address(0)) {\\n                address denominator = _cleanCurvePoolDenominator(crvPool, curveMetaRegistry);\\n                return\\n                    curveMetaRegistry.getVirtualPriceFromLpToken(_tokenIn).preciseMul(getPrice(denominator, _tokenOut));\\n            }\\n        }\\n\\n        if (tokenOutType == 5) {\\n            // Token out is a curve lp\\n            address crvPool = curveMetaRegistry.getPoolFromLpToken(_tokenOut);\\n            if (crvPool != address(0)) {\\n                address denominator = _cleanCurvePoolDenominator(crvPool, curveMetaRegistry);\\n                return\\n                    getPrice(_tokenIn, denominator).preciseDiv(curveMetaRegistry.getVirtualPriceFromLpToken(_tokenOut));\\n            }\\n        }\\n        // Yearn vaults\\n        if (tokenInType == 6) {\\n            price = IYearnVault(_tokenIn).pricePerShare().preciseMul(\\n                getPrice(IYearnVault(_tokenIn).token(), _tokenOut)\\n            );\\n            uint256 yvDecimals = ERC20(_tokenIn).decimals();\\n            if (yvDecimals < 18) {\\n                price = price.mul(10**(18 - yvDecimals));\\n            }\\n            return price;\\n        }\\n\\n        if (tokenOutType == 6) {\\n            address vaultAsset = IYearnVault(_tokenOut).token();\\n            price = getPrice(_tokenIn, vaultAsset).preciseDiv(IYearnVault(_tokenOut).pricePerShare());\\n\\n            uint256 yvDecimals = ERC20(_tokenOut).decimals();\\n            if (yvDecimals < 18) {\\n                price = price.div(10**(18 - yvDecimals));\\n            }\\n            return price;\\n        }\\n\\n        // palstkaave (Curve cannot find otherwise weth-palstk)\\n        if (_tokenIn == palStkAAVE) {\\n            uint256 tokenInPrice = _getPriceThroughCurve(curvePalStkAave, palStkAAVE, AAVE, curveMetaRegistry);\\n            if (tokenInPrice != 0) {\\n                return tokenInPrice.preciseMul(_getBestPriceUniV3(AAVE, _tokenOut));\\n            }\\n        }\\n\\n        if (_tokenOut == palStkAAVE) {\\n            uint256 tokenOutPrice = _getPriceThroughCurve(curvePalStkAave, AAVE, palStkAAVE, curveMetaRegistry);\\n            if (tokenOutPrice != 0) {\\n                return tokenOutPrice.preciseMul(_getBestPriceUniV3(_tokenIn, AAVE));\\n            }\\n        }\\n\\n        // Direct curve pair\\n        price = _checkPairThroughCurve(_tokenIn, _tokenOut, curveMetaRegistry);\\n        if (price != 0) {\\n            return price;\\n        }\\n\\n        // Direct UNI3\\n        price = _getBestPriceUniV3(_tokenIn, _tokenOut);\\n        if (price != 0) {\\n            return price;\\n        }\\n\\n        // Curve to UniV3 or UniV3 to Curve via DAI/WETH/WBTC/USDC\\n        for (uint256 i = 0; i < hopTokensList.length; i++) {\\n            address reserve = hopTokensList[i];\\n            if (_tokenIn != reserve && _tokenOut != reserve) {\\n                uint256 tokenInPrice = _checkPairThroughCurve(_tokenIn, reserve, curveMetaRegistry);\\n                if (tokenInPrice != 0) {\\n                    return tokenInPrice.preciseMul(_getBestPriceUniV3(reserve, _tokenOut));\\n                }\\n                uint256 tokenOutPrice = _checkPairThroughCurve(reserve, _tokenOut, curveMetaRegistry);\\n                if (tokenOutPrice != 0) {\\n                    return tokenOutPrice.preciseMul(_getBestPriceUniV3(_tokenIn, reserve));\\n                }\\n            }\\n        }\\n\\n        // Use only univ2 for UI\\n        if (_forNAV) {\\n            price = _getUNIV2Price(_tokenIn, _tokenOut);\\n        }\\n        // No valid price\\n        return price;\\n    }\\n\\n    function _cleanCurvePoolDenominator(address _pool, ICurveMetaRegistry _curveMetaRegistry)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        address[8] memory coins = _curveMetaRegistry.getCoinAddresses(_pool, true);\\n        if (coins[0] != address(0)) {\\n            return coins[0] == ETH_ADD_CURVE ? WETH : coins[0];\\n        }\\n        if (coins[1] != address(0)) {\\n            return coins[1] == ETH_ADD_CURVE ? WETH : coins[1];\\n        }\\n        if (coins[2] != address(0)) {\\n            return coins[2] == ETH_ADD_CURVE ? WETH : coins[2];\\n        }\\n        return address(0);\\n    }\\n\\n    // Susceptible to flash loans.\\n    // Only use for UI and getNAV\\n    function _getUNIV2Price(address _tokenIn, address _tokenOut) private view returns (uint256) {\\n        address[] memory path = new address[](2);\\n        path[0] = _tokenIn;\\n        path[1] = _tokenOut;\\n        return uniRouterV2.getAmountsOut(ERC20(_tokenIn).decimals(), path)[1];\\n    }\\n\\n    function _getUNIV3Price(\\n        IUniswapV3Pool pool,\\n        address _tokenIn,\\n        address _tokenOut\\n    ) private view returns (uint256) {\\n        // Same asset. Returns base unit\\n        if (_tokenIn == _tokenOut) {\\n            return 10**18;\\n        }\\n        int24 tick;\\n\\n        (, tick, , , , , ) = pool.slot0();\\n        if (!_checkPrice(tick, pool)) {\\n            return 0;\\n        }\\n        return\\n            OracleLibrary\\n                .getQuoteAtTick(\\n                tick,\\n                // because we use 1e18 as a precision unit\\n                uint128(uint256(1e18).mul(10**(uint256(18).sub(ERC20(_tokenOut).decimals())))),\\n                _tokenIn,\\n                _tokenOut\\n            )\\n                .div(10**(uint256(18).sub(ERC20(_tokenIn).decimals())));\\n    }\\n\\n    function _getUniV3PriceNaive(address _tokenIn, address _tokenOut) private view returns (uint256) {\\n        // Same asset. Returns base unit\\n        if (_tokenIn == _tokenOut) {\\n            return 10**18;\\n        }\\n        IUniswapV3Pool pool = _getUniswapPoolWithHighestLiquidity(_tokenIn, _tokenOut);\\n        if (address(pool) == address(0)) {\\n            return 0;\\n        }\\n        return _getUNIV3Price(pool, _tokenIn, _tokenOut);\\n    }\\n\\n    function _getBestPriceUniV3(address _tokenIn, address _tokenOut) private view returns (uint256) {\\n        uint256 price = 1e18;\\n        uint256 priceAux;\\n        address reservePathIn = _tokenIn;\\n        address reservePathOut = _tokenOut;\\n        // Go from token in to a reserve (choose best on the the highest liquidity in DAI)\\n        if (!hopTokens[_tokenIn]) {\\n            (reservePathIn, priceAux) = _getHighestLiquidityPathToReserveUniV3(_tokenIn, true);\\n            price = priceAux;\\n        }\\n        // Go from a reserve to token out (choose best on the the highest liquidity in DAI)\\n        if (!hopTokens[_tokenOut]) {\\n            (reservePathOut, priceAux) = _getHighestLiquidityPathToReserveUniV3(_tokenOut, false);\\n            // If reserves are different\\n            if (reservePathIn != reservePathOut) {\\n                price = price.preciseMul(_getUniV3PriceNaive(reservePathIn, reservePathOut));\\n            }\\n            // Multiply from out reserve path to out token\\n            return price.preciseMul(priceAux);\\n        }\\n        // If reserves are different\\n        if (reservePathIn != reservePathOut) {\\n            price = price.preciseMul(_getUniV3PriceNaive(reservePathIn, reservePathOut));\\n        }\\n        return price;\\n    }\\n\\n    function _getHighestLiquidityPathToReserveUniV3(address _token, bool _in) private view returns (address, uint256) {\\n        uint256 price;\\n        address reserveChosen;\\n        IUniswapV3Pool maxpool;\\n        uint256 maxLiquidityInDai;\\n        for (uint256 i = 0; i < hopTokensList.length; i++) {\\n            (address pool, uint256 liquidityInDai) =\\n                _getUniswapHighestLiquidityInReserveAsset(_token, hopTokensList[i], DAI);\\n            if (liquidityInDai > maxLiquidityInDai) {\\n                maxpool = IUniswapV3Pool(pool);\\n                maxLiquidityInDai = liquidityInDai;\\n                reserveChosen = hopTokensList[i];\\n            }\\n        }\\n        if (maxLiquidityInDai > 0) {\\n            if (_in) {\\n                price = _getUNIV3Price(maxpool, _token, reserveChosen);\\n            } else {\\n                price = _getUNIV3Price(maxpool, reserveChosen, _token);\\n            }\\n        }\\n        return (reserveChosen, price);\\n    }\\n\\n    function _getUniswapPoolWithHighestLiquidity(address sendToken, address receiveToken)\\n        private\\n        view\\n        returns (IUniswapV3Pool pool)\\n    {\\n        IUniswapV3Pool poolLow = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_LOW));\\n        IUniswapV3Pool poolMedium = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_MEDIUM));\\n        IUniswapV3Pool poolHigh = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_HIGH));\\n\\n        uint128 liquidityLow = address(poolLow) != address(0) ? poolLow.liquidity() : 0;\\n        uint128 liquidityMedium = address(poolMedium) != address(0) ? poolMedium.liquidity() : 0;\\n        uint128 liquidityHigh = address(poolHigh) != address(0) ? poolHigh.liquidity() : 0;\\n        if (liquidityLow >= liquidityMedium && liquidityLow >= liquidityHigh) {\\n            return poolLow;\\n        }\\n        if (liquidityMedium >= liquidityLow && liquidityMedium >= liquidityHigh) {\\n            return poolMedium;\\n        }\\n        return poolHigh;\\n    }\\n\\n    function _getUniswapHighestLiquidityInReserveAsset(\\n        address _sendToken,\\n        address _receiveToken,\\n        address _reserveAsset\\n    ) private view returns (address, uint256) {\\n        IUniswapV3Pool pool = _getUniswapPoolWithHighestLiquidity(_sendToken, _receiveToken);\\n        if (address(pool) == address(0)) {\\n            return (address(0), 0);\\n        }\\n        uint256 poolLiquidity = uint256(pool.liquidity());\\n        uint256 liquidityInReserve;\\n        address denominator;\\n        address token0 = pool.token0();\\n        address token1 = pool.token1();\\n\\n        if (hopTokens[token0]) {\\n            liquidityInReserve = poolLiquidity.mul(poolLiquidity).div(ERC20(token1).balanceOf(address(pool)));\\n            denominator = token0;\\n        } else {\\n            liquidityInReserve = poolLiquidity.mul(poolLiquidity).div(ERC20(token0).balanceOf(address(pool)));\\n            denominator = token1;\\n        }\\n        // Normalize to reserve asset\\n        if (denominator != _reserveAsset) {\\n            uint256 price = getPrice(denominator, _reserveAsset);\\n            // price is always in 18 decimals\\n            // preciseMul returns in the same decimals than liquidityInReserve, so we have to normalize into reserve Asset decimals\\n            // normalization into reserveAsset decimals\\n            liquidityInReserve = SafeDecimalMath.normalizeAmountTokens(\\n                denominator,\\n                _reserveAsset,\\n                liquidityInReserve.preciseMul(price)\\n            );\\n        }\\n        return (address(pool), liquidityInReserve);\\n    }\\n\\n    /// @dev Revert if current price is too close to min or max ticks allowed\\n    /// by Uniswap, or if it deviates too much from the TWAP. Should be called\\n    /// whenever base and limit ranges are updated. In practice, prices should\\n    /// only become this extreme if there's no liquidity in the Uniswap pool.\\n    function _checkPrice(int24 mid, IUniswapV3Pool _pool) private view returns (bool) {\\n        int24 tickSpacing = _pool.tickSpacing();\\n        // TODO: Add the other param from charm\\n        if (mid < TickMath.MIN_TICK + baseThreshold + tickSpacing) {\\n            // \\\"price too low\\\"\\n            return false;\\n        }\\n        if (mid > TickMath.MAX_TICK - baseThreshold - tickSpacing) {\\n            // \\\"price too high\\\"\\n            return false;\\n        }\\n\\n        // Check TWAP deviation. This check prevents price manipulation before\\n        // the rebalance and also avoids rebalancing when price has just spiked.\\n        int56 twap = _getTwap(_pool);\\n\\n        int56 deviation = mid > twap ? mid - twap : twap - mid;\\n        // Fail twap check\\n        return deviation < maxTwapDeviation;\\n    }\\n\\n    // given the cumulative prices of the start and end of a period, and the length of the period, compute the average\\n    function _getTwap(IUniswapV3Pool _pool) private view returns (int56 twap) {\\n        uint32[] memory secondsAgo = new uint32[](2);\\n        secondsAgo[0] = SECONDS_GRANULARITY;\\n        secondsAgo[1] = 0;\\n        // observe fails if the pair has no observations\\n        try _pool.observe(secondsAgo) returns (\\n            int56[] memory tickCumulatives,\\n            uint160[] memory /* secondsPerLiquidityCumulativeX128s */\\n        ) {\\n            return (tickCumulatives[1] - tickCumulatives[0]) / SECONDS_GRANULARITY;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    function _getPriceThroughCurve(\\n        address _curvePool,\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    ) private view returns (uint256) {\\n        (uint256 i, uint256 j, bool underlying) = _curveMetaRegistry.getCoinIndices(_curvePool, _tokenIn, _tokenOut);\\n        uint256 price = 0;\\n        uint256 decimalsIn = 10**(_tokenIn == ETH_ADD_CURVE ? 18 : ERC20(_tokenIn).decimals());\\n        if (underlying) {\\n            price = _getCurveDYUnderlying(_curvePool, i, j, decimalsIn);\\n        } else {\\n            price = _getCurveDY(_curvePool, i, j, decimalsIn);\\n        }\\n        price = price.mul(10**(18 - (_tokenOut == ETH_ADD_CURVE ? 18 : ERC20(_tokenOut).decimals())));\\n        uint256 delta = price.preciseMul(CURVE_SLIPPAGE);\\n        if (price < uint256(1e18).add(delta) && price > uint256(1e18).sub(delta)) {\\n            return price;\\n        }\\n        return 0;\\n    }\\n\\n    function _getCurveDY(\\n        address _curvePool,\\n        uint256 i,\\n        uint256 j,\\n        uint256 decimals\\n    ) private view returns (uint256) {\\n        try ICurvePoolV3DY(_curvePool).get_dy(i, j, decimals) returns (uint256 price) {\\n            return price;\\n        } catch {\\n            try ICurvePoolV3(_curvePool).get_dy(int128(i), int128(j), decimals) returns (uint256 price2) {\\n                return price2;\\n            } catch {\\n                revert('get dy failed');\\n            }\\n        }\\n    }\\n\\n    function _getCurveDYUnderlying(\\n        address _curvePool,\\n        uint256 i,\\n        uint256 j,\\n        uint256 decimals\\n    ) private view returns (uint256) {\\n        try ICurvePoolV3DY(_curvePool).get_dy_underlying(i, j, decimals) returns (uint256 price) {\\n            return price;\\n        } catch {\\n            try ICurvePoolV3(_curvePool).get_dy_underlying(int128(i), int128(j), decimals) returns (uint256 price2) {\\n                return price2;\\n            } catch {\\n                try ICurvePoolV3(_curvePool).get_dy(int128(i), int128(j), decimals) returns (uint256 price3) {\\n                    return price3;\\n                } catch {\\n                    revert('get dy underlying failed');\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkPairThroughCurve(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    ) private view returns (uint256) {\\n        address curvePool = _curveMetaRegistry.findPoolForCoins(_tokenIn, _tokenOut, 0);\\n        if (_tokenIn == WETH && curvePool == address(0)) {\\n            _tokenIn = ETH_ADD_CURVE;\\n            curvePool = _curveMetaRegistry.findPoolForCoins(ETH_ADD_CURVE, _tokenOut, 0);\\n        }\\n        if (_tokenOut == WETH && curvePool == address(0)) {\\n            _tokenOut = ETH_ADD_CURVE;\\n            curvePool = _curveMetaRegistry.findPoolForCoins(_tokenIn, ETH_ADD_CURVE, 0);\\n        }\\n        if (curvePool != address(0)) {\\n            uint256 price = _getPriceThroughCurve(curvePool, _tokenIn, _tokenOut, _curveMetaRegistry);\\n            return price;\\n        }\\n        return 0;\\n    }\\n\\n    function _updateReserves(address[] memory list) private {\\n        for (uint256 i = 0; i < hopTokensList.length; i++) {\\n            hopTokens[hopTokensList[i]] = false;\\n        }\\n        delete hopTokensList;\\n        for (uint256 i = 0; i < list.length; i++) {\\n            hopTokens[list[i]] = true;\\n            hopTokensList.push(list[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x88590ac63ca1001caebf26b51b9acda22a520e99aecb250748694b14c9515a2d\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31932d500ed2d16c823a891976dea3e5938ca277aab457ee2419d08f8bd59b7d\",\"license\":\"Apache License\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xb8b2aef9698f8ac2af013e3f0b71cc3ee3b2cdba0b5cae5e8d7c11e5f4a3039e\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ITokenIdentifier} from './ITokenIdentifier.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateReserves(address[] memory list) external;\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) external;\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) external;\\n\\n    function getCompoundExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x137796623547b5b769d9770baf55efda0a9f7226ed26b162e492b3e3f1629252\",\"license\":\"Apache License\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ Functions ============ */\\n\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external;\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0xa84450c5b6d869a2621ae54488d7e526c8bd019df9fac7e1624d3e8d78c1509b\",\"license\":\"Apache License\"},\"contracts/interfaces/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICToken is IERC20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function repayBorrowBehalf(address borrower, uint256 amount) external payable returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a935c6d68ac62de10fff25f719612bd0b85eca3e8472e9db30f3b9b272e2ef6\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3 {\\n    function coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(int128 arg0) external view returns (address out);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256 out);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address out);\\n\\n    function token() external view returns (address out);\\n\\n    function curve() external view returns (address out);\\n\\n    function pool() external view returns (address out);\\n}\\n\",\"keccak256\":\"0x4757b8b84ec7e87564e32b1da52b392aa8f4d39cf3097e6abdfe5a201b7ad587\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3DY.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3DY {\\n    function get_dy(\\n        uint256 i,\\n        uint256 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        uint256 i,\\n        uint256 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x40824cad70a18bbcccda6c7e6222c9670d0f36e87f145b53f413ff4e3c50e727\",\"license\":\"MIT\"},\"contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStETH is IERC20 {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _pooledEthAmount) external view returns (uint256);\\n\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x6cde12f74a8d652531f28ec097f12a8b44b369e1525bdbfa792b1c396a7521cd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-FileCopyrightText: 2021 Lido <info@lido.fi>\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\n/* See contracts/COMPILERS.md */\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title StETH token wrapper with static balances.\\n * @dev It's an ERC20 token that represents the account's share of the total\\n * supply of stETH tokens. WstETH token's balance only changes on transfers,\\n * unlike StETH that is also changed when oracles report staking rewards and\\n * penalties. It's a \\\"power user\\\" token for DeFi protocols which don't\\n * support rebasable tokens.\\n *\\n * The contract is also a trustless wrapper that accepts stETH tokens and mints\\n * wstETH in return. Then the user unwraps, the contract burns user's wstETH\\n * and sends user locked stETH in return.\\n *\\n * The contract provides the staking shortcut: user can send ETH with regular\\n * transfer and get wstETH in return. The contract will send ETH to Lido submit\\n * method, staking it and wrapping the received stETH.\\n *\\n */\\ninterface IWstETH is IERC20 {\\n    /**\\n     * @notice Exchanges stETH to wstETH\\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n     * @dev Requirements:\\n     *  - `_stETHAmount` must be non-zero\\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n     *    contract.\\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\\n     * User should first approve _stETHAmount to the WstETH contract\\n     * @return Amount of wstETH user receives after wrap\\n     */\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Exchanges wstETH to stETH\\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n     * @dev Requirements:\\n     *  - `_wstETHAmount` must be non-zero\\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n     * @return Amount of stETH user receives after unwrap\\n     */\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Shortcut to stake ETH and auto-wrap returned stETH\\n     */\\n    // receive() external payable {\\n    //     uint256 shares = stETH.submit{value: msg.value}(address(0));\\n    //     _mint(msg.sender, shares);\\n    // }\\n\\n    /**\\n     * @notice Get amount of wstETH for a given amount of stETH\\n     * @param _stETHAmount amount of stETH\\n     * @return Amount of wstETH for a given stETH amount\\n     */\\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a given amount of wstETH\\n     * @param _wstETHAmount amount of wstETH\\n     * @return Amount of stETH for a given wstETH amount\\n     */\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a one wstETH\\n     * @return Amount of wstETH for a 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6971b05130d8b9053d256661f8a0aead9e77a19ffd6aaf53faa9a89562e746bd\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/synthetix/ISnxExchangeRates.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ISnxExchangeRates {\\n    function effectiveValue(\\n        bytes32 sourceCurrencyKey,\\n        uint256 sourceAmount,\\n        bytes32 destinationCurrencyKey\\n    ) external view returns (uint256 value);\\n\\n    function rateForCurrency(bytes32 sourceCurrencyKey) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0x1c4f0938e7a22adaf2b2444bf9fb2eb5cdc17010780d865621d25bc62e7c8a19\",\"license\":\"MIT\"},\"contracts/interfaces/external/synthetix/ISnxProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISnxProxy {\\n    // Views\\n    function target() external view returns (address);\\n}\\n\",\"keccak256\":\"0x5fa2fb063e1c455c3f5b1a5ff17ea7fb5e965f312a4e4ea2a566b5ce9b5379df\",\"license\":\"MIT\"},\"contracts/interfaces/external/synthetix/ISnxSynth.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.4.24;\\n\\n// https://docs.synthetix.io/contracts/source/interfaces/isynth\\ninterface ISnxSynth {\\n    // Views\\n    function currencyKey() external view returns (bytes32);\\n\\n    function transferableSynths(address account) external view returns (uint256);\\n\\n    // Mutative functions\\n    function transferAndSettle(address to, uint256 value) external returns (bool);\\n\\n    function transferFromAndSettle(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    // Restricted: used internally to Synthetix\\n    function burn(address account, uint256 amount) external;\\n\\n    function issue(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x6a694ca1bdcfcbf1e064711476d919d3446189492349b4620ff145b49173f33f\",\"license\":\"MIT\"},\"contracts/interfaces/external/uniswap/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IUniswapV2Router {\\n    function factory() external pure returns (address);\\n\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function addLiquidityETH(\\n        address token,\\n        uint256 amountTokenDesired,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 amountToken,\\n            uint256 amountETH,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETH(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountA, uint256 amountB);\\n\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint256 liquidity,\\n        uint256 amountTokenMin,\\n        uint256 amountETHMin,\\n        address to,\\n        uint256 deadline,\\n        bool approveMax,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256 amountToken, uint256 amountETH);\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external payable returns (uint256[] memory amounts);\\n\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) external pure returns (uint256 amountB);\\n\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountOut);\\n\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) external pure returns (uint256 amountIn);\\n\\n    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\\n\\n    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0x7f360f7b5d21d962512aa4a4b3ac73a7947c990c5f0913610502fdb617754d4f\",\"license\":\"MIT\"},\"contracts/interfaces/external/yearn/IYearnRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IYearnRegistry {\\n    function latestVault(address asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0x5a5ff2e4de4a41fe45ef5b67ab4c3ac3de47bd29c7a430bf4d8b4da40ace579b\",\"license\":\"MIT\"},\"contracts/interfaces/external/yearn/IYearnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IYearnVault {\\n    function pricePerShare() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 shares) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x46f32ad8c60d681953263abeeaf86a7c1185420971d75067fa7ec264704a6610\",\"license\":\"MIT\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /*\\n      Unfortunately Solidity does not support convertion of the fixed array to dynamic array so these functions are\\n      required. This functionality would be supported in the future so these methods can be removed.\\n    */\\n    function toDynamic(address _one, address _two) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](2);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](3);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three,\\n        address _four\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](4);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        arr[3] = _four;\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x22f796dac6fcdab1e033d870e152f08d777c81764bfa7aab4a1c9db2cc55403e\",\"license\":\"Apache License\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5b5957049797cea3493ff6fe2d68b182973962253a9eb2eb72283c3532df193d\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x962373863c5ee11f3448970bfee73b0806ac9fe4e9e462a1f75a81f5959ef75f\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620040fc380380620040fc833981810160405260408110156200003757600080fd5b50805160209091015160006200004c62000155565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600180546001600160a01b038085166001600160a01b03199283161790925560028054928416929091169190911790556005805462ffffff19166102bc1790556200014d6200014773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2736b175474e89094c44da98b954eedeac495271d0f73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48732260fac5e5542a773aa44fbcfedf7c193bc2c5996200092e62000159602090811b91909117901c565b6200023e565b5050620003a2565b3390565b60408051600480825260a08201909252606091600091906020820160808036833701905050905085816000815181106200018f57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110620001be57fe5b60200260200101906001600160a01b031690816001600160a01b0316815250508381600281518110620001ed57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816003815181106200021c57fe5b6001600160a01b03909216602092830291909101909101529050949350505050565b60005b6004548110156200029d57600060036000600484815481106200026057fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905560010162000241565b50620002ac6004600062000364565b60005b81518110156200036057600160036000848481518110620002cc57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060048282815181106200031a57fe5b60209081029190910181015182546001808201855560009485529290932090920180546001600160a01b0319166001600160a01b039093169290921790915501620002af565b5050565b508054600082559060005260206000209081019062000384919062000387565b50565b5b808211156200039e576000815560010162000388565b5090565b613d4a80620003b26000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ac41865a1161008c578063d636811311610066578063d636811314610230578063f2fde38b146102d3578063f77c4791146102f9578063f8da2c9514610301576100ea565b8063ac41865a146101c5578063c42cb292146101f3578063caa8a96514610213576100ea565b8063715018a6116100c8578063715018a61461017557806371f14a0b1461017d578063891d02491461017d5780638da5cb5b146101bd576100ea565b806312e9cb05146100ef57806316b2b88814610117578063564e9bb61461013b575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661032f565b005b61011f6103ce565b604080516001600160a01b039092168252519081900360200190f35b6101616004803603602081101561015157600080fd5b50356001600160a01b03166103dd565b604080519115158252519081900360200190f35b6101156103f2565b6101ab6004803603604081101561019357600080fd5b506001600160a01b03813581169160200135166104bd565b60408051918252519081900360200190f35b61011f6106bd565b6101ab600480360360408110156101db57600080fd5b506001600160a01b03813581169160200135166106cc565b6101156004803603602081101561020957600080fd5b503560020b61072e565b61011f6004803603602081101561022957600080fd5b50356107a5565b6101156004803603602081101561024657600080fd5b81019060208101813564010000000081111561026157600080fd5b82018360208201111561027357600080fd5b8035906020019184602083028401116401000000008311171561029557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107cf945050505050565b610115600480360360208110156102e957600080fd5b50356001600160a01b03166107f0565b61011f610911565b6101ab6004803603604081101561031757600080fd5b506001600160a01b0381358116916020013516610920565b600254610344906001600160a01b0316610a10565b6001600160a01b03811661039f576040805162461bcd60e51b815260206004820152601660248201527f41646472657373206e6565647320746f20657869737400000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60036020526000908152604090205460ff1681565b6103fa610b32565b6001600160a01b031661040b6106bd565b6001600160a01b031614610466576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d602081101561052357600080fd5b5051604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519192506008916001600160a01b0386169163313ce567916004808301926020929190829003018186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b505160ff161115610639576106326008846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d602081101561062157600080fd5b5051839160ff910316600a0a610b36565b90506106b4565b6106b1836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561067557600080fd5b505afa158015610689573d6000803e3d6000fd5b505050506040513d602081101561069f57600080fd5b5051829060080360ff16600a0a610b9d565b90505b90505b92915050565b6000546001600160a01b031690565b60006106da83836000610bc1565b9050806106b7576040805162461bcd60e51b815260206004820152600f60248201527f5072696365206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600254610743906001600160a01b0316610a10565b6105dc8160020b126107865760405162461bcd60e51b8152600401808060200182810382526027815260200180613cc46027913960400191505060405180910390fd5b6005805460029290920b62ffffff1662ffffff19909216919091179055565b600481815481106107b557600080fd5b6000918252602090912001546001600160a01b0316905081565b6002546107e4906001600160a01b0316610a10565b6107ed8161195e565b50565b6107f8610b32565b6001600160a01b03166108096106bd565b6001600160a01b031614610864576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108a95760405162461bcd60e51b8152600401808060200182810382526026815260200180613c9e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006106da83836001610bc1565b60408051600480825260a082019092526060916000919060208201608080368337019050509050858160008151811061096357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061099157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106109bf57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816003815181106109ed57fe5b6001600160a01b039092166020928302919091019091015290505b949350505050565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d6020811015610a7357600080fd5b50516001600160a01b0316331480610af75750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d6020811015610ae957600080fd5b50516001600160a01b031633145b6107ed5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ceb602a913960400191505060405180910390fd5b3390565b6000808211610b8c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610b9557fe5b049392505050565b6000821580610bb857505081810281838281610bb557fe5b04145b6106b757600080fd5b6000826001600160a01b0316846001600160a01b03161415610bec5750670de0b6b3a7640000611957565b6001600160a01b03841615610c015783610c17565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b93506001600160a01b03831615610c2e5782610c44565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b92506000600260009054906101000a90046001600160a01b03166001600160a01b031663f4afedd16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b5051600154604080517fe166fa900000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301528085166044830152915193945060009384938493849391169163e166fa9091606480820192608092909190829003018186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d6080811015610d6d57600080fd5b50805160208201516040830151606090930151919650945090925090506000600160ff86161415610dc557610da28a846104bd565b9050610db881610db2858c6106cc565b90611a88565b9650505050505050611957565b8360ff1660011415610df157610ddb89836104bd565b9050610db881610deb8c856106cc565b90611aa6565b8460ff1660021415610e0757610db8838a6106cc565b8360ff1660021415610e1d57610db88a836106cc565b8460ff1660031415610e3357610da28a846104bd565b8360ff1660031415610e4957610ddb89836104bd565b8460ff1660041415610ffb5760008a6001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9057600080fd5b505afa158015610ea4573d6000803e3d6000fd5b505050506040513d6020811015610eba57600080fd5b50516040805163dbd06c8560e01b8152905191925073d69b189020ef614796578afe4d10378c5e7e11389163ac82f608916001600160a01b0385169163dbd06c8591600480820192602092909190829003018186803b158015610f1c57600080fd5b505afa158015610f30573d6000803e3d6000fd5b505050506040513d6020811015610f4657600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252516024808301926020929190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b50519150610fed82610db273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488d6106cc565b975050505050505050611957565b8360ff166004141561119f576000896001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801561104257600080fd5b505afa158015611056573d6000803e3d6000fd5b505050506040513d602081101561106c57600080fd5b50516040805163dbd06c8560e01b8152905191925073d69b189020ef614796578afe4d10378c5e7e11389163ac82f608916001600160a01b0385169163dbd06c8591600480820192602092909190829003018186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d60208110156110f857600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252516024808301926020929190829003018186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d602081101561117957600080fd5b50519150610fed82610deb8d73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486106cc565b8460ff16600514156112e2576000866001600160a01b03166324a592338c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d602081101561122457600080fd5b505190506001600160a01b038116156112e05760006112438289611abe565b90506112d1611252828d6106cc565b896001600160a01b031663e39e26828f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d60208110156112c957600080fd5b505190611a88565b98505050505050505050611957565b505b8360ff1660051415611410576000866001600160a01b03166324a592338b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d602081101561136757600080fd5b505190506001600160a01b0381161561140e5760006113868289611abe565b90506112d1886001600160a01b031663e39e26828d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d602081101561140257600080fd5b5051610deb8e846106cc565b505b8460ff166006141561155a576114c661148d8b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d602081101561148557600080fd5b50518b6106cc565b8b6001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561129f57600080fd5b965060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d602081101561152d57600080fd5b505160ff169050601281101561154e57610fed886012839003600a0a610b9d565b50505050505050611957565b8360ff16600614156116f8576000896001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a157600080fd5b505afa1580156115b5573d6000803e3d6000fd5b505050506040513d60208110156115cb57600080fd5b5051604080517f99530b060000000000000000000000000000000000000000000000000000000081529051919250611663916001600160a01b038d16916399530b06916004808301926020929190829003018186803b15801561162d57600080fd5b505afa158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b5051610deb8d846106cc565b975060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a057600080fd5b505afa1580156116b4573d6000803e3d6000fd5b505050506040513d60208110156116ca57600080fd5b505160ff16905060128110156116eb576112d1896012839003600a0a610b36565b5050505050505050611957565b6001600160a01b038a167324e79e946dea5482212c38aab2d0782f04cdb0e014156117995760006117677348536ec5233297c367fd0b6979b75d9270bb6b157324e79e946dea5482212c38aab2d0782f04cdb0e0737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98a611c49565b9050801561179757610fed611790737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98c611ed9565b8290611a88565b505b6001600160a01b0389167324e79e946dea5482212c38aab2d0782f04cdb0e014156118335760006118087348536ec5233297c367fd0b6979b75d9270bb6b15737fc66500c84a76ad7e9c93437bfc5ac33e2ddae97324e79e946dea5482212c38aab2d0782f04cdb0e08a611c49565b9050801561183157610fed6117908c737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9611ed9565b505b61183e8a8a88611fbe565b9650861561185157505050505050611957565b61185b8a8a611ed9565b9650861561186e57505050505050611957565b60005b60045481101561193c5760006004828154811061188a57fe5b6000918252602090912001546001600160a01b0390811691508c1681148015906118c65750806001600160a01b03168b6001600160a01b031614155b156119335760006118d88d838b611fbe565b905080156118fd576118ed611790838e611ed9565b9950505050505050505050611957565b600061190a838e8c611fbe565b905080156119305761191f6117908f85611ed9565b9a5050505050505050505050611957565b50505b50600101611871565b5087156119505761194d8a8a612235565b96505b5050505050505b9392505050565b60005b6004548110156119ba576000600360006004848154811061197e57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611961565b506119c760046000613c6b565b60005b8151811015611a84576001600360008484815181106119e557fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506004828281518110611a3257fe5b602090810291909101810151825460018082018555600094855292909320909201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390931692909217909155016119ca565b5050565b60006106b4670de0b6b3a7640000611aa08585610b9d565b90610b36565b60006106b482611aa085670de0b6b3a7640000610b9d565b600080826001600160a01b031663a07952a48560016040518363ffffffff1660e01b815260040180836001600160a01b031681526020018215158152602001925050506101006040518083038186803b158015611b1a57600080fd5b505afa158015611b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015611b5457600080fd5b5080519091506001600160a01b031615611bb95780516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b578060005b6020020151611bb1565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9150506106b7565b60208101516001600160a01b031615611bfc5760208101516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b57806001611b91565b60408101516001600160a01b031615611c3f5760408101516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b57806002611b91565b5060009392505050565b600080600080846001600160a01b03166329a0eb858989896040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060606040518083038186803b158015611cbe57600080fd5b505afa158015611cd2573d6000803e3d6000fd5b505050506040513d6060811015611ce857600080fd5b508051602082015160409092015190945090925090506000806001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611d8f57886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5e57600080fd5b505afa158015611d72573d6000803e3d6000fd5b505050506040513d6020811015611d8857600080fd5b5051611d92565b60125b60ff16600a0a90508215611db357611dac8a8686846124bd565b9150611dc2565b611dbf8a8686846126ad565b91505b611e6e6001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611e5357886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2257600080fd5b505afa158015611e36573d6000803e3d6000fd5b505050506040513d6020811015611e4c57600080fd5b5051611e56565b60125b60120360ff16600a0a83610b9d90919063ffffffff16565b91506000611e838366d529ae9e860000611a88565b9050611e97670de0b6b3a7640000826127fb565b83108015611eb55750611eb2670de0b6b3a76400008261280b565b83115b15611ec857829650505050505050610a08565b5060009a9950505050505050505050565b6001600160a01b038216600090815260036020526040812054670de0b6b3a76400009082908590859060ff16611f1c57611f1487600161281b565b945084935091505b6001600160a01b03861660009081526003602052604090205460ff16611f8a57611f4786600061281b565b935090506001600160a01b0382811690821614611f7557611f72611f6b83836128f0565b8590611a88565b93505b611f7f8484611a88565b9450505050506106b7565b806001600160a01b0316826001600160a01b031614611fb357611fb0611f6b83836128f0565b93505b509195945050505050565b600080826001600160a01b031663b35084db868660006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561202857600080fd5b505afa15801561203c573d6000803e3d6000fd5b505050506040513d602081101561205257600080fd5b505190506001600160a01b03851673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214801561208957506001600160a01b038116155b1561212d576040805163b35084db60e01b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600482018190526001600160a01b0387811660248401526000604484015292519097509185169163b35084db91606480820192602092909190829003018186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d602081101561212857600080fd5b505190505b6001600160a01b03841673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214801561216057506001600160a01b038116155b15612203576040805163b35084db60e01b81526001600160a01b03878116600483015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6024830181905260006044840152925192965085169163b35084db91606480820192602092909190829003018186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d60208110156121fe57600080fd5b505190505b6001600160a01b0381161561222a57600061222082878787611c49565b9250611957915050565b506000949350505050565b60408051600280825260608201835260009283929190602083019080368337019050509050838160008151811061226857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061229657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663d06ca61f856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561231257600080fd5b505afa158015612326573d6000803e3d6000fd5b505050506040513d602081101561233c57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff8316600482019081526024820192835286516044830152865187939192606401906020858101910280838360005b838110156123b357818101518382015260200161239b565b50505050905001935050505060006040518083038186803b1580156123d757600080fd5b505afa1580156123eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561241457600080fd5b810190808051604051939291908464010000000082111561243457600080fd5b90830190602082018581111561244957600080fd5b825186602082028301116401000000008211171561246657600080fd5b82525081516020918201928201910280838360005b8381101561249357818101518382015260200161247b565b505050509050016040525050506001815181106124ac57fe5b602002602001015191505092915050565b6000846001600160a01b03166385f11d1e8585856040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561251357600080fd5b505afa92505050801561253857506040513d602081101561253357600080fd5b505160015b6126a657604080517f07211ef7000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b60248201526044810184905290516001600160a01b038716916307211ef7916064808301926020929190829003018186803b1580156125ae57600080fd5b505afa9250505080156125d357506040513d60208110156125ce57600080fd5b505160015b6126a65760408051635e0d443f60e01b8152600f86810b600483015285900b60248201526044810184905290516001600160a01b03871691635e0d443f916064808301926020929190829003018186803b15801561263057600080fd5b505afa92505050801561265557506040513d602081101561265057600080fd5b505160015b6126a6576040805162461bcd60e51b815260206004820152601860248201527f67657420647920756e6465726c79696e67206661696c65640000000000000000604482015290519081900360640190fd5b9050610a08565b6000846001600160a01b031663556d6e9f8585856040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561270357600080fd5b505afa92505050801561272857506040513d602081101561272357600080fd5b505160015b6126a65760408051635e0d443f60e01b8152600f86810b600483015285900b60248201526044810184905290516001600160a01b03871691635e0d443f916064808301926020929190829003018186803b15801561278557600080fd5b505afa9250505080156127aa57506040513d60208110156127a557600080fd5b505160015b6126a6576040805162461bcd60e51b815260206004820152600d60248201527f676574206479206661696c656400000000000000000000000000000000000000604482015290519081900360640190fd5b808201828110156106b757600080fd5b808203828111156106b757600080fd5b60008060008060008060005b6004548110156128b5576000806128748b6004858154811061284557fe5b6000918252602090912001546001600160a01b0316736b175474e89094c44da98b954eedeac495271d0f61294c565b91509150838111156128ab578194508093506004838154811061289357fe5b6000918252602090912001546001600160a01b031695505b5050600101612827565b5080156128e25786156128d4576128cd828985612c5f565b93506128e2565b6128df82848a612c5f565b93505b509096919550909350505050565b6000816001600160a01b0316836001600160a01b0316141561291b5750670de0b6b3a76400006106b7565b60006129278484612dec565b90506001600160a01b0381166129415760009150506106b7565b610a08818585612c5f565b600080600061295b8686612dec565b90506001600160a01b038116612978576000809250925050612c57565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b357600080fd5b505afa1580156129c7573d6000803e3d6000fd5b505050506040513d60208110156129dd57600080fd5b5051604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160801b039092169250600091829182916001600160a01b03871691630dfe1681916004808301926020929190829003018186803b158015612a4c57600080fd5b505afa158015612a60573d6000803e3d6000fd5b505050506040513d6020811015612a7657600080fd5b5051604080517fd21220a700000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0388169163d21220a7916004808301926020929190829003018186803b158015612ad757600080fd5b505afa158015612aeb573d6000803e3d6000fd5b505050506040513d6020811015612b0157600080fd5b50516001600160a01b03831660009081526003602052604090205490915060ff1615612bb757612bad816001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d6020811015612ba157600080fd5b5051611aa08780610b9d565b9350819250612c0d565b612c07826001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b7757600080fd5b93508092505b886001600160a01b0316836001600160a01b031614612c4c576000612c32848b6106cc565b9050612c48848b612c438885611a88565b6131d9565b9450505b509395509093505050505b935093915050565b6000816001600160a01b0316836001600160a01b03161415612c8a5750670de0b6b3a7640000611957565b6000846001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015612cc557600080fd5b505afa158015612cd9573d6000803e3d6000fd5b505050506040513d60e0811015612cef57600080fd5b50602001519050612d00818661339a565b612d0e576000915050611957565b612de3612d84856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4d57600080fd5b505afa158015612d61573d6000803e3d6000fd5b505050506040513d6020811015612d7757600080fd5b505160129060ff1661280b565b600a0a611aa083612ddc612dca886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4d57600080fd5b670de0b6b3a764000090600a0a610b9d565b8888613492565b95945050505050565b60408051630b4c774160e11b81526001600160a01b038481166004830152831660248201526101f4604482015290516000918291731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612e5b57600080fd5b505afa158015612e6f573d6000803e3d6000fd5b505050506040513d6020811015612e8557600080fd5b505160408051630b4c774160e11b81526001600160a01b03878116600483015286166024820152610bb860448201529051919250600091731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612ef757600080fd5b505afa158015612f0b573d6000803e3d6000fd5b505050506040513d6020811015612f2157600080fd5b505160408051630b4c774160e11b81526001600160a01b0388811660048301528716602482015261271060448201529051919250600091731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612f9357600080fd5b505afa158015612fa7573d6000803e3d6000fd5b505050506040513d6020811015612fbd57600080fd5b5051905060006001600160a01b038416612fd857600061303e565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561301157600080fd5b505afa158015613025573d6000803e3d6000fd5b505050506040513d602081101561303b57600080fd5b50515b905060006001600160a01b0384166130575760006130bd565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561309057600080fd5b505afa1580156130a4573d6000803e3d6000fd5b505050506040513d60208110156130ba57600080fd5b50515b905060006001600160a01b0384166130d657600061313c565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561310f57600080fd5b505afa158015613123573d6000803e3d6000fd5b505050506040513d602081101561313957600080fd5b50515b9050816001600160801b0316836001600160801b0316101580156131725750806001600160801b0316836001600160801b031610155b15613185578596505050505050506106b7565b826001600160801b0316826001600160801b0316101580156131b95750806001600160801b0316826001600160801b031610155b156131cc578496505050505050506106b7565b5091979650505050505050565b6000806131e585613589565b61325357846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561322257600080fd5b505afa158015613236573d6000803e3d6000fd5b505050506040513d602081101561324c57600080fd5b5051613256565b60125b60ff169050600061326685613589565b6132d457846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156132a357600080fd5b505afa1580156132b7573d6000803e3d6000fd5b505050506040513d60208110156132cd57600080fd5b50516132d7565b60125b60ff169050601282111580156132ee575060128111155b61333f576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b80821415613351578392505050611957565b8181111561337957613370613366828461280b565b8590600a0a610b9d565b92505050611957565b613390613386838361280b565b8590600a0a610b36565b9695505050505050565b600080826001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133d657600080fd5b505afa1580156133ea573d6000803e3d6000fd5b505050506040513d602081101561340057600080fd5b50519050620d85ff198101600290810b9085900b12156134245760009150506106b7565b806103e8620d89e719600003030360020b8460020b13156134495760009150506106b7565b6000613454846135c5565b905060008160060b8660020b13613470578560020b8203613477565b818660020b035b600554600290810b900b60069190910b129695505050505050565b60008061349e8661386e565b90506001600160801b036001600160a01b0382161161350d576001600160a01b03808216800290848116908616106134ed576134e8600160c01b876001600160801b031683613bbc565b613505565b61350581876001600160801b0316600160c01b613bbc565b925050613580565b600061352c6001600160a01b0383168068010000000000000000613bbc565b9050836001600160a01b0316856001600160a01b0316106135645761355f600160801b876001600160801b031683613bbc565b61357c565b61357c81876001600160801b0316600160801b613bbc565b9250505b50949350505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806135bd57506001600160a01b038216155b90505b919050565b60408051600280825260608201835260009283929190602083019080368337019050509050601e816000815181106135f957fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061362257fe5b63ffffffff9092166020928302919091018201526040517f883bdbfd000000000000000000000000000000000000000000000000000000008152600481018281528351602483015283516001600160a01b0387169363883bdbfd938693928392604490920191858101910280838360005b838110156136ab578181015183820152602001613693565b505050509050019250505060006040518083038186803b1580156136ce57600080fd5b505afa92505050801561381857506040513d6000823e601f3d908101601f19168201604090815281101561370157600080fd5b810190808051604051939291908464010000000082111561372157600080fd5b90830190602082018581111561373657600080fd5b825186602082028301116401000000008211171561375357600080fd5b82525081516020918201928201910280838360005b83811015613780578181015183820152602001613768565b50505050905001604052602001805160405193929190846401000000008211156137a957600080fd5b9083019060208201858111156137be57600080fd5b82518660208202830111640100000000821117156137db57600080fd5b82525081516020918201928201910280838360005b838110156138085781810151838201526020016137f0565b5050505090500160405250505060015b6138265760009150506135c0565b601e63ffffffff168260008151811061383b57fe5b60200260200101518360018151811061385057fe5b60200260200101510360060b8161386357fe5b0593505050506135c0565b60008060008360020b12613885578260020b61388d565b8260020b6000035b9050620d89e88111156138e7576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600182166138fb57600160801b61390d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613941576ffff97272373d413259a46990580e213a0260801c5b6004821615613960576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561397f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561399e576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156139bd576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156139dc576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156139fb576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615613a1b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615613a3b576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615613a5b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615613a7b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615613a9b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615613abb576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615613adb576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615613afb576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615613b1c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615613b3c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615613b5b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615613b78576b048a170391f7dc42444e8fa20260801c5b60008460020b1315613b93578060001981613b8f57fe5b0490505b640100000000810615613ba7576001613baa565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080613bf25760008411613be757600080fd5b508290049050611957565b808411613bfe57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b50805460008255906000526020600020908101906107ed91905b80821115613c995760008155600101613c85565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d6178207477617020646576696174696f6e206d7573742062652077697468696e2072616e67654f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220019f04638318301cc5e87ff630d683f1b0ab871a2da7219bf8124aa7a8cadf8964736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c8063ac41865a1161008c578063d636811311610066578063d636811314610230578063f2fde38b146102d3578063f77c4791146102f9578063f8da2c9514610301576100ea565b8063ac41865a146101c5578063c42cb292146101f3578063caa8a96514610213576100ea565b8063715018a6116100c8578063715018a61461017557806371f14a0b1461017d578063891d02491461017d5780638da5cb5b146101bd576100ea565b806312e9cb05146100ef57806316b2b88814610117578063564e9bb61461013b575b600080fd5b6101156004803603602081101561010557600080fd5b50356001600160a01b031661032f565b005b61011f6103ce565b604080516001600160a01b039092168252519081900360200190f35b6101616004803603602081101561015157600080fd5b50356001600160a01b03166103dd565b604080519115158252519081900360200190f35b6101156103f2565b6101ab6004803603604081101561019357600080fd5b506001600160a01b03813581169160200135166104bd565b60408051918252519081900360200190f35b61011f6106bd565b6101ab600480360360408110156101db57600080fd5b506001600160a01b03813581169160200135166106cc565b6101156004803603602081101561020957600080fd5b503560020b61072e565b61011f6004803603602081101561022957600080fd5b50356107a5565b6101156004803603602081101561024657600080fd5b81019060208101813564010000000081111561026157600080fd5b82018360208201111561027357600080fd5b8035906020019184602083028401116401000000008311171561029557600080fd5b9190808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152509295506107cf945050505050565b610115600480360360208110156102e957600080fd5b50356001600160a01b03166107f0565b61011f610911565b6101ab6004803603604081101561031757600080fd5b506001600160a01b0381358116916020013516610920565b600254610344906001600160a01b0316610a10565b6001600160a01b03811661039f576040805162461bcd60e51b815260206004820152601660248201527f41646472657373206e6565647320746f20657869737400000000000000000000604482015290519081900360640190fd5b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60036020526000908152604090205460ff1681565b6103fa610b32565b6001600160a01b031661040b6106bd565b6001600160a01b031614610466576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600080836001600160a01b031663182df0f56040518163ffffffff1660e01b815260040160206040518083038186803b1580156104f957600080fd5b505afa15801561050d573d6000803e3d6000fd5b505050506040513d602081101561052357600080fd5b5051604080517f313ce56700000000000000000000000000000000000000000000000000000000815290519192506008916001600160a01b0386169163313ce567916004808301926020929190829003018186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d60208110156105ae57600080fd5b505160ff161115610639576106326008846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156105f757600080fd5b505afa15801561060b573d6000803e3d6000fd5b505050506040513d602081101561062157600080fd5b5051839160ff910316600a0a610b36565b90506106b4565b6106b1836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561067557600080fd5b505afa158015610689573d6000803e3d6000fd5b505050506040513d602081101561069f57600080fd5b5051829060080360ff16600a0a610b9d565b90505b90505b92915050565b6000546001600160a01b031690565b60006106da83836000610bc1565b9050806106b7576040805162461bcd60e51b815260206004820152600f60248201527f5072696365206e6f7420666f756e640000000000000000000000000000000000604482015290519081900360640190fd5b600254610743906001600160a01b0316610a10565b6105dc8160020b126107865760405162461bcd60e51b8152600401808060200182810382526027815260200180613cc46027913960400191505060405180910390fd5b6005805460029290920b62ffffff1662ffffff19909216919091179055565b600481815481106107b557600080fd5b6000918252602090912001546001600160a01b0316905081565b6002546107e4906001600160a01b0316610a10565b6107ed8161195e565b50565b6107f8610b32565b6001600160a01b03166108096106bd565b6001600160a01b031614610864576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166108a95760405162461bcd60e51b8152600401808060200182810382526026815260200180613c9e6026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6002546001600160a01b031681565b60006106da83836001610bc1565b60408051600480825260a082019092526060916000919060208201608080368337019050509050858160008151811061096357fe5b60200260200101906001600160a01b031690816001600160a01b031681525050848160018151811061099157fe5b60200260200101906001600160a01b031690816001600160a01b03168152505083816002815181106109bf57fe5b60200260200101906001600160a01b031690816001600160a01b03168152505082816003815181106109ed57fe5b6001600160a01b039092166020928302919091019091015290505b949350505050565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610a4957600080fd5b505afa158015610a5d573d6000803e3d6000fd5b505050506040513d6020811015610a7357600080fd5b50516001600160a01b0316331480610af75750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015610abf57600080fd5b505afa158015610ad3573d6000803e3d6000fd5b505050506040513d6020811015610ae957600080fd5b50516001600160a01b031633145b6107ed5760405162461bcd60e51b815260040180806020018281038252602a815260200180613ceb602a913960400191505060405180910390fd5b3390565b6000808211610b8c576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381610b9557fe5b049392505050565b6000821580610bb857505081810281838281610bb557fe5b04145b6106b757600080fd5b6000826001600160a01b0316846001600160a01b03161415610bec5750670de0b6b3a7640000611957565b6001600160a01b03841615610c015783610c17565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b93506001600160a01b03831615610c2e5782610c44565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b92506000600260009054906101000a90046001600160a01b03166001600160a01b031663f4afedd16040518163ffffffff1660e01b815260040160206040518083038186803b158015610c9657600080fd5b505afa158015610caa573d6000803e3d6000fd5b505050506040513d6020811015610cc057600080fd5b5051600154604080517fe166fa900000000000000000000000000000000000000000000000000000000081526001600160a01b03898116600483015288811660248301528085166044830152915193945060009384938493849391169163e166fa9091606480820192608092909190829003018186803b158015610d4357600080fd5b505afa158015610d57573d6000803e3d6000fd5b505050506040513d6080811015610d6d57600080fd5b50805160208201516040830151606090930151919650945090925090506000600160ff86161415610dc557610da28a846104bd565b9050610db881610db2858c6106cc565b90611a88565b9650505050505050611957565b8360ff1660011415610df157610ddb89836104bd565b9050610db881610deb8c856106cc565b90611aa6565b8460ff1660021415610e0757610db8838a6106cc565b8360ff1660021415610e1d57610db88a836106cc565b8460ff1660031415610e3357610da28a846104bd565b8360ff1660031415610e4957610ddb89836104bd565b8460ff1660041415610ffb5760008a6001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b158015610e9057600080fd5b505afa158015610ea4573d6000803e3d6000fd5b505050506040513d6020811015610eba57600080fd5b50516040805163dbd06c8560e01b8152905191925073d69b189020ef614796578afe4d10378c5e7e11389163ac82f608916001600160a01b0385169163dbd06c8591600480820192602092909190829003018186803b158015610f1c57600080fd5b505afa158015610f30573d6000803e3d6000fd5b505050506040513d6020811015610f4657600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252516024808301926020929190829003018186803b158015610f9d57600080fd5b505afa158015610fb1573d6000803e3d6000fd5b505050506040513d6020811015610fc757600080fd5b50519150610fed82610db273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb488d6106cc565b975050505050505050611957565b8360ff166004141561119f576000896001600160a01b031663d4b839926040518163ffffffff1660e01b815260040160206040518083038186803b15801561104257600080fd5b505afa158015611056573d6000803e3d6000fd5b505050506040513d602081101561106c57600080fd5b50516040805163dbd06c8560e01b8152905191925073d69b189020ef614796578afe4d10378c5e7e11389163ac82f608916001600160a01b0385169163dbd06c8591600480820192602092909190829003018186803b1580156110ce57600080fd5b505afa1580156110e2573d6000803e3d6000fd5b505050506040513d60208110156110f857600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526004810192909252516024808301926020929190829003018186803b15801561114f57600080fd5b505afa158015611163573d6000803e3d6000fd5b505050506040513d602081101561117957600080fd5b50519150610fed82610deb8d73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486106cc565b8460ff16600514156112e2576000866001600160a01b03166324a592338c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111fa57600080fd5b505afa15801561120e573d6000803e3d6000fd5b505050506040513d602081101561122457600080fd5b505190506001600160a01b038116156112e05760006112438289611abe565b90506112d1611252828d6106cc565b896001600160a01b031663e39e26828f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561129f57600080fd5b505afa1580156112b3573d6000803e3d6000fd5b505050506040513d60208110156112c957600080fd5b505190611a88565b98505050505050505050611957565b505b8360ff1660051415611410576000866001600160a01b03166324a592338b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561133d57600080fd5b505afa158015611351573d6000803e3d6000fd5b505050506040513d602081101561136757600080fd5b505190506001600160a01b0381161561140e5760006113868289611abe565b90506112d1886001600160a01b031663e39e26828d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156113d857600080fd5b505afa1580156113ec573d6000803e3d6000fd5b505050506040513d602081101561140257600080fd5b5051610deb8e846106cc565b505b8460ff166006141561155a576114c661148d8b6001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d602081101561148557600080fd5b50518b6106cc565b8b6001600160a01b03166399530b066040518163ffffffff1660e01b815260040160206040518083038186803b15801561129f57600080fd5b965060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561150357600080fd5b505afa158015611517573d6000803e3d6000fd5b505050506040513d602081101561152d57600080fd5b505160ff169050601281101561154e57610fed886012839003600a0a610b9d565b50505050505050611957565b8360ff16600614156116f8576000896001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156115a157600080fd5b505afa1580156115b5573d6000803e3d6000fd5b505050506040513d60208110156115cb57600080fd5b5051604080517f99530b060000000000000000000000000000000000000000000000000000000081529051919250611663916001600160a01b038d16916399530b06916004808301926020929190829003018186803b15801561162d57600080fd5b505afa158015611641573d6000803e3d6000fd5b505050506040513d602081101561165757600080fd5b5051610deb8d846106cc565b975060008a6001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156116a057600080fd5b505afa1580156116b4573d6000803e3d6000fd5b505050506040513d60208110156116ca57600080fd5b505160ff16905060128110156116eb576112d1896012839003600a0a610b36565b5050505050505050611957565b6001600160a01b038a167324e79e946dea5482212c38aab2d0782f04cdb0e014156117995760006117677348536ec5233297c367fd0b6979b75d9270bb6b157324e79e946dea5482212c38aab2d0782f04cdb0e0737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98a611c49565b9050801561179757610fed611790737fc66500c84a76ad7e9c93437bfc5ac33e2ddae98c611ed9565b8290611a88565b505b6001600160a01b0389167324e79e946dea5482212c38aab2d0782f04cdb0e014156118335760006118087348536ec5233297c367fd0b6979b75d9270bb6b15737fc66500c84a76ad7e9c93437bfc5ac33e2ddae97324e79e946dea5482212c38aab2d0782f04cdb0e08a611c49565b9050801561183157610fed6117908c737fc66500c84a76ad7e9c93437bfc5ac33e2ddae9611ed9565b505b61183e8a8a88611fbe565b9650861561185157505050505050611957565b61185b8a8a611ed9565b9650861561186e57505050505050611957565b60005b60045481101561193c5760006004828154811061188a57fe5b6000918252602090912001546001600160a01b0390811691508c1681148015906118c65750806001600160a01b03168b6001600160a01b031614155b156119335760006118d88d838b611fbe565b905080156118fd576118ed611790838e611ed9565b9950505050505050505050611957565b600061190a838e8c611fbe565b905080156119305761191f6117908f85611ed9565b9a5050505050505050505050611957565b50505b50600101611871565b5087156119505761194d8a8a612235565b96505b5050505050505b9392505050565b60005b6004548110156119ba576000600360006004848154811061197e57fe5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff1916911515919091179055600101611961565b506119c760046000613c6b565b60005b8151811015611a84576001600360008484815181106119e557fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506004828281518110611a3257fe5b602090810291909101810151825460018082018555600094855292909320909201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390931692909217909155016119ca565b5050565b60006106b4670de0b6b3a7640000611aa08585610b9d565b90610b36565b60006106b482611aa085670de0b6b3a7640000610b9d565b600080826001600160a01b031663a07952a48560016040518363ffffffff1660e01b815260040180836001600160a01b031681526020018215158152602001925050506101006040518083038186803b158015611b1a57600080fd5b505afa158015611b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015611b5457600080fd5b5080519091506001600160a01b031615611bb95780516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b578060005b6020020151611bb1565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b9150506106b7565b60208101516001600160a01b031615611bfc5760208101516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b57806001611b91565b60408101516001600160a01b031615611c3f5760408101516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611b9b57806002611b91565b5060009392505050565b600080600080846001600160a01b03166329a0eb858989896040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001826001600160a01b03168152602001935050505060606040518083038186803b158015611cbe57600080fd5b505afa158015611cd2573d6000803e3d6000fd5b505050506040513d6060811015611ce857600080fd5b508051602082015160409092015190945090925090506000806001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611d8f57886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611d5e57600080fd5b505afa158015611d72573d6000803e3d6000fd5b505050506040513d6020811015611d8857600080fd5b5051611d92565b60125b60ff16600a0a90508215611db357611dac8a8686846124bd565b9150611dc2565b611dbf8a8686846126ad565b91505b611e6e6001600160a01b03891673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611e5357886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611e2257600080fd5b505afa158015611e36573d6000803e3d6000fd5b505050506040513d6020811015611e4c57600080fd5b5051611e56565b60125b60120360ff16600a0a83610b9d90919063ffffffff16565b91506000611e838366d529ae9e860000611a88565b9050611e97670de0b6b3a7640000826127fb565b83108015611eb55750611eb2670de0b6b3a76400008261280b565b83115b15611ec857829650505050505050610a08565b5060009a9950505050505050505050565b6001600160a01b038216600090815260036020526040812054670de0b6b3a76400009082908590859060ff16611f1c57611f1487600161281b565b945084935091505b6001600160a01b03861660009081526003602052604090205460ff16611f8a57611f4786600061281b565b935090506001600160a01b0382811690821614611f7557611f72611f6b83836128f0565b8590611a88565b93505b611f7f8484611a88565b9450505050506106b7565b806001600160a01b0316826001600160a01b031614611fb357611fb0611f6b83836128f0565b93505b509195945050505050565b600080826001600160a01b031663b35084db868660006040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b03168152602001828152602001935050505060206040518083038186803b15801561202857600080fd5b505afa15801561203c573d6000803e3d6000fd5b505050506040513d602081101561205257600080fd5b505190506001600160a01b03851673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214801561208957506001600160a01b038116155b1561212d576040805163b35084db60e01b815273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee600482018190526001600160a01b0387811660248401526000604484015292519097509185169163b35084db91606480820192602092909190829003018186803b1580156120fe57600080fd5b505afa158015612112573d6000803e3d6000fd5b505050506040513d602081101561212857600080fd5b505190505b6001600160a01b03841673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214801561216057506001600160a01b038116155b15612203576040805163b35084db60e01b81526001600160a01b03878116600483015273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6024830181905260006044840152925192965085169163b35084db91606480820192602092909190829003018186803b1580156121d457600080fd5b505afa1580156121e8573d6000803e3d6000fd5b505050506040513d60208110156121fe57600080fd5b505190505b6001600160a01b0381161561222a57600061222082878787611c49565b9250611957915050565b506000949350505050565b60408051600280825260608201835260009283929190602083019080368337019050509050838160008151811061226857fe5b60200260200101906001600160a01b031690816001600160a01b031681525050828160018151811061229657fe5b60200260200101906001600160a01b031690816001600160a01b031681525050737a250d5630b4cf539739df2c5dacb4c659f2488d6001600160a01b031663d06ca61f856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561231257600080fd5b505afa158015612326573d6000803e3d6000fd5b505050506040513d602081101561233c57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815260ff8316600482019081526024820192835286516044830152865187939192606401906020858101910280838360005b838110156123b357818101518382015260200161239b565b50505050905001935050505060006040518083038186803b1580156123d757600080fd5b505afa1580156123eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561241457600080fd5b810190808051604051939291908464010000000082111561243457600080fd5b90830190602082018581111561244957600080fd5b825186602082028301116401000000008211171561246657600080fd5b82525081516020918201928201910280838360005b8381101561249357818101518382015260200161247b565b505050509050016040525050506001815181106124ac57fe5b602002602001015191505092915050565b6000846001600160a01b03166385f11d1e8585856040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561251357600080fd5b505afa92505050801561253857506040513d602081101561253357600080fd5b505160015b6126a657604080517f07211ef7000000000000000000000000000000000000000000000000000000008152600f86810b600483015285900b60248201526044810184905290516001600160a01b038716916307211ef7916064808301926020929190829003018186803b1580156125ae57600080fd5b505afa9250505080156125d357506040513d60208110156125ce57600080fd5b505160015b6126a65760408051635e0d443f60e01b8152600f86810b600483015285900b60248201526044810184905290516001600160a01b03871691635e0d443f916064808301926020929190829003018186803b15801561263057600080fd5b505afa92505050801561265557506040513d602081101561265057600080fd5b505160015b6126a6576040805162461bcd60e51b815260206004820152601860248201527f67657420647920756e6465726c79696e67206661696c65640000000000000000604482015290519081900360640190fd5b9050610a08565b6000846001600160a01b031663556d6e9f8585856040518463ffffffff1660e01b815260040180848152602001838152602001828152602001935050505060206040518083038186803b15801561270357600080fd5b505afa92505050801561272857506040513d602081101561272357600080fd5b505160015b6126a65760408051635e0d443f60e01b8152600f86810b600483015285900b60248201526044810184905290516001600160a01b03871691635e0d443f916064808301926020929190829003018186803b15801561278557600080fd5b505afa9250505080156127aa57506040513d60208110156127a557600080fd5b505160015b6126a6576040805162461bcd60e51b815260206004820152600d60248201527f676574206479206661696c656400000000000000000000000000000000000000604482015290519081900360640190fd5b808201828110156106b757600080fd5b808203828111156106b757600080fd5b60008060008060008060005b6004548110156128b5576000806128748b6004858154811061284557fe5b6000918252602090912001546001600160a01b0316736b175474e89094c44da98b954eedeac495271d0f61294c565b91509150838111156128ab578194508093506004838154811061289357fe5b6000918252602090912001546001600160a01b031695505b5050600101612827565b5080156128e25786156128d4576128cd828985612c5f565b93506128e2565b6128df82848a612c5f565b93505b509096919550909350505050565b6000816001600160a01b0316836001600160a01b0316141561291b5750670de0b6b3a76400006106b7565b60006129278484612dec565b90506001600160a01b0381166129415760009150506106b7565b610a08818585612c5f565b600080600061295b8686612dec565b90506001600160a01b038116612978576000809250925050612c57565b6000816001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b1580156129b357600080fd5b505afa1580156129c7573d6000803e3d6000fd5b505050506040513d60208110156129dd57600080fd5b5051604080517f0dfe168100000000000000000000000000000000000000000000000000000000815290516001600160801b039092169250600091829182916001600160a01b03871691630dfe1681916004808301926020929190829003018186803b158015612a4c57600080fd5b505afa158015612a60573d6000803e3d6000fd5b505050506040513d6020811015612a7657600080fd5b5051604080517fd21220a700000000000000000000000000000000000000000000000000000000815290519192506000916001600160a01b0388169163d21220a7916004808301926020929190829003018186803b158015612ad757600080fd5b505afa158015612aeb573d6000803e3d6000fd5b505050506040513d6020811015612b0157600080fd5b50516001600160a01b03831660009081526003602052604090205490915060ff1615612bb757612bad816001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b7757600080fd5b505afa158015612b8b573d6000803e3d6000fd5b505050506040513d6020811015612ba157600080fd5b5051611aa08780610b9d565b9350819250612c0d565b612c07826001600160a01b03166370a08231886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015612b7757600080fd5b93508092505b886001600160a01b0316836001600160a01b031614612c4c576000612c32848b6106cc565b9050612c48848b612c438885611a88565b6131d9565b9450505b509395509093505050505b935093915050565b6000816001600160a01b0316836001600160a01b03161415612c8a5750670de0b6b3a7640000611957565b6000846001600160a01b0316633850c7bd6040518163ffffffff1660e01b815260040160e06040518083038186803b158015612cc557600080fd5b505afa158015612cd9573d6000803e3d6000fd5b505050506040513d60e0811015612cef57600080fd5b50602001519050612d00818661339a565b612d0e576000915050611957565b612de3612d84856001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4d57600080fd5b505afa158015612d61573d6000803e3d6000fd5b505050506040513d6020811015612d7757600080fd5b505160129060ff1661280b565b600a0a611aa083612ddc612dca886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015612d4d57600080fd5b670de0b6b3a764000090600a0a610b9d565b8888613492565b95945050505050565b60408051630b4c774160e11b81526001600160a01b038481166004830152831660248201526101f4604482015290516000918291731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612e5b57600080fd5b505afa158015612e6f573d6000803e3d6000fd5b505050506040513d6020811015612e8557600080fd5b505160408051630b4c774160e11b81526001600160a01b03878116600483015286166024820152610bb860448201529051919250600091731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612ef757600080fd5b505afa158015612f0b573d6000803e3d6000fd5b505050506040513d6020811015612f2157600080fd5b505160408051630b4c774160e11b81526001600160a01b0388811660048301528716602482015261271060448201529051919250600091731f98431c8ad98523631ae4a59f267346ea31f98491631698ee82916064808301926020929190829003018186803b158015612f9357600080fd5b505afa158015612fa7573d6000803e3d6000fd5b505050506040513d6020811015612fbd57600080fd5b5051905060006001600160a01b038416612fd857600061303e565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561301157600080fd5b505afa158015613025573d6000803e3d6000fd5b505050506040513d602081101561303b57600080fd5b50515b905060006001600160a01b0384166130575760006130bd565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561309057600080fd5b505afa1580156130a4573d6000803e3d6000fd5b505050506040513d60208110156130ba57600080fd5b50515b905060006001600160a01b0384166130d657600061313c565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b15801561310f57600080fd5b505afa158015613123573d6000803e3d6000fd5b505050506040513d602081101561313957600080fd5b50515b9050816001600160801b0316836001600160801b0316101580156131725750806001600160801b0316836001600160801b031610155b15613185578596505050505050506106b7565b826001600160801b0316826001600160801b0316101580156131b95750806001600160801b0316826001600160801b031610155b156131cc578496505050505050506106b7565b5091979650505050505050565b6000806131e585613589565b61325357846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561322257600080fd5b505afa158015613236573d6000803e3d6000fd5b505050506040513d602081101561324c57600080fd5b5051613256565b60125b60ff169050600061326685613589565b6132d457846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156132a357600080fd5b505afa1580156132b7573d6000803e3d6000fd5b505050506040513d60208110156132cd57600080fd5b50516132d7565b60125b60ff169050601282111580156132ee575060128111155b61333f576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b80821415613351578392505050611957565b8181111561337957613370613366828461280b565b8590600a0a610b9d565b92505050611957565b613390613386838361280b565b8590600a0a610b36565b9695505050505050565b600080826001600160a01b031663d0c93a7c6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133d657600080fd5b505afa1580156133ea573d6000803e3d6000fd5b505050506040513d602081101561340057600080fd5b50519050620d85ff198101600290810b9085900b12156134245760009150506106b7565b806103e8620d89e719600003030360020b8460020b13156134495760009150506106b7565b6000613454846135c5565b905060008160060b8660020b13613470578560020b8203613477565b818660020b035b600554600290810b900b60069190910b129695505050505050565b60008061349e8661386e565b90506001600160801b036001600160a01b0382161161350d576001600160a01b03808216800290848116908616106134ed576134e8600160c01b876001600160801b031683613bbc565b613505565b61350581876001600160801b0316600160c01b613bbc565b925050613580565b600061352c6001600160a01b0383168068010000000000000000613bbc565b9050836001600160a01b0316856001600160a01b0316106135645761355f600160801b876001600160801b031683613bbc565b61357c565b61357c81876001600160801b0316600160801b613bbc565b9250505b50949350505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806135bd57506001600160a01b038216155b90505b919050565b60408051600280825260608201835260009283929190602083019080368337019050509050601e816000815181106135f957fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061362257fe5b63ffffffff9092166020928302919091018201526040517f883bdbfd000000000000000000000000000000000000000000000000000000008152600481018281528351602483015283516001600160a01b0387169363883bdbfd938693928392604490920191858101910280838360005b838110156136ab578181015183820152602001613693565b505050509050019250505060006040518083038186803b1580156136ce57600080fd5b505afa92505050801561381857506040513d6000823e601f3d908101601f19168201604090815281101561370157600080fd5b810190808051604051939291908464010000000082111561372157600080fd5b90830190602082018581111561373657600080fd5b825186602082028301116401000000008211171561375357600080fd5b82525081516020918201928201910280838360005b83811015613780578181015183820152602001613768565b50505050905001604052602001805160405193929190846401000000008211156137a957600080fd5b9083019060208201858111156137be57600080fd5b82518660208202830111640100000000821117156137db57600080fd5b82525081516020918201928201910280838360005b838110156138085781810151838201526020016137f0565b5050505090500160405250505060015b6138265760009150506135c0565b601e63ffffffff168260008151811061383b57fe5b60200260200101518360018151811061385057fe5b60200260200101510360060b8161386357fe5b0593505050506135c0565b60008060008360020b12613885578260020b61388d565b8260020b6000035b9050620d89e88111156138e7576040805162461bcd60e51b815260206004820152600160248201527f5400000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b6000600182166138fb57600160801b61390d565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615613941576ffff97272373d413259a46990580e213a0260801c5b6004821615613960576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b600882161561397f576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b601082161561399e576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156139bd576fff973b41fa98c081472e6896dfb254c00260801c5b60408216156139dc576fff2ea16466c96a3843ec78b326b528610260801c5b60808216156139fb576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615613a1b576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615613a3b576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615613a5b576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615613a7b576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615613a9b576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615613abb576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615613adb576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615613afb576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615613b1c576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615613b3c576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615613b5b576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615613b78576b048a170391f7dc42444e8fa20260801c5b60008460020b1315613b93578060001981613b8f57fe5b0490505b640100000000810615613ba7576001613baa565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080613bf25760008411613be757600080fd5b508290049050611957565b808411613bfe57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b50805460008255906000526020600020908101906107ed91905b80821115613c995760008155600101613c85565b509056fe4f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734d6178207477617020646576696174696f6e206d7573742062652077697468696e2072616e67654f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220019f04638318301cc5e87ff630d683f1b0ab871a2da7219bf8124aa7a8cadf8964736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Uses Uniswap V3 to get a price of a token pair",
    "kind": "dev",
    "methods": {
      "getPrice(address,address)": {
        "params": {
          "_tokenIn": "Address of the first token",
          "_tokenOut": "Address of the second token"
        },
        "returns": {
          "price": "               Price of the pair"
        }
      },
      "getPriceNAV(address,address)": {
        "params": {
          "_tokenIn": "Address of the first token",
          "_tokenOut": "Address of the second token"
        },
        "returns": {
          "price": "               Price of the pair"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PriceOracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getPrice(address,address)": {
        "notice": "Returns the amount out corresponding to the amount in for a given token"
      },
      "getPriceNAV(address,address)": {
        "notice": "Returns the amount out corresponding to the amount in for a given token"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1456,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 18507,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "tokenIdentifier",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITokenIdentifier)43761"
      },
      {
        "astId": 18509,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IBabController)41532"
      },
      {
        "astId": 18513,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "hopTokens",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 18516,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "hopTokensList",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 18518,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "maxTwapDeviation",
        "offset": 0,
        "slot": "5",
        "type": "t_int24"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)41532": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_contract(ITokenIdentifier)43761": {
        "encoding": "inplace",
        "label": "contract ITokenIdentifier",
        "numberOfBytes": "20"
      },
      "t_int24": {
        "encoding": "inplace",
        "label": "int24",
        "numberOfBytes": "3"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}