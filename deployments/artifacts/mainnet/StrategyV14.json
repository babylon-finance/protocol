{
  "address": "0x6a7b8F2C49994D9dBcFE10805B7ca59176693696",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_returnValue",
          "type": "bytes"
        }
      ],
      "name": "Invoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_newDuration",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_oldDuration",
          "type": "uint256"
        }
      ],
      "name": "StrategyDurationChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyExecuted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyExpired",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_capitalReturned",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountReduced",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalPositiveVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalNegativeVotes",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "StrategyVoted",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "capitalAllocated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capitalReturned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deleteCandidateStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "duration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enteredAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enteredCooldownAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "executeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "expectedReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "expireStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "finalizeStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "garden",
      "outputs": [
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNAV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "getOperationByIndex",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyDetails",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyRewardsContext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStrategyState",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "getUserVotes",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_isDeposit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_wethAmount",
          "type": "uint256"
        }
      ],
      "name": "handleWeth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategist",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxCapitalRequested",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_stake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strategyDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_expectedReturn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxAllocationPercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxGasFeePercentage",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxTradeSlippagePercentage",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_spender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_quantity",
          "type": "uint256"
        }
      ],
      "name": "invokeApprove",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "invokeFromIntegration",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isStrategyActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxAllocationPercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxCapitalRequested",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxGasFeePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxTradeSlippagePercentage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "opEncodedData",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_voters",
          "type": "address[]"
        },
        {
          "internalType": "int256[]",
          "name": "_votes",
          "type": "int256[]"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "resolveVoting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "_opTypes",
          "type": "uint8[]"
        },
        {
          "internalType": "address[]",
          "name": "_opIntegrations",
          "type": "address[]"
        },
        {
          "internalType": "bytes",
          "name": "_opEncodedData",
          "type": "bytes"
        }
      ],
      "name": "setData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategist",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "strategyRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalNegativeVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPositiveVotes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sendToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_sendQuantity",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_receiveToken",
          "type": "address"
        }
      ],
      "name": "trade",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToUnwind",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_strategyNAV",
          "type": "uint256"
        }
      ],
      "name": "unwindStrategy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[4]",
          "name": "_params",
          "type": "uint256[4]"
        }
      ],
      "name": "updateParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "voters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x60938393ba76c80a6d2cefe7c817943d29f040bf9c07fca423c54e342a147540",
  "receipt": {
    "to": null,
    "from": "0x040cC3AF8455F3c34D1df1D2a305e047a062BeBf",
    "contractAddress": "0x6a7b8F2C49994D9dBcFE10805B7ca59176693696",
    "transactionIndex": 189,
    "gasUsed": "5265090",
    "logsBloom": "0x
    "blockHash": "0x6092855f87281149fa089caa05d463bb38becdff4f54bb8f40c533fa901958e3",
    "transactionHash": "0x60938393ba76c80a6d2cefe7c817943d29f040bf9c07fca423c54e342a147540",
    "logs": [],
    "blockNumber": 13530876,
    "cumulativeGasUsed": "15404600",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "4b18f8fad53dd00d68bfe4a5cad0bf48",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_returnValue\",\"type\":\"bytes\"}],\"name\":\"Invoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_newDuration\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_oldDuration\",\"type\":\"uint256\"}],\"name\":\"StrategyDurationChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyExpired\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_capitalReturned\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountReduced\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalPositiveVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalNegativeVotes\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"StrategyVoted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"capitalAllocated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capitalReturned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deleteCandidateStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"duration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enteredCooldownAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"executeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"expectedReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"expireStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"finalizeStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"garden\",\"outputs\":[{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"getOperationByIndex\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyDetails\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyRewardsContext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStrategyState\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"getUserVotes\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_isDeposit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_wethAmount\",\"type\":\"uint256\"}],\"name\":\"handleWeth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategist\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxCapitalRequested\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_stake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_expectedReturn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxAllocationPercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxGasFeePercentage\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxTradeSlippagePercentage\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_quantity\",\"type\":\"uint256\"}],\"name\":\"invokeApprove\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"invokeFromIntegration\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isStrategyActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxAllocationPercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxCapitalRequested\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxGasFeePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxTradeSlippagePercentage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"opEncodedData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_voters\",\"type\":\"address[]\"},{\"internalType\":\"int256[]\",\"name\":\"_votes\",\"type\":\"int256[]\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"resolveVoting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"_opTypes\",\"type\":\"uint8[]\"},{\"internalType\":\"address[]\",\"name\":\"_opIntegrations\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"_opEncodedData\",\"type\":\"bytes\"}],\"name\":\"setData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategist\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"strategyRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalNegativeVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPositiveVotes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sendToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_sendQuantity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_receiveToken\",\"type\":\"address\"}],\"name\":\"trade\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToUnwind\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_strategyNAV\",\"type\":\"uint256\"}],\"name\":\"unwindStrategy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[4]\",\"name\":\"_params\",\"type\":\"uint256[4]\"}],\"name\":\"updateParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"voters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeStrategy(uint256,uint256)\":{\"params\":{\"_capital\":\"The capital to allocate to this strategy.\",\"_fee\":\"The fee paid to keeper to compensate the gas cost.\"}},\"expireStrategy(uint256)\":{\"params\":{\"_fee\":\"The keeper fee\"}},\"finalizeStrategy(uint256,string)\":{\"params\":{\"_fee\":\"The fee paid to keeper to compensate the gas cost\",\"_tokenURI\":\"URL with the JSON for the strategy\"}},\"getNAV()\":{\"returns\":{\"_0\":\"_nav           NAV of the strategy\"}},\"getUserVotes(address)\":{\"params\":{\"_address\":\"Address of the contributor\"},\"returns\":{\"_0\":\"_votes            Number of votes cast\"}},\"handleWeth(bool,uint256)\":{\"params\":{\"_isDeposit\":\"Whether is a deposit or withdraw\",\"_wethAmount\":\"Amount to deposit or withdraw\"}},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"params\":{\"_controller\":\"Address of the controller\",\"_expectedReturn\":\"Expected return\",\"_garden\":\"Address of the garden\",\"_maxAllocationPercentage\":\"Max allocation percentage of garden capital\",\"_maxCapitalRequested\":\"Max Capital requested denominated in the reserve asset (0 to be unlimited)\",\"_maxGasFeePercentage\":\"Max gas fee percentage of garden capital\",\"_maxTradeSlippagePercentage\":\"Max slippage allowed per trade in % of capital\",\"_stake\":\"Stake with garden participations absolute amounts 1e18\",\"_strategist\":\"Address of the strategist\",\"_strategyDuration\":\"Strategy duration in seconds\"}},\"invokeFromIntegration(address,uint256,bytes)\":{\"params\":{\"_data\":\"Encoded function selector and arguments\",\"_target\":\"Address of the smart contract to call\",\"_value\":\"Quantity of Ether to provide the call (typically 0)\"},\"returns\":{\"_0\":\"_returnValue           Bytes encoded return value\"}},\"resolveVoting(address[],int256[],uint256)\":{\"params\":{\"_fee\":\"The fee paid to keeper to compensate the gas cost\",\"_voters\":\"An array of garden member who voted on strategy.\",\"_votes\":\"An array of votes by on strategy by garden members.\"}},\"setData(uint8[],address[],bytes)\":{\"params\":{\"_opEncodedData\":\"Bytes with the params for the op in the same position in the opTypes array\",\"_opIntegrations\":\"Addresses with the integration for each op\",\"_opTypes\":\"An array with the op types\"}},\"sweep(address)\":{\"params\":{\"_token\":\"Address of the token to sweep\"}},\"trade(address,uint256,address)\":{\"params\":{\"_receiveToken\":\"Token to receive\",\"_sendQuantity\":\"Amount of tokens to send\",\"_sendToken\":\"Token to exchange\"}},\"unwindStrategy(uint256,uint256)\":{\"params\":{\"_amountToUnwind\":\"The amount of capital to unwind\",\"_strategyNAV\":\"NAV of the strategy to unwind.\"}},\"updateParams(uint256[4])\":{\"details\":\"_params[0]  duration   _params[1]  maxGasFeePercentage   _params[2]  maxTradeSlippagePercentage   _params[3]  maxAllocationPercentage\",\"params\":{\"_params\":\"New params\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deleteCandidateStrategy()\":{\"notice\":\"Delete a candidate strategy by the strategist\"},\"executeStrategy(uint256,uint256)\":{\"notice\":\"Executes an strategy that has been activated and gone through the cooldown period.\"},\"expireStrategy(uint256)\":{\"notice\":\"Expires a candidate that has spent more than CANDIDATE_PERIOD without reaching quorum\"},\"finalizeStrategy(uint256,string)\":{\"notice\":\"Exits from an executed strategy. Returns balance back to the garden and sets the capital aside for withdrawals in ETH. Pays the keeper. Updates the reserve asset position accordingly.\"},\"getNAV()\":{\"notice\":\"Gets the NAV of assets under management. It is the sum of the NAV of all the operations\"},\"getOperationByIndex(uint8)\":{\"notice\":\"Get the operation params by index\"},\"getOperationsCount()\":{\"notice\":\"Returns the number of operations in this strategy\"},\"getStrategyDetails()\":{\"notice\":\"Get the non-state related details of a Strategy\"},\"getStrategyRewardsContext()\":{\"notice\":\"Get mining context details of a Strategy\"},\"getStrategyState()\":{\"notice\":\"Get the state of a Strategy\"},\"getUserVotes(address)\":{\"notice\":\"Gets the votes casted by the contributor in this strategy\"},\"handleWeth(bool,uint256)\":{\"notice\":\"Deposits or withdraws weth from an operation in this context\"},\"initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Initializes the strategy for a garden\"},\"invokeApprove(address,address,uint256)\":{\"notice\":\"Helper to invoke Approve on ERC20 from integrations in the strategy context\"},\"invokeFromIntegration(address,uint256,bytes)\":{\"notice\":\"Helper to invoke a call to an external contract from integrations in the strategy context\"},\"isStrategyActive()\":{\"notice\":\"Returns whether this strategy is currently active or not\"},\"resolveVoting(address[],int256[],uint256)\":{\"notice\":\"Adds off-chain voting results on-chain.\"},\"setData(uint8[],address[],bytes)\":{\"notice\":\"Sets the data for the operations of this strategy\"},\"sweep(address)\":{\"notice\":\"Any tokens (other than the target) that are sent here by mistake are recoverable by contributors Converts it to the reserve asset and sends it to the garden.\"},\"trade(address,uint256,address)\":{\"notice\":\"Function that calculates the price using the oracle and executes a trade. Must call the exchange to get the price and pass minReceiveQuantity accordingly.\"},\"unwindStrategy(uint256,uint256)\":{\"notice\":\"Partially unwinds an strategy. Triggered from an immediate withdraw in the Garden.\"},\"updateParams(uint256[4])\":{\"notice\":\"Allows strategist to update some strategy params\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/Strategy.sol\":\"StrategyV14\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function getLiveStrategies(uint256 _size) external view returns (address[] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function isBetaStrategy(address[] memory _strategies) external view returns (bool[] memory, uint256[] memory);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6854cc9122dc61c86d0d722b8807b0d1a9c1db348096ea8b74ada80754c7193b\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        address _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function updateGardenParams(uint256[9] memory _newParams) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbfa535e24c224ee1e3d83c2b6a2c42fe93793e58b6743330b9f00aca8b7d7304\",\"license\":\"Apache License\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xee03c9274ddf3257e3bfd2bb229fea3412c9105f178e64174f59efeafd53182c\",\"license\":\"Apache License\"},\"contracts/interfaces/IMasterSwapper.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIshtarGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Gate Guestlist NFT\\n */\\ninterface IMasterSwapper {\\n    /* ============ Functions ============ */\\n\\n    function isTradeIntegration(address _integration) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x352aee42174e63ca1ca2eab98a900d83a7fec1f00212fbeeec9898707285a68f\",\"license\":\"Apache License\"},\"contracts/interfaces/IOperation.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from './IGarden.sol';\\nimport {IStrategy} from './IStrategy.sol';\\n\\n/**\\n * @title IOperation\\n * @author Babylon Finance\\n *\\n * Interface for an strategy operation\\n */\\ninterface IOperation {\\n    function validateOperation(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration,\\n        uint256 _index\\n    ) external view;\\n\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8 _assetStatus,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function exitOperation(\\n        address _asset,\\n        uint256 _remaining,\\n        uint8 _assetStatus,\\n        uint256 _percentage,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function getNAV(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view returns (uint256, bool);\\n\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xb76f25b299917d1a853d908243ae3cd9c42877ca10d04904e709f341ae312b73\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getCompoundExchangeRate(address _asset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x58027acbf4ef0db8718ffecca3391a4b5c3ffe24da03d1eb3f3885a4f8c7047a\",\"license\":\"Apache License\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Babylon Finance\\n *\\n * Interface for the rewards distributor in charge of the BABL Mining Program.\\n */\\n\\ninterface IRewardsDistributor {\\n    /* ========== View functions ========== */\\n\\n    // solhint-disable-next-line\\n    function START_TIME() external view returns (uint256);\\n\\n    function getStrategyRewards(address _strategy) external view returns (uint96);\\n\\n    function getRewards(\\n        address _garden,\\n        address _contributor,\\n        address[] calldata _finalizedStrategies\\n    ) external view returns (uint256[] memory);\\n\\n    function getContributorPower(\\n        address _garden,\\n        address _contributor,\\n        uint256 _time\\n    ) external view returns (uint256);\\n\\n    function getGardenProfitsSharing(address _garden) external view returns (uint256[3] memory);\\n\\n    function getBABLMiningParameters()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function checkMining(uint256 _quarterNum, address _strategy)\\n        external\\n        view\\n        returns (uint256[] memory, bool[] memory);\\n\\n    function getContributorPerGarden(address _garden, address _contributor)\\n        external\\n        view\\n        returns (uint256[] memory, bool[] memory);\\n\\n    function estimateUserRewards(address _strategy, address _contributor) external view returns (uint256[] memory);\\n\\n    function estimateStrategyRewards(address _strategy) external view returns (uint256);\\n\\n    /* ============ External Functions ============ */\\n\\n    function updateStrategyCheckpoint(\\n        address _strategy,\\n        uint256 _capital,\\n        bool _addOrSubstract\\n    ) external;\\n\\n    function sendTokensToContributor(address _to, uint256 _amount) external returns (uint256);\\n\\n    function setProfitRewards(\\n        address _garden,\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare\\n    ) external;\\n\\n    function setBABLMiningParameters(\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare,\\n        uint256 _creatorBonus,\\n        uint256 _profitWeight,\\n        uint256 _principalWeight\\n    ) external;\\n\\n    function updateProtocolPrincipal(uint256 _capital, bool _addOrSubstract) external;\\n\\n    function updateGardenPowerAndContributor(\\n        address _garden,\\n        address _contributor,\\n        uint256 _previousBalance,\\n        uint256 _previousSupply,\\n        uint256 _tokenDiff,\\n        bool _addOrSubstract\\n    ) external;\\n}\\n\",\"keccak256\":\"0xbf8262adf3a984dc21681a5cf0a05bea417581432c85302dea4c2a36dcfdf6d9\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[4] calldata _params) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(uint256 fee, string memory _tokenURI) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0xea7c8d298fa5dfacd3cab9babeac447acb8e0bd93febad1fb0f64f0e7f05e67f\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategyNFT.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from './IGarden.sol';\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyNFT\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Strategy NFT.\\n */\\ninterface IStrategyNFT {\\n    struct StratDetail {\\n        string name;\\n        string symbol;\\n        uint256 tokenId;\\n    }\\n\\n    function grantStrategyNFT(address _user, string memory _strategyTokenURI) external returns (uint256);\\n\\n    function saveStrategyNameAndSymbol(\\n        address _strategy,\\n        string memory _name,\\n        string memory _symbol\\n    ) external;\\n\\n    function getStrategyTokenURI(address _stratgy) external view returns (string memory);\\n\\n    function getStrategyName(address _strategy) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x46fdbb37f7c283a4591a97880f1f5d7f57b0b0e58676ed33d727a88ab8823f89\",\"license\":\"Apache License\"},\"contracts/interfaces/ITradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ITrade\\n * @author Babylon Finance\\n *\\n * Interface for trading protocol integrations\\n */\\ninterface ITradeIntegration {\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bda1d9d5f929fc5bcf6407f953fe3e44ab51125b32a4101733b27d31528545a\",\"license\":\"Apache License\"},\"contracts/interfaces/external/weth/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xacc7980a650b7a753ee51f1bbc0ae4f641e84261bcc02cfdaf87ee8136483684\",\"license\":\"MIT\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0x409127cd8cadb573e5de48fd992efbd8b0f1e243d235abc3c5f2fa873195c16a\",\"license\":\"Apache License\"},\"contracts/lib/BabylonErrors.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// solhint-disable\\n\\n/**\\n * @notice Forked from https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/lib/helpers/BalancerErrors.sol\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAB#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAB#\\\" part is a known constant\\n        // (0x42414223): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414223000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Max deposit limit needs to be under the limit\\n    uint256 internal constant MAX_DEPOSIT_LIMIT = 0;\\n    // Creator needs to deposit\\n    uint256 internal constant MIN_CONTRIBUTION = 1;\\n    // Min Garden token supply >= 0\\n    uint256 internal constant MIN_TOKEN_SUPPLY = 2;\\n    // Deposit hardlock needs to be at least 1 block\\n    uint256 internal constant DEPOSIT_HARDLOCK = 3;\\n    // Needs to be at least the minimum\\n    uint256 internal constant MIN_LIQUIDITY = 4;\\n    // _reserveAssetQuantity is not equal to msg.value\\n    uint256 internal constant MSG_VALUE_DO_NOT_MATCH = 5;\\n    // Withdrawal amount has to be equal or less than msg.sender balance\\n    uint256 internal constant MSG_SENDER_TOKENS_DO_NOT_MATCH = 6;\\n    // Tokens are staked\\n    uint256 internal constant TOKENS_STAKED = 7;\\n    // Balance too low\\n    uint256 internal constant BALANCE_TOO_LOW = 8;\\n    // msg.sender doesn't have enough tokens\\n    uint256 internal constant MSG_SENDER_TOKENS_TOO_LOW = 9;\\n    //  There is an open redemption window already\\n    uint256 internal constant REDEMPTION_OPENED_ALREADY = 10;\\n    // Cannot request twice in the same window\\n    uint256 internal constant ALREADY_REQUESTED = 11;\\n    // Rewards and profits already claimed\\n    uint256 internal constant ALREADY_CLAIMED = 12;\\n    // Value have to be greater than zero\\n    uint256 internal constant GREATER_THAN_ZERO = 13;\\n    // Must be reserve asset\\n    uint256 internal constant MUST_BE_RESERVE_ASSET = 14;\\n    // Only contributors allowed\\n    uint256 internal constant ONLY_CONTRIBUTOR = 15;\\n    // Only controller allowed\\n    uint256 internal constant ONLY_CONTROLLER = 16;\\n    // Only creator allowed\\n    uint256 internal constant ONLY_CREATOR = 17;\\n    // Only keeper allowed\\n    uint256 internal constant ONLY_KEEPER = 18;\\n    // Fee is too high\\n    uint256 internal constant FEE_TOO_HIGH = 19;\\n    // Only strategy allowed\\n    uint256 internal constant ONLY_STRATEGY = 20;\\n    // Only active allowed\\n    uint256 internal constant ONLY_ACTIVE = 21;\\n    // Only inactive allowed\\n    uint256 internal constant ONLY_INACTIVE = 22;\\n    // Address should be not zero address\\n    uint256 internal constant ADDRESS_IS_ZERO = 23;\\n    // Not within range\\n    uint256 internal constant NOT_IN_RANGE = 24;\\n    // Value is too low\\n    uint256 internal constant VALUE_TOO_LOW = 25;\\n    // Value is too high\\n    uint256 internal constant VALUE_TOO_HIGH = 26;\\n    // Only strategy or protocol allowed\\n    uint256 internal constant ONLY_STRATEGY_OR_CONTROLLER = 27;\\n    // Normal withdraw possible\\n    uint256 internal constant NORMAL_WITHDRAWAL_POSSIBLE = 28;\\n    // User does not have permissions to join garden\\n    uint256 internal constant USER_CANNOT_JOIN = 29;\\n    // User does not have permissions to add strategies in garden\\n    uint256 internal constant USER_CANNOT_ADD_STRATEGIES = 30;\\n    // Only Protocol or garden\\n    uint256 internal constant ONLY_PROTOCOL_OR_GARDEN = 31;\\n    // Only Strategist\\n    uint256 internal constant ONLY_STRATEGIST = 32;\\n    // Only Integration\\n    uint256 internal constant ONLY_INTEGRATION = 33;\\n    // Only garden and data not set\\n    uint256 internal constant ONLY_GARDEN_AND_DATA_NOT_SET = 34;\\n    // Only active garden\\n    uint256 internal constant ONLY_ACTIVE_GARDEN = 35;\\n    // Contract is not a garden\\n    uint256 internal constant NOT_A_GARDEN = 36;\\n    // Not enough tokens\\n    uint256 internal constant STRATEGIST_TOKENS_TOO_LOW = 37;\\n    // Stake is too low\\n    uint256 internal constant STAKE_HAS_TO_AT_LEAST_ONE = 38;\\n    // Duration must be in range\\n    uint256 internal constant DURATION_MUST_BE_IN_RANGE = 39;\\n    // Max Capital Requested\\n    uint256 internal constant MAX_CAPITAL_REQUESTED = 41;\\n    // Votes are already resolved\\n    uint256 internal constant VOTES_ALREADY_RESOLVED = 42;\\n    // Voting window is closed\\n    uint256 internal constant VOTING_WINDOW_IS_OVER = 43;\\n    // Strategy needs to be active\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_ACTIVE = 44;\\n    // Max capital reached\\n    uint256 internal constant MAX_CAPITAL_REACHED = 45;\\n    // Capital is less then rebalance\\n    uint256 internal constant CAPITAL_IS_LESS_THAN_REBALANCE = 46;\\n    // Strategy is in cooldown period\\n    uint256 internal constant STRATEGY_IN_COOLDOWN = 47;\\n    // Strategy is not executed\\n    uint256 internal constant STRATEGY_IS_NOT_EXECUTED = 48;\\n    // Strategy is not over yet\\n    uint256 internal constant STRATEGY_IS_NOT_OVER_YET = 49;\\n    // Strategy is already finalized\\n    uint256 internal constant STRATEGY_IS_ALREADY_FINALIZED = 50;\\n    // No capital to unwind\\n    uint256 internal constant STRATEGY_NO_CAPITAL_TO_UNWIND = 51;\\n    // Strategy needs to be inactive\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_INACTIVE = 52;\\n    // Duration needs to be less\\n    uint256 internal constant DURATION_NEEDS_TO_BE_LESS = 53;\\n    // Can't sweep reserve asset\\n    uint256 internal constant CANNOT_SWEEP_RESERVE_ASSET = 54;\\n    // Voting window is opened\\n    uint256 internal constant VOTING_WINDOW_IS_OPENED = 55;\\n    // Strategy is executed\\n    uint256 internal constant STRATEGY_IS_EXECUTED = 56;\\n    // Min Rebalance Capital\\n    uint256 internal constant MIN_REBALANCE_CAPITAL = 57;\\n    // Not a valid strategy NFT\\n    uint256 internal constant NOT_STRATEGY_NFT = 58;\\n    // Garden Transfers Disabled\\n    uint256 internal constant GARDEN_TRANSFERS_DISABLED = 59;\\n    // Tokens are hardlocked\\n    uint256 internal constant TOKENS_HARDLOCKED = 60;\\n    // Max contributors reached\\n    uint256 internal constant MAX_CONTRIBUTORS = 61;\\n    // BABL Transfers Disabled\\n    uint256 internal constant BABL_TRANSFERS_DISABLED = 62;\\n    // Strategy duration range error\\n    uint256 internal constant DURATION_RANGE = 63;\\n    // Checks the min amount of voters\\n    uint256 internal constant MIN_VOTERS_CHECK = 64;\\n    // Ge contributor power error\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_WINDOW = 65;\\n    // Not enough reserve set aside\\n    uint256 internal constant NOT_ENOUGH_RESERVE = 66;\\n    // Garden is already public\\n    uint256 internal constant GARDEN_ALREADY_PUBLIC = 67;\\n    // Withdrawal with penalty\\n    uint256 internal constant WITHDRAWAL_WITH_PENALTY = 68;\\n    // Withdrawal with penalty\\n    uint256 internal constant ONLY_MINING_ACTIVE = 69;\\n    // Overflow in supply\\n    uint256 internal constant OVERFLOW_IN_SUPPLY = 70;\\n    // Overflow in power\\n    uint256 internal constant OVERFLOW_IN_POWER = 71;\\n    // Not a system contract\\n    uint256 internal constant NOT_A_SYSTEM_CONTRACT = 72;\\n    // Strategy vs Garden mismatch\\n    uint256 internal constant STRATEGY_GARDEN_MISMATCH = 73;\\n    // Minimum quarters is 1\\n    uint256 internal constant QUARTERS_MIN_1 = 74;\\n    // Too many strategy operations\\n    uint256 internal constant TOO_MANY_OPS = 75;\\n    // Only operations\\n    uint256 internal constant ONLY_OPERATION = 76;\\n    // Strat params wrong length\\n    uint256 internal constant STRAT_PARAMS_LENGTH = 77;\\n    // Garden params wrong length\\n    uint256 internal constant GARDEN_PARAMS_LENGTH = 78;\\n    // Token names too long\\n    uint256 internal constant NAME_TOO_LONG = 79;\\n    // Contributor power overflows over garden power\\n    uint256 internal constant CONTRIBUTOR_POWER_OVERFLOW = 80;\\n    // Contributor power window out of bounds\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_DEPOSITS = 81;\\n    // Contributor power window out of bounds\\n    uint256 internal constant NO_REWARDS_TO_CLAIM = 82;\\n    // Pause guardian paused this operation\\n    uint256 internal constant ONLY_UNPAUSED = 83;\\n    // Reentrant intent\\n    uint256 internal constant REENTRANT_CALL = 84;\\n    // Reserve asset not supported\\n    uint256 internal constant RESERVE_ASSET_NOT_SUPPORTED = 85;\\n    // Withdrawal/Deposit check min amount received\\n    uint256 internal constant RECEIVE_MIN_AMOUNT = 86;\\n    // Total Votes has to be positive\\n    uint256 internal constant TOTAL_VOTES_HAVE_TO_BE_POSITIVE = 87;\\n    // Signer has to be valid\\n    uint256 internal constant INVALID_SIGNER = 88;\\n    // Nonce has to be valid\\n    uint256 internal constant INVALID_NONCE = 89;\\n    // Garden is not public\\n    uint256 internal constant GARDEN_IS_NOT_PUBLIC = 90;\\n    // Setting max contributors\\n    uint256 internal constant MAX_CONTRIBUTORS_SET = 91;\\n    // Profit sharing mismatch for customized gardens\\n    uint256 internal constant PROFIT_SHARING_MISMATCH = 92;\\n    // Max allocation percentage\\n    uint256 internal constant MAX_STRATEGY_ALLOCATION_PERCENTAGE = 93;\\n    // new creator must not exist\\n    uint256 internal constant NEW_CREATOR_MUST_NOT_EXIST = 94;\\n    // only first creator can add\\n    uint256 internal constant ONLY_FIRST_CREATOR_CAN_ADD = 95;\\n    // invalid address\\n    uint256 internal constant INVALID_ADDRESS = 96;\\n    // creator can only renounce in some circumstances\\n    uint256 internal constant CREATOR_CANNOT_RENOUNCE = 97;\\n    // no price for trade\\n    uint256 internal constant NO_PRICE_FOR_TRADE = 98;\\n    // Max capital requested\\n    uint256 internal constant ZERO_CAPITAL_REQUESTED = 99;\\n    // Unwind capital above the limit\\n    uint256 internal constant INVALID_CAPITAL_TO_UNWIND = 100;\\n    // Mining % sharing does not match\\n    uint256 internal constant INVALID_MINING_VALUES = 101;\\n    // Max trade slippage percentage\\n    uint256 internal constant MAX_TRADE_SLIPPAGE_PERCENTAGE = 102;\\n    // Max gas fee percentage\\n    uint256 internal constant MAX_GAS_FEE_PERCENTAGE = 103;\\n    // Mismatch between voters and votes\\n    uint256 internal constant INVALID_VOTES_LENGTH = 104;\\n}\\n\",\"keccak256\":\"0x36994f24279d748223b41a516cc041d9ab09be970ae9424b88638a91bd82a1b5\",\"license\":\"Apache License\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * original version by @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n *  Adapted by Babylon Finance.\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.7.6;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n                case 2 {\\n                    // Since the new array still fits in the slot, we just need to\\n                    // update the contents of the slot.\\n                    // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                    sstore(\\n                        _preBytes.slot,\\n                        // all the modifications to the slot are inside this\\n                        // next block\\n                        add(\\n                            // we can just add to the slot contents because the\\n                            // bytes we want to change are the LSBs\\n                            fslot,\\n                            add(\\n                                mul(\\n                                    div(\\n                                        // load the bytes from memory\\n                                        mload(add(_postBytes, 0x20)),\\n                                        // zero all bytes to the right\\n                                        exp(0x100, sub(32, mlength))\\n                                    ),\\n                                    // and now shift left the number of bytes to\\n                                    // leave space for the length in the slot\\n                                    exp(0x100, sub(32, newlength))\\n                                ),\\n                                // increase length by the double of the memory\\n                                // bytes length\\n                                mul(mlength, 2)\\n                            )\\n                        )\\n                    )\\n                }\\n                case 1 {\\n                    // The stored value fits in the slot, but the combined value\\n                    // will exceed it.\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // The contents of the _postBytes array start 32 bytes into\\n                    // the structure. Our first read should obtain the `submod`\\n                    // bytes that can fit into the unused space in the last word\\n                    // of the stored array. To get this, we read 32 bytes starting\\n                    // from `submod`, so the data we read overlaps with the array\\n                    // contents by `submod` bytes. Masking the lowest-order\\n                    // `submod` bytes allows us to add that value directly to the\\n                    // stored value.\\n\\n                    let submod := sub(32, slength)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(\\n                        sc,\\n                        add(\\n                            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                            and(mload(mc), mask)\\n                        )\\n                    )\\n\\n                    for {\\n                        mc := add(mc, 0x20)\\n                        sc := add(sc, 1)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n                default {\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    // Start copying to the last used word of the stored array.\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // Copy over the first `submod` bytes of the new data as in\\n                    // case 1 above.\\n                    let slengthmod := mod(slength, 32)\\n                    let mlengthmod := mod(mlength, 32)\\n                    let submod := sub(32, slengthmod)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                    for {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, 'toUint32_outOfBounds');\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, 'toUint96_outOfBounds');\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, 'toUint128_outOfBounds');\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, 'toBytes32_outOfBounds');\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n                case 1 {\\n                    // slength can contain both the length and contents of the array\\n                    // if length < 32 bytes so let's prepare for that\\n                    // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                    if iszero(iszero(slength)) {\\n                        switch lt(slength, 32)\\n                            case 1 {\\n                                // blank the last byte which is the length\\n                                fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                                if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                                    // unsuccess:\\n                                    success := 0\\n                                }\\n                            }\\n                            default {\\n                                // cb is a circuit breaker in the for loop since there's\\n                                //  no said feature for inline assembly loops\\n                                // cb = 1 - don't breaker\\n                                // cb = 0 - break\\n                                let cb := 1\\n\\n                                // get the keccak hash to get the contents of the array\\n                                mstore(0x0, _preBytes.slot)\\n                                let sc := keccak256(0x0, 0x20)\\n\\n                                let mc := add(_postBytes, 0x20)\\n                                let end := add(mc, mlength)\\n\\n                                // the next line is the loop condition:\\n                                // while(uint256(mc < end) + cb == 2)\\n                                for {\\n\\n                                } eq(add(lt(mc, end), cb), 2) {\\n                                    sc := add(sc, 1)\\n                                    mc := add(mc, 0x20)\\n                                } {\\n                                    if iszero(eq(sload(sc), mload(mc))) {\\n                                        // unsuccess:\\n                                        success := 0\\n                                        cb := 0\\n                                    }\\n                                }\\n                            }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function get64Bytes(bytes memory _data, uint256 _index) internal pure returns (bytes memory) {\\n        return slice(_data, (64 * _index), 64);\\n    }\\n\\n    function decodeOpDataAddressAssembly(bytes memory _data, uint256 _startingByte) internal pure returns (address) {\\n        return toAddress(_data, _startingByte);\\n    }\\n\\n    function decodeOpDataAddress(bytes calldata _data) internal pure returns (address) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address));\\n    }\\n\\n    function decodeOpDataAddressAndUint(bytes calldata _data) internal pure returns (address, uint256) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address, uint256));\\n    }\\n\\n    function decodeOpDataAsType(\\n        bytes memory _data,\\n        uint8 _type,\\n        uint8 _offset\\n    ) internal pure returns (bytes memory) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        // type: 0 - uint8, 1: uint256, 2: bool, 3: address\\n        if (_type == 0 || _type == 2) {\\n            // boolean is also 1 byte\\n            // returning bytes type\\n            return slice(_data, _offset, 1); // to return uint8 type better use toUint8(_data, _offset);\\n        } else if (_type == 1) {\\n            // returning bytes type\\n            return slice(_data, _offset, 32); // to return uint256 type better use toUint256(_data, _offset);\\n        } else if (_type == 3) {\\n            // returning bytes type\\n            return slice(_data, _offset, 20); // to return address type better use toAddress(_data, _offset);\\n        }\\n        // Default uint\\n        return slice(_data, _offset, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x6a0b47ec0526641367a1b50b39af2bb507f5e3ad84494ed55a1970df642628ae\",\"license\":\"Unlicense\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Math.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// Libraries\\nimport './SafeDecimalMath.sol';\\n\\n// https://docs.synthetix.io/contracts/source/libraries/math\\nlibrary Math {\\n    using LowGasSafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /**\\n     * @dev Uses \\\"exponentiation by squaring\\\" algorithm where cost is 0(logN)\\n     * vs 0(N) for naive repeated multiplication.\\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\\n     */\\n    function powDecimal(uint256 x, uint256 n) internal pure returns (uint256) {\\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\\n\\n        uint256 result = SafeDecimalMath.unit();\\n        while (n > 0) {\\n            if (n % 2 != 0) {\\n                result = result.multiplyDecimal(x);\\n            }\\n            x = x.multiplyDecimal(x);\\n            n /= 2;\\n        }\\n        return result;\\n    }\\n\\n    function abs(int256 x) internal pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n}\\n\",\"keccak256\":\"0x415a45bed683f6e896bcbf7fb66718c9df48018c6bd629772cbd3229c85085a7\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x962373863c5ee11f3448970bfee73b0806ac9fe4e9e462a1f75a81f5959ef75f\",\"license\":\"Apache License\"},\"contracts/lib/UniversalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            address(uint160(to)).transfer(amount);\\n            return true;\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, 'msg.value is zero');\\n            if (to != address(this)) {\\n                address(uint160(to)).transfer(amount);\\n            }\\n            if (msg.value > amount) {\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (!isETH(token)) {\\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall{gas: 5000}(abi.encodeWithSignature('decimals()'));\\n\\n        return success ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return address(token) == address(ZERO_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0x65d08eece3471e80226c3bc17fc380e13eaaf61e20ce57ac70ec71c698bf830a\",\"license\":\"MIT\"},\"contracts/strategies/Strategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {Initializable} from '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {Errors, _require, _revert} from '../lib/BabylonErrors.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\nimport {SafeDecimalMath} from '../lib/SafeDecimalMath.sol';\\nimport {LowGasSafeMath as SafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {Math} from '../lib/Math.sol';\\nimport {AddressArrayUtils} from '../lib/AddressArrayUtils.sol';\\nimport {UniversalERC20} from '../lib/UniversalERC20.sol';\\nimport {BytesLib} from '../lib/BytesLib.sol';\\nimport {IWETH} from '../interfaces/external/weth/IWETH.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {ITradeIntegration} from '../interfaces/ITradeIntegration.sol';\\nimport {IOperation} from '../interfaces/IOperation.sol';\\nimport {IIntegration} from '../interfaces/IIntegration.sol';\\nimport {IPriceOracle} from '../interfaces/IPriceOracle.sol';\\nimport {IMasterSwapper} from '../interfaces/IMasterSwapper.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IStrategyNFT} from '../interfaces/IStrategyNFT.sol';\\nimport {IRewardsDistributor} from '../interfaces/IRewardsDistributor.sol';\\n\\n/**\\n * @title Strategy\\n * @author Babylon Finance\\n *\\n * Base Strategy contract. Belongs to a garden. Abstract.\\n * Will be extended from specific strategy contracts.\\n */\\ncontract Strategy is ReentrancyGuard, IStrategy, Initializable {\\n    using SignedSafeMath for int256;\\n    using SafeMath for uint256;\\n    using SafeCast for uint256;\\n    using PreciseUnitMath for int256;\\n    using PreciseUnitMath for uint256;\\n    using SafeDecimalMath for int256;\\n    using SafeDecimalMath for uint256;\\n    using Math for int256;\\n    using Math for uint256;\\n    using AddressArrayUtils for address[];\\n    using BytesLib for bytes;\\n    using BytesLib for address;\\n    using Address for address;\\n    using SafeERC20 for IERC20;\\n    using UniversalERC20 for IERC20;\\n\\n    /* ============ Events ============ */\\n    event Invoked(address indexed _target, uint256 indexed _value, bytes _data, bytes _returnValue);\\n    event StrategyVoted(\\n        address indexed _garden,\\n        uint256 totalPositiveVotes,\\n        uint256 totalNegativeVotes,\\n        uint256 _timestamp\\n    );\\n    event StrategyExecuted(address indexed _garden, uint256 _capital, uint256 _fee, uint256 timestamp);\\n    event StrategyFinalized(address indexed _garden, uint256 _capitalReturned, uint256 _fee, uint256 timestamp);\\n    event StrategyReduced(address indexed _garden, uint256 _amountReduced, uint256 timestamp);\\n    event StrategyExpired(address indexed _garden, uint256 _timestamp);\\n    event StrategyDeleted(address indexed _garden, uint256 _timestamp);\\n    event StrategyDurationChanged(uint256 _newDuration, uint256 _oldDuration);\\n\\n    /* ============ Modifiers ============ */\\n\\n    function _onlyStrategistOrGovernor() private view {\\n        _require(msg.sender == strategist || msg.sender == controller.owner(), Errors.ONLY_STRATEGIST);\\n    }\\n\\n    /**\\n     * Throws if the sender is not a Garden's integration or integration not enabled\\n     */\\n    function _onlyOperation() private view {\\n        bool found;\\n        for (uint8 i = 0; i < opTypes.length; i++) {\\n            found = found || msg.sender == controller.enabledOperations(opTypes[i]);\\n        }\\n        // Internal function used to reduce bytecode size\\n        _require(found, Errors.ONLY_OPERATION);\\n    }\\n\\n    /**\\n     * Throws if the sender is not a keeper in the protocol\\n     */\\n    function _onlyKeeper() private view {\\n        _require(controller.isValidKeeper(msg.sender), Errors.ONLY_KEEPER);\\n    }\\n\\n    /**\\n     * Throws if the sender is not a keeper in the protocol\\n     */\\n    function _onlyIntegration(address _address) private view {\\n        bool isIntegration;\\n        for (uint256 i = 0; i < opIntegrations.length; i++) {\\n            if (opIntegrations[i] == _address) {\\n                isIntegration = true;\\n                break;\\n            }\\n        }\\n        IMasterSwapper masterSwapper = IMasterSwapper(IBabController(controller).masterSwapper());\\n        _require(isIntegration || masterSwapper.isTradeIntegration(_address), Errors.ONLY_INTEGRATION);\\n    }\\n\\n    function _onlyUnpaused() private view {\\n        // Do not execute if Globally or individually paused\\n        _require(\\n            !IBabController(controller).isPaused(address(this)) || msg.sender == controller.owner(),\\n            Errors.ONLY_UNPAUSED\\n        );\\n    }\\n\\n    /* ============ Constants ============ */\\n\\n    uint256 private constant DEFAULT_TRADE_SLIPPAGE = 25e15; // 2.5%\\n    uint256 private constant HUNDRED_PERCENT = 1e18; // 100%\\n    uint256 private constant MAX_CANDIDATE_PERIOD = 7 days;\\n\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address private constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address private constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address private constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n\\n    // Max Operations\\n    uint256 private constant MAX_OPERATIONS = 6;\\n\\n    // Quadratic penalty for looses\\n    uint256 private constant STAKE_QUADRATIC_PENALTY_FOR_LOSSES = 175e16; // 1.75e18\\n\\n    /* ============ Structs ============ */\\n\\n    /* ============ State Variables ============ */\\n\\n    // Babylon Controller Address\\n    IBabController private controller;\\n\\n    // Type of operation.\\n    // 0 = BuyOperation\\n    // 1 = LiquidityOperation\\n    // 2 = VaultOperation\\n    // 3 = LendOperation\\n    // 4 = BorrowOperation\\n\\n    // Asset Status\\n    // 0 = Liquid\\n    // 1 = Put as collateral\\n    // 2 = Borrowed\\n    // 3 = staked\\n\\n    // Types and data for the operations of this strategy\\n    uint8[] private opTypes;\\n    address[] private opIntegrations;\\n    address[] private opDatas; // DEPRECATED\\n\\n    // Garden that these strategies belong to\\n    IGarden public override garden;\\n\\n    address public override strategist; // Address of the strategist that submitted the bet\\n\\n    uint256 public override enteredAt; // Timestamp when the strategy was submitted\\n    uint256 public override enteredCooldownAt; // Timestamp when the strategy reached quorum\\n    uint256 private executedAt; // Timestamp when the strategy was executed\\n    uint256 private updatedAt; // Timestamp of last capital allocation update\\n    uint256 private exitedAt; // Timestamp when the strategy was submitted\\n\\n    address[] public voters; // Addresses with the voters\\n    uint256 public override totalPositiveVotes; // Total positive votes endorsing the strategy execution\\n    uint256 public override totalNegativeVotes; // Total negative votes against the strategy execution\\n    bool private finalized; // Flag that indicates whether we exited the strategy\\n    bool private active; // Whether the strategy has met the voting quorum\\n    bool private dataSet;\\n    bool private hasMiningStarted; // DEPRECATED\\n\\n    uint256 public override duration; // Duration of the bet\\n    uint256 public override stake; // Amount of stake by the strategist (in reserve asset) needs to be positive\\n    uint256 public override maxCapitalRequested; // Amount of max capital to allocate\\n    uint256 public override capitalAllocated; // Current amount of capital allocated\\n    uint256 public override expectedReturn; // Expect return by this strategy\\n    uint256 public override capitalReturned; // Actual return by this strategy\\n    uint256 private startingGardenSupply; // garden token supply when strategy starts\\n    address[] private tokensNeeded; // Not used anymore\\n    uint256[] private tokenAmountsNeeded; // Not used anymore\\n\\n    uint256 public override strategyRewards; // Rewards allocated for this strategy updated on finalized\\n    uint256 private endingGardenSupply; // garden token supply when strategy ends\\n\\n    // Voters mapped to their votes.\\n    mapping(address => int256) private votes;\\n\\n    // Strategy opDatas encoded\\n    bytes public override opEncodedData; // we use and reserve 64bytes for each operation as consecutives bytes64 word\\n\\n    // Rewards Distributor address\\n    IRewardsDistributor private rewardsDistributor;\\n\\n    uint256 public override maxAllocationPercentage; //  Relative to garden capital. (1% = 1e16, 10% 1e17)\\n\\n    uint256 public override maxGasFeePercentage; // Relative to the capital allocated to the strategy (1% = 1e16, 10% 1e17)\\n\\n    uint256 public override maxTradeSlippagePercentage; // Relative to the capital of the trade (1% = 1e16, 10% 1e17)\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initializes the strategy for a garden\\n     *\\n     * @param _strategist                    Address of the strategist\\n     * @param _garden                        Address of the garden\\n     * @param _controller                    Address of the controller\\n     * @param _maxCapitalRequested           Max Capital requested denominated in the reserve asset (0 to be unlimited)\\n     * @param _stake                         Stake with garden participations absolute amounts 1e18\\n     * @param _strategyDuration              Strategy duration in seconds\\n     * @param _expectedReturn                Expected return\\n     * @param _maxAllocationPercentage       Max allocation percentage of garden capital\\n     * @param _maxGasFeePercentage           Max gas fee percentage of garden capital\\n     * @param _maxTradeSlippagePercentage    Max slippage allowed per trade in % of capital\\n     */\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external override initializer {\\n        controller = IBabController(_controller);\\n        garden = IGarden(_garden);\\n\\n        _require(controller.isSystemContract(_garden), Errors.NOT_A_GARDEN);\\n        _require(IERC20(address(garden)).balanceOf(_strategist) > 0, Errors.STRATEGIST_TOKENS_TOO_LOW);\\n        _require(_maxCapitalRequested > 0, Errors.MAX_CAPITAL_REQUESTED);\\n\\n        maxCapitalRequested = _maxCapitalRequested;\\n\\n        _setStake(_stake, _strategist);\\n        _setDuration(_strategyDuration);\\n        _setMaxTradeSlippage(_maxTradeSlippagePercentage);\\n        _setMaxGasFeePercentage(_maxGasFeePercentage);\\n        _setMaxAllocationPercentage(_maxAllocationPercentage);\\n\\n        strategist = _strategist;\\n        enteredAt = block.timestamp;\\n\\n        rewardsDistributor = IRewardsDistributor(IBabController(controller).rewardsDistributor());\\n        expectedReturn = _expectedReturn;\\n\\n        votes[_strategist] = _stake.toInt256();\\n        totalPositiveVotes = _stake;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Sets the data for the operations of this strategy\\n     * @param _opTypes                    An array with the op types\\n     * @param _opIntegrations             Addresses with the integration for each op\\n     * @param _opEncodedData              Bytes with the params for the op in the same position in the opTypes array\\n     */\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external override {\\n        _require(\\n            msg.sender == address(garden) && !dataSet && IBabController(controller).isSystemContract(address(garden)),\\n            Errors.ONLY_GARDEN_AND_DATA_NOT_SET\\n        );\\n        uint256 opEncodedLength = _opEncodedData.length.div(64); // encoded without signature\\n        _require(\\n            opEncodedLength < MAX_OPERATIONS &&\\n                opEncodedLength > 0 &&\\n                (_opTypes.length == _opIntegrations.length) &&\\n                (_opIntegrations.length == opEncodedLength),\\n            Errors.TOO_MANY_OPS\\n        );\\n        for (uint256 i = 0; i < _opTypes.length; i++) {\\n            IOperation(controller.enabledOperations(_opTypes[i])).validateOperation(\\n                BytesLib.get64Bytes(_opEncodedData, i),\\n                garden,\\n                _opIntegrations[i],\\n                i\\n            );\\n        }\\n        opTypes = _opTypes;\\n        opIntegrations = _opIntegrations;\\n        opEncodedData = _opEncodedData;\\n        dataSet = true;\\n    }\\n\\n    /**\\n     * Adds off-chain voting results on-chain.\\n     * @param _voters                  An array of garden member who voted on strategy.\\n     * @param _votes                   An array of votes by on strategy by garden members.\\n     * @param _fee                     The fee paid to keeper to compensate the gas cost\\n     */\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 _fee\\n    ) external override {\\n        _onlyUnpaused();\\n        _onlyKeeper();\\n        _require(_voters.length >= garden.minVoters(), Errors.MIN_VOTERS_CHECK);\\n        _require(!active && !finalized, Errors.VOTES_ALREADY_RESOLVED);\\n        _require(block.timestamp.sub(enteredAt) <= MAX_CANDIDATE_PERIOD, Errors.VOTING_WINDOW_IS_OVER);\\n        _require(_voters.length == _votes.length, Errors.INVALID_VOTES_LENGTH);\\n        active = true;\\n\\n        // set votes to zero expecting keeper to provide correct values\\n        totalPositiveVotes = 0;\\n        totalNegativeVotes = 0;\\n\\n        // Set votes data\\n        for (uint256 i = 0; i < _voters.length; i++) {\\n            votes[_voters[i]] = _votes[i];\\n            if (_votes[i] > 0) {\\n                totalPositiveVotes = totalPositiveVotes.add(uint256(Math.abs(_votes[i])));\\n            } else {\\n                totalNegativeVotes = totalNegativeVotes.add(uint256(Math.abs(_votes[i])));\\n            }\\n        }\\n\\n        _require(totalPositiveVotes.sub(totalNegativeVotes) > 0, Errors.TOTAL_VOTES_HAVE_TO_BE_POSITIVE);\\n\\n        // Keeper will account for strategist vote/stake\\n        voters = _voters;\\n\\n        // Initializes cooldown\\n        enteredCooldownAt = block.timestamp;\\n        emit StrategyVoted(address(garden), totalPositiveVotes, totalNegativeVotes, block.timestamp);\\n        garden.payKeeper(msg.sender, _fee);\\n    }\\n\\n    /**\\n     * Executes an strategy that has been activated and gone through the cooldown period.\\n     * @param _capital                  The capital to allocate to this strategy.\\n     * @param _fee                      The fee paid to keeper to compensate the gas cost.\\n     */\\n    function executeStrategy(uint256 _capital, uint256 _fee) external override nonReentrant {\\n        _onlyUnpaused();\\n        _onlyKeeper();\\n        _require(_capital > 0, Errors.MIN_REBALANCE_CAPITAL);\\n        _executesStrategy(_capital, _fee, msg.sender);\\n    }\\n\\n    /**\\n     * Exits from an executed strategy.\\n     * Returns balance back to the garden and sets the capital aside for withdrawals in ETH.\\n     * Pays the keeper.\\n     * Updates the reserve asset position accordingly.\\n     * @param _fee                     The fee paid to keeper to compensate the gas cost\\n     * @param _tokenURI                URL with the JSON for the strategy\\n     */\\n    function finalizeStrategy(uint256 _fee, string memory _tokenURI) external override nonReentrant {\\n        _onlyUnpaused();\\n        _onlyKeeper();\\n        _require(executedAt > 0 && block.timestamp > executedAt.add(duration), Errors.STRATEGY_IS_NOT_OVER_YET);\\n        _require(!finalized, Errors.STRATEGY_IS_ALREADY_FINALIZED);\\n        uint256 reserveAssetReturns = IERC20(garden.reserveAsset()).balanceOf(address(this));\\n        // Execute exit operations\\n        _exitStrategy(HUNDRED_PERCENT);\\n        capitalReturned = IERC20(garden.reserveAsset()).balanceOf(address(this)).sub(reserveAssetReturns);\\n        // Mark as finalized\\n        finalized = true;\\n        active = false;\\n        exitedAt = block.timestamp;\\n        // Mint NFT\\n        IStrategyNFT(IBabController(controller).strategyNFT()).grantStrategyNFT(strategist, _tokenURI);\\n        // Pay Keeper Fee\\n        garden.payKeeper(msg.sender, _fee);\\n        // Transfer rewards\\n        _transferStrategyPrincipal();\\n        // Send rest to garden if any\\n        _sendReserveAssetToGarden();\\n        updatedAt = exitedAt;\\n        // Checkpoint of garden supply\\n        endingGardenSupply = IERC20(address(garden)).totalSupply();\\n        emit StrategyFinalized(address(garden), capitalReturned, _fee, block.timestamp);\\n    }\\n\\n    /**\\n     * Partially unwinds an strategy.\\n     * Triggered from an immediate withdraw in the Garden.\\n     * @param _amountToUnwind  The amount of capital to unwind\\n     * @param _strategyNAV     NAV of the strategy to unwind.\\n     */\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external override nonReentrant {\\n        _require(\\n            (msg.sender == address(garden) && IBabController(controller).isSystemContract(address(garden))) ||\\n                msg.sender == controller.owner(),\\n            Errors.ONLY_PROTOCOL_OR_GARDEN\\n        );\\n        _onlyUnpaused();\\n        _require(active && !finalized, Errors.STRATEGY_NEEDS_TO_BE_ACTIVE);\\n        // An unwind should not allow users to remove all capital from a strategy\\n        _require(_amountToUnwind < _strategyNAV, Errors.INVALID_CAPITAL_TO_UNWIND);\\n        // Exits and enters the strategy\\n        _exitStrategy(_amountToUnwind.preciseDiv(_strategyNAV));\\n        capitalAllocated = capitalAllocated.sub(_amountToUnwind);\\n\\n        rewardsDistributor.updateProtocolPrincipal(_amountToUnwind, false);\\n\\n        // Send the amount back to the garden for the immediate withdrawal\\n        // TODO: Transfer the precise value; not entire balance\\n        IERC20(garden.reserveAsset()).safeTransfer(\\n            address(garden),\\n            IERC20(garden.reserveAsset()).balanceOf(address(this))\\n        );\\n        updatedAt = block.timestamp;\\n\\n        emit StrategyReduced(address(garden), _amountToUnwind, block.timestamp);\\n    }\\n\\n    /**\\n     * Expires a candidate that has spent more than CANDIDATE_PERIOD without\\n     * reaching quorum\\n     * @param _fee              The keeper fee\\n     */\\n    function expireStrategy(uint256 _fee) external nonReentrant {\\n        _onlyUnpaused();\\n        _onlyKeeper();\\n        _require(!active, Errors.STRATEGY_NEEDS_TO_BE_INACTIVE);\\n        _require(block.timestamp.sub(enteredAt) > MAX_CANDIDATE_PERIOD, Errors.VOTING_WINDOW_IS_OPENED);\\n        // pay keeper before expiring strategy\\n        garden.payKeeper(msg.sender, _fee);\\n        _deleteCandidateStrategy();\\n        emit StrategyExpired(address(garden), block.timestamp);\\n    }\\n\\n    /**\\n     * Delete a candidate strategy by the strategist\\n     */\\n    function deleteCandidateStrategy() external {\\n        _onlyStrategistOrGovernor();\\n        _deleteCandidateStrategy();\\n        emit StrategyDeleted(address(garden), block.timestamp);\\n    }\\n\\n    /**\\n     * Allows strategist to update some strategy params\\n     * @dev\\n     *   _params[0]  duration\\n     *   _params[1]  maxGasFeePercentage\\n     *   _params[2]  maxTradeSlippagePercentage\\n     *   _params[3]  maxAllocationPercentage\\n     * @param _params  New params\\n     */\\n    function updateParams(uint256[4] calldata _params) external override {\\n        _onlyStrategistOrGovernor();\\n        _onlyUnpaused();\\n\\n        _require(_params[0] < duration, Errors.STRATEGY_IS_ALREADY_FINALIZED);\\n\\n        _setDuration(_params[0]);\\n        _setMaxGasFeePercentage(_params[1]);\\n        _setMaxTradeSlippage(_params[2]);\\n        _setMaxAllocationPercentage(_params[3]);\\n\\n        emit StrategyDurationChanged(_params[0], duration);\\n    }\\n\\n    /**\\n     * Any tokens (other than the target) that are sent here by mistake are recoverable by contributors\\n     * Converts it to the reserve asset and sends it to the garden.\\n     * @param _token             Address of the token to sweep\\n     */\\n    function sweep(address _token) external nonReentrant {\\n        _onlyUnpaused();\\n        _require(\\n            IERC20(address(garden)).balanceOf(msg.sender) > 0 &&\\n                IBabController(controller).isSystemContract(address(garden)),\\n            Errors.ONLY_CONTRIBUTOR\\n        );\\n        _require(_token != address(0), Errors.ADDRESS_IS_ZERO);\\n        _require(_token != garden.reserveAsset(), Errors.CANNOT_SWEEP_RESERVE_ASSET);\\n        _require(!active, Errors.STRATEGY_NEEDS_TO_BE_INACTIVE);\\n\\n        uint256 balance = IERC20(_token).balanceOf(address(this));\\n        _require(balance > 0, Errors.BALANCE_TOO_LOW);\\n\\n        _trade(_token, balance, garden.reserveAsset());\\n        // Send reserve asset to garden\\n        _sendReserveAssetToGarden();\\n    }\\n\\n    /**\\n     * Helper to invoke Approve on ERC20 from integrations in the strategy context\\n     */\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external override {\\n        _onlyIntegration(msg.sender);\\n        _onlyUnpaused();\\n        IERC20(_asset).safeApprove(_spender, 0);\\n        IERC20(_asset).safeApprove(_spender, _quantity);\\n    }\\n\\n    /**\\n     * Helper to invoke a call to an external contract from integrations in the strategy context\\n     * @param _target                 Address of the smart contract to call\\n     * @param _value                  Quantity of Ether to provide the call (typically 0)\\n     * @param _data                   Encoded function selector and arguments\\n     * @return _returnValue           Bytes encoded return value\\n     */\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external override returns (bytes memory) {\\n        _onlyIntegration(msg.sender);\\n        _onlyUnpaused();\\n        return _invoke(_target, _value, _data);\\n    }\\n\\n    /**\\n     * Function that calculates the price using the oracle and executes a trade.\\n     * Must call the exchange to get the price and pass minReceiveQuantity accordingly.\\n     * @param _sendToken                    Token to exchange\\n     * @param _sendQuantity                 Amount of tokens to send\\n     * @param _receiveToken                 Token to receive\\n     */\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external override returns (uint256) {\\n        _onlyOperation();\\n        _onlyUnpaused();\\n        return _trade(_sendToken, _sendQuantity, _receiveToken);\\n    }\\n\\n    /**\\n     * Deposits or withdraws weth from an operation in this context\\n     * @param _isDeposit                    Whether is a deposit or withdraw\\n     * @param _wethAmount                   Amount to deposit or withdraw\\n     */\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) public override {\\n        _onlyOperation();\\n        _handleWeth(_isDeposit, _wethAmount);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /**\\n     * Returns whether this strategy is currently active or not\\n     */\\n    function isStrategyActive() external view override returns (bool) {\\n        return executedAt > 0 && exitedAt == 0;\\n    }\\n\\n    /**\\n     * Returns the number of operations in this strategy\\n     */\\n    function getOperationsCount() external view override returns (uint256) {\\n        return opTypes.length;\\n    }\\n\\n    /**\\n     * Get the non-state related details of a Strategy\\n     *\\n     */\\n    function getStrategyDetails()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (\\n            address(this),\\n            strategist,\\n            opIntegrations.length,\\n            stake,\\n            totalPositiveVotes,\\n            totalNegativeVotes,\\n            capitalAllocated,\\n            capitalReturned,\\n            duration,\\n            expectedReturn,\\n            maxCapitalRequested,\\n            IBabController(controller).strategyNFT(),\\n            enteredAt,\\n            getNAV()\\n        );\\n    }\\n\\n    /**\\n     * Get mining context details of a Strategy\\n     *\\n     */\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        )\\n    {\\n        uint256[] memory data = new uint256[](14);\\n        bool[] memory boolData = new bool[](2);\\n\\n        data[0] = executedAt;\\n        data[1] = exitedAt;\\n        data[2] = updatedAt;\\n        data[3] = enteredAt;\\n        data[4] = totalPositiveVotes;\\n        data[5] = totalNegativeVotes;\\n        data[6] = capitalAllocated;\\n        data[7] = capitalReturned;\\n        data[8] = capitalAllocated.add(capitalAllocated.preciseMul(expectedReturn));\\n        data[9] = strategyRewards;\\n        boolData[0] = capitalReturned >= capitalAllocated ? true : false;\\n        boolData[1] = capitalReturned >= data[8] ? true : false;\\n        data[10] = boolData[0] ? capitalReturned.sub(capitalAllocated) : 0; // no profit\\n        data[11] = boolData[1] ? capitalReturned.sub(data[8]) : data[8].sub(capitalReturned);\\n        data[12] = startingGardenSupply;\\n        data[13] = endingGardenSupply;\\n        return (strategist, data, boolData);\\n    }\\n\\n    /**\\n     * Get the state of a Strategy\\n     *\\n     */\\n    function getStrategyState()\\n        external\\n        view\\n        override\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        )\\n    {\\n        return (address(this), active, dataSet, finalized, executedAt, exitedAt, updatedAt);\\n    }\\n\\n    /**\\n     * Get the operation params by index\\n     *\\n     */\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        override\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        )\\n    {\\n        _require(_index >= 0 && _index < opTypes.length, Errors.NOT_IN_RANGE);\\n        // _getOpDecodedData guarantee backward compatibility with OpData\\n        return (opTypes[_index], opIntegrations[_index], _getOpDecodedData(_index));\\n    }\\n\\n    /**\\n     * Gets the NAV of assets under management.\\n     * It is the sum of the NAV of all the operations\\n     *\\n     * @return _nav           NAV of the strategy\\n     */\\n    function getNAV() public view override returns (uint256) {\\n        uint256 positiveNav;\\n        uint256 negativeNav;\\n        address reserveAsset = garden.reserveAsset();\\n        for (uint256 i = 0; i < opTypes.length; i++) {\\n            IOperation operation = IOperation(IBabController(controller).enabledOperations(uint256(opTypes[i])));\\n            // _getOpDecodedData guarantee backward compatibility with OpData\\n            try operation.getNAV(_getOpDecodedData(i), garden, opIntegrations[i]) returns (\\n                uint256 opNAV,\\n                bool positive\\n            ) {\\n                if (positive) {\\n                    positiveNav = positiveNav.add(opNAV);\\n                } else {\\n                    negativeNav = negativeNav.add(opNAV);\\n                }\\n            } catch {}\\n        }\\n        uint256 lastOp = opTypes.length - 1;\\n        if (opTypes[lastOp] == 4) {\\n            // Backward compatibility\\n            // pointer to the starting byte of the ethereum token address\\n            address token =\\n                opDatas.length > 0\\n                    ? opDatas[lastOp]\\n                    : BytesLib.decodeOpDataAddressAssembly(opEncodedData, (64 * lastOp) + 12);\\n            uint256 borrowBalance = IERC20(token).universalBalanceOf(address(this));\\n            if (borrowBalance > 0) {\\n                uint256 price = _getPrice(reserveAsset, token);\\n                positiveNav = positiveNav.add(\\n                    SafeDecimalMath.normalizeAmountTokens(token, reserveAsset, borrowBalance).preciseDiv(price)\\n                );\\n            }\\n        }\\n        if (negativeNav > positiveNav) {\\n            // Underwater, will display using operation NAV\\n            return 0;\\n        }\\n        return positiveNav.sub(negativeNav);\\n    }\\n\\n    /**\\n     * Gets the votes casted by the contributor in this strategy\\n     *\\n     * @param _address           Address of the contributor\\n     * @return _votes            Number of votes cast\\n     */\\n    function getUserVotes(address _address) external view override returns (int256) {\\n        return votes[_address];\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _setStake(uint256 _stake, address _strategist) internal {\\n        _require(\\n            _stake > 0 &&\\n                IERC20(address(garden)).balanceOf(_strategist).sub(garden.getLockedBalance(_strategist)) >= _stake,\\n            Errors.TOKENS_STAKED\\n        );\\n        stake = _stake;\\n    }\\n\\n    function _setMaxAllocationPercentage(uint256 _maxAllocationPercentage) internal {\\n        _require(_maxAllocationPercentage <= 1e18, Errors.MAX_STRATEGY_ALLOCATION_PERCENTAGE);\\n        maxAllocationPercentage = _maxAllocationPercentage;\\n    }\\n\\n    function _setMaxGasFeePercentage(uint256 _maxGasFeePercentage) internal {\\n        _require(_maxGasFeePercentage <= 10e16, Errors.MAX_GAS_FEE_PERCENTAGE);\\n        maxGasFeePercentage = _maxGasFeePercentage;\\n    }\\n\\n    function _setMaxTradeSlippage(uint256 _maxTradeSlippagePercentage) internal {\\n        _require(_maxTradeSlippagePercentage <= 20e16, Errors.MAX_TRADE_SLIPPAGE_PERCENTAGE);\\n        maxTradeSlippagePercentage = _maxTradeSlippagePercentage;\\n    }\\n\\n    function _setDuration(uint256 _strategyDuration) internal {\\n        _require(\\n            _strategyDuration >= garden.minStrategyDuration() && _strategyDuration <= garden.maxStrategyDuration(),\\n            Errors.DURATION_MUST_BE_IN_RANGE\\n        );\\n        duration = _strategyDuration;\\n    }\\n\\n    /**\\n     * Executes an strategy that has been activated and gone through the cooldown period.\\n     * Keeper will validate that quorum is reached, cacluates all the voting data and push it.\\n     * @param _capital                  The capital to allocate to this strategy.\\n     * @param _fee                      The fee paid to keeper to compensate the gas cost.\\n     * @param _keeper                   The address of the keeper to pay\\n     */\\n    function _executesStrategy(\\n        uint256 _capital,\\n        uint256 _fee,\\n        address payable _keeper\\n    ) private {\\n        _require(active, Errors.STRATEGY_NEEDS_TO_BE_ACTIVE);\\n        _require(capitalAllocated.add(_capital) <= maxCapitalRequested, Errors.MAX_CAPITAL_REACHED);\\n        _require(\\n            block.timestamp.sub(enteredCooldownAt) >= garden.strategyCooldownPeriod(),\\n            Errors.STRATEGY_IN_COOLDOWN\\n        );\\n        // Execute enter operation\\n        garden.allocateCapitalToStrategy(_capital);\\n        capitalAllocated = capitalAllocated.add(_capital);\\n        _enterStrategy(_capital);\\n        // Sets the executed timestamp on first execution\\n        if (executedAt == 0) {\\n            executedAt = block.timestamp;\\n            // Checkpoint of garden supply at start\\n            startingGardenSupply = IERC20(address(garden)).totalSupply();\\n        }\\n        rewardsDistributor.updateProtocolPrincipal(_capital, true);\\n        garden.payKeeper(_keeper, _fee);\\n        updatedAt = block.timestamp;\\n        emit StrategyExecuted(address(garden), _capital, _fee, block.timestamp);\\n    }\\n\\n    /**\\n     * Enters the strategy.\\n     * Executes all the operations in order\\n     * @param _capital  Amount of capital that the strategy receives\\n     */\\n    function _enterStrategy(uint256 _capital) private {\\n        uint256 capitalForNexOperation = _capital;\\n        address assetAccumulated = garden.reserveAsset();\\n        uint8 assetStatus; // liquid\\n        for (uint256 i = 0; i < opTypes.length; i++) {\\n            IOperation operation = IOperation(IBabController(controller).enabledOperations(opTypes[i]));\\n            // _getOpDecodedData guarantee backward compatibility with OpData\\n            (assetAccumulated, capitalForNexOperation, assetStatus) = operation.executeOperation(\\n                assetAccumulated,\\n                capitalForNexOperation,\\n                assetStatus,\\n                _getOpDecodedData(i),\\n                garden,\\n                opIntegrations[i]\\n            );\\n        }\\n    }\\n\\n    /**\\n     * Exits the strategy.\\n     * Exists all the operations starting by the end.\\n     * @param _percentage of capital to exit from the strategy\\n     */\\n    function _exitStrategy(uint256 _percentage) private {\\n        address assetFinalized = garden.reserveAsset();\\n        uint256 capitalPending;\\n        uint8 assetStatus;\\n        for (uint256 i = opTypes.length; i > 0; i--) {\\n            IOperation operation = IOperation(IBabController(controller).enabledOperations(opTypes[i - 1]));\\n            // _getOpDecodedData guarantee backward compatibility with OpData\\n            (assetFinalized, capitalPending, assetStatus) = operation.exitOperation(\\n                assetFinalized,\\n                capitalPending,\\n                assetStatus,\\n                _percentage,\\n                _getOpDecodedData(i - 1),\\n                garden,\\n                opIntegrations[i - 1]\\n            );\\n        }\\n        // Consolidate to reserve asset if needed\\n        if (assetFinalized != garden.reserveAsset() && capitalPending > 0) {\\n            if (assetFinalized == address(0)) {\\n                _handleWeth(true, address(this).balance);\\n                assetFinalized = WETH;\\n            }\\n            if (assetFinalized != garden.reserveAsset()) {\\n                _trade(assetFinalized, IERC20(assetFinalized).balanceOf(address(this)), garden.reserveAsset());\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Deletes this strategy and returns the stake to the strategist\\n     */\\n    function _deleteCandidateStrategy() private {\\n        _require(executedAt == 0 && !finalized, Errors.STRATEGY_IS_EXECUTED);\\n        IGarden(garden).expireCandidateStrategy(address(this));\\n    }\\n\\n    /**\\n     * Low level function that allows an integration to make an arbitrary function\\n     * call to any contract from the garden (garden as msg.sender).\\n     *\\n     * @param _target                 Address of the smart contract to call\\n     * @param _value                  Quantity of Ether to provide the call (typically 0)\\n     * @param _data                   Encoded function selector and arguments\\n     * @return _returnValue           Bytes encoded return value\\n     */\\n    function _invoke(\\n        address _target,\\n        uint256 _value,\\n        bytes memory _data\\n    ) private returns (bytes memory _returnValue) {\\n        _returnValue = _target.functionCallWithValue(_data, _value);\\n        emit Invoked(_target, _value, _data, _returnValue);\\n        return _returnValue;\\n    }\\n\\n    function _sendReserveAssetToGarden() private {\\n        // Sends the rest back if any\\n        IERC20(garden.reserveAsset()).safeTransfer(\\n            address(garden),\\n            IERC20(garden.reserveAsset()).balanceOf(address(this))\\n        );\\n    }\\n\\n    /**\\n     * Function that calculates the price using the oracle and executes a trade.\\n     * Must call the exchange to get the price and pass minReceiveQuantity accordingly.\\n     * @param _sendToken                    Token to exchange\\n     * @param _sendQuantity                 Amount of tokens to send\\n     * @param _receiveToken                 Token to receive\\n     */\\n    function _trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) private returns (uint256) {\\n        // Uses on chain oracle for all internal strategy operations to avoid attacks\\n        uint256 pricePerTokenUnit = _getPrice(_sendToken, _receiveToken);\\n        _require(pricePerTokenUnit != 0, Errors.NO_PRICE_FOR_TRADE);\\n        // minAmount must have receive token decimals\\n        uint256 exactAmount =\\n            SafeDecimalMath.normalizeAmountTokens(\\n                _sendToken,\\n                _receiveToken,\\n                _sendQuantity.preciseMul(pricePerTokenUnit)\\n            );\\n        uint256 minAmountExpected =\\n            exactAmount.sub(\\n                exactAmount.preciseMul(\\n                    maxTradeSlippagePercentage != 0 ? maxTradeSlippagePercentage : DEFAULT_TRADE_SLIPPAGE\\n                )\\n            );\\n        ITradeIntegration(IBabController(controller).masterSwapper()).trade(\\n            address(this),\\n            _sendToken,\\n            _sendQuantity,\\n            _receiveToken,\\n            minAmountExpected\\n        );\\n        return minAmountExpected;\\n    }\\n\\n    function _transferStrategyPrincipal() private {\\n        address reserveAsset = garden.reserveAsset();\\n        int256 strategyReturns = capitalReturned.toInt256().sub(capitalAllocated.toInt256());\\n        uint256 protocolProfits;\\n        uint256 burningAmount;\\n        // Strategy returns were positive\\n        // in reserve asset, e.g., WETH, USDC, DAI, WBTC\\n        uint256 profits = capitalReturned > capitalAllocated ? capitalReturned.sub(capitalAllocated) : 0;\\n        if (capitalReturned >= capitalAllocated) {\\n            // Send weth performance fee to the protocol\\n            protocolProfits = IBabController(controller).protocolPerformanceFee().preciseMul(profits);\\n            if (protocolProfits > 0) {\\n                // We avoid a transfer in case capitalReturned == capitalAllocated\\n                IERC20(reserveAsset).safeTransfer(IBabController(controller).treasury(), protocolProfits);\\n            }\\n            strategyReturns = strategyReturns.sub(protocolProfits.toInt256());\\n        } else {\\n            // Returns were negative so let's burn the strategiest stake\\n            burningAmount = (stake.sub(capitalReturned.preciseDiv(capitalAllocated).preciseMul(stake))).multiplyDecimal(\\n                STAKE_QUADRATIC_PENALTY_FOR_LOSSES\\n            );\\n        }\\n        // Return the balance back to the garden\\n        IERC20(reserveAsset).safeTransfer(address(garden), capitalReturned.sub(protocolProfits));\\n        // profitsSharing[0]: strategistProfit %, profitsSharing[1]: stewardsProfit %, profitsSharing[2]: lpProfit %\\n        if (address(rewardsDistributor) == address(0)) {\\n            rewardsDistributor = IRewardsDistributor(IBabController(controller).rewardsDistributor());\\n        }\\n        uint256[3] memory profitsSharing = rewardsDistributor.getGardenProfitsSharing(address(garden));\\n        garden.finalizeStrategy(\\n            profits.sub(profits.preciseMul(profitsSharing[2])).sub(protocolProfits),\\n            strategyReturns,\\n            burningAmount\\n        );\\n        rewardsDistributor.updateProtocolPrincipal(capitalAllocated, false);\\n        // Must be zero in case the mining program didnt started on time\\n        strategyRewards = uint256(rewardsDistributor.getStrategyRewards(address(this)));\\n    }\\n\\n    function _getPrice(address _assetOne, address _assetTwo) private view returns (uint256) {\\n        try IPriceOracle(IBabController(controller).priceOracle()).getPrice(_assetOne, _assetTwo) returns (\\n            uint256 price\\n        ) {\\n            return price;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    // backward compatibility with OpData in case of ongoing strategies with deprecated OpData\\n    function _getOpDecodedData(uint256 _index) private view returns (bytes memory) {\\n        return\\n            opDatas.length > 0 ? abi.encode(opDatas[_index], address(0)) : BytesLib.get64Bytes(opEncodedData, _index);\\n    }\\n\\n    function _handleWeth(bool _isDeposit, uint256 _wethAmount) private {\\n        _onlyUnpaused();\\n        if (_isDeposit) {\\n            IWETH(WETH).deposit{value: _wethAmount}();\\n            return;\\n        }\\n        IWETH(WETH).withdraw(_wethAmount);\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n}\\n\\ncontract StrategyV14 is Strategy {}\\n\",\"keccak256\":\"0x6fb1d6f429ccdba39e7e9e302a18d310cdd12513999dd3fe71630e68e9dd62a8\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055615e0c80620000266000396000f3fe6080604052600436106102bf5760003560e01c80636db40dc21161016e578063d40244cb116100cb578063eb64ca411161007f578063f101e82b11610064578063f101e82b14610c8e578063fa9bacac14610cbe578063ffb5cd0914610cee576102c6565b8063eb64ca4114610b0e578063ecbc2cda14610b37576102c6565b8063da58c7d9116100b0578063da58c7d914610aa6578063dd1033f814610ad0578063e4df5e1a14610ae5576102c6565b8063d40244cb14610a21578063d45fc1a914610a36576102c6565b806397ccdc6011610122578063bf1dcfe211610107578063bf1dcfe2146109a0578063bf3fdf0d146109f7578063d3406abd14610a0c576102c6565b806397ccdc6014610948578063a30ca2041461098b576102c6565b8063707cddfe11610153578063707cddfe146108eb57806393baae4114610900578063950c782214610915576102c6565b80636db40dc2146108c15780636db9cc99146108d6576102c6565b80632aba2af41161021c5780634b2e52f0116101d0578063577b6ab8116101b5578063577b6ab8146106eb5780636b3b75ea146107005780636bc195dd146107ba576102c6565b80634b2e52f0146106c157806356ba88b8146106d6576102c6565b80633a4b66f1116102015780633a4b66f1146105d8578063449b9826146105ed57806348a4beaa14610602576102c6565b80632aba2af414610505578063397dc903146105c3576102c6565b80630fb5a6b4116102735780631a5cfcb7116102585780631a5cfcb7146103d35780631fe4a68614610405578063290d2e9114610436576102c6565b80630fb5a6b4146103945780631115bdcf146103a9576102c6565b806303976e38116102a457806303976e381461032757806303cddb2c1461033c5780630e32db5214610351576102c6565b80630126c606146102cb57806301681a62146102f2576102c6565b366102c657005b600080fd5b3480156102d757600080fd5b506102e0610d8f565b60408051918252519081900360200190f35b3480156102fe57600080fd5b506103256004803603602081101561031557600080fd5b50356001600160a01b03166111c7565b005b34801561033357600080fd5b506102e0611512565b34801561034857600080fd5b506102e0611518565b34801561035d57600080fd5b506102e06004803603606081101561037457600080fd5b506001600160a01b0381358116916020810135916040909101351661151e565b3480156103a057600080fd5b506102e0611545565b3480156103b557600080fd5b50610325600480360360208110156103cc57600080fd5b503561154b565b3480156103df57600080fd5b50610325600480360360408110156103f657600080fd5b508035151590602001356116b0565b34801561041157600080fd5b5061041a6116c6565b604080516001600160a01b039092168252519081900360200190f35b34801561044257600080fd5b506103256004803603606081101561045957600080fd5b81019060208101813564010000000081111561047457600080fd5b82018360208201111561048657600080fd5b803590602001918460208302840111640100000000831117156104a857600080fd5b9193909290916020810190356401000000008111156104c657600080fd5b8201836020820111156104d857600080fd5b803590602001918460208302840111640100000000831117156104fa57600080fd5b9193509150356116d5565b34801561051157600080fd5b5061051a6119c0565b60405180846001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561056d578181015183820152602001610555565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105ac578181015183820152602001610594565b505050509050019550505050505060405180910390f35b3480156105cf57600080fd5b506102e0611ce3565b3480156105e457600080fd5b506102e0611ce9565b3480156105f957600080fd5b506102e0611cef565b34801561060e57600080fd5b5061062f6004803603602081101561062557600080fd5b503560ff16611cf5565b604051808460ff168152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561068457818101518382015260200161066c565b50505050905090810190601f1680156106b15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106cd57600080fd5b506102e0611d7a565b3480156106e257600080fd5b5061041a611d80565b3480156106f757600080fd5b50610325611d8f565b34801561070c57600080fd5b506103256004803603604081101561072357600080fd5b8135919081019060408101602082013564010000000081111561074557600080fd5b82018360208201111561075757600080fd5b8035906020019184600183028401116401000000008311171561077957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611de3945050505050565b3480156107c657600080fd5b5061084c600480360360608110156107dd57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561080d57600080fd5b82018360208201111561081f57600080fd5b8035906020019184600183028401116401000000008311171561084157600080fd5b509092509050612373565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561088657818101518382015260200161086e565b50505050905090810190601f1680156108b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108cd57600080fd5b506102e06123d0565b3480156108e257600080fd5b506102e06123d6565b3480156108f757600080fd5b506102e06123dc565b34801561090c57600080fd5b506102e06123e2565b34801561092157600080fd5b506102e06004803603602081101561093857600080fd5b50356001600160a01b03166123e8565b34801561095457600080fd5b506103256004803603606081101561096b57600080fd5b506001600160a01b03813581169160208101359091169060400135612403565b34801561099757600080fd5b506102e0612442565b3480156109ac57600080fd5b506109b5612448565b604080516001600160a01b0390981688529515156020880152931515868601529115156060860152608085015260a084015260c0830152519081900360e00190f35b348015610a0357600080fd5b5061084c612472565b348015610a1857600080fd5b506102e0612500565b348015610a2d57600080fd5b506102e0612506565b348015610a4257600080fd5b506103256004803603610140811015610a5a57600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a08101359060c08101359060e08101359061010081013590610120013561250c565b348015610ab257600080fd5b5061041a60048036036020811015610ac957600080fd5b5035612845565b348015610adc57600080fd5b506102e061286f565b348015610af157600080fd5b50610afa612875565b604080519115158252519081900360200190f35b348015610b1a57600080fd5b5061032560048036036080811015610b3157600080fd5b5061288d565b348015610b4357600080fd5b5061032560048036036060811015610b5a57600080fd5b810190602081018135640100000000811115610b7557600080fd5b820183602082011115610b8757600080fd5b80359060200191846020830284011164010000000083111715610ba957600080fd5b919390929091602081019035640100000000811115610bc757600080fd5b820183602082011115610bd957600080fd5b80359060200191846020830284011164010000000083111715610bfb57600080fd5b919390929091602081019035640100000000811115610c1957600080fd5b820183602082011115610c2b57600080fd5b80359060200191846001830284011164010000000083111715610c4d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612921945050505050565b348015610c9a57600080fd5b5061032560048036036040811015610cb157600080fd5b5080359060200135612c21565b348015610cca57600080fd5b5061032560048036036040811015610ce157600080fd5b5080359060200135612ca7565b348015610cfa57600080fd5b50610d036130c1565b604051808f6001600160a01b031681526020018e6001600160a01b031681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b031681526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b600080600080600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d6020811015610e0d57600080fd5b5051905060005b60025481101561103a57600154600280546000926201000090046001600160a01b03169163201041989185908110610e4857fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d6020811015610ec957600080fd5b505190506001600160a01b03811663a24258ad610ee5846131bc565b600554600380546001600160a01b039092169187908110610f0257fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518463ffffffff1660e01b81526004018080602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b83811015610f8a578181015183820152602001610f72565b50505050905090810190601f168015610fb75780820380516001836020036101000a031916815260200191505b50945050505050604080518083038186803b158015610fd557600080fd5b505afa92505050801561100157506040513d6040811015610ff557600080fd5b50805160209091015160015b61100a57611031565b80156110215761101a87836132b2565b965061102e565b61102b86836132b2565b95505b50505b50600101610e14565b5060028054600019810191908290811061105057fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166004141561119e5760045460009061112857601c8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261112393909290918301828280156111125780601f106110e757610100808354040283529160200191611112565b820191906000526020600020905b8154815290600101906020018083116110f557829003601f168201915b505050505083604002600c016132c2565b61114b565b6004828154811061113557fe5b6000918252602090912001546001600160a01b03165b905060006111626001600160a01b038316306132ce565b9050801561119b576000611176858461336f565b90506111976111908261118a86898761348e565b9061364f565b88906132b2565b9650505b50505b838311156111b35760009450505050506111c4565b6111bd848461366d565b9450505050505b90565b6002600054141561121f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005561122c61367d565b600554604080516370a0823160e01b8152336004820152905161133d926000926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561127e57600080fd5b505afa158015611292573d6000803e3d6000fd5b505050506040513d60208110156112a857600080fd5b50511180156113365750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d602081101561133357600080fd5b50515b600f6137aa565b6113536001600160a01b038216151560176137aa565b60055460408051631f0b96b960e31b815290516113db926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b15801561139957600080fd5b505afa1580156113ad573d6000803e3d6000fd5b505050506040513d60208110156113c357600080fd5b50516001600160a01b038381169116141560366137aa565b600f546113f290610100900460ff161560346137aa565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d602081101561146b57600080fd5b5051905061147c81151560086137aa565b6115008282600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cf57600080fd5b505afa1580156114e3573d6000803e3d6000fd5b505050506040513d60208110156114f957600080fd5b50516137b8565b5061150961393d565b50506001600055565b60155481565b60135481565b6000611528613986565b61153061367d565b61153b8484846137b8565b90505b9392505050565b60105481565b600260005414156115a3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556115b061367d565b6115b8613a7a565b600f546115cf90610100900460ff161560346137aa565b6115f362093a806115eb6007544261366d90919063ffffffff16565b1160376137aa565b60055460408051634d5b1ba160e11b81523360048201526024810184905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b15801561164657600080fd5b505af115801561165a573d6000803e3d6000fd5b50505050611666613b18565b6005546040805142815290516001600160a01b03909216917f7a7d4c833d273b66e431c5f268c42ee3e788541592e07c77f232cd28c89913169181900360200190a2506001600055565b6116b8613986565b6116c28282613bb6565b5050565b6006546001600160a01b031681565b6116dd61367d565b6116e5613a7a565b600554604080517f5a16656a000000000000000000000000000000000000000000000000000000008152905161177a926001600160a01b031691635a16656a916004808301926020929190829003018186803b15801561174457600080fd5b505afa158015611758573d6000803e3d6000fd5b505050506040513d602081101561176e57600080fd5b505185101560406137aa565b600f546117a090610100900460ff161580156117995750600f5460ff16155b602a6137aa565b6117c562093a806117bc6007544261366d90919063ffffffff16565b1115602b6137aa565b6117d284831460686137aa565b600f805461ff0019166101001790556000600d819055600e8190555b848110156118be5783838281811061180257fe5b90506020020135601b600088888581811061181957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002081905550600084848381811061185b57fe5b9050602002013513156118975761188f61188685858481811061187a57fe5b90506020020135613ca7565b600d54906132b2565b600d556118b6565b6118b26118a985858481811061187a57fe5b600e54906132b2565b600e555b6001016117ee565b506118e360006118db600e54600d5461366d90919063ffffffff16565b1160576137aa565b6118ef600c8686615b19565b50426008819055600554600d54600e546040805192835260208301919091528181019390935291516001600160a01b03909116917f3e6879a258dfdc657938a76339643c34f8d9a80aa5673c95726c61bc57ee0573919081900360600190a260055460408051634d5b1ba160e11b81523360048201526024810184905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b505050505050505050565b60408051600e8082526101e082019092526000916060918291849190602082016101c08036833750506040805160028082526060820183529394506000939092509060208301908036833701905050905060095482600081518110611a2157fe5b602002602001018181525050600b5482600181518110611a3d57fe5b602002602001018181525050600a5482600281518110611a5957fe5b60200260200101818152505060075482600381518110611a7557fe5b602002602001018181525050600d5482600481518110611a9157fe5b602002602001018181525050600e5482600581518110611aad57fe5b60200260200101818152505060135482600681518110611ac957fe5b60200260200101818152505060155482600781518110611ae557fe5b602002602001018181525050611b14611b0b601454601354613cbe90919063ffffffff16565b601354906132b2565b82600881518110611b2157fe5b60200260200101818152505060195482600981518110611b3d57fe5b6020026020010181815250506013546015541015611b5c576000611b5f565b60015b81600081518110611b6c57fe5b60200260200101901515908115158152505081600881518110611b8b57fe5b60200260200101516015541015611ba3576000611ba6565b60015b81600181518110611bb357fe5b60200260200101901515908115158152505080600081518110611bd257fe5b6020026020010151611be5576000611bf4565b601354601554611bf49161366d565b82600a81518110611c0157fe5b60200260200101818152505080600181518110611c1a57fe5b6020026020010151611c5457611c4f60155483600881518110611c3957fe5b602002602001015161366d90919063ffffffff16565b611c7d565b611c7d82600881518110611c6457fe5b602002602001015160155461366d90919063ffffffff16565b82600b81518110611c8a57fe5b60200260200101818152505060165482600c81518110611ca657fe5b602002602001018181525050601a5482600d81518110611cc257fe5b60209081029190910101526006546001600160a01b03169591945092509050565b601f5481565b60115481565b600e5481565b6000806060611d0c60025460ff86161060186137aa565b60028460ff1681548110611d1c57fe5b90600052602060002090602091828204019190069054906101000a900460ff1660038560ff1681548110611d4c57fe5b6000918252602090912001546001600160a01b0316611d6d60ff87166131bc565b9250925092509193909250565b60205481565b6005546001600160a01b031681565b611d97613cd6565b611d9f613b18565b6005546040805142815290516001600160a01b03909216917f4dcd504f23c1c204f965486c526a1e35cfb215bb4823dd1be0a172277bb1b3459181900360200190a2565b60026000541415611e3b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055611e4861367d565b611e50613a7a565b611e796000600954118015611e725750601054600954611e6f916132b2565b42115b60316137aa565b600f54611e8b9060ff161560326137aa565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d6020811015611efa57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f4457600080fd5b505afa158015611f58573d6000803e3d6000fd5b505050506040513d6020811015611f6e57600080fd5b50519050611f83670de0b6b3a7640000613d7b565b61207b81600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d6020811015611fff57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561204957600080fd5b505afa15801561205d573d6000803e3d6000fd5b505050506040513d602081101561207357600080fd5b50519061366d565b601555600f8054600160ff19909116811761ff00191690915542600b5554604080517fd6a45aa50000000000000000000000000000000000000000000000000000000081529051620100009092046001600160a01b03169163d6a45aa591600481810192602092909190829003018186803b1580156120f957600080fd5b505afa15801561210d573d6000803e3d6000fd5b505050506040513d602081101561212357600080fd5b5051600654604080517f3b5bb1d50000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201818152602483019384528751604484015287519490951694633b5bb1d594919388939192909160640190602085019080838360005b838110156121ab578181015183820152602001612193565b50505050905090810190601f1680156121d85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156121f857600080fd5b505af115801561220c573d6000803e3d6000fd5b505050506040513d602081101561222257600080fd5b505060055460408051634d5b1ba160e11b81523360048201526024810186905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b5050505061229761425b565b61229f61393d565b600b54600a55600554604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156122ea57600080fd5b505afa1580156122fe573d6000803e3d6000fd5b505050506040513d602081101561231457600080fd5b5051601a5560055460155460408051918252602082018690524282820152516001600160a01b03909216917f2d21f7a1772dd51a6d96bd1cb40623cb13b73fd3d037618d9688707ce1b5b9569181900360600190a25050600160005550565b606061237e336147cf565b61238661367d565b6123c7858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061492a92505050565b95945050505050565b60195481565b60075481565b601e5481565b60125481565b6001600160a01b03166000908152601b602052604090205490565b61240c336147cf565b61241461367d565b6124296001600160a01b038316846000614a54565b61243d6001600160a01b0383168483614a54565b505050565b60085481565b600f54600954600b54600a54309460ff610100860481169562010000810482169591169390929091565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156124f85780601f106124cd576101008083540402835291602001916124f8565b820191906000526020600020905b8154815290600101906020018083116124db57829003601f168201915b505050505081565b60145481565b600d5481565b600154610100900460ff16806125255750612525614bae565b80612533575060015460ff16155b61256e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615cd4602e913960400191505060405180910390fd5b600154610100900460ff16158015612598576001805460ff1961ff00199091166101001716811790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038c811682029290921792839055600580546001600160a01b0319168e8416908117909155604080516313bc6d4b60e01b81526004810192909252516126699492909204909216916313bc6d4b916024808301926020929190829003018186803b15801561263657600080fd5b505afa15801561264a573d6000803e3d6000fd5b505050506040513d602081101561266057600080fd5b505160246137aa565b600554604080516370a0823160e01b81526001600160a01b038e8116600483015291516126ee9360009316916370a08231916024808301926020929190829003018186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d60208110156126e457600080fd5b50511160256137aa565b6126fc6000891160296137aa565b601288905561270b878c614bbf565b61271486614cbf565b61271d82614dde565b61272683614df9565b61272f84614e14565b600680546001600160a01b0319166001600160a01b038d81169190911790915542600755600154604080517f3f2a554000000000000000000000000000000000000000000000000000000000815290516201000090920490921691633f2a5540916004808301926020929190829003018186803b1580156127af57600080fd5b505afa1580156127c3573d6000803e3d6000fd5b505050506040513d60208110156127d957600080fd5b5051601d80546001600160a01b0319166001600160a01b03909216919091179055601485905561280887614e2f565b6001600160a01b038c166000908152601b6020526040902055600d8790558015612838576001805461ff00191690555b5050505050505050505050565b600c818154811061285557600080fd5b6000918252602090912001546001600160a01b0316905081565b60025490565b6000806009541180156128885750600b54155b905090565b612895613cd6565b61289d61367d565b6010546128ae9082351060326137aa565b6128b88135614cbf565b6128c56020820135614df9565b6128d26040820135614dde565b6128df6060820135614e14565b6010546040805183358152602081019290925280517f42fb010605de46a36c4814784d207e3b8a1ce9f6773eaea652c07d2a07e95e579281900390910190a150565b6005546129da906001600160a01b0316331480156129485750600f5462010000900460ff16155b80156129d35750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b1580156129a657600080fd5b505afa1580156129ba573d6000803e3d6000fd5b505050506040513d60208110156129d057600080fd5b50515b60226137aa565b80516000906129ea906040614e8f565b9050612a1c6006821080156129ff5750600082115b8015612a0a57508584145b8015612a1557508382145b604b6137aa565b60005b85811015612bd9576001546201000090046001600160a01b03166320104198888884818110612a4a57fe5b9050602002013560ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015612a8b57600080fd5b505afa158015612a9f573d6000803e3d6000fd5b505050506040513d6020811015612ab557600080fd5b50516001600160a01b031663cdea2034612acf8584614ef6565b6005546001600160a01b0316888886818110612ae757fe5b905060200201356001600160a01b0316856040518563ffffffff1660e01b81526004018080602001856001600160a01b03168152602001846001600160a01b03168152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015612b68578181015183820152602001612b50565b50505050905090810190601f168015612b955780820380516001836020036101000a031916815260200191505b509550505050505060006040518083038186803b158015612bb557600080fd5b505afa158015612bc9573d6000803e3d6000fd5b505060019092019150612a1f9050565b50612be660028787615b78565b50612bf360038585615b19565b508151612c0790601c906020850190615c1c565b5050600f805462ff00001916620100001790555050505050565b60026000541415612c79576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055612c8661367d565b612c8e613a7a565b612c9c6000831160396137aa565b611509828233614f07565b60026000541415612cff576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600554612e34906001600160a01b031633148015612da15750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b158015612d7457600080fd5b505afa158015612d88573d6000803e3d6000fd5b505050506040513d6020811015612d9e57600080fd5b50515b80612e2d5750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612df557600080fd5b505afa158015612e09573d6000803e3d6000fd5b505050506040513d6020811015612e1f57600080fd5b50516001600160a01b031633145b601f6137aa565b612e3c61367d565b600f54612e6190610100900460ff168015612e5a5750600f5460ff16155b602c6137aa565b612e6e81831060646137aa565b612e80612e7b838361364f565b613d7b565b601354612e8d908361366d565b601355601d5460408051636b8bd28360e11b81526004810185905260006024820181905291516001600160a01b039093169263d717a5069260448084019391929182900301818387803b158015612ee357600080fd5b505af1158015612ef7573d6000803e3d6000fd5b505060055460408051631f0b96b960e31b8152905161306794506001600160a01b039092169250829163f85cb5c891600480820192602092909190829003018186803b158015612f4657600080fd5b505afa158015612f5a573d6000803e3d6000fd5b505050506040513d6020811015612f7057600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612fba57600080fd5b505afa158015612fce573d6000803e3d6000fd5b505050506040513d6020811015612fe457600080fd5b505160055460408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561302b57600080fd5b505afa15801561303f573d6000803e3d6000fd5b505050506040513d602081101561305557600080fd5b50516001600160a01b0316919061522f565b42600a81905560055460408051858152602081019390935280516001600160a01b03909216927fcff91fcd7fff5d12ce9ee075980ad73fde31d99f583cb228a04ee0ef4f34ba6f929081900390910190a250506001600055565b60008060008060008060008060008060008060008030600660009054906101000a90046001600160a01b0316600380549050601154600d54600e54601354601554601054601454601254600160029054906101000a90046001600160a01b03166001600160a01b031663d6a45aa56040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d602081101561318357600080fd5b5051600754613190610d8f565b9d509d509d509d509d509d509d509d509d509d509d509d509d509d50909192939495969798999a9b9c9d565b60045460609061326357601c8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261325e93909290918301828280156132535780601f1061322857610100808354040283529160200191613253565b820191906000526020600020905b81548152906001019060200180831161323657829003601f168201915b505050505083614ef6565b6132ac565b6004828154811061327057fe5b6000918252602080832090910154604080516001600160a01b039092169282019290925280820192909252805180830382018152606090920190525b92915050565b808201828110156132ac57600080fd5b600061153e83836152af565b60006132d983615323565b156132ef57506001600160a01b038116316132ac565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561333c57600080fd5b505afa158015613350573d6000803e3d6000fd5b505050506040513d602081101561336657600080fd5b505190506132ac565b6000600160029054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133bf57600080fd5b505afa1580156133d3573d6000803e3d6000fd5b505050506040513d60208110156133e957600080fd5b5051604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529151919092169163ac41865a916044808301926020929190829003018186803b15801561345657600080fd5b505afa92505050801561347b57506040513d602081101561347657600080fd5b505160015b613487575060006132ac565b90506132ac565b60008061349a85615330565b61350857846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156134d757600080fd5b505afa1580156134eb573d6000803e3d6000fd5b505050506040513d602081101561350157600080fd5b505161350b565b60125b60ff169050600061351b85615330565b61358957846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561355857600080fd5b505afa15801561356c573d6000803e3d6000fd5b505050506040513d602081101561358257600080fd5b505161358c565b60125b60ff169050601282111580156135a3575060128111155b6135f4576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b8082141561360657839250505061153e565b8181111561362e5761362561361b828461366d565b8590600a0a615366565b9250505061153e565b61364561363b838361366d565b8590600a0a614e8f565b9695505050505050565b600061153e8261366785670de0b6b3a7640000615366565b90614e8f565b808203828111156132ac57600080fd5b600154604080517f5b14f18300000000000000000000000000000000000000000000000000000000815230600482015290516137a8926201000090046001600160a01b031691635b14f183916024808301926020929190829003018186803b1580156136e857600080fd5b505afa1580156136fc573d6000803e3d6000fd5b505050506040513d602081101561371257600080fd5b505115806137a15750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561376957600080fd5b505afa15801561377d573d6000803e3d6000fd5b505050506040513d602081101561379357600080fd5b50516001600160a01b031633145b60536137aa565b565b816116c2576116c28161538a565b6000806137c5858461336f565b90506137d481151560626137aa565b60006137ea86856137e58886613cbe565b61348e565b9050600061381e6138176020546000141561380c576658d15e17628000613810565b6020545b8490613cbe565b839061366d565b9050600160029054906101000a90046001600160a01b03166001600160a01b031663e6e605136040518163ffffffff1660e01b815260040160206040518083038186803b15801561386e57600080fd5b505afa158015613882573d6000803e3d6000fd5b505050506040513d602081101561389857600080fd5b5051604080517ffa1ca8200000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038a81166024830152604482018a90528881166064830152608482018590529151919092169163fa1ca8209160a480830192600092919082900301818387803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b50929998505050505050505050565b60055460408051631f0b96b960e31b815290516137a8926001600160a01b031691829163f85cb5c891600480820192602092909190829003018186803b158015612f4657600080fd5b6000805b60025460ff82161015613a6b578180613a615750600160029054906101000a90046001600160a01b03166001600160a01b0316632010419860028360ff16815481106139d257fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015613a2957600080fd5b505afa158015613a3d573d6000803e3d6000fd5b505050506040513d6020811015613a5357600080fd5b50516001600160a01b031633145b915060010161398a565b50613a7781604c6137aa565b50565b600154604080517f411137c300000000000000000000000000000000000000000000000000000000815233600482015290516137a8926201000090046001600160a01b03169163411137c3916024808301926020929190829003018186803b158015613ae557600080fd5b505afa158015613af9573d6000803e3d6000fd5b505050506040513d6020811015613b0f57600080fd5b505160126137aa565b613b376009546000148015613b305750600f5460ff16155b60386137aa565b600554604080517fb2644e6600000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b039092169163b2644e669160248082019260009290919082900301818387803b158015613b9c57600080fd5b505af1158015613bb0573d6000803e3d6000fd5b50505050565b613bbe61367d565b8115613c315773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b50505050506116c2565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613c8b57600080fd5b505af1158015613c9f573d6000803e3d6000fd5b505050505050565b600080821215613cba57816000036132ac565b5090565b600061153e670de0b6b3a76400006136678585615366565b6006546137a8906001600160a01b0316331480613d745750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d3c57600080fd5b505afa158015613d50573d6000803e3d6000fd5b505050506040513d6020811015613d6657600080fd5b50516001600160a01b031633145b60206137aa565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b158015613dc057600080fd5b505afa158015613dd4573d6000803e3d6000fd5b505050506040513d6020811015613dea57600080fd5b505160025490915060009081905b801561403a57600154600280546000926201000090046001600160a01b0316916320104198916000198601908110613e2c57fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015613e8357600080fd5b505afa158015613e97573d6000803e3d6000fd5b505050506040513d6020811015613ead57600080fd5b505190506001600160a01b03811663bdd7a79c8686868a613ed160001989016131bc565b600554600380546001600160a01b03909216916000198c01908110613ef257fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518863ffffffff1660e01b815260040180886001600160a01b031681526020018781526020018660ff16815260200185815260200180602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b83811015613f9e578181015183820152602001613f86565b50505050905090810190601f168015613fcb5780820380516001836020036101000a031916815260200191505b5098505050505050505050606060405180830381600087803b158015613ff057600080fd5b505af1158015614004573d6000803e3d6000fd5b505050506040513d606081101561401a57600080fd5b508051602082015160409092015190965090945092505060001901613df8565b50600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561408957600080fd5b505afa15801561409d573d6000803e3d6000fd5b505050506040513d60208110156140b357600080fd5b50516001600160a01b038481169116148015906140d05750600082115b15613bb0576001600160a01b038316614106576140ee600147613bb6565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561415457600080fd5b505afa158015614168573d6000803e3d6000fd5b505050506040513d602081101561417e57600080fd5b50516001600160a01b03848116911614613bb05761425483846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156141e357600080fd5b505afa1580156141f7573d6000803e3d6000fd5b505050506040513d602081101561420d57600080fd5b505160055460408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b1580156114cf57600080fd5b5050505050565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b1580156142a057600080fd5b505afa1580156142b4573d6000803e3d6000fd5b505050506040513d60208110156142ca57600080fd5b50516013549091506000906142f3906142e290614e2f565b6142ed601554614e2f565b906153dd565b905060008060006013546015541161430c57600061431b565b60135460155461431b9161366d565b90506013546015541061445c576143ac81600160029054906101000a90046001600160a01b03166001600160a01b031663568c08136040518163ffffffff1660e01b815260040160206040518083038186803b15801561437a57600080fd5b505afa15801561438e573d6000803e3d6000fd5b505050506040513d60208110156143a457600080fd5b505190613cbe565b9250821561444257614442600160029054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561440557600080fd5b505afa158015614419573d6000803e3d6000fd5b505050506040513d602081101561442f57600080fd5b50516001600160a01b038716908561522f565b61445561444e84614e2f565b85906153dd565b93506144a0565b61449d6718493fba64ef000061449761448e60115461448860135460155461364f90919063ffffffff16565b90613cbe565b6011549061366d565b90615442565b91505b6005546015546144cf916001600160a01b0316906144be908661366d565b6001600160a01b038816919061522f565b601d546001600160a01b031661457957600160029054906101000a90046001600160a01b03166001600160a01b0316633f2a55406040518163ffffffff1660e01b815260040160206040518083038186803b15801561452d57600080fd5b505afa158015614541573d6000803e3d6000fd5b505050506040513d602081101561455757600080fd5b5051601d80546001600160a01b0319166001600160a01b039092169190911790555b601d54600554604080517f070e8a4a0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529051600093929092169163070e8a4a91602480820192606092909190829003018186803b1580156145e657600080fd5b505afa1580156145fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250606081101561461f57600080fd5b506005549091506001600160a01b03166350a9600361465a8661465461464d86600260200201518890613cbe565b879061366d565b9061366d565b87866040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156146a057600080fd5b505af11580156146b4573d6000803e3d6000fd5b5050601d5460135460408051636b8bd28360e11b8152600481019290925260006024830181905290516001600160a01b03909316945063d717a5069350604480830193919282900301818387803b15801561470e57600080fd5b505af1158015614722573d6000803e3d6000fd5b5050601d54604080517f9de9a05200000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b039092169350639de9a0529250602480820192602092909190829003018186803b15801561478a57600080fd5b505afa15801561479e573d6000803e3d6000fd5b505050506040513d60208110156147b457600080fd5b50516bffffffffffffffffffffffff16601955505050505050565b6000805b60035481101561482057826001600160a01b0316600382815481106147f457fe5b6000918252602090912001546001600160a01b031614156148185760019150614820565b6001016147d3565b506000600160029054906101000a90046001600160a01b03166001600160a01b031663e6e605136040518163ffffffff1660e01b815260040160206040518083038186803b15801561487157600080fd5b505afa158015614885573d6000803e3d6000fd5b505050506040513d602081101561489b57600080fd5b5051905061243d82806149235750816001600160a01b0316632d108f41856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156148f657600080fd5b505afa15801561490a573d6000803e3d6000fd5b505050506040513d602081101561492057600080fd5b50515b60216137aa565b60606149406001600160a01b038516838561545e565b905082846001600160a01b03167f2a936dbabeaea30adc1ddad138b1958497988474bef8b09a29411f0105ab8ab28484604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156149b1578181015183820152602001614999565b50505050905090810190601f1680156149de5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015614a115781810151838201526020016149f9565b50505050905090810190601f168015614a3e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a39392505050565b801580614af35750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015614ac557600080fd5b505afa158015614ad9573d6000803e3d6000fd5b505050506040513d6020811015614aef57600080fd5b5051155b614b2e5760405162461bcd60e51b8152600401808060200182810382526036815260200180615da16036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261243d908490615484565b6000614bb930615535565b15905090565b614cb9600083118015614cb25750600554604080517fc40868930000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291518693614caf93169163c4086893916024808301926020929190829003018186803b158015614c3657600080fd5b505afa158015614c4a573d6000803e3d6000fd5b505050506040513d6020811015614c6057600080fd5b5051600554604080516370a0823160e01b81526001600160a01b038881166004830152915191909216916370a08231916024808301926020929190829003018186803b15801561204957600080fd5b10155b60076137aa565b50601155565b600554604080517f95cdbedb0000000000000000000000000000000000000000000000000000000081529051614dd9926001600160a01b0316916395cdbedb916004808301926020929190829003018186803b158015614d1e57600080fd5b505afa158015614d32573d6000803e3d6000fd5b505050506040513d6020811015614d4857600080fd5b50518210801590614dd25750600560009054906101000a90046001600160a01b03166001600160a01b031663297ce5986040518163ffffffff1660e01b815260040160206040518083038186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b50518211155b60276137aa565b601055565b614df46702c68af0bb14000082111560666137aa565b602055565b614e0f67016345785d8a000082111560676137aa565b601f55565b614e2a670de0b6b3a7640000821115605d6137aa565b601e55565b60007f80000000000000000000000000000000000000000000000000000000000000008210613cba5760405162461bcd60e51b8152600401808060200182810382526028815260200180615d2b6028913960400191505060405180910390fd5b6000808211614ee5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381614eee57fe5b049392505050565b606061153e8383604002604061553b565b600f54614f1d90610100900460ff16602c6137aa565b614f41601254614f38856013546132b290919063ffffffff16565b1115602d6137aa565b600554604080517f3deddb3f0000000000000000000000000000000000000000000000000000000081529051614fe3926001600160a01b031691633deddb3f916004808301926020929190829003018186803b158015614fa057600080fd5b505afa158015614fb4573d6000803e3d6000fd5b505050506040513d6020811015614fca57600080fd5b5051600854614fda90429061366d565b1015602f6137aa565b600554604080517f4422b0dc0000000000000000000000000000000000000000000000000000000081526004810186905290516001600160a01b0390921691634422b0dc9160248082019260009290919082900301818387803b15801561504957600080fd5b505af115801561505d573d6000803e3d6000fd5b505060135461506f92509050846132b2565b60135561507b8361565f565b6009546150fb5742600955600554604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156150cb57600080fd5b505afa1580156150df573d6000803e3d6000fd5b505050506040513d60208110156150f557600080fd5b50516016555b601d5460408051636b8bd28360e11b8152600481018690526001602482015290516001600160a01b039092169163d717a5069160448082019260009290919082900301818387803b15801561514f57600080fd5b505af1158015615163573d6000803e3d6000fd5b505060055460408051634d5b1ba160e11b81526001600160a01b038681166004830152602482018890529151919092169350639ab637429250604480830192600092919082900301818387803b1580156151bc57600080fd5b505af11580156151d0573d6000803e3d6000fd5b505042600a819055600554604080518881526020810188905280820193909352516001600160a01b0390911693507f7f4467a4ca8be02143a9253e6c31362c7bc755929e5c68faf659636d307f1b8c92509081900360600190a2505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261243d908490615484565b6000816014018351101561530a576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6001600160a01b03161590565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806132ac5750506001600160a01b03161590565b60008215806153815750508181028183828161537e57fe5b04145b6132ac57600080fd5b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008183038183128015906153f25750838113155b80615407575060008312801561540757508381135b61153e5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d536024913960400191505060405180910390fd5b6000670de0b6b3a76400006154578484615366565b81614eee57fe5b606061153b848484604051806060016040528060298152602001615d026029913961590b565b60006154d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615a669092919063ffffffff16565b80519091501561243d578080602001905160208110156154f857600080fd5b505161243d5760405162461bcd60e51b815260040180806020018281038252602a815260200180615d77602a913960400191505060405180910390fd5b3b151590565b60608182601f011015615595576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b818301845110156155ed576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561560c5760405191506000825260208201604052615656565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561564557805183526020928301920161562d565b5050858452601f01601f1916604052505b50949350505050565b60055460408051631f0b96b960e31b8152905183926000926001600160a01b039091169163f85cb5c891600480820192602092909190829003018186803b1580156156a957600080fd5b505afa1580156156bd573d6000803e3d6000fd5b505050506040513d60208110156156d357600080fd5b505190506000805b60025481101561425457600154600280546000926201000090046001600160a01b0316916320104198918590811061570f57fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561576657600080fd5b505afa15801561577a573d6000803e3d6000fd5b505050506040513d602081101561579057600080fd5b505190506001600160a01b0381166387033f618587866157af876131bc565b600554600380546001600160a01b03909216918a9081106157cc57fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518763ffffffff1660e01b815260040180876001600160a01b031681526020018681526020018560ff16815260200180602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b8381101561587257818101518382015260200161585a565b50505050905090810190601f16801561589f5780820380516001836020036101000a031916815260200191505b50975050505050505050606060405180830381600087803b1580156158c357600080fd5b505af11580156158d7573d6000803e3d6000fd5b505050506040513d60608110156158ed57600080fd5b508051602082015160409092015191965094509250506001016156db565b60608247101561594c5760405162461bcd60e51b8152600401808060200182810382526026815260200180615cae6026913960400191505060405180910390fd5b61595585615535565b6159a6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106159e45780518252601f1990920191602091820191016159c5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615a46576040519150601f19603f3d011682016040523d82523d6000602084013e615a4b565b606091505b5091509150615a5b828286615a75565b979650505050505050565b606061153b848460008561590b565b60608315615a8457508161153e565b825115615a945782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615ade578181015183820152602001615ac6565b50505050905090810190601f168015615b0b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215615b6c579160200282015b82811115615b6c5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190615b39565b50613cba929150615c98565b82805482825590600052602060002090601f01602090048101928215615b6c5791602002820160005b83821115615be257833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302615ba1565b8015615c0f5782816101000a81549060ff0219169055600101602081600001049283019260010302615be2565b5050613cba929150615c98565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282615c525760008555615b6c565b82601f10615c6b57805160ff1916838001178555615b6c565b82800160010185558215615b6c579182015b82811115615b6c578251825591602001919060010190615c7d565b5b80821115613cba5760008155600101615c9956fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c656453616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122051843c1d6683057b6778de0854a86971226167846a51f2f13282cf0c07d8503f64736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102bf5760003560e01c80636db40dc21161016e578063d40244cb116100cb578063eb64ca411161007f578063f101e82b11610064578063f101e82b14610c8e578063fa9bacac14610cbe578063ffb5cd0914610cee576102c6565b8063eb64ca4114610b0e578063ecbc2cda14610b37576102c6565b8063da58c7d9116100b0578063da58c7d914610aa6578063dd1033f814610ad0578063e4df5e1a14610ae5576102c6565b8063d40244cb14610a21578063d45fc1a914610a36576102c6565b806397ccdc6011610122578063bf1dcfe211610107578063bf1dcfe2146109a0578063bf3fdf0d146109f7578063d3406abd14610a0c576102c6565b806397ccdc6014610948578063a30ca2041461098b576102c6565b8063707cddfe11610153578063707cddfe146108eb57806393baae4114610900578063950c782214610915576102c6565b80636db40dc2146108c15780636db9cc99146108d6576102c6565b80632aba2af41161021c5780634b2e52f0116101d0578063577b6ab8116101b5578063577b6ab8146106eb5780636b3b75ea146107005780636bc195dd146107ba576102c6565b80634b2e52f0146106c157806356ba88b8146106d6576102c6565b80633a4b66f1116102015780633a4b66f1146105d8578063449b9826146105ed57806348a4beaa14610602576102c6565b80632aba2af414610505578063397dc903146105c3576102c6565b80630fb5a6b4116102735780631a5cfcb7116102585780631a5cfcb7146103d35780631fe4a68614610405578063290d2e9114610436576102c6565b80630fb5a6b4146103945780631115bdcf146103a9576102c6565b806303976e38116102a457806303976e381461032757806303cddb2c1461033c5780630e32db5214610351576102c6565b80630126c606146102cb57806301681a62146102f2576102c6565b366102c657005b600080fd5b3480156102d757600080fd5b506102e0610d8f565b60408051918252519081900360200190f35b3480156102fe57600080fd5b506103256004803603602081101561031557600080fd5b50356001600160a01b03166111c7565b005b34801561033357600080fd5b506102e0611512565b34801561034857600080fd5b506102e0611518565b34801561035d57600080fd5b506102e06004803603606081101561037457600080fd5b506001600160a01b0381358116916020810135916040909101351661151e565b3480156103a057600080fd5b506102e0611545565b3480156103b557600080fd5b50610325600480360360208110156103cc57600080fd5b503561154b565b3480156103df57600080fd5b50610325600480360360408110156103f657600080fd5b508035151590602001356116b0565b34801561041157600080fd5b5061041a6116c6565b604080516001600160a01b039092168252519081900360200190f35b34801561044257600080fd5b506103256004803603606081101561045957600080fd5b81019060208101813564010000000081111561047457600080fd5b82018360208201111561048657600080fd5b803590602001918460208302840111640100000000831117156104a857600080fd5b9193909290916020810190356401000000008111156104c657600080fd5b8201836020820111156104d857600080fd5b803590602001918460208302840111640100000000831117156104fa57600080fd5b9193509150356116d5565b34801561051157600080fd5b5061051a6119c0565b60405180846001600160a01b031681526020018060200180602001838103835285818151815260200191508051906020019060200280838360005b8381101561056d578181015183820152602001610555565b50505050905001838103825284818151815260200191508051906020019060200280838360005b838110156105ac578181015183820152602001610594565b505050509050019550505050505060405180910390f35b3480156105cf57600080fd5b506102e0611ce3565b3480156105e457600080fd5b506102e0611ce9565b3480156105f957600080fd5b506102e0611cef565b34801561060e57600080fd5b5061062f6004803603602081101561062557600080fd5b503560ff16611cf5565b604051808460ff168152602001836001600160a01b0316815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561068457818101518382015260200161066c565b50505050905090810190601f1680156106b15780820380516001836020036101000a031916815260200191505b5094505050505060405180910390f35b3480156106cd57600080fd5b506102e0611d7a565b3480156106e257600080fd5b5061041a611d80565b3480156106f757600080fd5b50610325611d8f565b34801561070c57600080fd5b506103256004803603604081101561072357600080fd5b8135919081019060408101602082013564010000000081111561074557600080fd5b82018360208201111561075757600080fd5b8035906020019184600183028401116401000000008311171561077957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550611de3945050505050565b3480156107c657600080fd5b5061084c600480360360608110156107dd57600080fd5b6001600160a01b038235169160208101359181019060608101604082013564010000000081111561080d57600080fd5b82018360208201111561081f57600080fd5b8035906020019184600183028401116401000000008311171561084157600080fd5b509092509050612373565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561088657818101518382015260200161086e565b50505050905090810190601f1680156108b35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108cd57600080fd5b506102e06123d0565b3480156108e257600080fd5b506102e06123d6565b3480156108f757600080fd5b506102e06123dc565b34801561090c57600080fd5b506102e06123e2565b34801561092157600080fd5b506102e06004803603602081101561093857600080fd5b50356001600160a01b03166123e8565b34801561095457600080fd5b506103256004803603606081101561096b57600080fd5b506001600160a01b03813581169160208101359091169060400135612403565b34801561099757600080fd5b506102e0612442565b3480156109ac57600080fd5b506109b5612448565b604080516001600160a01b0390981688529515156020880152931515868601529115156060860152608085015260a084015260c0830152519081900360e00190f35b348015610a0357600080fd5b5061084c612472565b348015610a1857600080fd5b506102e0612500565b348015610a2d57600080fd5b506102e0612506565b348015610a4257600080fd5b506103256004803603610140811015610a5a57600080fd5b506001600160a01b03813581169160208101358216916040820135169060608101359060808101359060a08101359060c08101359060e08101359061010081013590610120013561250c565b348015610ab257600080fd5b5061041a60048036036020811015610ac957600080fd5b5035612845565b348015610adc57600080fd5b506102e061286f565b348015610af157600080fd5b50610afa612875565b604080519115158252519081900360200190f35b348015610b1a57600080fd5b5061032560048036036080811015610b3157600080fd5b5061288d565b348015610b4357600080fd5b5061032560048036036060811015610b5a57600080fd5b810190602081018135640100000000811115610b7557600080fd5b820183602082011115610b8757600080fd5b80359060200191846020830284011164010000000083111715610ba957600080fd5b919390929091602081019035640100000000811115610bc757600080fd5b820183602082011115610bd957600080fd5b80359060200191846020830284011164010000000083111715610bfb57600080fd5b919390929091602081019035640100000000811115610c1957600080fd5b820183602082011115610c2b57600080fd5b80359060200191846001830284011164010000000083111715610c4d57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550612921945050505050565b348015610c9a57600080fd5b5061032560048036036040811015610cb157600080fd5b5080359060200135612c21565b348015610cca57600080fd5b5061032560048036036040811015610ce157600080fd5b5080359060200135612ca7565b348015610cfa57600080fd5b50610d036130c1565b604051808f6001600160a01b031681526020018e6001600160a01b031681526020018d81526020018c81526020018b81526020018a8152602001898152602001888152602001878152602001868152602001858152602001846001600160a01b031681526020018381526020018281526020019e50505050505050505050505050505060405180910390f35b600080600080600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610de357600080fd5b505afa158015610df7573d6000803e3d6000fd5b505050506040513d6020811015610e0d57600080fd5b5051905060005b60025481101561103a57600154600280546000926201000090046001600160a01b03169163201041989185908110610e4857fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015610e9f57600080fd5b505afa158015610eb3573d6000803e3d6000fd5b505050506040513d6020811015610ec957600080fd5b505190506001600160a01b03811663a24258ad610ee5846131bc565b600554600380546001600160a01b039092169187908110610f0257fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518463ffffffff1660e01b81526004018080602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b83811015610f8a578181015183820152602001610f72565b50505050905090810190601f168015610fb75780820380516001836020036101000a031916815260200191505b50945050505050604080518083038186803b158015610fd557600080fd5b505afa92505050801561100157506040513d6040811015610ff557600080fd5b50805160209091015160015b61100a57611031565b80156110215761101a87836132b2565b965061102e565b61102b86836132b2565b95505b50505b50600101610e14565b5060028054600019810191908290811061105057fe5b90600052602060002090602091828204019190069054906101000a900460ff1660ff166004141561119e5760045460009061112857601c8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261112393909290918301828280156111125780601f106110e757610100808354040283529160200191611112565b820191906000526020600020905b8154815290600101906020018083116110f557829003601f168201915b505050505083604002600c016132c2565b61114b565b6004828154811061113557fe5b6000918252602090912001546001600160a01b03165b905060006111626001600160a01b038316306132ce565b9050801561119b576000611176858461336f565b90506111976111908261118a86898761348e565b9061364f565b88906132b2565b9650505b50505b838311156111b35760009450505050506111c4565b6111bd848461366d565b9450505050505b90565b6002600054141561121f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260005561122c61367d565b600554604080516370a0823160e01b8152336004820152905161133d926000926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b15801561127e57600080fd5b505afa158015611292573d6000803e3d6000fd5b505050506040513d60208110156112a857600080fd5b50511180156113365750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d602081101561133357600080fd5b50515b600f6137aa565b6113536001600160a01b038216151560176137aa565b60055460408051631f0b96b960e31b815290516113db926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b15801561139957600080fd5b505afa1580156113ad573d6000803e3d6000fd5b505050506040513d60208110156113c357600080fd5b50516001600160a01b038381169116141560366137aa565b600f546113f290610100900460ff161560346137aa565b6000816001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561144157600080fd5b505afa158015611455573d6000803e3d6000fd5b505050506040513d602081101561146b57600080fd5b5051905061147c81151560086137aa565b6115008282600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156114cf57600080fd5b505afa1580156114e3573d6000803e3d6000fd5b505050506040513d60208110156114f957600080fd5b50516137b8565b5061150961393d565b50506001600055565b60155481565b60135481565b6000611528613986565b61153061367d565b61153b8484846137b8565b90505b9392505050565b60105481565b600260005414156115a3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556115b061367d565b6115b8613a7a565b600f546115cf90610100900460ff161560346137aa565b6115f362093a806115eb6007544261366d90919063ffffffff16565b1160376137aa565b60055460408051634d5b1ba160e11b81523360048201526024810184905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b15801561164657600080fd5b505af115801561165a573d6000803e3d6000fd5b50505050611666613b18565b6005546040805142815290516001600160a01b03909216917f7a7d4c833d273b66e431c5f268c42ee3e788541592e07c77f232cd28c89913169181900360200190a2506001600055565b6116b8613986565b6116c28282613bb6565b5050565b6006546001600160a01b031681565b6116dd61367d565b6116e5613a7a565b600554604080517f5a16656a000000000000000000000000000000000000000000000000000000008152905161177a926001600160a01b031691635a16656a916004808301926020929190829003018186803b15801561174457600080fd5b505afa158015611758573d6000803e3d6000fd5b505050506040513d602081101561176e57600080fd5b505185101560406137aa565b600f546117a090610100900460ff161580156117995750600f5460ff16155b602a6137aa565b6117c562093a806117bc6007544261366d90919063ffffffff16565b1115602b6137aa565b6117d284831460686137aa565b600f805461ff0019166101001790556000600d819055600e8190555b848110156118be5783838281811061180257fe5b90506020020135601b600088888581811061181957fe5b905060200201356001600160a01b03166001600160a01b03166001600160a01b0316815260200190815260200160002081905550600084848381811061185b57fe5b9050602002013513156118975761188f61188685858481811061187a57fe5b90506020020135613ca7565b600d54906132b2565b600d556118b6565b6118b26118a985858481811061187a57fe5b600e54906132b2565b600e555b6001016117ee565b506118e360006118db600e54600d5461366d90919063ffffffff16565b1160576137aa565b6118ef600c8686615b19565b50426008819055600554600d54600e546040805192835260208301919091528181019390935291516001600160a01b03909116917f3e6879a258dfdc657938a76339643c34f8d9a80aa5673c95726c61bc57ee0573919081900360600190a260055460408051634d5b1ba160e11b81523360048201526024810184905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b1580156119a157600080fd5b505af11580156119b5573d6000803e3d6000fd5b505050505050505050565b60408051600e8082526101e082019092526000916060918291849190602082016101c08036833750506040805160028082526060820183529394506000939092509060208301908036833701905050905060095482600081518110611a2157fe5b602002602001018181525050600b5482600181518110611a3d57fe5b602002602001018181525050600a5482600281518110611a5957fe5b60200260200101818152505060075482600381518110611a7557fe5b602002602001018181525050600d5482600481518110611a9157fe5b602002602001018181525050600e5482600581518110611aad57fe5b60200260200101818152505060135482600681518110611ac957fe5b60200260200101818152505060155482600781518110611ae557fe5b602002602001018181525050611b14611b0b601454601354613cbe90919063ffffffff16565b601354906132b2565b82600881518110611b2157fe5b60200260200101818152505060195482600981518110611b3d57fe5b6020026020010181815250506013546015541015611b5c576000611b5f565b60015b81600081518110611b6c57fe5b60200260200101901515908115158152505081600881518110611b8b57fe5b60200260200101516015541015611ba3576000611ba6565b60015b81600181518110611bb357fe5b60200260200101901515908115158152505080600081518110611bd257fe5b6020026020010151611be5576000611bf4565b601354601554611bf49161366d565b82600a81518110611c0157fe5b60200260200101818152505080600181518110611c1a57fe5b6020026020010151611c5457611c4f60155483600881518110611c3957fe5b602002602001015161366d90919063ffffffff16565b611c7d565b611c7d82600881518110611c6457fe5b602002602001015160155461366d90919063ffffffff16565b82600b81518110611c8a57fe5b60200260200101818152505060165482600c81518110611ca657fe5b602002602001018181525050601a5482600d81518110611cc257fe5b60209081029190910101526006546001600160a01b03169591945092509050565b601f5481565b60115481565b600e5481565b6000806060611d0c60025460ff86161060186137aa565b60028460ff1681548110611d1c57fe5b90600052602060002090602091828204019190069054906101000a900460ff1660038560ff1681548110611d4c57fe5b6000918252602090912001546001600160a01b0316611d6d60ff87166131bc565b9250925092509193909250565b60205481565b6005546001600160a01b031681565b611d97613cd6565b611d9f613b18565b6005546040805142815290516001600160a01b03909216917f4dcd504f23c1c204f965486c526a1e35cfb215bb4823dd1be0a172277bb1b3459181900360200190a2565b60026000541415611e3b576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055611e4861367d565b611e50613a7a565b611e796000600954118015611e725750601054600954611e6f916132b2565b42115b60316137aa565b600f54611e8b9060ff161560326137aa565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b158015611ed057600080fd5b505afa158015611ee4573d6000803e3d6000fd5b505050506040513d6020811015611efa57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015611f4457600080fd5b505afa158015611f58573d6000803e3d6000fd5b505050506040513d6020811015611f6e57600080fd5b50519050611f83670de0b6b3a7640000613d7b565b61207b81600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015611fd557600080fd5b505afa158015611fe9573d6000803e3d6000fd5b505050506040513d6020811015611fff57600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b15801561204957600080fd5b505afa15801561205d573d6000803e3d6000fd5b505050506040513d602081101561207357600080fd5b50519061366d565b601555600f8054600160ff19909116811761ff00191690915542600b5554604080517fd6a45aa50000000000000000000000000000000000000000000000000000000081529051620100009092046001600160a01b03169163d6a45aa591600481810192602092909190829003018186803b1580156120f957600080fd5b505afa15801561210d573d6000803e3d6000fd5b505050506040513d602081101561212357600080fd5b5051600654604080517f3b5bb1d50000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201818152602483019384528751604484015287519490951694633b5bb1d594919388939192909160640190602085019080838360005b838110156121ab578181015183820152602001612193565b50505050905090810190601f1680156121d85780820380516001836020036101000a031916815260200191505b509350505050602060405180830381600087803b1580156121f857600080fd5b505af115801561220c573d6000803e3d6000fd5b505050506040513d602081101561222257600080fd5b505060055460408051634d5b1ba160e11b81523360048201526024810186905290516001600160a01b0390921691639ab637429160448082019260009290919082900301818387803b15801561227757600080fd5b505af115801561228b573d6000803e3d6000fd5b5050505061229761425b565b61229f61393d565b600b54600a55600554604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156122ea57600080fd5b505afa1580156122fe573d6000803e3d6000fd5b505050506040513d602081101561231457600080fd5b5051601a5560055460155460408051918252602082018690524282820152516001600160a01b03909216917f2d21f7a1772dd51a6d96bd1cb40623cb13b73fd3d037618d9688707ce1b5b9569181900360600190a25050600160005550565b606061237e336147cf565b61238661367d565b6123c7858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061492a92505050565b95945050505050565b60195481565b60075481565b601e5481565b60125481565b6001600160a01b03166000908152601b602052604090205490565b61240c336147cf565b61241461367d565b6124296001600160a01b038316846000614a54565b61243d6001600160a01b0383168483614a54565b505050565b60085481565b600f54600954600b54600a54309460ff610100860481169562010000810482169591169390929091565b601c805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156124f85780601f106124cd576101008083540402835291602001916124f8565b820191906000526020600020905b8154815290600101906020018083116124db57829003601f168201915b505050505081565b60145481565b600d5481565b600154610100900460ff16806125255750612525614bae565b80612533575060015460ff16155b61256e5760405162461bcd60e51b815260040180806020018281038252602e815260200180615cd4602e913960400191505060405180910390fd5b600154610100900460ff16158015612598576001805460ff1961ff00199091166101001716811790555b600180547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038c811682029290921792839055600580546001600160a01b0319168e8416908117909155604080516313bc6d4b60e01b81526004810192909252516126699492909204909216916313bc6d4b916024808301926020929190829003018186803b15801561263657600080fd5b505afa15801561264a573d6000803e3d6000fd5b505050506040513d602081101561266057600080fd5b505160246137aa565b600554604080516370a0823160e01b81526001600160a01b038e8116600483015291516126ee9360009316916370a08231916024808301926020929190829003018186803b1580156126ba57600080fd5b505afa1580156126ce573d6000803e3d6000fd5b505050506040513d60208110156126e457600080fd5b50511160256137aa565b6126fc6000891160296137aa565b601288905561270b878c614bbf565b61271486614cbf565b61271d82614dde565b61272683614df9565b61272f84614e14565b600680546001600160a01b0319166001600160a01b038d81169190911790915542600755600154604080517f3f2a554000000000000000000000000000000000000000000000000000000000815290516201000090920490921691633f2a5540916004808301926020929190829003018186803b1580156127af57600080fd5b505afa1580156127c3573d6000803e3d6000fd5b505050506040513d60208110156127d957600080fd5b5051601d80546001600160a01b0319166001600160a01b03909216919091179055601485905561280887614e2f565b6001600160a01b038c166000908152601b6020526040902055600d8790558015612838576001805461ff00191690555b5050505050505050505050565b600c818154811061285557600080fd5b6000918252602090912001546001600160a01b0316905081565b60025490565b6000806009541180156128885750600b54155b905090565b612895613cd6565b61289d61367d565b6010546128ae9082351060326137aa565b6128b88135614cbf565b6128c56020820135614df9565b6128d26040820135614dde565b6128df6060820135614e14565b6010546040805183358152602081019290925280517f42fb010605de46a36c4814784d207e3b8a1ce9f6773eaea652c07d2a07e95e579281900390910190a150565b6005546129da906001600160a01b0316331480156129485750600f5462010000900460ff16155b80156129d35750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b1580156129a657600080fd5b505afa1580156129ba573d6000803e3d6000fd5b505050506040513d60208110156129d057600080fd5b50515b60226137aa565b80516000906129ea906040614e8f565b9050612a1c6006821080156129ff5750600082115b8015612a0a57508584145b8015612a1557508382145b604b6137aa565b60005b85811015612bd9576001546201000090046001600160a01b03166320104198888884818110612a4a57fe5b9050602002013560ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015612a8b57600080fd5b505afa158015612a9f573d6000803e3d6000fd5b505050506040513d6020811015612ab557600080fd5b50516001600160a01b031663cdea2034612acf8584614ef6565b6005546001600160a01b0316888886818110612ae757fe5b905060200201356001600160a01b0316856040518563ffffffff1660e01b81526004018080602001856001600160a01b03168152602001846001600160a01b03168152602001838152602001828103825286818151815260200191508051906020019080838360005b83811015612b68578181015183820152602001612b50565b50505050905090810190601f168015612b955780820380516001836020036101000a031916815260200191505b509550505050505060006040518083038186803b158015612bb557600080fd5b505afa158015612bc9573d6000803e3d6000fd5b505060019092019150612a1f9050565b50612be660028787615b78565b50612bf360038585615b19565b508151612c0790601c906020850190615c1c565b5050600f805462ff00001916620100001790555050505050565b60026000541415612c79576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055612c8661367d565b612c8e613a7a565b612c9c6000831160396137aa565b611509828233614f07565b60026000541415612cff576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600055600554612e34906001600160a01b031633148015612da15750600154600554604080516313bc6d4b60e01b81526001600160a01b039283166004820152905162010000909304909116916313bc6d4b91602480820192602092909190829003018186803b158015612d7457600080fd5b505afa158015612d88573d6000803e3d6000fd5b505050506040513d6020811015612d9e57600080fd5b50515b80612e2d5750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612df557600080fd5b505afa158015612e09573d6000803e3d6000fd5b505050506040513d6020811015612e1f57600080fd5b50516001600160a01b031633145b601f6137aa565b612e3c61367d565b600f54612e6190610100900460ff168015612e5a5750600f5460ff16155b602c6137aa565b612e6e81831060646137aa565b612e80612e7b838361364f565b613d7b565b601354612e8d908361366d565b601355601d5460408051636b8bd28360e11b81526004810185905260006024820181905291516001600160a01b039093169263d717a5069260448084019391929182900301818387803b158015612ee357600080fd5b505af1158015612ef7573d6000803e3d6000fd5b505060055460408051631f0b96b960e31b8152905161306794506001600160a01b039092169250829163f85cb5c891600480820192602092909190829003018186803b158015612f4657600080fd5b505afa158015612f5a573d6000803e3d6000fd5b505050506040513d6020811015612f7057600080fd5b5051604080516370a0823160e01b815230600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015612fba57600080fd5b505afa158015612fce573d6000803e3d6000fd5b505050506040513d6020811015612fe457600080fd5b505160055460408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b15801561302b57600080fd5b505afa15801561303f573d6000803e3d6000fd5b505050506040513d602081101561305557600080fd5b50516001600160a01b0316919061522f565b42600a81905560055460408051858152602081019390935280516001600160a01b03909216927fcff91fcd7fff5d12ce9ee075980ad73fde31d99f583cb228a04ee0ef4f34ba6f929081900390910190a250506001600055565b60008060008060008060008060008060008060008030600660009054906101000a90046001600160a01b0316600380549050601154600d54600e54601354601554601054601454601254600160029054906101000a90046001600160a01b03166001600160a01b031663d6a45aa56040518163ffffffff1660e01b815260040160206040518083038186803b15801561315957600080fd5b505afa15801561316d573d6000803e3d6000fd5b505050506040513d602081101561318357600080fd5b5051600754613190610d8f565b9d509d509d509d509d509d509d509d509d509d509d509d509d509d50909192939495969798999a9b9c9d565b60045460609061326357601c8054604080516020601f6002600019610100600188161502019095169490940493840181900481028201810190925282815261325e93909290918301828280156132535780601f1061322857610100808354040283529160200191613253565b820191906000526020600020905b81548152906001019060200180831161323657829003601f168201915b505050505083614ef6565b6132ac565b6004828154811061327057fe5b6000918252602080832090910154604080516001600160a01b039092169282019290925280820192909252805180830382018152606090920190525b92915050565b808201828110156132ac57600080fd5b600061153e83836152af565b60006132d983615323565b156132ef57506001600160a01b038116316132ac565b826001600160a01b03166370a08231836040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561333c57600080fd5b505afa158015613350573d6000803e3d6000fd5b505050506040513d602081101561336657600080fd5b505190506132ac565b6000600160029054906101000a90046001600160a01b03166001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156133bf57600080fd5b505afa1580156133d3573d6000803e3d6000fd5b505050506040513d60208110156133e957600080fd5b5051604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529151919092169163ac41865a916044808301926020929190829003018186803b15801561345657600080fd5b505afa92505050801561347b57506040513d602081101561347657600080fd5b505160015b613487575060006132ac565b90506132ac565b60008061349a85615330565b61350857846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156134d757600080fd5b505afa1580156134eb573d6000803e3d6000fd5b505050506040513d602081101561350157600080fd5b505161350b565b60125b60ff169050600061351b85615330565b61358957846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561355857600080fd5b505afa15801561356c573d6000803e3d6000fd5b505050506040513d602081101561358257600080fd5b505161358c565b60125b60ff169050601282111580156135a3575060128111155b6135f4576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b8082141561360657839250505061153e565b8181111561362e5761362561361b828461366d565b8590600a0a615366565b9250505061153e565b61364561363b838361366d565b8590600a0a614e8f565b9695505050505050565b600061153e8261366785670de0b6b3a7640000615366565b90614e8f565b808203828111156132ac57600080fd5b600154604080517f5b14f18300000000000000000000000000000000000000000000000000000000815230600482015290516137a8926201000090046001600160a01b031691635b14f183916024808301926020929190829003018186803b1580156136e857600080fd5b505afa1580156136fc573d6000803e3d6000fd5b505050506040513d602081101561371257600080fd5b505115806137a15750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561376957600080fd5b505afa15801561377d573d6000803e3d6000fd5b505050506040513d602081101561379357600080fd5b50516001600160a01b031633145b60536137aa565b565b816116c2576116c28161538a565b6000806137c5858461336f565b90506137d481151560626137aa565b60006137ea86856137e58886613cbe565b61348e565b9050600061381e6138176020546000141561380c576658d15e17628000613810565b6020545b8490613cbe565b839061366d565b9050600160029054906101000a90046001600160a01b03166001600160a01b031663e6e605136040518163ffffffff1660e01b815260040160206040518083038186803b15801561386e57600080fd5b505afa158015613882573d6000803e3d6000fd5b505050506040513d602081101561389857600080fd5b5051604080517ffa1ca8200000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b038a81166024830152604482018a90528881166064830152608482018590529151919092169163fa1ca8209160a480830192600092919082900301818387803b15801561391a57600080fd5b505af115801561392e573d6000803e3d6000fd5b50929998505050505050505050565b60055460408051631f0b96b960e31b815290516137a8926001600160a01b031691829163f85cb5c891600480820192602092909190829003018186803b158015612f4657600080fd5b6000805b60025460ff82161015613a6b578180613a615750600160029054906101000a90046001600160a01b03166001600160a01b0316632010419860028360ff16815481106139d257fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015613a2957600080fd5b505afa158015613a3d573d6000803e3d6000fd5b505050506040513d6020811015613a5357600080fd5b50516001600160a01b031633145b915060010161398a565b50613a7781604c6137aa565b50565b600154604080517f411137c300000000000000000000000000000000000000000000000000000000815233600482015290516137a8926201000090046001600160a01b03169163411137c3916024808301926020929190829003018186803b158015613ae557600080fd5b505afa158015613af9573d6000803e3d6000fd5b505050506040513d6020811015613b0f57600080fd5b505160126137aa565b613b376009546000148015613b305750600f5460ff16155b60386137aa565b600554604080517fb2644e6600000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b039092169163b2644e669160248082019260009290919082900301818387803b158015613b9c57600080fd5b505af1158015613bb0573d6000803e3d6000fd5b50505050565b613bbe61367d565b8115613c315773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015613c1357600080fd5b505af1158015613c27573d6000803e3d6000fd5b50505050506116c2565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015613c8b57600080fd5b505af1158015613c9f573d6000803e3d6000fd5b505050505050565b600080821215613cba57816000036132ac565b5090565b600061153e670de0b6b3a76400006136678585615366565b6006546137a8906001600160a01b0316331480613d745750600160029054906101000a90046001600160a01b03166001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015613d3c57600080fd5b505afa158015613d50573d6000803e3d6000fd5b505050506040513d6020811015613d6657600080fd5b50516001600160a01b031633145b60206137aa565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b158015613dc057600080fd5b505afa158015613dd4573d6000803e3d6000fd5b505050506040513d6020811015613dea57600080fd5b505160025490915060009081905b801561403a57600154600280546000926201000090046001600160a01b0316916320104198916000198601908110613e2c57fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b158015613e8357600080fd5b505afa158015613e97573d6000803e3d6000fd5b505050506040513d6020811015613ead57600080fd5b505190506001600160a01b03811663bdd7a79c8686868a613ed160001989016131bc565b600554600380546001600160a01b03909216916000198c01908110613ef257fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518863ffffffff1660e01b815260040180886001600160a01b031681526020018781526020018660ff16815260200185815260200180602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b83811015613f9e578181015183820152602001613f86565b50505050905090810190601f168015613fcb5780820380516001836020036101000a031916815260200191505b5098505050505050505050606060405180830381600087803b158015613ff057600080fd5b505af1158015614004573d6000803e3d6000fd5b505050506040513d606081101561401a57600080fd5b508051602082015160409092015190965090945092505060001901613df8565b50600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561408957600080fd5b505afa15801561409d573d6000803e3d6000fd5b505050506040513d60208110156140b357600080fd5b50516001600160a01b038481169116148015906140d05750600082115b15613bb0576001600160a01b038316614106576140ee600147613bb6565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292505b600560009054906101000a90046001600160a01b03166001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561415457600080fd5b505afa158015614168573d6000803e3d6000fd5b505050506040513d602081101561417e57600080fd5b50516001600160a01b03848116911614613bb05761425483846001600160a01b03166370a08231306040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156141e357600080fd5b505afa1580156141f7573d6000803e3d6000fd5b505050506040513d602081101561420d57600080fd5b505160055460408051631f0b96b960e31b815290516001600160a01b039092169163f85cb5c891600480820192602092909190829003018186803b1580156114cf57600080fd5b5050505050565b60055460408051631f0b96b960e31b815290516000926001600160a01b03169163f85cb5c8916004808301926020929190829003018186803b1580156142a057600080fd5b505afa1580156142b4573d6000803e3d6000fd5b505050506040513d60208110156142ca57600080fd5b50516013549091506000906142f3906142e290614e2f565b6142ed601554614e2f565b906153dd565b905060008060006013546015541161430c57600061431b565b60135460155461431b9161366d565b90506013546015541061445c576143ac81600160029054906101000a90046001600160a01b03166001600160a01b031663568c08136040518163ffffffff1660e01b815260040160206040518083038186803b15801561437a57600080fd5b505afa15801561438e573d6000803e3d6000fd5b505050506040513d60208110156143a457600080fd5b505190613cbe565b9250821561444257614442600160029054906101000a90046001600160a01b03166001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561440557600080fd5b505afa158015614419573d6000803e3d6000fd5b505050506040513d602081101561442f57600080fd5b50516001600160a01b038716908561522f565b61445561444e84614e2f565b85906153dd565b93506144a0565b61449d6718493fba64ef000061449761448e60115461448860135460155461364f90919063ffffffff16565b90613cbe565b6011549061366d565b90615442565b91505b6005546015546144cf916001600160a01b0316906144be908661366d565b6001600160a01b038816919061522f565b601d546001600160a01b031661457957600160029054906101000a90046001600160a01b03166001600160a01b0316633f2a55406040518163ffffffff1660e01b815260040160206040518083038186803b15801561452d57600080fd5b505afa158015614541573d6000803e3d6000fd5b505050506040513d602081101561455757600080fd5b5051601d80546001600160a01b0319166001600160a01b039092169190911790555b601d54600554604080517f070e8a4a0000000000000000000000000000000000000000000000000000000081526001600160a01b0392831660048201529051600093929092169163070e8a4a91602480820192606092909190829003018186803b1580156145e657600080fd5b505afa1580156145fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250606081101561461f57600080fd5b506005549091506001600160a01b03166350a9600361465a8661465461464d86600260200201518890613cbe565b879061366d565b9061366d565b87866040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b1580156146a057600080fd5b505af11580156146b4573d6000803e3d6000fd5b5050601d5460135460408051636b8bd28360e11b8152600481019290925260006024830181905290516001600160a01b03909316945063d717a5069350604480830193919282900301818387803b15801561470e57600080fd5b505af1158015614722573d6000803e3d6000fd5b5050601d54604080517f9de9a05200000000000000000000000000000000000000000000000000000000815230600482015290516001600160a01b039092169350639de9a0529250602480820192602092909190829003018186803b15801561478a57600080fd5b505afa15801561479e573d6000803e3d6000fd5b505050506040513d60208110156147b457600080fd5b50516bffffffffffffffffffffffff16601955505050505050565b6000805b60035481101561482057826001600160a01b0316600382815481106147f457fe5b6000918252602090912001546001600160a01b031614156148185760019150614820565b6001016147d3565b506000600160029054906101000a90046001600160a01b03166001600160a01b031663e6e605136040518163ffffffff1660e01b815260040160206040518083038186803b15801561487157600080fd5b505afa158015614885573d6000803e3d6000fd5b505050506040513d602081101561489b57600080fd5b5051905061243d82806149235750816001600160a01b0316632d108f41856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156148f657600080fd5b505afa15801561490a573d6000803e3d6000fd5b505050506040513d602081101561492057600080fd5b50515b60216137aa565b60606149406001600160a01b038516838561545e565b905082846001600160a01b03167f2a936dbabeaea30adc1ddad138b1958497988474bef8b09a29411f0105ab8ab28484604051808060200180602001838103835285818151815260200191508051906020019080838360005b838110156149b1578181015183820152602001614999565b50505050905090810190601f1680156149de5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b83811015614a115781810151838201526020016149f9565b50505050905090810190601f168015614a3e5780820380516001836020036101000a031916815260200191505b5094505050505060405180910390a39392505050565b801580614af35750604080517fdd62ed3e0000000000000000000000000000000000000000000000000000000081523060048201526001600160a01b03848116602483015291519185169163dd62ed3e91604480820192602092909190829003018186803b158015614ac557600080fd5b505afa158015614ad9573d6000803e3d6000fd5b505050506040513d6020811015614aef57600080fd5b5051155b614b2e5760405162461bcd60e51b8152600401808060200182810382526036815260200180615da16036913960400191505060405180910390fd5b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261243d908490615484565b6000614bb930615535565b15905090565b614cb9600083118015614cb25750600554604080517fc40868930000000000000000000000000000000000000000000000000000000081526001600160a01b03858116600483015291518693614caf93169163c4086893916024808301926020929190829003018186803b158015614c3657600080fd5b505afa158015614c4a573d6000803e3d6000fd5b505050506040513d6020811015614c6057600080fd5b5051600554604080516370a0823160e01b81526001600160a01b038881166004830152915191909216916370a08231916024808301926020929190829003018186803b15801561204957600080fd5b10155b60076137aa565b50601155565b600554604080517f95cdbedb0000000000000000000000000000000000000000000000000000000081529051614dd9926001600160a01b0316916395cdbedb916004808301926020929190829003018186803b158015614d1e57600080fd5b505afa158015614d32573d6000803e3d6000fd5b505050506040513d6020811015614d4857600080fd5b50518210801590614dd25750600560009054906101000a90046001600160a01b03166001600160a01b031663297ce5986040518163ffffffff1660e01b815260040160206040518083038186803b158015614da257600080fd5b505afa158015614db6573d6000803e3d6000fd5b505050506040513d6020811015614dcc57600080fd5b50518211155b60276137aa565b601055565b614df46702c68af0bb14000082111560666137aa565b602055565b614e0f67016345785d8a000082111560676137aa565b601f55565b614e2a670de0b6b3a7640000821115605d6137aa565b601e55565b60007f80000000000000000000000000000000000000000000000000000000000000008210613cba5760405162461bcd60e51b8152600401808060200182810382526028815260200180615d2b6028913960400191505060405180910390fd5b6000808211614ee5576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381614eee57fe5b049392505050565b606061153e8383604002604061553b565b600f54614f1d90610100900460ff16602c6137aa565b614f41601254614f38856013546132b290919063ffffffff16565b1115602d6137aa565b600554604080517f3deddb3f0000000000000000000000000000000000000000000000000000000081529051614fe3926001600160a01b031691633deddb3f916004808301926020929190829003018186803b158015614fa057600080fd5b505afa158015614fb4573d6000803e3d6000fd5b505050506040513d6020811015614fca57600080fd5b5051600854614fda90429061366d565b1015602f6137aa565b600554604080517f4422b0dc0000000000000000000000000000000000000000000000000000000081526004810186905290516001600160a01b0390921691634422b0dc9160248082019260009290919082900301818387803b15801561504957600080fd5b505af115801561505d573d6000803e3d6000fd5b505060135461506f92509050846132b2565b60135561507b8361565f565b6009546150fb5742600955600554604080516318160ddd60e01b815290516001600160a01b03909216916318160ddd91600480820192602092909190829003018186803b1580156150cb57600080fd5b505afa1580156150df573d6000803e3d6000fd5b505050506040513d60208110156150f557600080fd5b50516016555b601d5460408051636b8bd28360e11b8152600481018690526001602482015290516001600160a01b039092169163d717a5069160448082019260009290919082900301818387803b15801561514f57600080fd5b505af1158015615163573d6000803e3d6000fd5b505060055460408051634d5b1ba160e11b81526001600160a01b038681166004830152602482018890529151919092169350639ab637429250604480830192600092919082900301818387803b1580156151bc57600080fd5b505af11580156151d0573d6000803e3d6000fd5b505042600a819055600554604080518881526020810188905280820193909352516001600160a01b0390911693507f7f4467a4ca8be02143a9253e6c31362c7bc755929e5c68faf659636d307f1b8c92509081900360600190a2505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905261243d908490615484565b6000816014018351101561530a576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b6001600160a01b03161590565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806132ac5750506001600160a01b03161590565b60008215806153815750508181028183828161537e57fe5b04145b6132ac57600080fd5b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008183038183128015906153f25750838113155b80615407575060008312801561540757508381135b61153e5760405162461bcd60e51b8152600401808060200182810382526024815260200180615d536024913960400191505060405180910390fd5b6000670de0b6b3a76400006154578484615366565b81614eee57fe5b606061153b848484604051806060016040528060298152602001615d026029913961590b565b60006154d9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316615a669092919063ffffffff16565b80519091501561243d578080602001905160208110156154f857600080fd5b505161243d5760405162461bcd60e51b815260040180806020018281038252602a815260200180615d77602a913960400191505060405180910390fd5b3b151590565b60608182601f011015615595576040805162461bcd60e51b815260206004820152600e60248201527f736c6963655f6f766572666c6f77000000000000000000000000000000000000604482015290519081900360640190fd5b818301845110156155ed576040805162461bcd60e51b815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015290519081900360640190fd5b60608215801561560c5760405191506000825260208201604052615656565b6040519150601f8416801560200281840101858101878315602002848b0101015b8183101561564557805183526020928301920161562d565b5050858452601f01601f1916604052505b50949350505050565b60055460408051631f0b96b960e31b8152905183926000926001600160a01b039091169163f85cb5c891600480820192602092909190829003018186803b1580156156a957600080fd5b505afa1580156156bd573d6000803e3d6000fd5b505050506040513d60208110156156d357600080fd5b505190506000805b60025481101561425457600154600280546000926201000090046001600160a01b0316916320104198918590811061570f57fe5b90600052602060002090602091828204019190069054906101000a900460ff166040518263ffffffff1660e01b8152600401808260ff16815260200191505060206040518083038186803b15801561576657600080fd5b505afa15801561577a573d6000803e3d6000fd5b505050506040513d602081101561579057600080fd5b505190506001600160a01b0381166387033f618587866157af876131bc565b600554600380546001600160a01b03909216918a9081106157cc57fe5b9060005260206000200160009054906101000a90046001600160a01b03166040518763ffffffff1660e01b815260040180876001600160a01b031681526020018681526020018560ff16815260200180602001846001600160a01b03168152602001836001600160a01b03168152602001828103825285818151815260200191508051906020019080838360005b8381101561587257818101518382015260200161585a565b50505050905090810190601f16801561589f5780820380516001836020036101000a031916815260200191505b50975050505050505050606060405180830381600087803b1580156158c357600080fd5b505af11580156158d7573d6000803e3d6000fd5b505050506040513d60608110156158ed57600080fd5b508051602082015160409092015191965094509250506001016156db565b60608247101561594c5760405162461bcd60e51b8152600401808060200182810382526026815260200180615cae6026913960400191505060405180910390fd5b61595585615535565b6159a6576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106159e45780518252601f1990920191602091820191016159c5565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114615a46576040519150601f19603f3d011682016040523d82523d6000602084013e615a4b565b606091505b5091509150615a5b828286615a75565b979650505050505050565b606061153b848460008561590b565b60608315615a8457508161153e565b825115615a945782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015615ade578181015183820152602001615ac6565b50505050905090810190601f168015615b0b5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b828054828255906000526020600020908101928215615b6c579160200282015b82811115615b6c5781546001600160a01b0319166001600160a01b03843516178255602090920191600190910190615b39565b50613cba929150615c98565b82805482825590600052602060002090601f01602090048101928215615b6c5791602002820160005b83821115615be257833560ff1683826101000a81548160ff021916908360ff1602179055509260200192600101602081600001049283019260010302615ba1565b8015615c0f5782816101000a81549060ff0219169055600101602081600001049283019260010302615be2565b5050613cba929150615c98565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282615c525760008555615b6c565b82601f10615c6b57805160ff1916838001178555615b6c565b82800160010185558215615b6c579182015b82811115615b6c578251825591602001919060010190615c7d565b5b80821115613cba5760008155600101615c9956fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c656453616665436173743a2076616c756520646f65736e27742066697420696e20616e20696e743235365369676e6564536166654d6174683a207375627472616374696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f7420737563636565645361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365a264697066735822122051843c1d6683057b6778de0854a86971226167846a51f2f13282cf0c07d8503f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeStrategy(uint256,uint256)": {
        "params": {
          "_capital": "The capital to allocate to this strategy.",
          "_fee": "The fee paid to keeper to compensate the gas cost."
        }
      },
      "expireStrategy(uint256)": {
        "params": {
          "_fee": "The keeper fee"
        }
      },
      "finalizeStrategy(uint256,string)": {
        "params": {
          "_fee": "The fee paid to keeper to compensate the gas cost",
          "_tokenURI": "URL with the JSON for the strategy"
        }
      },
      "getNAV()": {
        "returns": {
          "_0": "_nav           NAV of the strategy"
        }
      },
      "getUserVotes(address)": {
        "params": {
          "_address": "Address of the contributor"
        },
        "returns": {
          "_0": "_votes            Number of votes cast"
        }
      },
      "handleWeth(bool,uint256)": {
        "params": {
          "_isDeposit": "Whether is a deposit or withdraw",
          "_wethAmount": "Amount to deposit or withdraw"
        }
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "params": {
          "_controller": "Address of the controller",
          "_expectedReturn": "Expected return",
          "_garden": "Address of the garden",
          "_maxAllocationPercentage": "Max allocation percentage of garden capital",
          "_maxCapitalRequested": "Max Capital requested denominated in the reserve asset (0 to be unlimited)",
          "_maxGasFeePercentage": "Max gas fee percentage of garden capital",
          "_maxTradeSlippagePercentage": "Max slippage allowed per trade in % of capital",
          "_stake": "Stake with garden participations absolute amounts 1e18",
          "_strategist": "Address of the strategist",
          "_strategyDuration": "Strategy duration in seconds"
        }
      },
      "invokeFromIntegration(address,uint256,bytes)": {
        "params": {
          "_data": "Encoded function selector and arguments",
          "_target": "Address of the smart contract to call",
          "_value": "Quantity of Ether to provide the call (typically 0)"
        },
        "returns": {
          "_0": "_returnValue           Bytes encoded return value"
        }
      },
      "resolveVoting(address[],int256[],uint256)": {
        "params": {
          "_fee": "The fee paid to keeper to compensate the gas cost",
          "_voters": "An array of garden member who voted on strategy.",
          "_votes": "An array of votes by on strategy by garden members."
        }
      },
      "setData(uint8[],address[],bytes)": {
        "params": {
          "_opEncodedData": "Bytes with the params for the op in the same position in the opTypes array",
          "_opIntegrations": "Addresses with the integration for each op",
          "_opTypes": "An array with the op types"
        }
      },
      "sweep(address)": {
        "params": {
          "_token": "Address of the token to sweep"
        }
      },
      "trade(address,uint256,address)": {
        "params": {
          "_receiveToken": "Token to receive",
          "_sendQuantity": "Amount of tokens to send",
          "_sendToken": "Token to exchange"
        }
      },
      "unwindStrategy(uint256,uint256)": {
        "params": {
          "_amountToUnwind": "The amount of capital to unwind",
          "_strategyNAV": "NAV of the strategy to unwind."
        }
      },
      "updateParams(uint256[4])": {
        "details": "_params[0]  duration   _params[1]  maxGasFeePercentage   _params[2]  maxTradeSlippagePercentage   _params[3]  maxAllocationPercentage",
        "params": {
          "_params": "New params"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "deleteCandidateStrategy()": {
        "notice": "Delete a candidate strategy by the strategist"
      },
      "executeStrategy(uint256,uint256)": {
        "notice": "Executes an strategy that has been activated and gone through the cooldown period."
      },
      "expireStrategy(uint256)": {
        "notice": "Expires a candidate that has spent more than CANDIDATE_PERIOD without reaching quorum"
      },
      "finalizeStrategy(uint256,string)": {
        "notice": "Exits from an executed strategy. Returns balance back to the garden and sets the capital aside for withdrawals in ETH. Pays the keeper. Updates the reserve asset position accordingly."
      },
      "getNAV()": {
        "notice": "Gets the NAV of assets under management. It is the sum of the NAV of all the operations"
      },
      "getOperationByIndex(uint8)": {
        "notice": "Get the operation params by index"
      },
      "getOperationsCount()": {
        "notice": "Returns the number of operations in this strategy"
      },
      "getStrategyDetails()": {
        "notice": "Get the non-state related details of a Strategy"
      },
      "getStrategyRewardsContext()": {
        "notice": "Get mining context details of a Strategy"
      },
      "getStrategyState()": {
        "notice": "Get the state of a Strategy"
      },
      "getUserVotes(address)": {
        "notice": "Gets the votes casted by the contributor in this strategy"
      },
      "handleWeth(bool,uint256)": {
        "notice": "Deposits or withdraws weth from an operation in this context"
      },
      "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Initializes the strategy for a garden"
      },
      "invokeApprove(address,address,uint256)": {
        "notice": "Helper to invoke Approve on ERC20 from integrations in the strategy context"
      },
      "invokeFromIntegration(address,uint256,bytes)": {
        "notice": "Helper to invoke a call to an external contract from integrations in the strategy context"
      },
      "isStrategyActive()": {
        "notice": "Returns whether this strategy is currently active or not"
      },
      "resolveVoting(address[],int256[],uint256)": {
        "notice": "Adds off-chain voting results on-chain."
      },
      "setData(uint8[],address[],bytes)": {
        "notice": "Sets the data for the operations of this strategy"
      },
      "sweep(address)": {
        "notice": "Any tokens (other than the target) that are sent here by mistake are recoverable by contributors Converts it to the reserve asset and sends it to the garden."
      },
      "trade(address,uint256,address)": {
        "notice": "Function that calculates the price using the oracle and executes a trade. Must call the exchange to get the price and pass minReceiveQuantity accordingly."
      },
      "unwindStrategy(uint256,uint256)": {
        "notice": "Partially unwinds an strategy. Triggered from an immediate withdraw in the Garden."
      },
      "updateParams(uint256[4])": {
        "notice": "Allows strategist to update some strategy params"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5975,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 492,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 41935,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "controller",
        "offset": 2,
        "slot": "1",
        "type": "t_contract(IBabController)34227"
      },
      {
        "astId": 41938,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "opTypes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint8)dyn_storage"
      },
      {
        "astId": 41941,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "opIntegrations",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 41944,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "opDatas",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 41947,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "garden",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IGarden)34731"
      },
      {
        "astId": 41950,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "strategist",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 41953,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "enteredAt",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 41956,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "enteredCooldownAt",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 41958,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "executedAt",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 41960,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "updatedAt",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 41962,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "exitedAt",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 41965,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "voters",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 41968,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "totalPositiveVotes",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 41971,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "totalNegativeVotes",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 41973,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "finalized",
        "offset": 0,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 41975,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "active",
        "offset": 1,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 41977,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "dataSet",
        "offset": 2,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 41979,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "hasMiningStarted",
        "offset": 3,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 41982,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "duration",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 41985,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "stake",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 41988,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "maxCapitalRequested",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 41991,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "capitalAllocated",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 41994,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "expectedReturn",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 41997,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "capitalReturned",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 41999,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "startingGardenSupply",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 42002,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "tokensNeeded",
        "offset": 0,
        "slot": "23",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 42005,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "tokenAmountsNeeded",
        "offset": 0,
        "slot": "24",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 42008,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "strategyRewards",
        "offset": 0,
        "slot": "25",
        "type": "t_uint256"
      },
      {
        "astId": 42010,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "endingGardenSupply",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 42014,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "votes",
        "offset": 0,
        "slot": "27",
        "type": "t_mapping(t_address,t_int256)"
      },
      {
        "astId": 42017,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "opEncodedData",
        "offset": 0,
        "slot": "28",
        "type": "t_bytes_storage"
      },
      {
        "astId": 42019,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "rewardsDistributor",
        "offset": 0,
        "slot": "29",
        "type": "t_contract(IRewardsDistributor)35423"
      },
      {
        "astId": 42022,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "maxAllocationPercentage",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 42025,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "maxGasFeePercentage",
        "offset": 0,
        "slot": "31",
        "type": "t_uint256"
      },
      {
        "astId": 42028,
        "contract": "contracts/strategies/Strategy.sol:StrategyV14",
        "label": "maxTradeSlippagePercentage",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint8)dyn_storage": {
        "base": "t_uint8",
        "encoding": "dynamic_array",
        "label": "uint8[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IBabController)34227": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_contract(IGarden)34731": {
        "encoding": "inplace",
        "label": "contract IGarden",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsDistributor)35423": {
        "encoding": "inplace",
        "label": "contract IRewardsDistributor",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_int256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}