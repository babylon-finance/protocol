{
  "address": "0x12FF605d212EE3Af7912e68902E654672d671090",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address[4]",
          "name": "_newCreators",
          "type": "address[4]"
        }
      ],
      "name": "addExtraCreators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_delegatee",
          "type": "address"
        }
      ],
      "name": "delegateVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_reserveAsset",
          "type": "address"
        },
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_creator",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256[]",
          "name": "_gardenParams",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_initialContribution",
          "type": "uint256"
        },
        {
          "internalType": "bool[]",
          "name": "_publicGardenStrategistsStewards",
          "type": "bool[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "keeperDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "makeGardenPublic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "privateGarden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_publicStrategists",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_publicStewards",
          "type": "bool"
        }
      ],
      "name": "setPublicRights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCreator",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_index",
          "type": "uint8"
        }
      ],
      "name": "transferCreatorRights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newCreator",
          "type": "address"
        },
        {
          "internalType": "address[4]",
          "name": "_newCreators",
          "type": "address[4]"
        }
      ],
      "name": "updateCreators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[11]",
          "name": "_newParams",
          "type": "uint256[11]"
        }
      ],
      "name": "updateGardenParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6a27976dc0ee8bb71932d3f7197c97bf48cec0ebbaad616029aea41246c7eb6d",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x12FF605d212EE3Af7912e68902E654672d671090",
    "transactionIndex": 69,
    "gasUsed": "1807154",
    "logsBloom": "0x
    "blockHash": "0x6b74651db59a78f68149630a451ad2dc66219be466714d662c7b37c34845cc7b",
    "transactionHash": "0x6a27976dc0ee8bb71932d3f7197c97bf48cec0ebbaad616029aea41246c7eb6d",
    "logs": [],
    "blockNumber": 14253873,
    "cumulativeGasUsed": "6192947",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "00dca416874455871275f632bb5d2c2b",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_newCreators\",\"type\":\"address[4]\"}],\"name\":\"addExtraCreators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_delegatee\",\"type\":\"address\"}],\"name\":\"delegateVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_reserveAsset\",\"type\":\"address\"},{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_creator\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256[]\",\"name\":\"_gardenParams\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_initialContribution\",\"type\":\"uint256\"},{\"internalType\":\"bool[]\",\"name\":\"_publicGardenStrategistsStewards\",\"type\":\"bool[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"keeperDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"makeGardenPublic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"privateGarden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_publicStrategists\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_publicStewards\",\"type\":\"bool\"}],\"name\":\"setPublicRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_index\",\"type\":\"uint8\"}],\"name\":\"transferCreatorRights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newCreator\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_newCreators\",\"type\":\"address[4]\"}],\"name\":\"updateCreators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[11]\",\"name\":\"_newParams\",\"type\":\"uint256[11]\"}],\"name\":\"updateGardenParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"delegateVotes(address,address)\":{\"params\":{\"_delegatee\":\"Address to delegate token voting power into\",\"_token\":\"Address of BABL or any other ERC20Comp related governance token\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"initialize(address,address,address,string,string,uint256[],uint256,bool[])\":{\"params\":{\"_controller\":\"Address of the controller\",\"_creator\":\"Address of the creator\",\"_gardenParams\":\"Array of numeric garden params\",\"_initialContribution\":\"Initial Contribution by the Gardener\",\"_name\":\"Name of the Garden\",\"_publicGardenStrategistsStewards\":\"Public garden, public strategists rights and public stewards rights\",\"_reserveAsset\":\"Address of the reserve asset ERC20\",\"_symbol\":\"Symbol of the Garden\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"updateGardenParams(uint256[11])\":{\"params\":{\"_newParams\":\"New params\"}}},\"title\":\"AdminGardenModule Class that holds common garden-related state and functions\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"delegateVotes(address,address)\":{\"notice\":\"PRIVILEGE FUNCTION to delegate Garden voting power itself into a delegatee To be used by Garden Creator only. Compatible with BABL and COMP and few others ERC20Comp related tokens\"},\"initialize(address,address,address,string,string,uint256[],uint256,bool[])\":{\"notice\":\"When a new Garden is created. All parameter validations are on the BabController contract. Validations are performed already on the BabController. WARN: If the reserve Asset is different than WETH the gardener needs to have approved the controller.\"},\"makeGardenPublic()\":{\"notice\":\"Makes a previously private garden public\"},\"setPublicRights(bool,bool)\":{\"notice\":\"Gives the right to create strategies and/or voting power to garden users\"},\"updateGardenParams(uint256[11])\":{\"notice\":\"Updates Garden Params Can only be called by the creator\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/gardens/AdminGardenModule.sol\":\"AdminGardenModule\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0dd1e9b19801e3e7d900fbf4182d81e1afd23ad7be39504e33df6bbcba91d724\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n    uint256[44] private __gap;\\n}\\n\",\"keccak256\":\"0x506dd0718f9ace50588c13848167df5e04ae16abb56341afb10c31ff149bc79b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        // Check the signature length\\n        if (signature.length != 65) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        }\\n\\n        // Divide the signature in r, s and v variables\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // ecrecover takes the signature parameters, and the only way to get them\\n        // currently is to use assembly.\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            r := mload(add(signature, 0x20))\\n            s := mload(add(signature, 0x40))\\n            v := byte(0, mload(add(signature, 0x60)))\\n        }\\n\\n        return recover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, \\\"ECDSA: invalid signature 's' value\\\");\\n        require(v == 27 || v == 28, \\\"ECDSA: invalid signature 'v' value\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"ECDSA: invalid signature\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * replicates the behavior of the\\n     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\\n     * JSON-RPC method.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n}\\n\",\"keccak256\":\"0x94c4719c16ffb96dd3cdc68f6fbf78105153018adbf382241821e8188e6a4bd5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 { revert(0, returndatasize()) }\\n            default { return(0, returndatasize()) }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internall call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive () external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overriden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {\\n    }\\n}\\n\",\"keccak256\":\"0x0414d54056b3d8f9102ae1142264e9361408397878148203ab7a25cbf6248f08\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/gardens/AdminGardenModule.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/cryptography/ECDSA.sol';\\nimport {ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {SafeDecimalMath} from '../lib/SafeDecimalMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {Errors, _require, _revert} from '../lib/BabylonErrors.sol';\\nimport {AddressArrayUtils} from '../lib/AddressArrayUtils.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\nimport {Math} from '../lib/Math.sol';\\n\\nimport {IPriceOracle} from '../interfaces/IPriceOracle.sol';\\nimport {IRewardsDistributor} from '../interfaces/IRewardsDistributor.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IStrategyFactory} from '../interfaces/IStrategyFactory.sol';\\nimport {IGardenValuer} from '../interfaces/IGardenValuer.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IGardenNFT} from '../interfaces/IGardenNFT.sol';\\nimport {IMardukGate} from '../interfaces/IMardukGate.sol';\\nimport {IWETH} from '../interfaces/external/weth/IWETH.sol';\\nimport {IAdminGarden} from '../interfaces/IGarden.sol';\\nimport {IVoteToken} from '../interfaces/IVoteToken.sol';\\n\\nimport {VTableBeaconProxy} from '../proxy/VTableBeaconProxy.sol';\\nimport {VTableBeacon} from '../proxy/VTableBeacon.sol';\\nimport {ControllerLib} from '../lib/ControllerLib.sol';\\nimport {BaseGardenModule} from './BaseGardenModule.sol';\\n\\n/**\\n * @title AdminGardenModule\\n *\\n * Class that holds common garden-related state and functions\\n */\\ncontract AdminGardenModule is BaseGardenModule, IAdminGarden {\\n    using SafeCast for int256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for int256;\\n    using SafeDecimalMath for int256;\\n\\n    using SafeCast for uint256;\\n    using LowGasSafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    using Address for address;\\n    using AddressArrayUtils for address[];\\n\\n    using SafeERC20 for IERC20;\\n    using ECDSA for bytes32;\\n\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Events ============ */\\n\\n    /* ============ Constants ============ */\\n\\n    // Strategy cooldown period\\n    uint256 private constant MIN_COOLDOWN_PERIOD = 60 seconds;\\n    uint256 private constant MAX_COOLDOWN_PERIOD = 7 days;\\n\\n    uint256 private constant TEN_PERCENT = 1e17;\\n\\n    /* ============ Structs ============ */\\n\\n    /* ============ State Variables ============ */\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Checks if the address passed is a creator in the garden\\n     */\\n    function _onlyCreator(address _creator) private view {\\n        _require(_isCreator(_creator), Errors.ONLY_CREATOR);\\n    }\\n\\n    function _onlyNonZero(address _address) private pure {\\n        _require(_address != address(0), Errors.ADDRESS_IS_ZERO);\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * When a new Garden is created.\\n     * All parameter validations are on the BabController contract. Validations are performed already on the\\n     * BabController.\\n     * WARN: If the reserve Asset is different than WETH the gardener needs to have approved the controller.\\n     *\\n     * @param _reserveAsset                     Address of the reserve asset ERC20\\n     * @param _controller                       Address of the controller\\n     * @param _creator                          Address of the creator\\n     * @param _name                             Name of the Garden\\n     * @param _symbol                           Symbol of the Garden\\n     * @param _gardenParams                     Array of numeric garden params\\n     * @param _initialContribution              Initial Contribution by the Gardener\\n     * @param _publicGardenStrategistsStewards  Public garden, public strategists rights and public stewards rights\\n     */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) public payable override initializer {\\n        __ERC20_init(_name, _symbol);\\n\\n        controller = _controller;\\n        reserveAsset = _reserveAsset;\\n        creator = _creator;\\n\\n        rewardsDistributor = IRewardsDistributor(controller.rewardsDistributor());\\n\\n        _onlyNonZero(address(rewardsDistributor));\\n\\n        privateGarden = !(controller.allowPublicGardens() && _publicGardenStrategistsStewards[0]);\\n        publicStrategists = !privateGarden && _publicGardenStrategistsStewards[1];\\n        publicStewards = !privateGarden && _publicGardenStrategistsStewards[2];\\n\\n        _require(\\n            _gardenParams[3] > 0 &&\\n                _initialContribution >= _gardenParams[3] &&\\n                _initialContribution <= _gardenParams[0],\\n            Errors.MIN_CONTRIBUTION\\n        );\\n\\n        gardenInitializedAt = block.timestamp;\\n\\n        _updateGardenParams(\\n            _gardenParams[0],\\n            _gardenParams[1],\\n            _gardenParams[2],\\n            _gardenParams[3],\\n            _gardenParams[4],\\n            _gardenParams[5],\\n            _gardenParams[6],\\n            _gardenParams[7],\\n            _gardenParams[8],\\n            _gardenParams[9],\\n            _gardenParams[10]\\n        );\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /*\\n     * Creator transfer his creator rights to another account.\\n     * Must be a creator or an aux creator\\n     * @param _newCreator  New creator address\\n     * @param _index       Index of the creator if it is in the extra\\n     */\\n    function transferCreatorRights(address _newCreator, uint8 _index) external override {\\n        _onlyCreator(msg.sender);\\n        _require(!_isCreator(_newCreator), Errors.NEW_CREATOR_MUST_NOT_EXIST);\\n        // Make sure creator can still have normal permissions after renouncing\\n        // Creator can only renounce to 0x in public gardens\\n        _require(_newCreator != address(0) || !privateGarden, Errors.CREATOR_CANNOT_RENOUNCE);\\n        if (msg.sender == creator) {\\n            creator = _newCreator;\\n            return;\\n        }\\n        _require(extraCreators[_index] == msg.sender, Errors.ONLY_CREATOR);\\n        extraCreators[_index] = _newCreator;\\n    }\\n\\n    /*\\n     * Governance can transfer garden owners to a different owner if original creator renounced\\n     * Must be a creator or an aux creator\\n     * @param _newCreator   New creator address\\n     * @param _newCreators  Addresses of the new creators\\n     */\\n    function updateCreators(address _newCreator, address[MAX_EXTRA_CREATORS] memory _newCreators) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        // Make sure creator can still have normal permissions after renouncing\\n        // Creator can only renounce to 0x in public gardens\\n        _require(_newCreator != address(0) && creator == address(0), Errors.CREATOR_CANNOT_RENOUNCE);\\n        creator = _newCreator;\\n        extraCreators[0] = _newCreators[0];\\n        extraCreators[1] = _newCreators[1];\\n        extraCreators[2] = _newCreators[2];\\n        extraCreators[3] = _newCreators[3];\\n    }\\n\\n    /**\\n     * Makes a previously private garden public\\n     */\\n    function makeGardenPublic() external override {\\n        _onlyCreator(msg.sender);\\n        _require(privateGarden && controller.allowPublicGardens(), Errors.GARDEN_ALREADY_PUBLIC);\\n        privateGarden = false;\\n    }\\n\\n    /**\\n     * Gives the right to create strategies and/or voting power to garden users\\n     */\\n    function setPublicRights(bool _publicStrategists, bool _publicStewards) external override {\\n        _onlyCreator(msg.sender);\\n        _require(!privateGarden, Errors.GARDEN_IS_NOT_PUBLIC);\\n        publicStrategists = _publicStrategists;\\n        publicStewards = _publicStewards;\\n    }\\n\\n    /*\\n     * Adds extra creators. Only the original creator can call this.\\n     * Can only be called if all the addresses are zero\\n     * @param _newCreators  Addresses of the new creators\\n     */\\n    function addExtraCreators(address[MAX_EXTRA_CREATORS] memory _newCreators) external override {\\n        _require(msg.sender == creator, Errors.ONLY_FIRST_CREATOR_CAN_ADD);\\n        _assignExtraCreator(0, _newCreators[0]);\\n        _assignExtraCreator(1, _newCreators[1]);\\n        _assignExtraCreator(2, _newCreators[2]);\\n        _assignExtraCreator(3, _newCreators[3]);\\n    }\\n\\n    /**\\n     * Updates Garden Params\\n     * Can only be called by the creator\\n     * @param _newParams  New params\\n     */\\n    function updateGardenParams(uint256[11] memory _newParams) external override {\\n        _onlyCreator(msg.sender);\\n        _updateGardenParams(\\n            _newParams[0], // uint256 _maxDepositLimit\\n            _newParams[1], // uint256 _minLiquidityAsset,\\n            _newParams[2], // uint256 _depositHardlock,\\n            _newParams[3], // uint256 _minContribution,\\n            _newParams[4], // uint256 _strategyCooldownPeriod,\\n            _newParams[5], // uint256 _minVotesQuorum,\\n            _newParams[6], // uint256 _minStrategyDuration,\\n            _newParams[7], // uint256 _maxStrategyDuration,\\n            _newParams[8], // uint256 _minVoters\\n            _newParams[9], // uint256 _pricePerShareDecayRate\\n            _newParams[10] // uint256 _pricePerShareDelta\\n        );\\n    }\\n\\n    /**\\n     * PRIVILEGE FUNCTION to delegate Garden voting power itself into a delegatee\\n     * To be used by Garden Creator only.\\n     * Compatible with BABL and COMP and few others ERC20Comp related tokens\\n     * @param _token         Address of BABL or any other ERC20Comp related governance token\\n     * @param _delegatee     Address to delegate token voting power into\\n     */\\n    function delegateVotes(address _token, address _delegatee) external override {\\n        _onlyCreator(msg.sender);\\n        _require(_token != address(0) && _delegatee != address(0), Errors.ADDRESS_IS_ZERO);\\n        IVoteToken(_token).delegate(_delegatee);\\n    }\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     *  Updates Garden params\\n     *\\n     * @param _maxDepositLimit             Max deposit limit\\n     * @param _minLiquidityAsset           Number that represents min amount of liquidity denominated in ETH\\n     * @param _depositHardlock             Number that represents the time deposits are locked for\\n     *                                     an user after he deposits\\n     * @param _minContribution             Min contribution to the garden\\n     * @param _strategyCooldownPeriod      How long after the strategy has been activated, will it be ready\\n     *                                     to be executed\\n     * @param _minVotesQuorum              Percentage of votes needed to activate an strategy (0.01% = 1e14, 1% = 1e16)\\n     * @param _minStrategyDuration         Min duration of an strategy\\n     * @param _maxStrategyDuration         Max duration of an strategy\\n     * @param _minVoters                   The minimum amount of voters needed for quorum\\n     * @param _pricePerShareDecayRate      Decay rate of price per share\\n     * @param _pricePerShareDelta          Base slippage for price per share\\n     */\\n    function _updateGardenParams(\\n        uint256 _maxDepositLimit,\\n        uint256 _minLiquidityAsset,\\n        uint256 _depositHardlock,\\n        uint256 _minContribution,\\n        uint256 _strategyCooldownPeriod,\\n        uint256 _minVotesQuorum,\\n        uint256 _minStrategyDuration,\\n        uint256 _maxStrategyDuration,\\n        uint256 _minVoters,\\n        uint256 _pricePerShareDecayRate,\\n        uint256 _pricePerShareDelta\\n    ) private {\\n        _require(\\n            _minLiquidityAsset >= controller.minLiquidityPerReserve(reserveAsset) && _minLiquidityAsset > 0,\\n            Errors.MIN_LIQUIDITY\\n        );\\n        _require(_depositHardlock > 0, Errors.DEPOSIT_HARDLOCK);\\n        _require(\\n            _strategyCooldownPeriod <= MAX_COOLDOWN_PERIOD && _strategyCooldownPeriod >= MIN_COOLDOWN_PERIOD,\\n            Errors.NOT_IN_RANGE\\n        );\\n        _require(_minVotesQuorum >= TEN_PERCENT.div(2) && _minVotesQuorum <= TEN_PERCENT.mul(5), Errors.VALUE_TOO_LOW);\\n        _require(\\n            _maxStrategyDuration >= _minStrategyDuration &&\\n                _minStrategyDuration >= 1 days &&\\n                _maxStrategyDuration <= 500 days,\\n            Errors.DURATION_RANGE\\n        );\\n        _require(_minVoters >= 1 && _minVoters < 10, Errors.MIN_VOTERS_CHECK);\\n\\n        maxDepositLimit = _maxDepositLimit;\\n        minContribution = _minContribution;\\n        strategyCooldownPeriod = _strategyCooldownPeriod;\\n        minVotesQuorum = _minVotesQuorum;\\n        minVoters = _minVoters;\\n        minStrategyDuration = _minStrategyDuration;\\n        maxStrategyDuration = _maxStrategyDuration;\\n        minLiquidityAsset = _minLiquidityAsset;\\n        depositHardlock = _depositHardlock;\\n        pricePerShareDecayRate = _pricePerShareDecayRate;\\n        pricePerShareDelta = _pricePerShareDelta;\\n    }\\n\\n    // Checks if an address is a creator\\n    function _isCreator(address _creator) private view returns (bool) {\\n        return\\n            _creator != address(0) &&\\n            (extraCreators[0] == _creator ||\\n                extraCreators[1] == _creator ||\\n                extraCreators[2] == _creator ||\\n                extraCreators[3] == _creator ||\\n                _creator == creator);\\n    }\\n\\n    // Assign extra creators\\n    function _assignExtraCreator(uint8 _index, address _newCreator) private {\\n        _require(!_isCreator(_newCreator), Errors.NEW_CREATOR_MUST_NOT_EXIST);\\n        _require(extraCreators[_index] == address(0), Errors.NEW_CREATOR_MUST_NOT_EXIST);\\n        extraCreators[_index] = _newCreator;\\n    }\\n}\\n\",\"keccak256\":\"0x6c8692af8e0c04935fe53fe471f61e83a31a38e9801d5645cea96ea1742ab2e1\",\"license\":\"Apache License\"},\"contracts/gardens/BaseGardenModule.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\nimport {ECDSA} from '@openzeppelin/contracts/cryptography/ECDSA.sol';\\nimport {ERC20Upgradeable} from '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol';\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {SafeDecimalMath} from '../lib/SafeDecimalMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {Errors, _require, _revert} from '../lib/BabylonErrors.sol';\\nimport {AddressArrayUtils} from '../lib/AddressArrayUtils.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\nimport {Math} from '../lib/Math.sol';\\n\\nimport {IPriceOracle} from '../interfaces/IPriceOracle.sol';\\nimport {IRewardsDistributor} from '../interfaces/IRewardsDistributor.sol';\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IStrategyFactory} from '../interfaces/IStrategyFactory.sol';\\nimport {IGardenValuer} from '../interfaces/IGardenValuer.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IGardenNFT} from '../interfaces/IGardenNFT.sol';\\nimport {IMardukGate} from '../interfaces/IMardukGate.sol';\\nimport {IWETH} from '../interfaces/external/weth/IWETH.sol';\\n\\nimport {VTableBeaconProxy} from '../proxy/VTableBeaconProxy.sol';\\nimport {VTableBeacon} from '../proxy/VTableBeacon.sol';\\n\\n/**\\n * @title BaseGardenModule\\n *\\n * Class that every GardenModule should inherit\\n */\\ncontract BaseGardenModule is ERC20Upgradeable, ReentrancyGuard {\\n    /* ============ Events ============ */\\n\\n    /* ============ Constants ============ */\\n\\n    uint8 internal constant MAX_EXTRA_CREATORS = 4;\\n\\n    /* ============ Structs ============ */\\n\\n    struct Contributor {\\n        uint256 lastDepositAt;\\n        uint256 initialDepositAt;\\n        uint256 claimedAt;\\n        uint256 claimedBABL;\\n        uint256 claimedRewards;\\n        uint256 withdrawnSince;\\n        uint256 totalDeposits;\\n        uint256 nonce;\\n    }\\n\\n    /* ============ State Variables ============ */\\n\\n    // Reserve Asset of the garden\\n    address internal reserveAsset;\\n\\n    // Address of the controller\\n    IBabController internal controller;\\n\\n    // Address of the rewards distributor\\n    IRewardsDistributor internal rewardsDistributor;\\n\\n    // The person that creates the garden\\n    address internal creator;\\n\\n    bool internal active; // DEPRECATED;\\n    bool public privateGarden;\\n\\n    uint256 internal principal; // DEPRECATED;\\n\\n    // The amount of funds set aside to be paid as rewards. Should NEVER be spent\\n    // on anything else ever.\\n    uint256 internal reserveAssetRewardsSetAside;\\n\\n    uint256 internal reserveAssetPrincipalWindow; // DEPRECATED\\n    int256 internal absoluteReturns; // Total profits or losses of this garden\\n\\n    // Indicates the minimum liquidity the asset needs to have to be tradable by this garden\\n    uint256 internal minLiquidityAsset;\\n\\n    uint256 internal depositHardlock; // Window of time after deposits when withdraws are disabled for that user\\n    uint256 internal withdrawalsOpenUntil; // DEPRECATED\\n\\n    // Contributors\\n    mapping(address => Contributor) internal contributors;\\n    uint256 internal totalContributors;\\n    uint256 internal maxContributors; // DEPRECATED\\n    uint256 internal maxDepositLimit; // Limits the amount of deposits\\n\\n    uint256 internal gardenInitializedAt; // Garden Initialized at timestamp\\n    // Number of garden checkpoints used to control the garden power and each contributor power with accuracy\\n    uint256 internal pid;\\n\\n    // Min contribution in the garden\\n    uint256 internal minContribution; //wei\\n    uint256 internal minGardenTokenSupply; // DEPRECATED\\n\\n    // Strategies variables\\n    uint256 internal totalStake;\\n    uint256 internal minVotesQuorum; // 10%. (0.01% = 1e14, 1% = 1e16)\\n    uint256 internal minVoters;\\n    uint256 internal minStrategyDuration; // Min duration for an strategy\\n    uint256 internal maxStrategyDuration; // Max duration for an strategy\\n    // Window for the strategy to cooldown after approval before receiving capital\\n    uint256 internal strategyCooldownPeriod;\\n\\n    address[] internal strategies; // Strategies that are either in candidate or active state\\n    address[] internal finalizedStrategies; // Strategies that have finalized execution\\n    mapping(address => bool) internal strategyMapping;\\n    mapping(address => bool) internal isGardenStrategy; // Security control mapping\\n\\n    // Keeper debt in reserve asset if any, repaid upon every strategy finalization\\n    uint256 public keeperDebt;\\n    uint256 internal totalKeeperFees;\\n\\n    // Allow internal strategy creators for certain gardens\\n    bool internal publicStrategists;\\n\\n    // Allow public strategy stewards for certain gardens\\n    bool internal publicStewards;\\n\\n    // Addresses for extra creators\\n    address[MAX_EXTRA_CREATORS] internal extraCreators;\\n\\n    // last recorded price per share of the garden during deposit or withdrawal operation\\n    uint256 internal lastPricePerShare;\\n\\n    // last recorded time of the deposit or withdraw in seconds\\n    uint256 internal lastPricePerShareTS;\\n\\n    // Decay rate of the slippage for pricePerShare over time\\n    uint256 internal pricePerShareDecayRate;\\n\\n    // Base slippage for pricePerShare of the garden\\n    uint256 internal pricePerShareDelta;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ External Getter Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n}\\n\",\"keccak256\":\"0xdfdbf6b58b627e4161a07ed05501493002fd64797d05029faae508b86279c368\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31932d500ed2d16c823a891976dea3e5938ca277aab457ee2419d08f8bd59b7d\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabylonGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributedx under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabylonGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Guestlists\\n */\\ninterface IBabylonGate {\\n    /* ============ Functions ============ */\\n\\n    function setGardenAccess(\\n        address _user,\\n        address _garden,\\n        uint8 _permission\\n    ) external returns (uint256);\\n\\n    function setCreatorPermissions(address _user, bool _canCreate) external returns (uint256);\\n\\n    function grantGardenAccessBatch(\\n        address _garden,\\n        address[] calldata _users,\\n        uint8[] calldata _perms\\n    ) external returns (bool);\\n\\n    function maxNumberOfInvites() external view returns (uint256);\\n\\n    function setMaxNumberOfInvites(uint256 _maxNumberOfInvites) external;\\n\\n    function grantCreatorsInBatch(address[] calldata _users, bool[] calldata _perms) external returns (bool);\\n\\n    function canCreate(address _user) external view returns (bool);\\n\\n    function canJoinAGarden(address _garden, address _user) external view returns (bool);\\n\\n    function canVoteInAGarden(address _garden, address _user) external view returns (bool);\\n\\n    function canAddStrategiesInAGarden(address _garden, address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa576606ca901fdba7fe35d294825f6b3cc23e8e9992e735116d75d352fbb35b\",\"license\":\"Apache License\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xb8b2aef9698f8ac2af013e3f0b71cc3ee3b2cdba0b5cae5e8d7c11e5f4a3039e\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyGarden\\n *\\n * Interface for functions of the garden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n *\\n * Interface for amdin functions of the Garden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[11] memory _newParams) external;\\n}\\n\\n/**\\n * @title IGarden\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IERC20, IERC20Metadata {}\\n\",\"keccak256\":\"0x663712418af72d503dcb6c7a1a7e4c92a56875db90c8c09527a9a23e86fcdca8\",\"license\":\"Apache License\"},\"contracts/interfaces/IGardenNFT.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from './IGarden.sol';\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IGardenNFT\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden NFT.\\n */\\ninterface IGardenNFT {\\n    function grantGardenNFT(address _user) external returns (uint256);\\n\\n    function saveGardenURIAndSeed(\\n        address _garden,\\n        string memory _gardenTokenURI,\\n        uint256 _seed\\n    ) external;\\n\\n    function gardenTokenURIs(address _garden) external view returns (string memory);\\n\\n    function gardenSeeds(address _garden) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8549547423323ef0c5c18a6b6e5d6803f0f41020aaad34bcc1d0dd819ebc71b\",\"license\":\"Apache License\"},\"contracts/interfaces/IGardenValuer.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IGardenValuer {\\n    function calculateGardenValuation(address _garden, address _quoteAsset) external view returns (uint256);\\n\\n    function getLossesGarden(address _garden, uint256 _since) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xdf2ef07a358cfabb034d966e3e6c7dbf963bd4473c910ca2abcfcf5cce72c75c\",\"license\":\"Apache License\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xee03c9274ddf3257e3bfd2bb229fea3412c9105f178e64174f59efeafd53182c\",\"license\":\"Apache License\"},\"contracts/interfaces/IMardukGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IBabylonGate} from './IBabylonGate.sol';\\n\\n/**\\n * @title IMardukGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Gate Guestlist NFT\\n */\\ninterface IMardukGate is IBabylonGate {\\n    /* ============ Functions ============ */\\n\\n    function canAccessBeta(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb815c2f29a9ce054c89cd2f72288c3f2b013b403c68f202bdc055190b02e0c19\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ITokenIdentifier} from './ITokenIdentifier.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateReserves(address[] memory list) external;\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) external;\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) external;\\n\\n    function getCompoundExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x137796623547b5b769d9770baf55efda0a9f7226ed26b162e492b3e3f1629252\",\"license\":\"Apache License\"},\"contracts/interfaces/IRewardsDistributor.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IRewardsDistributor\\n * @author Babylon Finance\\n *\\n * Interface for the rewards distributor in charge of the BABL Mining Program.\\n */\\n\\ninterface IRewardsDistributor {\\n    /* ========== View functions ========== */\\n\\n    function getStrategyRewards(address _strategy) external view returns (uint256);\\n\\n    function getRewards(\\n        address _garden,\\n        address _contributor,\\n        address[] calldata _finalizedStrategies\\n    ) external view returns (uint256[] memory);\\n\\n    function getGardenProfitsSharing(address _garden) external view returns (uint256[3] memory);\\n\\n    function checkMining(uint256 _quarterNum, address _strategy) external view returns (uint256[17] memory);\\n\\n    function estimateUserRewards(address _strategy, address _contributor) external view returns (uint256[] memory);\\n\\n    function estimateStrategyRewards(address _strategy) external view returns (uint256);\\n\\n    function getPriorBalance(\\n        address _garden,\\n        address _contributor,\\n        uint256 _timestamp\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    /* ============ External Functions ============ */\\n\\n    function setProfitRewards(\\n        address _garden,\\n        uint256 _strategistShare,\\n        uint256 _stewardsShare,\\n        uint256 _lpShare\\n    ) external;\\n\\n    function migrateAddressToCheckpoints(address[] memory _garden, bool _toMigrate) external;\\n\\n    function setBABLMiningParameters(uint256[11] memory _newMiningParams) external;\\n\\n    function updateProtocolPrincipal(uint256 _capital, bool _addOrSubstract) external;\\n\\n    function updateGardenPowerAndContributor(\\n        address _garden,\\n        address _contributor,\\n        uint256 _previousBalance,\\n        uint256 _tokenDiff,\\n        bool _addOrSubstract\\n    ) external;\\n\\n    function sendBABLToContributor(address _to, uint256 _babl) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xea36443ec374e34f538a2c97652240b90ba5abc1308f341da01f0eecfb72c2c8\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[5] calldata _params) external;\\n\\n    function sweep(address _token, uint256 _newSlippage) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(\\n        uint256 fee,\\n        string memory _tokenURI,\\n        uint256 _minReserveOut\\n    ) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _overrideSlippage\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0x3219391eb742c240f221f5694cf66d8c22cc587662d9aa35cb244b2a40985829\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategyFactory.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IIntegration} from './IIntegration.sol';\\n\\n/**\\n * @title IStrategyFactory\\n * @author Babylon Finance\\n *\\n * Interface for the strategy factory\\n */\\ninterface IStrategyFactory {\\n    function createStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        address _strategist,\\n        address _garden,\\n        uint256[] calldata _stratParams\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x795c4903f51cf517c84cfbe9e628f7d0f2067c4b91f3cd31d6cff3f9842bb117\",\"license\":\"Apache License\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ Functions ============ */\\n\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external;\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0xa84450c5b6d869a2621ae54488d7e526c8bd019df9fac7e1624d3e8d78c1509b\",\"license\":\"Apache License\"},\"contracts/interfaces/IVoteToken.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVoteToken {\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bool prefix\\n    ) external;\\n\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n    function getMyDelegatee() external view returns (address);\\n\\n    function getDelegatee(address account) external view returns (address);\\n\\n    function getCheckpoints(address account, uint32 id) external view returns (uint32 fromBlock, uint96 votes);\\n\\n    function getNumberOfCheckpoints(address account) external view returns (uint32);\\n}\\n\\ninterface IVoteTokenWithERC20 is IVoteToken, IERC20 {}\\n\",\"keccak256\":\"0xf4f3aa6bdcf6d3dc33e53b01aa6a2bf6543008b1910913e2504f229dab3b381d\",\"license\":\"Apache License\"},\"contracts/interfaces/external/weth/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xacc7980a650b7a753ee51f1bbc0ae4f641e84261bcc02cfdaf87ee8136483684\",\"license\":\"MIT\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title AddressArrayUtils\\n * @author Set Protocol\\n *\\n * Utility functions to handle Address Arrays\\n */\\nlibrary AddressArrayUtils {\\n    /**\\n     * Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(-1), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * Returns true if there are 2 elements that are the same in an array\\n     * @param A The input array to search\\n     * @return Returns boolean for the first occurrence of a duplicate\\n     */\\n    function hasDuplicate(address[] memory A) internal pure returns (bool) {\\n        require(A.length > 0, 'A is empty');\\n\\n        for (uint256 i = 0; i < A.length - 1; i++) {\\n            address current = A[i];\\n            for (uint256 j = i + 1; j < A.length; j++) {\\n                if (current == A[j]) {\\n                    return true;\\n                }\\n            }\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a) internal pure returns (address[] memory) {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        if (!isIn) {\\n            revert('Address not in array.');\\n        } else {\\n            (address[] memory _A, ) = pop(A, index);\\n            return _A;\\n        }\\n    }\\n\\n    /**\\n     * Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index) internal pure returns (address[] memory, address) {\\n        uint256 length = A.length;\\n        require(index < A.length, 'Index must be < A length');\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n\\n    /**\\n     * Returns the combination of the two arrays\\n     * @param A The first array\\n     * @param B The second array\\n     * @return Returns A extended by B\\n     */\\n    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\\n        uint256 aLength = A.length;\\n        uint256 bLength = B.length;\\n        address[] memory newAddresses = new address[](aLength + bLength);\\n        for (uint256 i = 0; i < aLength; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = 0; j < bLength; j++) {\\n            newAddresses[aLength + j] = B[j];\\n        }\\n        return newAddresses;\\n    }\\n\\n    /*\\n      Unfortunately Solidity does not support convertion of the fixed array to dynamic array so these functions are\\n      required. This functionality would be supported in the future so these methods can be removed.\\n    */\\n    function toDynamic(address _one, address _two) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](2);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](3);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        return arr;\\n    }\\n\\n    function toDynamic(\\n        address _one,\\n        address _two,\\n        address _three,\\n        address _four\\n    ) internal pure returns (address[] memory) {\\n        address[] memory arr = new address[](4);\\n        arr[0] = _one;\\n        arr[1] = _two;\\n        arr[2] = _three;\\n        arr[3] = _four;\\n        return arr;\\n    }\\n}\\n\",\"keccak256\":\"0x22f796dac6fcdab1e033d870e152f08d777c81764bfa7aab4a1c9db2cc55403e\",\"license\":\"Apache License\"},\"contracts/lib/BabylonErrors.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// solhint-disable\\n\\n/**\\n * @notice Forked from https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/lib/helpers/BalancerErrors.sol\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAB#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAB#\\\" part is a known constant\\n        // (0x42414223): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414223000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Max deposit limit needs to be under the limit\\n    uint256 internal constant MAX_DEPOSIT_LIMIT = 0;\\n    // Creator needs to deposit\\n    uint256 internal constant MIN_CONTRIBUTION = 1;\\n    // Min Garden token supply >= 0\\n    uint256 internal constant MIN_TOKEN_SUPPLY = 2;\\n    // Deposit hardlock needs to be at least 1 block\\n    uint256 internal constant DEPOSIT_HARDLOCK = 3;\\n    // Needs to be at least the minimum\\n    uint256 internal constant MIN_LIQUIDITY = 4;\\n    // _reserveAssetQuantity is not equal to msg.value\\n    uint256 internal constant MSG_VALUE_DO_NOT_MATCH = 5;\\n    // Withdrawal amount has to be equal or less than msg.sender balance\\n    uint256 internal constant MSG_SENDER_TOKENS_DO_NOT_MATCH = 6;\\n    // Tokens are staked\\n    uint256 internal constant TOKENS_STAKED = 7;\\n    // Balance too low\\n    uint256 internal constant BALANCE_TOO_LOW = 8;\\n    // msg.sender doesn't have enough tokens\\n    uint256 internal constant MSG_SENDER_TOKENS_TOO_LOW = 9;\\n    //  There is an open redemption window already\\n    uint256 internal constant REDEMPTION_OPENED_ALREADY = 10;\\n    // Cannot request twice in the same window\\n    uint256 internal constant ALREADY_REQUESTED = 11;\\n    // Rewards and profits already claimed\\n    uint256 internal constant ALREADY_CLAIMED = 12;\\n    // Value have to be greater than zero\\n    uint256 internal constant GREATER_THAN_ZERO = 13;\\n    // Must be reserve asset\\n    uint256 internal constant MUST_BE_RESERVE_ASSET = 14;\\n    // Only contributors allowed\\n    uint256 internal constant ONLY_CONTRIBUTOR = 15;\\n    // Only controller allowed\\n    uint256 internal constant ONLY_CONTROLLER = 16;\\n    // Only creator allowed\\n    uint256 internal constant ONLY_CREATOR = 17;\\n    // Only keeper allowed\\n    uint256 internal constant ONLY_KEEPER = 18;\\n    // Fee is too high\\n    uint256 internal constant FEE_TOO_HIGH = 19;\\n    // Only strategy allowed\\n    uint256 internal constant ONLY_STRATEGY = 20;\\n    // Only active allowed\\n    uint256 internal constant ONLY_ACTIVE = 21;\\n    // Only inactive allowed\\n    uint256 internal constant ONLY_INACTIVE = 22;\\n    // Address should be not zero address\\n    uint256 internal constant ADDRESS_IS_ZERO = 23;\\n    // Not within range\\n    uint256 internal constant NOT_IN_RANGE = 24;\\n    // Value is too low\\n    uint256 internal constant VALUE_TOO_LOW = 25;\\n    // Value is too high\\n    uint256 internal constant VALUE_TOO_HIGH = 26;\\n    // Only strategy or protocol allowed\\n    uint256 internal constant ONLY_STRATEGY_OR_CONTROLLER = 27;\\n    // Normal withdraw possible\\n    uint256 internal constant NORMAL_WITHDRAWAL_POSSIBLE = 28;\\n    // User does not have permissions to join garden\\n    uint256 internal constant USER_CANNOT_JOIN = 29;\\n    // User does not have permissions to add strategies in garden\\n    uint256 internal constant USER_CANNOT_ADD_STRATEGIES = 30;\\n    // Only Protocol or garden\\n    uint256 internal constant ONLY_PROTOCOL_OR_GARDEN = 31;\\n    // Only Strategist\\n    uint256 internal constant ONLY_STRATEGIST = 32;\\n    // Only Integration\\n    uint256 internal constant ONLY_INTEGRATION = 33;\\n    // Only garden and data not set\\n    uint256 internal constant ONLY_GARDEN_AND_DATA_NOT_SET = 34;\\n    // Only active garden\\n    uint256 internal constant ONLY_ACTIVE_GARDEN = 35;\\n    // Contract is not a garden\\n    uint256 internal constant NOT_A_GARDEN = 36;\\n    // Not enough tokens\\n    uint256 internal constant STRATEGIST_TOKENS_TOO_LOW = 37;\\n    // Stake is too low\\n    uint256 internal constant STAKE_HAS_TO_AT_LEAST_ONE = 38;\\n    // Duration must be in range\\n    uint256 internal constant DURATION_MUST_BE_IN_RANGE = 39;\\n    // Max Capital Requested\\n    uint256 internal constant MAX_CAPITAL_REQUESTED = 41;\\n    // Votes are already resolved\\n    uint256 internal constant VOTES_ALREADY_RESOLVED = 42;\\n    // Voting window is closed\\n    uint256 internal constant VOTING_WINDOW_IS_OVER = 43;\\n    // Strategy needs to be active\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_ACTIVE = 44;\\n    // Max capital reached\\n    uint256 internal constant MAX_CAPITAL_REACHED = 45;\\n    // Capital is less then rebalance\\n    uint256 internal constant CAPITAL_IS_LESS_THAN_REBALANCE = 46;\\n    // Strategy is in cooldown period\\n    uint256 internal constant STRATEGY_IN_COOLDOWN = 47;\\n    // Strategy is not executed\\n    uint256 internal constant STRATEGY_IS_NOT_EXECUTED = 48;\\n    // Strategy is not over yet\\n    uint256 internal constant STRATEGY_IS_NOT_OVER_YET = 49;\\n    // Strategy is already finalized\\n    uint256 internal constant STRATEGY_IS_ALREADY_FINALIZED = 50;\\n    // No capital to unwind\\n    uint256 internal constant STRATEGY_NO_CAPITAL_TO_UNWIND = 51;\\n    // Strategy needs to be inactive\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_INACTIVE = 52;\\n    // Duration needs to be less\\n    uint256 internal constant DURATION_NEEDS_TO_BE_LESS = 53;\\n    // Can't sweep reserve asset\\n    uint256 internal constant CANNOT_SWEEP_RESERVE_ASSET = 54;\\n    // Voting window is opened\\n    uint256 internal constant VOTING_WINDOW_IS_OPENED = 55;\\n    // Strategy is executed\\n    uint256 internal constant STRATEGY_IS_EXECUTED = 56;\\n    // Min Rebalance Capital\\n    uint256 internal constant MIN_REBALANCE_CAPITAL = 57;\\n    // Not a valid strategy NFT\\n    uint256 internal constant NOT_STRATEGY_NFT = 58;\\n    // Garden Transfers Disabled\\n    uint256 internal constant GARDEN_TRANSFERS_DISABLED = 59;\\n    // Tokens are hardlocked\\n    uint256 internal constant TOKENS_HARDLOCKED = 60;\\n    // Max contributors reached\\n    uint256 internal constant MAX_CONTRIBUTORS = 61;\\n    // BABL Transfers Disabled\\n    uint256 internal constant BABL_TRANSFERS_DISABLED = 62;\\n    // Strategy duration range error\\n    uint256 internal constant DURATION_RANGE = 63;\\n    // Checks the min amount of voters\\n    uint256 internal constant MIN_VOTERS_CHECK = 64;\\n    // Ge contributor power error\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_WINDOW = 65;\\n    // Not enough reserve set aside\\n    uint256 internal constant NOT_ENOUGH_RESERVE = 66;\\n    // Garden is already public\\n    uint256 internal constant GARDEN_ALREADY_PUBLIC = 67;\\n    // Withdrawal with penalty\\n    uint256 internal constant WITHDRAWAL_WITH_PENALTY = 68;\\n    // Withdrawal with penalty\\n    uint256 internal constant ONLY_MINING_ACTIVE = 69;\\n    // Overflow in supply\\n    uint256 internal constant OVERFLOW_IN_SUPPLY = 70;\\n    // Overflow in power\\n    uint256 internal constant OVERFLOW_IN_POWER = 71;\\n    // Not a system contract\\n    uint256 internal constant NOT_A_SYSTEM_CONTRACT = 72;\\n    // Strategy vs Garden mismatch\\n    uint256 internal constant STRATEGY_GARDEN_MISMATCH = 73;\\n    // Minimum quarters is 1\\n    uint256 internal constant QUARTERS_MIN_1 = 74;\\n    // Too many strategy operations\\n    uint256 internal constant TOO_MANY_OPS = 75;\\n    // Only operations\\n    uint256 internal constant ONLY_OPERATION = 76;\\n    // Strat params wrong length\\n    uint256 internal constant STRAT_PARAMS_LENGTH = 77;\\n    // Garden params wrong length\\n    uint256 internal constant GARDEN_PARAMS_LENGTH = 78;\\n    // Token names too long\\n    uint256 internal constant NAME_TOO_LONG = 79;\\n    // Contributor power overflows over garden power\\n    uint256 internal constant CONTRIBUTOR_POWER_OVERFLOW = 80;\\n    // Contributor power window out of bounds\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_DEPOSITS = 81;\\n    // Contributor power window out of bounds\\n    uint256 internal constant NO_REWARDS_TO_CLAIM = 82;\\n    // Pause guardian paused this operation\\n    uint256 internal constant ONLY_UNPAUSED = 83;\\n    // Reentrant intent\\n    uint256 internal constant REENTRANT_CALL = 84;\\n    // Reserve asset not supported\\n    uint256 internal constant RESERVE_ASSET_NOT_SUPPORTED = 85;\\n    // Withdrawal/Deposit check min amount received\\n    uint256 internal constant RECEIVE_MIN_AMOUNT = 86;\\n    // Total Votes has to be positive\\n    uint256 internal constant TOTAL_VOTES_HAVE_TO_BE_POSITIVE = 87;\\n    // Signer has to be valid\\n    uint256 internal constant INVALID_SIGNER = 88;\\n    // Nonce has to be valid\\n    uint256 internal constant INVALID_NONCE = 89;\\n    // Garden is not public\\n    uint256 internal constant GARDEN_IS_NOT_PUBLIC = 90;\\n    // Setting max contributors\\n    uint256 internal constant MAX_CONTRIBUTORS_SET = 91;\\n    // Profit sharing mismatch for customized gardens\\n    uint256 internal constant PROFIT_SHARING_MISMATCH = 92;\\n    // Max allocation percentage\\n    uint256 internal constant MAX_STRATEGY_ALLOCATION_PERCENTAGE = 93;\\n    // new creator must not exist\\n    uint256 internal constant NEW_CREATOR_MUST_NOT_EXIST = 94;\\n    // only first creator can add\\n    uint256 internal constant ONLY_FIRST_CREATOR_CAN_ADD = 95;\\n    // invalid address\\n    uint256 internal constant INVALID_ADDRESS = 96;\\n    // creator can only renounce in some circumstances\\n    uint256 internal constant CREATOR_CANNOT_RENOUNCE = 97;\\n    // no price for trade\\n    uint256 internal constant NO_PRICE_FOR_TRADE = 98;\\n    // Max capital requested\\n    uint256 internal constant ZERO_CAPITAL_REQUESTED = 99;\\n    // Unwind capital above the limit\\n    uint256 internal constant INVALID_CAPITAL_TO_UNWIND = 100;\\n    // Mining % sharing does not match\\n    uint256 internal constant INVALID_MINING_VALUES = 101;\\n    // Max trade slippage percentage\\n    uint256 internal constant MAX_TRADE_SLIPPAGE_PERCENTAGE = 102;\\n    // Max gas fee percentage\\n    uint256 internal constant MAX_GAS_FEE_PERCENTAGE = 103;\\n    // Mismatch between voters and votes\\n    uint256 internal constant INVALID_VOTES_LENGTH = 104;\\n    // Only Rewards Distributor\\n    uint256 internal constant ONLY_RD = 105;\\n    // Fee is too LOW\\n    uint256 internal constant FEE_TOO_LOW = 106;\\n    // Only governance or emergency\\n    uint256 internal constant ONLY_GOVERNANCE_OR_EMERGENCY = 107;\\n    // Strategy invalid reserve asset amount\\n    uint256 internal constant INVALID_RESERVE_AMOUNT = 108;\\n    // Heart only pumps once a week\\n    uint256 internal constant HEART_ALREADY_PUMPED = 109;\\n    // Heart needs garden votes to pump\\n    uint256 internal constant HEART_VOTES_MISSING = 110;\\n    // Not enough fees for heart\\n    uint256 internal constant HEART_MINIMUM_FEES = 111;\\n    // Invalid heart votes length\\n    uint256 internal constant HEART_VOTES_LENGTH = 112;\\n    // Heart LP tokens not received\\n    uint256 internal constant HEART_LP_TOKENS = 113;\\n    // Heart invalid asset to lend\\n    uint256 internal constant HEART_ASSET_LEND_INVALID = 114;\\n    // Heart garden not set\\n    uint256 internal constant HEART_GARDEN_NOT_SET = 115;\\n    // Heart asset to lend is the same\\n    uint256 internal constant HEART_ASSET_LEND_SAME = 116;\\n    // Heart invalid ctoken\\n    uint256 internal constant HEART_INVALID_CTOKEN = 117;\\n    // Price per share is wrong\\n    uint256 internal constant PRICE_PER_SHARE_WRONG = 118;\\n    // Heart asset to purchase is same\\n    uint256 internal constant HEART_ASSET_PURCHASE_INVALID = 119;\\n}\\n\",\"keccak256\":\"0x1998f4b37e9926c6161c11b8ef17ec9ed01752f0e03c2bcf21f0afe5dc51d278\",\"license\":\"Apache License\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5b5957049797cea3493ff6fe2d68b182973962253a9eb2eb72283c3532df193d\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/Math.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// Libraries\\nimport './SafeDecimalMath.sol';\\n\\n// https://docs.synthetix.io/contracts/source/libraries/math\\nlibrary Math {\\n    using LowGasSafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /**\\n     * @dev Uses \\\"exponentiation by squaring\\\" algorithm where cost is 0(logN)\\n     * vs 0(N) for naive repeated multiplication.\\n     * Calculates x^n with x as fixed-point and n as regular unsigned int.\\n     * Calculates to 18 digits of precision with SafeDecimalMath.unit()\\n     */\\n    function powDecimal(uint256 x, uint256 n) internal pure returns (uint256) {\\n        // https://mpark.github.io/programming/2014/08/18/exponentiation-by-squaring/\\n\\n        uint256 result = SafeDecimalMath.unit();\\n        while (n > 0) {\\n            if (n % 2 != 0) {\\n                result = result.multiplyDecimal(x);\\n            }\\n            x = x.multiplyDecimal(x);\\n            n /= 2;\\n        }\\n        return result;\\n    }\\n\\n    function abs(int256 x) internal pure returns (int256) {\\n        return x >= 0 ? x : -x;\\n    }\\n}\\n\",\"keccak256\":\"0x415a45bed683f6e896bcbf7fb66718c9df48018c6bd629772cbd3229c85085a7\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x962373863c5ee11f3448970bfee73b0806ac9fe4e9e462a1f75a81f5959ef75f\",\"license\":\"Apache License\"},\"contracts/proxy/VTableBeacon.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\n\\n/**\\n * @title VTableBeacon\\n * @notice Redirects calls to an implementation based on the method signature\\n */\\ncontract VTableBeacon is Ownable {\\n    struct ModuleDefinition {\\n        address implementation;\\n        bytes4[] selectors;\\n    }\\n\\n    bytes4 private constant _FALLBACK_SIGN = 0xffffffff;\\n\\n    // Mapping of methods signatures to their implementations\\n    mapping(bytes4 => address) public delegates;\\n\\n    event VTableUpdate(bytes4 indexed selector, address oldImplementation, address newImplementation);\\n\\n    function implementation(bytes4 _selector) external view virtual returns (address module) {\\n        module = delegates[_selector];\\n        if (module != address(0)) return module;\\n\\n        module = delegates[_FALLBACK_SIGN];\\n        if (module != address(0)) return module;\\n\\n        revert('VTableBeacon: No implementation found');\\n    }\\n\\n    /**\\n     * @dev Updates the vtable\\n     */\\n    function updateVTable(ModuleDefinition[] calldata modules) external onlyOwner {\\n        for (uint256 i = 0; i < modules.length; ++i) {\\n            ModuleDefinition memory module = modules[i];\\n            for (uint256 j = 0; j < module.selectors.length; ++j) {\\n                bytes4 selector = module.selectors[j];\\n                emit VTableUpdate(selector, delegates[selector], module.implementation);\\n                delegates[selector] = module.implementation;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcc893569e0f91defdd5f904f090e120d5822637a561b166c272ef1c92dfcf1ae\",\"license\":\"Apache License\"},\"contracts/proxy/VTableBeaconProxy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/proxy/Proxy.sol';\\n\\nimport './VTableBeacon.sol';\\n\\n/**\\n * @title VTableBeaconProxy\\n */\\ncontract VTableBeaconProxy is Proxy {\\n    VTableBeacon public immutable beacon;\\n\\n    constructor(VTableBeacon _beacon) {\\n        beacon = _beacon;\\n    }\\n\\n    function _implementation() internal view virtual override returns (address module) {\\n        return beacon.implementation(msg.sig);\\n    }\\n}\\n\",\"keccak256\":\"0x65b96e4c07a18dc912ae448f1d8988fec78c867ded96fae50825a9ffce259521\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001606555611f59806100256000396000f3fe60806040526004361061016a5760003560e01c806360d442ca116100cb578063a9059cbb1161007f578063c8882fa011610059578063c8882fa01461078e578063dd62ed3e146107fa578063f8281626146108355761016a565b8063a9059cbb146106c0578063adb9dd07146106f9578063b2ce956e1461075a5761016a565b806370a08231116100b057806370a082311461063f57806395d89b4114610672578063a457c2d7146106875761016a565b806360d442ca146105cb5780636acb733e146105e05761016a565b806335510fee1161012257806347219d271161010757806347219d2714610352578063550c2b7f1461038d578063580d55d5146103a25761016a565b806335510fee146102db57806339509351146103195761016a565b806318160ddd1161015357806318160ddd1461024657806323b872dd1461026d578063313ce567146102b05761016a565b806306fdde031461016f578063095ea7b3146101f9575b600080fd5b34801561017b57600080fd5b5061018461084a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101be5781810151838201526020016101a6565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020557600080fd5b506102326004803603604081101561021c57600080fd5b506001600160a01b0381351690602001356108e0565b604080519115158252519081900360200190f35b34801561025257600080fd5b5061025b6108fe565b60408051918252519081900360200190f35b34801561027957600080fd5b506102326004803603606081101561029057600080fd5b506001600160a01b03813581169160208101359091169060400135610904565b3480156102bc57600080fd5b506102c561098b565b6040805160ff9092168252519081900360200190f35b3480156102e757600080fd5b50610317600480360360408110156102fe57600080fd5b5080356001600160a01b0316906020013560ff16610994565b005b34801561032557600080fd5b506102326004803603604081101561033c57600080fd5b506001600160a01b038135169060200135610a6b565b34801561035e57600080fd5b506103176004803603604081101561037557600080fd5b506001600160a01b0381358116916020013516610ab9565b34801561039957600080fd5b50610232610b57565b61031760048036036101008110156103b957600080fd5b6001600160a01b03823581169260208101358216926040820135909216918101906080810160608201356401000000008111156103f557600080fd5b82018360208201111561040757600080fd5b8035906020019184600183028401116401000000008311171561042957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561047c57600080fd5b82018360208201111561048e57600080fd5b803590602001918460018302840111640100000000831117156104b057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561050357600080fd5b82018360208201111561051557600080fd5b8035906020019184602083028401116401000000008311171561053757600080fd5b9193909282359260408101906020013564010000000081111561055957600080fd5b82018360208201111561056b57600080fd5b8035906020019184602083028401116401000000008311171561058d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b67945050505050565b3480156105d757600080fd5b5061025b610f6f565b3480156105ec57600080fd5b506103176004803603608081101561060357600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600092019190915250919450610f759350505050565b34801561064b57600080fd5b5061025b6004803603602081101561066257600080fd5b50356001600160a01b0316610fc7565b34801561067e57600080fd5b50610184610fe2565b34801561069357600080fd5b50610232600480360360408110156106aa57600080fd5b506001600160a01b038135169060200135611043565b3480156106cc57600080fd5b50610232600480360360408110156106e357600080fd5b506001600160a01b0381351690602001356110ab565b34801561070557600080fd5b50610317600480360361016081101561071d57600080fd5b81019080806101600190600b806020026040519081016040528092919082600b602002808284376000920191909152509194506110bf9350505050565b34801561076657600080fd5b506103176004803603604081101561077d57600080fd5b508035151590602001351515611112565b34801561079a57600080fd5b50610317600480360360a08110156107b157600080fd5b6040805160808181019092526001600160a01b0384351693928301929160a083019190602084019060049083908390808284376000920191909152509194506111579350505050565b34801561080657600080fd5b5061025b6004803603604081101561081d57600080fd5b506001600160a01b03813581169160200135166111fe565b34801561084157600080fd5b50610317611229565b60368054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b60006108f46108ed6112db565b84846112df565b5060015b92915050565b60355490565b60006109118484846113cb565b6109818461091d6112db565b61097c85604051806060016040528060288152602001611e64602891396001600160a01b038a1660009081526034602052604081209061095b6112db565b6001600160a01b031681526020810191909152604001600020549190611528565b6112df565b5060019392505050565b60385460ff1690565b61099d336115bf565b6109b16109a9836115d2565b15605e61167f565b6109dc6001600160a01b0383161515806109d55750606954600160a81b900460ff16155b606161167f565b6069546001600160a01b0316331415610a0f57606980546001600160a01b0319166001600160a01b038416179055610a67565b610a3633608660ff841660048110610a2357fe5b01546001600160a01b031614601161167f565b8160868260ff1660048110610a4757fe5b0180546001600160a01b0319166001600160a01b03929092169190911790555b5050565b60006108f4610a786112db565b8461097c8560346000610a896112db565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061168d565b610ac2336115bf565b610aec6001600160a01b03831615801590610ae557506001600160a01b03821615155b601761167f565b816001600160a01b0316635c19a95c826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050505050565b606954600160a81b900460ff1681565b600054610100900460ff1680610b805750610b806116ee565b80610b8e575060005460ff16155b610bc95760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015610bf4576000805460ff1961ff0019909116610100171660011790555b610bfe87876116ff565b606780546001600160a01b03808c166001600160a01b03199283161792839055606680548e8316908416179055606980548c8316931692909217909155604080517f3f2a554000000000000000000000000000000000000000000000000000000000815290519290911691633f2a554091600480820192602092909190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6020811015610cb957600080fd5b5051606880546001600160a01b0319166001600160a01b039283161790819055610ce391166117b5565b606760009054906101000a90046001600160a01b03166001600160a01b0316637f80e05b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b50518015610d7a575081600081518110610d7157fe5b60200260200101515b60698054600160a81b9215830260ff60a81b1990911617908190550460ff16158015610db7575081600181518110610dae57fe5b60200260200101515b6085805460ff191691151591909117905560695460ff600160a81b90910416158015610df4575081600281518110610deb57fe5b60200260200101515b608580549115156101000261ff0019909216919091179055610e6b600086866003818110610e1e57fe5b90506020020135118015610e45575085856003818110610e3a57fe5b905060200201358410155b8015610e64575085856000818110610e5957fe5b905060200201358411155b600161167f565b42607555610f518585600081610e7d57fe5b9050602002013586866001818110610e9157fe5b9050602002013587876002818110610ea557fe5b9050602002013588886003818110610eb957fe5b9050602002013589896004818110610ecd57fe5b905060200201358a8a6005818110610ee157fe5b905060200201358b8b6006818110610ef557fe5b905060200201358c8c6007818110610f0957fe5b905060200201358d8d6008818110610f1d57fe5b905060200201358e8e6009818110610f3157fe5b905060200201358f8f600a818110610f4557fe5b905060200201356117cb565b8015610f63576000805461ff00191690555b50505050505050505050565b60835481565b606954610f8e906001600160a01b03163314605f61167f565b610fa0600082815b6020020151611965565b610fac60018281610f96565b610fb860028281610f96565b610fc460038281610f96565b50565b6001600160a01b031660009081526033602052604090205490565b60378054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108d65780601f106108ab576101008083540402835291602001916108d6565b60006108f46110506112db565b8461097c85604051806060016040528060258152602001611eff602591396034600061107a6112db565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611528565b60006108f46110b86112db565b84846113cb565b6110c8336115bf565b8051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610fc49a999897969594939291906117cb565b61111b336115bf565b60695461113490600160a81b900460ff1615605a61167f565b6085805460ff19169215159290921761ff00191661010091151591909102179055565b60675461116c906001600160a01b03166119aa565b6111966001600160a01b038316158015906109d557506069546001600160a01b031615606161167f565b606980546001600160a01b03199081166001600160a01b03858116919091179092558251608680548316918416919091178155602084015160878054841691851691909117905560408401516088805490931693169290921790556060820151906003610a47565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b611232336115bf565b6069546112cc90600160a81b900460ff1680156112c55750606760009054906101000a90046001600160a01b03166001600160a01b0316637f80e05b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129857600080fd5b505afa1580156112ac573d6000803e3d6000fd5b505050506040513d60208110156112c257600080fd5b50515b604361167f565b6069805460ff60a81b19169055565b3390565b6001600160a01b0383166113245760405162461bcd60e51b8152600401808060200182810382526024815260200180611edb6024913960400191505060405180910390fd5b6001600160a01b0382166113695760405162461bcd60e51b8152600401808060200182810382526022815260200180611dee6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166114105760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb66025913960400191505060405180910390fd5b6001600160a01b0382166114555760405162461bcd60e51b8152600401808060200182810382526023815260200180611dcb6023913960400191505060405180910390fd5b6114608383836117b0565b61149d81604051806060016040528060268152602001611e10602691396001600160a01b0386166000908152603360205260409020549190611528565b6001600160a01b0380851660009081526033602052604080822093909355908416815220546114cc908261168d565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156115b75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561157c578181015183820152602001611564565b50505050905090810190601f1680156115a95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b610fc46115cb826115d2565b601161167f565b60006001600160a01b038216158015906108f857506001600160a01b0382166086600001546001600160a01b0316148061162257506001600160a01b0382166086600101546001600160a01b0316145b8061164357506001600160a01b0382166086600201546001600160a01b0316145b8061166457506001600160a01b0382166086600301546001600160a01b0316145b806108f85750506069546001600160a01b0390811691161490565b81610a6757610a6781611acc565b6000828201838110156116e7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006116f930611b1f565b15905090565b600054610100900460ff168061171857506117186116ee565b80611726575060005460ff16155b6117615760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff1615801561178c576000805460ff1961ff0019909116610100171660011790555b611794611b25565b61179e8383611bc6565b80156117b0576000805461ff00191690555b505050565b610fc46001600160a01b0382161515601761167f565b606754606654604080517ff05017eb0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152905161187b93929092169163f05017eb91602480820192602092909190829003018186803b15801561183957600080fd5b505afa15801561184d573d6000803e3d6000fd5b505050506040513d602081101561186357600080fd5b50518b10801590611874575060008b115b600461167f565b61188960008a11600361167f565b6118a762093a8088111580156118a05750603c8810155b601861167f565b6118e56118bd67016345785d8a00006002611c9e565b87101580156118de57506118da67016345785d8a00006005611d05565b8711155b601961167f565b6119128585101580156118fb5750620151808610155b801561190b57506302932e008511155b603f61167f565b61192d600184101580156119265750600a84105b604061167f565b60749a909a55607796909655607e94909455607a92909255607b92909255607c91909155607d55606e92909255606f55608c55608d55565b6119716109a9826115d2565b6119996000608660ff85166004811061198657fe5b01546001600160a01b031614605e61167f565b8060868360ff1660048110610a4757fe5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d6020811015611a0d57600080fd5b50516001600160a01b0316331480611a915750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d6020811015611a8357600080fd5b50516001600160a01b031633145b610fc45760405162461bcd60e51b815260040180806020018281038252602a815260200180611e8c602a913960400191505060405180910390fd5b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b3b151590565b600054610100900460ff1680611b3e5750611b3e6116ee565b80611b4c575060005460ff16155b611b875760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015611bb2576000805460ff1961ff0019909116610100171660011790555b8015610fc4576000805461ff001916905550565b600054610100900460ff1680611bdf5750611bdf6116ee565b80611bed575060005460ff16155b611c285760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015611c53576000805460ff1961ff0019909116610100171660011790555b8251611c66906036906020860190611d29565b508151611c7a906037906020850190611d29565b506038805460ff1916601217905580156117b0576000805461ff0019169055505050565b6000808211611cf4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611cfd57fe5b049392505050565b6000821580611d2057505081810281838281611d1d57fe5b04145b6108f857600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611d5f5760008555611da5565b82601f10611d7857805160ff1916838001178555611da5565b82800160010185558215611da5579182015b82811115611da5578251825591602001919060010190611d8a565b50611db1929150611db5565b5090565b5b80821115611db15760008155600101611db656fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c207468697345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212202a7c10b2942b847b3dc5f2488ac6b31aa32b7430b9ad640391b5719ec81a91a164736f6c63430007060033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c806360d442ca116100cb578063a9059cbb1161007f578063c8882fa011610059578063c8882fa01461078e578063dd62ed3e146107fa578063f8281626146108355761016a565b8063a9059cbb146106c0578063adb9dd07146106f9578063b2ce956e1461075a5761016a565b806370a08231116100b057806370a082311461063f57806395d89b4114610672578063a457c2d7146106875761016a565b806360d442ca146105cb5780636acb733e146105e05761016a565b806335510fee1161012257806347219d271161010757806347219d2714610352578063550c2b7f1461038d578063580d55d5146103a25761016a565b806335510fee146102db57806339509351146103195761016a565b806318160ddd1161015357806318160ddd1461024657806323b872dd1461026d578063313ce567146102b05761016a565b806306fdde031461016f578063095ea7b3146101f9575b600080fd5b34801561017b57600080fd5b5061018461084a565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101be5781810151838201526020016101a6565b50505050905090810190601f1680156101eb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561020557600080fd5b506102326004803603604081101561021c57600080fd5b506001600160a01b0381351690602001356108e0565b604080519115158252519081900360200190f35b34801561025257600080fd5b5061025b6108fe565b60408051918252519081900360200190f35b34801561027957600080fd5b506102326004803603606081101561029057600080fd5b506001600160a01b03813581169160208101359091169060400135610904565b3480156102bc57600080fd5b506102c561098b565b6040805160ff9092168252519081900360200190f35b3480156102e757600080fd5b50610317600480360360408110156102fe57600080fd5b5080356001600160a01b0316906020013560ff16610994565b005b34801561032557600080fd5b506102326004803603604081101561033c57600080fd5b506001600160a01b038135169060200135610a6b565b34801561035e57600080fd5b506103176004803603604081101561037557600080fd5b506001600160a01b0381358116916020013516610ab9565b34801561039957600080fd5b50610232610b57565b61031760048036036101008110156103b957600080fd5b6001600160a01b03823581169260208101358216926040820135909216918101906080810160608201356401000000008111156103f557600080fd5b82018360208201111561040757600080fd5b8035906020019184600183028401116401000000008311171561042957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561047c57600080fd5b82018360208201111561048e57600080fd5b803590602001918460018302840111640100000000831117156104b057600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929594936020810193503591505064010000000081111561050357600080fd5b82018360208201111561051557600080fd5b8035906020019184602083028401116401000000008311171561053757600080fd5b9193909282359260408101906020013564010000000081111561055957600080fd5b82018360208201111561056b57600080fd5b8035906020019184602083028401116401000000008311171561058d57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550610b67945050505050565b3480156105d757600080fd5b5061025b610f6f565b3480156105ec57600080fd5b506103176004803603608081101561060357600080fd5b8101908080608001906004806020026040519081016040528092919082600460200280828437600092019190915250919450610f759350505050565b34801561064b57600080fd5b5061025b6004803603602081101561066257600080fd5b50356001600160a01b0316610fc7565b34801561067e57600080fd5b50610184610fe2565b34801561069357600080fd5b50610232600480360360408110156106aa57600080fd5b506001600160a01b038135169060200135611043565b3480156106cc57600080fd5b50610232600480360360408110156106e357600080fd5b506001600160a01b0381351690602001356110ab565b34801561070557600080fd5b50610317600480360361016081101561071d57600080fd5b81019080806101600190600b806020026040519081016040528092919082600b602002808284376000920191909152509194506110bf9350505050565b34801561076657600080fd5b506103176004803603604081101561077d57600080fd5b508035151590602001351515611112565b34801561079a57600080fd5b50610317600480360360a08110156107b157600080fd5b6040805160808181019092526001600160a01b0384351693928301929160a083019190602084019060049083908390808284376000920191909152509194506111579350505050565b34801561080657600080fd5b5061025b6004803603604081101561081d57600080fd5b506001600160a01b03813581169160200135166111fe565b34801561084157600080fd5b50610317611229565b60368054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108d65780601f106108ab576101008083540402835291602001916108d6565b820191906000526020600020905b8154815290600101906020018083116108b957829003601f168201915b5050505050905090565b60006108f46108ed6112db565b84846112df565b5060015b92915050565b60355490565b60006109118484846113cb565b6109818461091d6112db565b61097c85604051806060016040528060288152602001611e64602891396001600160a01b038a1660009081526034602052604081209061095b6112db565b6001600160a01b031681526020810191909152604001600020549190611528565b6112df565b5060019392505050565b60385460ff1690565b61099d336115bf565b6109b16109a9836115d2565b15605e61167f565b6109dc6001600160a01b0383161515806109d55750606954600160a81b900460ff16155b606161167f565b6069546001600160a01b0316331415610a0f57606980546001600160a01b0319166001600160a01b038416179055610a67565b610a3633608660ff841660048110610a2357fe5b01546001600160a01b031614601161167f565b8160868260ff1660048110610a4757fe5b0180546001600160a01b0319166001600160a01b03929092169190911790555b5050565b60006108f4610a786112db565b8461097c8560346000610a896112db565b6001600160a01b03908116825260208083019390935260409182016000908120918c16815292529020549061168d565b610ac2336115bf565b610aec6001600160a01b03831615801590610ae557506001600160a01b03821615155b601761167f565b816001600160a01b0316635c19a95c826040518263ffffffff1660e01b815260040180826001600160a01b03168152602001915050600060405180830381600087803b158015610b3b57600080fd5b505af1158015610b4f573d6000803e3d6000fd5b505050505050565b606954600160a81b900460ff1681565b600054610100900460ff1680610b805750610b806116ee565b80610b8e575060005460ff16155b610bc95760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015610bf4576000805460ff1961ff0019909116610100171660011790555b610bfe87876116ff565b606780546001600160a01b03808c166001600160a01b03199283161792839055606680548e8316908416179055606980548c8316931692909217909155604080517f3f2a554000000000000000000000000000000000000000000000000000000000815290519290911691633f2a554091600480820192602092909190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6020811015610cb957600080fd5b5051606880546001600160a01b0319166001600160a01b039283161790819055610ce391166117b5565b606760009054906101000a90046001600160a01b03166001600160a01b0316637f80e05b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d3157600080fd5b505afa158015610d45573d6000803e3d6000fd5b505050506040513d6020811015610d5b57600080fd5b50518015610d7a575081600081518110610d7157fe5b60200260200101515b60698054600160a81b9215830260ff60a81b1990911617908190550460ff16158015610db7575081600181518110610dae57fe5b60200260200101515b6085805460ff191691151591909117905560695460ff600160a81b90910416158015610df4575081600281518110610deb57fe5b60200260200101515b608580549115156101000261ff0019909216919091179055610e6b600086866003818110610e1e57fe5b90506020020135118015610e45575085856003818110610e3a57fe5b905060200201358410155b8015610e64575085856000818110610e5957fe5b905060200201358411155b600161167f565b42607555610f518585600081610e7d57fe5b9050602002013586866001818110610e9157fe5b9050602002013587876002818110610ea557fe5b9050602002013588886003818110610eb957fe5b9050602002013589896004818110610ecd57fe5b905060200201358a8a6005818110610ee157fe5b905060200201358b8b6006818110610ef557fe5b905060200201358c8c6007818110610f0957fe5b905060200201358d8d6008818110610f1d57fe5b905060200201358e8e6009818110610f3157fe5b905060200201358f8f600a818110610f4557fe5b905060200201356117cb565b8015610f63576000805461ff00191690555b50505050505050505050565b60835481565b606954610f8e906001600160a01b03163314605f61167f565b610fa0600082815b6020020151611965565b610fac60018281610f96565b610fb860028281610f96565b610fc460038281610f96565b50565b6001600160a01b031660009081526033602052604090205490565b60378054604080516020601f60026000196101006001881615020190951694909404938401819004810282018101909252828152606093909290918301828280156108d65780601f106108ab576101008083540402835291602001916108d6565b60006108f46110506112db565b8461097c85604051806060016040528060258152602001611eff602591396034600061107a6112db565b6001600160a01b03908116825260208083019390935260409182016000908120918d16815292529020549190611528565b60006108f46110b86112db565b84846113cb565b6110c8336115bf565b8051602082015160408301516060840151608085015160a086015160c087015160e08801516101008901516101208a01516101408b0151610fc49a999897969594939291906117cb565b61111b336115bf565b60695461113490600160a81b900460ff1615605a61167f565b6085805460ff19169215159290921761ff00191661010091151591909102179055565b60675461116c906001600160a01b03166119aa565b6111966001600160a01b038316158015906109d557506069546001600160a01b031615606161167f565b606980546001600160a01b03199081166001600160a01b03858116919091179092558251608680548316918416919091178155602084015160878054841691851691909117905560408401516088805490931693169290921790556060820151906003610a47565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b611232336115bf565b6069546112cc90600160a81b900460ff1680156112c55750606760009054906101000a90046001600160a01b03166001600160a01b0316637f80e05b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561129857600080fd5b505afa1580156112ac573d6000803e3d6000fd5b505050506040513d60208110156112c257600080fd5b50515b604361167f565b6069805460ff60a81b19169055565b3390565b6001600160a01b0383166113245760405162461bcd60e51b8152600401808060200182810382526024815260200180611edb6024913960400191505060405180910390fd5b6001600160a01b0382166113695760405162461bcd60e51b8152600401808060200182810382526022815260200180611dee6022913960400191505060405180910390fd5b6001600160a01b03808416600081815260346020908152604080832094871680845294825291829020859055815185815291517f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259281900390910190a3505050565b6001600160a01b0383166114105760405162461bcd60e51b8152600401808060200182810382526025815260200180611eb66025913960400191505060405180910390fd5b6001600160a01b0382166114555760405162461bcd60e51b8152600401808060200182810382526023815260200180611dcb6023913960400191505060405180910390fd5b6114608383836117b0565b61149d81604051806060016040528060268152602001611e10602691396001600160a01b0386166000908152603360205260409020549190611528565b6001600160a01b0380851660009081526033602052604080822093909355908416815220546114cc908261168d565b6001600160a01b0380841660008181526033602090815260409182902094909455805185815290519193928716927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef92918290030190a3505050565b600081848411156115b75760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561157c578181015183820152602001611564565b50505050905090810190601f1680156115a95780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b610fc46115cb826115d2565b601161167f565b60006001600160a01b038216158015906108f857506001600160a01b0382166086600001546001600160a01b0316148061162257506001600160a01b0382166086600101546001600160a01b0316145b8061164357506001600160a01b0382166086600201546001600160a01b0316145b8061166457506001600160a01b0382166086600301546001600160a01b0316145b806108f85750506069546001600160a01b0390811691161490565b81610a6757610a6781611acc565b6000828201838110156116e7576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006116f930611b1f565b15905090565b600054610100900460ff168061171857506117186116ee565b80611726575060005460ff16155b6117615760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff1615801561178c576000805460ff1961ff0019909116610100171660011790555b611794611b25565b61179e8383611bc6565b80156117b0576000805461ff00191690555b505050565b610fc46001600160a01b0382161515601761167f565b606754606654604080517ff05017eb0000000000000000000000000000000000000000000000000000000081526001600160a01b039283166004820152905161187b93929092169163f05017eb91602480820192602092909190829003018186803b15801561183957600080fd5b505afa15801561184d573d6000803e3d6000fd5b505050506040513d602081101561186357600080fd5b50518b10801590611874575060008b115b600461167f565b61188960008a11600361167f565b6118a762093a8088111580156118a05750603c8810155b601861167f565b6118e56118bd67016345785d8a00006002611c9e565b87101580156118de57506118da67016345785d8a00006005611d05565b8711155b601961167f565b6119128585101580156118fb5750620151808610155b801561190b57506302932e008511155b603f61167f565b61192d600184101580156119265750600a84105b604061167f565b60749a909a55607796909655607e94909455607a92909255607b92909255607c91909155607d55606e92909255606f55608c55608d55565b6119716109a9826115d2565b6119996000608660ff85166004811061198657fe5b01546001600160a01b031614605e61167f565b8060868360ff1660048110610a4757fe5b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119e357600080fd5b505afa1580156119f7573d6000803e3d6000fd5b505050506040513d6020811015611a0d57600080fd5b50516001600160a01b0316331480611a915750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d6020811015611a8357600080fd5b50516001600160a01b031633145b610fc45760405162461bcd60e51b815260040180806020018281038252602a815260200180611e8c602a913960400191505060405180910390fd5b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b3b151590565b600054610100900460ff1680611b3e5750611b3e6116ee565b80611b4c575060005460ff16155b611b875760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015611bb2576000805460ff1961ff0019909116610100171660011790555b8015610fc4576000805461ff001916905550565b600054610100900460ff1680611bdf5750611bdf6116ee565b80611bed575060005460ff16155b611c285760405162461bcd60e51b815260040180806020018281038252602e815260200180611e36602e913960400191505060405180910390fd5b600054610100900460ff16158015611c53576000805460ff1961ff0019909116610100171660011790555b8251611c66906036906020860190611d29565b508151611c7a906037906020850190611d29565b506038805460ff1916601217905580156117b0576000805461ff0019169055505050565b6000808211611cf4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611cfd57fe5b049392505050565b6000821580611d2057505081810281838281611d1d57fe5b04145b6108f857600080fd5b828054600181600116156101000203166002900490600052602060002090601f016020900481019282611d5f5760008555611da5565b82601f10611d7857805160ff1916838001178555611da5565b82800160010185558215611da5579182015b82811115611da5578251825591602001919060010190611d8a565b50611db1929150611db5565b5090565b5b80821115611db15760008155600101611db656fe45524332303a207472616e7366657220746f20746865207a65726f206164647265737345524332303a20617070726f766520746f20746865207a65726f206164647265737345524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a656445524332303a207472616e7366657220616d6f756e74206578636565647320616c6c6f77616e63654f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c207468697345524332303a207472616e736665722066726f6d20746865207a65726f206164647265737345524332303a20617070726f76652066726f6d20746865207a65726f206164647265737345524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726fa26469706673582212202a7c10b2942b847b3dc5f2488ac6b31aa32b7430b9ad640391b5719ec81a91a164736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is called. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "delegateVotes(address,address)": {
        "params": {
          "_delegatee": "Address to delegate token voting power into",
          "_token": "Address of BABL or any other ERC20Comp related governance token"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "initialize(address,address,address,string,string,uint256[],uint256,bool[])": {
        "params": {
          "_controller": "Address of the controller",
          "_creator": "Address of the creator",
          "_gardenParams": "Array of numeric garden params",
          "_initialContribution": "Initial Contribution by the Gardener",
          "_name": "Name of the Garden",
          "_publicGardenStrategistsStewards": "Public garden, public strategists rights and public stewards rights",
          "_reserveAsset": "Address of the reserve asset ERC20",
          "_symbol": "Symbol of the Garden"
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "updateGardenParams(uint256[11])": {
        "params": {
          "_newParams": "New params"
        }
      }
    },
    "title": "AdminGardenModule Class that holds common garden-related state and functions",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "delegateVotes(address,address)": {
        "notice": "PRIVILEGE FUNCTION to delegate Garden voting power itself into a delegatee To be used by Garden Creator only. Compatible with BABL and COMP and few others ERC20Comp related tokens"
      },
      "initialize(address,address,address,string,string,uint256[],uint256,bool[])": {
        "notice": "When a new Garden is created. All parameter validations are on the BabController contract. Validations are performed already on the BabController. WARN: If the reserve Asset is different than WETH the gardener needs to have approved the controller."
      },
      "makeGardenPublic()": {
        "notice": "Makes a previously private garden public"
      },
      "setPublicRights(bool,bool)": {
        "notice": "Gives the right to create strategies and/or voting power to garden users"
      },
      "updateGardenParams(uint256[11])": {
        "notice": "Updates Garden Params Can only be called by the creator"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1447,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 571,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_balances",
        "offset": 0,
        "slot": "51",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 577,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_allowances",
        "offset": 0,
        "slot": "52",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 579,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "53",
        "type": "t_uint256"
      },
      {
        "astId": 581,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_name",
        "offset": 0,
        "slot": "54",
        "type": "t_string_storage"
      },
      {
        "astId": 583,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_symbol",
        "offset": 0,
        "slot": "55",
        "type": "t_string_storage"
      },
      {
        "astId": 585,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_decimals",
        "offset": 0,
        "slot": "56",
        "type": "t_uint8"
      },
      {
        "astId": 1080,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "__gap",
        "offset": 0,
        "slot": "57",
        "type": "t_array(t_uint256)44_storage"
      },
      {
        "astId": 6418,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 23598,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "reserveAsset",
        "offset": 0,
        "slot": "102",
        "type": "t_address"
      },
      {
        "astId": 23600,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "controller",
        "offset": 0,
        "slot": "103",
        "type": "t_contract(IBabController)41441"
      },
      {
        "astId": 23602,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "rewardsDistributor",
        "offset": 0,
        "slot": "104",
        "type": "t_contract(IRewardsDistributor)43217"
      },
      {
        "astId": 23604,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "creator",
        "offset": 0,
        "slot": "105",
        "type": "t_address"
      },
      {
        "astId": 23606,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "active",
        "offset": 20,
        "slot": "105",
        "type": "t_bool"
      },
      {
        "astId": 23608,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "privateGarden",
        "offset": 21,
        "slot": "105",
        "type": "t_bool"
      },
      {
        "astId": 23610,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "principal",
        "offset": 0,
        "slot": "106",
        "type": "t_uint256"
      },
      {
        "astId": 23612,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "reserveAssetRewardsSetAside",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 23614,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "reserveAssetPrincipalWindow",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 23616,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "absoluteReturns",
        "offset": 0,
        "slot": "109",
        "type": "t_int256"
      },
      {
        "astId": 23618,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minLiquidityAsset",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 23620,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "depositHardlock",
        "offset": 0,
        "slot": "111",
        "type": "t_uint256"
      },
      {
        "astId": 23622,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "withdrawalsOpenUntil",
        "offset": 0,
        "slot": "112",
        "type": "t_uint256"
      },
      {
        "astId": 23626,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "contributors",
        "offset": 0,
        "slot": "113",
        "type": "t_mapping(t_address,t_struct(Contributor)23596_storage)"
      },
      {
        "astId": 23628,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "totalContributors",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      },
      {
        "astId": 23630,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "maxContributors",
        "offset": 0,
        "slot": "115",
        "type": "t_uint256"
      },
      {
        "astId": 23632,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "maxDepositLimit",
        "offset": 0,
        "slot": "116",
        "type": "t_uint256"
      },
      {
        "astId": 23634,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "gardenInitializedAt",
        "offset": 0,
        "slot": "117",
        "type": "t_uint256"
      },
      {
        "astId": 23636,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "pid",
        "offset": 0,
        "slot": "118",
        "type": "t_uint256"
      },
      {
        "astId": 23638,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minContribution",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 23640,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minGardenTokenSupply",
        "offset": 0,
        "slot": "120",
        "type": "t_uint256"
      },
      {
        "astId": 23642,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "totalStake",
        "offset": 0,
        "slot": "121",
        "type": "t_uint256"
      },
      {
        "astId": 23644,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minVotesQuorum",
        "offset": 0,
        "slot": "122",
        "type": "t_uint256"
      },
      {
        "astId": 23646,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minVoters",
        "offset": 0,
        "slot": "123",
        "type": "t_uint256"
      },
      {
        "astId": 23648,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "minStrategyDuration",
        "offset": 0,
        "slot": "124",
        "type": "t_uint256"
      },
      {
        "astId": 23650,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "maxStrategyDuration",
        "offset": 0,
        "slot": "125",
        "type": "t_uint256"
      },
      {
        "astId": 23652,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "strategyCooldownPeriod",
        "offset": 0,
        "slot": "126",
        "type": "t_uint256"
      },
      {
        "astId": 23655,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "strategies",
        "offset": 0,
        "slot": "127",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23658,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "finalizedStrategies",
        "offset": 0,
        "slot": "128",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 23662,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "strategyMapping",
        "offset": 0,
        "slot": "129",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23666,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "isGardenStrategy",
        "offset": 0,
        "slot": "130",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 23668,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "keeperDebt",
        "offset": 0,
        "slot": "131",
        "type": "t_uint256"
      },
      {
        "astId": 23670,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "totalKeeperFees",
        "offset": 0,
        "slot": "132",
        "type": "t_uint256"
      },
      {
        "astId": 23672,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "publicStrategists",
        "offset": 0,
        "slot": "133",
        "type": "t_bool"
      },
      {
        "astId": 23674,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "publicStewards",
        "offset": 1,
        "slot": "133",
        "type": "t_bool"
      },
      {
        "astId": 23678,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "extraCreators",
        "offset": 0,
        "slot": "134",
        "type": "t_array(t_address)4_storage"
      },
      {
        "astId": 23680,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "lastPricePerShare",
        "offset": 0,
        "slot": "138",
        "type": "t_uint256"
      },
      {
        "astId": 23682,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "lastPricePerShareTS",
        "offset": 0,
        "slot": "139",
        "type": "t_uint256"
      },
      {
        "astId": 23684,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "pricePerShareDecayRate",
        "offset": 0,
        "slot": "140",
        "type": "t_uint256"
      },
      {
        "astId": 23686,
        "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
        "label": "pricePerShareDelta",
        "offset": 0,
        "slot": "141",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)4_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[4]",
        "numberOfBytes": "128"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)44_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[44]",
        "numberOfBytes": "1408"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)41441": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_contract(IRewardsDistributor)43217": {
        "encoding": "inplace",
        "label": "contract IRewardsDistributor",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(Contributor)23596_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseGardenModule.Contributor)",
        "numberOfBytes": "32",
        "value": "t_struct(Contributor)23596_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Contributor)23596_storage": {
        "encoding": "inplace",
        "label": "struct BaseGardenModule.Contributor",
        "members": [
          {
            "astId": 23581,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "lastDepositAt",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 23583,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "initialDepositAt",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 23585,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "claimedAt",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 23587,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "claimedBABL",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 23589,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "claimedRewards",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 23591,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "withdrawnSince",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 23593,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "totalDeposits",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 23595,
            "contract": "contracts/gardens/AdminGardenModule.sol:AdminGardenModule",
            "label": "nonce",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}