{
  "address": "0x6504227A2f6c44E951289179DE769B8C9898C075",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IIshtarGate",
          "name": "_ishtarGate",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "_permission",
          "type": "uint8"
        }
      ],
      "name": "GardenAccess",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_creation",
          "type": "bool"
        }
      ],
      "name": "GardenCreationPower",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "JUST_LP",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NONE",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STEWARD",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "STRATEGIST",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "betaAccess",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canAccessBeta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canAddStrategiesInAGarden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canCreate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "canCreateAGarden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canJoinAGarden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "canVoteInAGarden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gardenAccessCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        }
      ],
      "name": "getInvitesPerGarden",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_perms",
          "type": "bool[]"
        }
      ],
      "name": "grantCreatorsInBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint8[]",
          "name": "_perms",
          "type": "uint8[]"
        }
      ],
      "name": "grantGardenAccessBatch",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "invitesPerGarden",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isOverriden",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxNumberOfInvites",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permissionsByCommunity",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_canCreate",
          "type": "bool"
        }
      ],
      "name": "setCreatorPermissions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "_permission",
          "type": "uint8"
        }
      ],
      "name": "setGardenAccess",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxNumberOfInvites",
          "type": "uint256"
        }
      ],
      "name": "setMaxNumberOfInvites",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xaad421d109761a3929e4a4aa7038f492d59865534adaa985ff108aa4603be1fb",
  "receipt": {
    "to": null,
    "from": "0x040cC3AF8455F3c34D1df1D2a305e047a062BeBf",
    "contractAddress": "0x6504227A2f6c44E951289179DE769B8C9898C075",
    "transactionIndex": 24,
    "gasUsed": "1767924",
    "logsBloom": "0x
    "blockHash": "0x03dc1ae2bc88126f3dd2c7080f51cee1a11ad8ef31537cbd57f58a2d17c2e3e8",
    "transactionHash": "0xaad421d109761a3929e4a4aa7038f492d59865534adaa985ff108aa4603be1fb",
    "logs": [
      {
        "transactionIndex": 24,
        "blockNumber": 13188729,
        "transactionHash": "0xaad421d109761a3929e4a4aa7038f492d59865534adaa985ff108aa4603be1fb",
        "address": "0x6504227A2f6c44E951289179DE769B8C9898C075",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000040cc3af8455f3c34d1df1d2a305e047a062bebf"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0x03dc1ae2bc88126f3dd2c7080f51cee1a11ad8ef31537cbd57f58a2d17c2e3e8"
      }
    ],
    "blockNumber": 13188729,
    "cumulativeGasUsed": "4029622",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0x77D200ECa7Fd0a3DB27E96D7b24cF7613b0a2a12"
  ],
  "solcInputHash": "3bda2208bb10a8182585256f7af2f505",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IIshtarGate\",\"name\":\"_ishtarGate\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"GardenAccess\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_creation\",\"type\":\"bool\"}],\"name\":\"GardenCreationPower\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"JUST_LP\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NONE\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STEWARD\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"STRATEGIST\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"betaAccess\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canAccessBeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canAddStrategiesInAGarden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canCreate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"canCreateAGarden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canJoinAGarden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"canVoteInAGarden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gardenAccessCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"}],\"name\":\"getInvitesPerGarden\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_perms\",\"type\":\"bool[]\"}],\"name\":\"grantCreatorsInBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint8[]\",\"name\":\"_perms\",\"type\":\"uint8[]\"}],\"name\":\"grantGardenAccessBatch\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"invitesPerGarden\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isOverriden\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxNumberOfInvites\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permissionsByCommunity\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_canCreate\",\"type\":\"bool\"}],\"name\":\"setCreatorPermissions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"_permission\",\"type\":\"uint8\"}],\"name\":\"setGardenAccess\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxNumberOfInvites\",\"type\":\"uint256\"}],\"name\":\"setMaxNumberOfInvites\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Contract that implements guestlists without NFT and checks Ishtar Gate when needed\",\"kind\":\"dev\",\"methods\":{\"canAccessBeta(address)\":{\"params\":{\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"bool               Whether or not the user can access the beta\"}},\"canAddStrategiesInAGarden(address,address)\":{\"params\":{\"_garden\":\"Address of the _garden\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"_canStrategize             Whether or not the user can create strategies\"}},\"canCreate(address)\":{\"params\":{\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"_canCreate               Whether or not the user can create\"}},\"canJoinAGarden(address,address)\":{\"params\":{\"_garden\":\"Address of the _garden\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"_canJoin                   Whether or not the user can join\"}},\"canVoteInAGarden(address,address)\":{\"params\":{\"_garden\":\"Address of the _garden\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"_canVote                   Whether or not the user can vote\"}},\"constructor\":{\"params\":{\"_controller\":\"Address of controller contract\",\"_ishtarGate\":\"Address of the ishtar gate\"}},\"getInvitesPerGarden(address)\":{\"params\":{\"_garden\":\"Address of the _garden\"},\"returns\":{\"_0\":\"address[]                  All the invites sent\"}},\"grantCreatorsInBatch(address[],bool[])\":{\"params\":{\"_perms\":\"Lists of booleans\",\"_users\":\"Addresses of the users\"}},\"grantGardenAccessBatch(address,address[],uint8[])\":{\"params\":{\"_garden\":\"Community that the gate grants access to\",\"_perms\":\"List of permissions of what each user can do in the community\",\"_users\":\"Addresses of the users\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCreatorPermissions(address,bool)\":{\"params\":{\"_canCreate\":\"Boolean with permissions as to whether the user can create gardens\",\"_user\":\"Address of the user\"}},\"setGardenAccess(address,address,uint8)\":{\"params\":{\"_garden\":\"Community that the gate grants access to\",\"_permission\":\"Permissions of what user can do in the community\",\"_user\":\"Address of the user\"}},\"setMaxNumberOfInvites(uint256)\":{\"params\":{\"_maxNumberOfInvites\":\"New max number of invites per garden\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"MardukGate\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"canAccessBeta(address)\":{\"notice\":\"Check if a user can access the beta\"},\"canAddStrategiesInAGarden(address,address)\":{\"notice\":\"Check if a user can add strategies in a specific garden\"},\"canCreate(address)\":{\"notice\":\"Check if a user can create gardens\"},\"canJoinAGarden(address,address)\":{\"notice\":\"Check if a user can join a specific garden\"},\"canVoteInAGarden(address,address)\":{\"notice\":\"Check if a user can vote in a specific garden\"},\"constructor\":{\"notice\":\"Sets the protocol controller\"},\"getInvitesPerGarden(address)\":{\"notice\":\"Returns all the invites sent from a specific garden\"},\"grantCreatorsInBatch(address[],bool[])\":{\"notice\":\"Grants a list of users with permissions to create gardens\"},\"grantGardenAccessBatch(address,address[],uint8[])\":{\"notice\":\"Uses Marduk Gate to grant a list of users with permissions to a specific garden\"},\"setCreatorPermissions(address,bool)\":{\"notice\":\"Grants an user/remove garden creation capabilities via Marduk Gate.\"},\"setGardenAccess(address,address,uint8)\":{\"notice\":\"Gives user access to a specific garden via Marduk Gate\"},\"setMaxNumberOfInvites(uint256)\":{\"notice\":\"Changs the number of invites we are going to give per garden\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MardukGate.sol\":\"MardukGate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () internal {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x15e2d5bd4c28a88548074c54d220e8086f638a71ed07e6b3ba5a70066fcf458d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /*\\n     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\\n\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    constructor () internal {\\n        // Derived contracts need only register support for their own interfaces,\\n        // we register support for ERC165 itself here\\n        _registerInterface(_INTERFACE_ID_ERC165);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     *\\n     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x24141d2f6b98d4cb77a8936eae8cbaad2e261d9062bdc08036096f4550092501\",\"license\":\"MIT\"},\"@openzeppelin/contracts/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xf70bc25d981e4ec9673a995ad2995d5d493ea188d3d8f388bba9c227ce09fb82\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Metadata.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"../../introspection/ERC165.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/EnumerableSet.sol\\\";\\nimport \\\"../../utils/EnumerableMap.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\n\\n/**\\n * @title ERC721 Non-Fungible Token Standard basic implementation\\n * @dev see https://eips.ethereum.org/EIPS/eip-721\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\\n    using SafeMath for uint256;\\n    using Address for address;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableMap for EnumerableMap.UintToAddressMap;\\n    using Strings for uint256;\\n\\n    // Equals to `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\\n    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\\n\\n    // Mapping from holder address to their (enumerable) set of owned tokens\\n    mapping (address => EnumerableSet.UintSet) private _holderTokens;\\n\\n    // Enumerable mapping from token ids to their owners\\n    EnumerableMap.UintToAddressMap private _tokenOwners;\\n\\n    // Mapping from token ID to approved address\\n    mapping (uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping (address => mapping (address => bool)) private _operatorApprovals;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Optional mapping for token URIs\\n    mapping (uint256 => string) private _tokenURIs;\\n\\n    // Base URI\\n    string private _baseURI;\\n\\n    /*\\n     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\\n     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\\n     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\\n     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\\n     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\\n     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\\n     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\\n     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\\n     *\\n     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\\n     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\\n\\n    /*\\n     *     bytes4(keccak256('name()')) == 0x06fdde03\\n     *     bytes4(keccak256('symbol()')) == 0x95d89b41\\n     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\\n     *\\n     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\\n\\n    /*\\n     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\\n     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\\n     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\\n     *\\n     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\\n     */\\n    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n\\n        // register the supported interfaces to conform to ERC721 via ERC165\\n        _registerInterface(_INTERFACE_ID_ERC721);\\n        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\\n        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _holderTokens[owner].length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        return _tokenOwners.get(tokenId, \\\"ERC721: owner query for nonexistent token\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\n        return string(abi.encodePacked(base, tokenId.toString()));\\n    }\\n\\n    /**\\n    * @dev Returns the base URI set via {_setBaseURI}. This will be\\n    * automatically added as a prefix in {tokenURI} to each token's URI, or\\n    * to the token ID if no specific URI is set for that token ID.\\n    */\\n    function baseURI() public view virtual returns (string memory) {\\n        return _baseURI;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        return _holderTokens[owner].at(index);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\\n        return _tokenOwners.length();\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        (uint256 tokenId, ) = _tokenOwners.at(index);\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _tokenOwners.contains(tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     d*\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\\n        _mint(to, tokenId);\\n        require(_checkOnERC721Received(address(0), to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId); // internal owner\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        // Clear metadata (if any)\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n\\n        _holderTokens[owner].remove(tokenId);\\n\\n        _tokenOwners.remove(tokenId);\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\"); // internal owner\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _holderTokens[from].remove(tokenId);\\n        _holderTokens[to].add(tokenId);\\n\\n        _tokenOwners.set(tokenId, to);\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev Internal function to set the base URI for all token IDs. It is\\n     * automatically added as a prefix to the value returned in {tokenURI},\\n     * or to the token ID if {tokenURI} is empty.\\n     */\\n    function _setBaseURI(string memory baseURI_) internal virtual {\\n        _baseURI = baseURI_;\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\\n        private returns (bool)\\n    {\\n        if (!to.isContract()) {\\n            return true;\\n        }\\n        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\\n            IERC721Receiver(to).onERC721Received.selector,\\n            _msgSender(),\\n            from,\\n            tokenId,\\n            _data\\n        ), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n        bytes4 retval = abi.decode(returndata, (bytes4));\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId); // internal owner\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\\n}\\n\",\"keccak256\":\"0x118ed7540f56b21ff92e21ebaa73584048e98d2ac04ca67571329bb8dbd9032f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"../../introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n      * - `from` cannot be the zero address.\\n      * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0x2d99a0deb6648c34fbc66d6ac4a2d64798d7a5321b45624f6736fadc63da1962\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6bd1b1218338b6f9fe17776f48623b4ac3d8a40405f74a44bc23c00abe2ca13\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xccb917776f826ac6b68bd5a15a5f711e3967848a52ba11e6104d9a4f593314a7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x52146049d6709c870e8ddcd988b5155cb6c5d640cfcd8978aee52bc1ba2ec4eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableMap for EnumerableMap.UintToAddressMap;\\n *\\n *     // Declare a set state variable\\n *     EnumerableMap.UintToAddressMap private myMap;\\n * }\\n * ```\\n *\\n * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\\n * supported.\\n */\\nlibrary EnumerableMap {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Map type with\\n    // bytes32 keys and values.\\n    // The Map implementation uses private functions, and user-facing\\n    // implementations (such as Uint256ToAddressMap) are just wrappers around\\n    // the underlying Map.\\n    // This means that we can only create new EnumerableMaps for types that fit\\n    // in bytes32.\\n\\n    struct MapEntry {\\n        bytes32 _key;\\n        bytes32 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) { // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({ _key: key, _value: value }));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) { // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n   /**\\n    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of entries inside the\\n    * array, and it may change when more entries are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n        require(map._entries.length > index, \\\"EnumerableMap: index out of bounds\\\");\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        if (keyIndex == 0) return (false, 0); // Equivalent to contains(map, key)\\n        return (true, map._entries[keyIndex - 1]._value); // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, \\\"EnumerableMap: nonexistent key\\\"); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToAddressMap\\n\\n    struct UintToAddressMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\\n        return _set(map._inner, bytes32(key), bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, bytes32(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToAddressMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the element stored at position `index` in the set. O(1).\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\\n        return (uint256(key), address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToAddressMap storage map, uint256 key) internal view returns (bool, address) {\\n        (bool success, bytes32 value) = _tryGet(map._inner, bytes32(key));\\n        return (success, address(uint160(uint256(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key)))));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\\n        return address(uint160(uint256(_get(map._inner, bytes32(key), errorMessage))));\\n    }\\n}\\n\",\"keccak256\":\"0x4b087f06b6670a131a5a14e53b1d2a5ef19c034cc5ec42eeebcf9554325744ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        uint256 index = digits - 1;\\n        temp = value;\\n        while (temp != 0) {\\n            buffer[index--] = bytes1(uint8(48 + temp % 10));\\n            temp /= 10;\\n        }\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0xa1e12f97981f1d0964b1c048978606a57127c56c438bab61cdfe269cad859a74\",\"license\":\"MIT\"},\"contracts/MardukGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\\nimport {ERC721} from '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {IMardukGate} from './interfaces/IMardukGate.sol';\\nimport {IIshtarGate} from './interfaces/IIshtarGate.sol';\\nimport {IGarden} from './interfaces/IGarden.sol';\\n\\n/**\\n * @title MardukGate\\n * @author Babylon Finance\\n *\\n * Contract that implements guestlists without NFT and checks Ishtar Gate when needed\\n */\\ncontract MardukGate is IMardukGate, Ownable {\\n    using SafeMath for uint256;\\n\\n    /* ============ Events ============ */\\n\\n    event GardenAccess(address indexed _member, address indexed _garden, uint8 _permission);\\n    event GardenCreationPower(address indexed _member, bool _creation);\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the Controller contract\\n    IBabController public controller;\\n    IIshtarGate private ishtarGate;\\n\\n    uint256 public override maxNumberOfInvites;\\n\\n    // Permissions by community user\\n    mapping(address => mapping(address => uint8)) public permissionsByCommunity;\\n    mapping(address => mapping(address => bool)) public isOverriden;\\n    mapping(address => bool) public canCreateAGarden;\\n    mapping(address => bool) public betaAccess;\\n    mapping(address => uint256) public gardenAccessCount;\\n\\n    mapping(address => address[]) public invitesPerGarden;\\n\\n    uint8 public constant NONE = 0;\\n    uint8 public constant JUST_LP = 1;\\n    uint8 public constant STEWARD = 2;\\n    uint8 public constant STRATEGIST = 3;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyGardenCreator(address _garden) {\\n        require(address(_garden) != address(0), 'Garden must exist');\\n        IGarden garden = IGarden(_garden);\\n        require(garden.controller() == address(controller), 'Controller must match');\\n        require(_isCreator(IGarden(_garden), msg.sender), 'Only creator can give access to garden');\\n        require(IBabController(controller).isGarden(address(_garden)));\\n        require(gardenAccessCount[_garden] <= maxNumberOfInvites, 'The number of contributors must be below the limit');\\n        _;\\n    }\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Sets the protocol controller\\n     *\\n     * @param _controller         Address of controller contract\\n     * @param _ishtarGate         Address of the ishtar gate\\n     */\\n    constructor(IBabController _controller, IIshtarGate _ishtarGate) {\\n        require(address(_controller) != address(0), 'Controller must exist');\\n        require(address(_ishtarGate) != address(0), 'Ishtar Gate must exist');\\n        controller = _controller;\\n        ishtarGate = _ishtarGate;\\n        maxNumberOfInvites = ishtarGate.maxNumberOfInvites() > 0 ? ishtarGate.maxNumberOfInvites() : 100;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Changs the number of invites we are going to give per garden\\n     *\\n     * @param _maxNumberOfInvites               New max number of invites per garden\\n     */\\n    function setMaxNumberOfInvites(uint256 _maxNumberOfInvites) external override onlyOwner {\\n        require(_maxNumberOfInvites > maxNumberOfInvites, 'Invites must be higher');\\n        maxNumberOfInvites = _maxNumberOfInvites;\\n    }\\n\\n    /**\\n     * Gives user access to a specific garden via Marduk Gate\\n     *\\n     * @param _user               Address of the user\\n     * @param _garden             Community that the gate grants access to\\n     * @param _permission        Permissions of what user can do in the community\\n     */\\n    function setGardenAccess(\\n        address _user,\\n        address _garden,\\n        uint8 _permission\\n    ) external override returns (uint256) {\\n        require(\\n            _isCreator(IGarden(_garden), msg.sender) || msg.sender == address(_garden),\\n            'Only creator or garden can change params'\\n        );\\n        require(address(_user) != address(0), 'User must exist');\\n        return _setIndividualGardenAccess(_user, _garden, _permission);\\n    }\\n\\n    /**\\n     * Uses Marduk Gate to grant a list of users with permissions to a specific garden\\n     *\\n     * @param _garden             Community that the gate grants access to\\n     * @param _users              Addresses of the users\\n     * @param _perms              List of permissions of what each user can do in the community\\n     */\\n    function grantGardenAccessBatch(\\n        address _garden,\\n        address[] calldata _users,\\n        uint8[] calldata _perms\\n    ) external override onlyGardenCreator(_garden) returns (bool) {\\n        require(_users.length == _perms.length, 'Permissions and users must match');\\n        for (uint8 i = 0; i < _users.length; i++) {\\n            require(address(_users[i]) != address(0), 'User must exist');\\n            _setIndividualGardenAccess(_users[i], _garden, _perms[i]);\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * Grants an user/remove garden creation capabilities via Marduk Gate.\\n     *\\n     * @param _user               Address of the user\\n     * @param _canCreate          Boolean with permissions as to whether the user can create gardens\\n     */\\n    function setCreatorPermissions(address _user, bool _canCreate) external override onlyOwner returns (uint256) {\\n        return _setCreatorPermissions(_user, _canCreate);\\n    }\\n\\n    /**\\n     * Grants a list of users with permissions to create gardens\\n     *\\n     * @param _users              Addresses of the users\\n     * @param _perms              Lists of booleans\\n     */\\n    function grantCreatorsInBatch(address[] calldata _users, bool[] calldata _perms)\\n        external\\n        override\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_users.length == _perms.length, 'Permissions and users must match');\\n        for (uint8 i = 0; i < _users.length; i++) {\\n            _setCreatorPermissions(_users[i], _perms[i]);\\n        }\\n        return true;\\n    }\\n\\n    /* ============ Getter Functions ============ */\\n\\n    /**\\n     * Check if a user can access the beta\\n     *\\n     * @param _user                     Address of the user\\n     * @return bool               Whether or not the user can access the beta\\n     */\\n    function canAccessBeta(address _user) external view override returns (bool) {\\n        return IERC721(address(ishtarGate)).balanceOf(_user) > 0 || betaAccess[_user];\\n    }\\n\\n    /**\\n     * Check if a user can create gardens\\n     *\\n     * @param _user                     Address of the user\\n     * @return _canCreate               Whether or not the user can create\\n     */\\n    function canCreate(address _user) external view override returns (bool) {\\n        return ishtarGate.canCreate(_user) || canCreateAGarden[_user];\\n    }\\n\\n    /**\\n     * Check if a user can join a specific garden\\n     *\\n     * @param _garden                     Address of the _garden\\n     * @param _user                       Address of the user\\n     * @return _canJoin                   Whether or not the user can join\\n     */\\n    function canJoinAGarden(address _garden, address _user) external view override returns (bool) {\\n        if (_isCreator(IGarden(_garden), _user)) {\\n            return true;\\n        }\\n        if (isOverriden[_garden][_user]) {\\n            return permissionsByCommunity[_garden][_user] >= JUST_LP;\\n        }\\n        return ishtarGate.canJoinAGarden(_garden, _user);\\n    }\\n\\n    /**\\n     * Check if a user can vote in a specific garden\\n     *\\n     * @param _garden                     Address of the _garden\\n     * @param _user                       Address of the user\\n     * @return _canVote                   Whether or not the user can vote\\n     */\\n    function canVoteInAGarden(address _garden, address _user) external view override returns (bool) {\\n        if (_isCreator(IGarden(_garden), _user)) {\\n            return true;\\n        }\\n        if (isOverriden[_garden][_user]) {\\n            return permissionsByCommunity[_garden][_user] >= STEWARD;\\n        }\\n        return ishtarGate.canVoteInAGarden(_garden, _user);\\n    }\\n\\n    /**\\n     * Check if a user can add strategies in a specific garden\\n     *\\n     * @param _garden                     Address of the _garden\\n     * @param _user                       Address of the user\\n     * @return _canStrategize             Whether or not the user can create strategies\\n     */\\n    function canAddStrategiesInAGarden(address _garden, address _user) external view override returns (bool) {\\n        if (_isCreator(IGarden(_garden), _user)) {\\n            return true;\\n        }\\n        if (isOverriden[_garden][_user]) {\\n            return permissionsByCommunity[_garden][_user] >= STRATEGIST;\\n        }\\n        return ishtarGate.canAddStrategiesInAGarden(_garden, _user);\\n    }\\n\\n    /**\\n     * Returns all the invites sent from a specific garden\\n     *\\n     * @param _garden                     Address of the _garden\\n     * @return address[]                  All the invites sent\\n     */\\n    function getInvitesPerGarden(address _garden) external view returns (address[] memory) {\\n        return invitesPerGarden[_garden];\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Grants access to an user and gives him access to a specific garden\\n     *\\n     * @param _user               Address of the user\\n     * @param _garden             Community that the gate grants access to\\n     * @param _permission        Permissions of what user can do in the community\\n     */\\n    function _setIndividualGardenAccess(\\n        address _user,\\n        address _garden,\\n        uint8 _permission\\n    ) private returns (uint256) {\\n        require(_permission <= 3, 'Permission out of bounds');\\n        if (_permission > 0 && permissionsByCommunity[_garden][_user] == 0) {\\n            require(gardenAccessCount[_garden] < maxNumberOfInvites, 'Max Number of invites reached');\\n            gardenAccessCount[_garden] = gardenAccessCount[_garden].add(1);\\n            invitesPerGarden[_garden].push(_user);\\n        }\\n        if (_permission == 0 && permissionsByCommunity[_garden][_user] > 0) {\\n            gardenAccessCount[_garden] = gardenAccessCount[_garden].sub(1);\\n        }\\n        permissionsByCommunity[_garden][_user] = _permission;\\n        isOverriden[_garden][_user] = true;\\n        betaAccess[_user] = true;\\n        emit GardenAccess(_user, _garden, _permission);\\n        return 0;\\n    }\\n\\n    /**\\n     * Grants access to an user and give/remove him garden creation capabilities.\\n     *\\n     * @param _user               Address of the user\\n     * @param _canCreate          Boolean with permissions as to whether the user can create gardens\\n     */\\n    function _setCreatorPermissions(address _user, bool _canCreate) private returns (uint256) {\\n        require(address(_user) != address(0), 'User must exist');\\n        canCreateAGarden[_user] = _canCreate;\\n        emit GardenCreationPower(_user, _canCreate);\\n        return 0;\\n    }\\n\\n    // Checks if an address is a creator\\n    function _isCreator(IGarden _garden, address _member) private view returns (bool) {\\n        return\\n            _member != address(0) &&\\n            (_garden.extraCreators(0) == _member ||\\n                _garden.extraCreators(1) == _member ||\\n                _garden.extraCreators(2) == _member ||\\n                _garden.extraCreators(3) == _member ||\\n                _member == _garden.creator());\\n    }\\n}\\n\",\"keccak256\":\"0xcda833d93cc5790a946c96b0b3d53c218cfb627d72b7cddd53edc01754bfada1\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editIshtarGate(address _ishtarGate) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function enableBABLMiningProgram() external;\\n\\n    function setAllowPublicGardens() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function maxContributorsPerGarden() external view returns (uint256);\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function openPublicGardenCreation() external;\\n\\n    function setMaxContributorsPerGarden(uint256 _newMax) external;\\n\\n    function owner() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getProfitSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getBABLSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xab3f2cba4de7d72e420e4833dd13cc3e124f95275a47166c833317fcdbe9d1f6\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabylonGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributedx under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabylonGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Guestlists\\n */\\ninterface IBabylonGate {\\n    /* ============ Functions ============ */\\n\\n    function setGardenAccess(\\n        address _user,\\n        address _garden,\\n        uint8 _permission\\n    ) external returns (uint256);\\n\\n    function setCreatorPermissions(address _user, bool _canCreate) external returns (uint256);\\n\\n    function grantGardenAccessBatch(\\n        address _garden,\\n        address[] calldata _users,\\n        uint8[] calldata _perms\\n    ) external returns (bool);\\n\\n    function maxNumberOfInvites() external view returns (uint256);\\n\\n    function setMaxNumberOfInvites(uint256 _maxNumberOfInvites) external;\\n\\n    function grantCreatorsInBatch(address[] calldata _users, bool[] calldata _perms) external returns (bool);\\n\\n    function canCreate(address _user) external view returns (bool);\\n\\n    function canJoinAGarden(address _garden, address _user) external view returns (bool);\\n\\n    function canVoteInAGarden(address _garden, address _user) external view returns (bool);\\n\\n    function canAddStrategiesInAGarden(address _garden, address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xaa576606ca901fdba7fe35d294825f6b3cc23e8e9992e735116d75d352fbb35b\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        address _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function maxContributors() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2b6caf65d253e9c8b5f22c4862dace55a9a391e5af04c97d339e1d80016db144\",\"license\":\"Apache License\"},\"contracts/interfaces/IIshtarGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IBabylonGate} from './IBabylonGate.sol';\\n\\n/**\\n * @title IIshtarGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Gate Guestlist NFT\\n */\\ninterface IIshtarGate is IBabylonGate {\\n    /* ============ Functions ============ */\\n\\n    function tokenURI() external view returns (string memory);\\n\\n    function updateGardenURI(string memory _tokenURI) external;\\n}\\n\",\"keccak256\":\"0x0b356739f4fbed6eca4c8cbe608b0d6cc5d2e458ce4d5e23a4fa9a4dc8603560\",\"license\":\"Apache License\"},\"contracts/interfaces/IMardukGate.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IBabylonGate} from './IBabylonGate.sol';\\n\\n/**\\n * @title IMardukGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Gate Guestlist NFT\\n */\\ninterface IMardukGate is IBabylonGate {\\n    /* ============ Functions ============ */\\n\\n    function canAccessBeta(address _user) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb815c2f29a9ce054c89cd2f72288c3f2b013b403c68f202bdc055190b02e0c19\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001fbb38038062001fbb833981810160405260408110156200003757600080fd5b50805160209091015160006200004c62000283565b600080546001600160a01b0319166001600160a01b0383169081178255604051929350917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038216620000f2576040805162461bcd60e51b815260206004820152601560248201527f436f6e74726f6c6c6572206d7573742065786973740000000000000000000000604482015290519081900360640190fd5b6001600160a01b0381166200014e576040805162461bcd60e51b815260206004820152601660248201527f4973687461722047617465206d75737420657869737400000000000000000000604482015290519081900360640190fd5b600180546001600160a01b038085166001600160a01b03199283161790925560028054848416921691909117908190556040805163b07b7e7f60e01b81529051600093929092169163b07b7e7f91600480820192602092909190829003018186803b158015620001bd57600080fd5b505afa158015620001d2573d6000803e3d6000fd5b505050506040513d6020811015620001e957600080fd5b505111620001f957606462000277565b600260009054906101000a90046001600160a01b03166001600160a01b031663b07b7e7f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200024857600080fd5b505afa1580156200025d573d6000803e3d6000fd5b505050506040513d60208110156200027457600080fd5b50515b60035550620002879050565b3390565b611d2480620002976000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637804a5dc116100ee578063b07b7e7f11610097578063e9c6fe3111610071578063e9c6fe3114610650578063f118155c1461067e578063f2fde38b146106a4578063f77c4791146106ca576101ae565b8063b07b7e7f14610558578063c7ec5d5d14610560578063d16106521461058e576101ae565b806383525394116100c857806383525394146105405780638da5cb5b146105485780639cfdede314610550576101ae565b80637804a5dc146104765780637909745a1461049c57806382e8942314610512576101ae565b806343ee7eb91161015b5780636326847b116101355780636326847b146103e757806365f641181461041557806370793b4b14610434578063715018a61461046e576101ae565b806343ee7eb9146103435780634d98fbf01461038b5780635066c714146103b9576101ae565b80632561e6b21161018c5780632561e6b21461023157806327844ee21461030357806331eff3831461030b576101ae565b8063187af87d146101b35780631b8f1190146101ed57806320382f8e1461020b575b600080fd5b6101d9600480360360208110156101c957600080fd5b50356001600160a01b03166106d2565b604080519115158252519081900360200190f35b6101f56106e7565b6040805160ff9092168252519081900360200190f35b6101d96004803603602081101561022157600080fd5b50356001600160a01b03166106ec565b6101d96004803603606081101561024757600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561027257600080fd5b82018360208201111561028457600080fd5b803590602001918460208302840111640100000000831117156102a657600080fd5b9193909290916020810190356401000000008111156102c457600080fd5b8201836020820111156102d657600080fd5b803590602001918460208302840111640100000000831117156102f857600080fd5b5090925090506107aa565b6101f5610b56565b6103316004803603602081101561032157600080fd5b50356001600160a01b0316610b5b565b60408051918252519081900360200190f35b61036f6004803603604081101561035957600080fd5b506001600160a01b038135169060200135610b6d565b604080516001600160a01b039092168252519081900360200190f35b6101d9600480360360408110156103a157600080fd5b506001600160a01b0381358116916020013516610ba5565b6101d9600480360360408110156103cf57600080fd5b506001600160a01b0381358116916020013516610cc2565b6101d9600480360360408110156103fd57600080fd5b506001600160a01b0381358116916020013516610dac565b6104326004803603602081101561042b57600080fd5b5035610dcc565b005b6103316004803603606081101561044a57600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff16610e9b565b610432610f55565b6101d96004803603602081101561048c57600080fd5b50356001600160a01b0316611020565b6104c2600480360360208110156104b257600080fd5b50356001600160a01b03166110db565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104fe5781810151838201526020016104e6565b505050509050019250505060405180910390f35b6103316004803603604081101561052857600080fd5b506001600160a01b0381351690602001351515611151565b6101f56111d8565b61036f6111dd565b6101f56111ec565b6103316111f1565b6101d96004803603604081101561057657600080fd5b506001600160a01b03813581169160200135166111f7565b6101d9600480360360408110156105a457600080fd5b8101906020810181356401000000008111156105bf57600080fd5b8201836020820111156105d157600080fd5b803590602001918460208302840111640100000000831117156105f357600080fd5b91939092909160208101903564010000000081111561061157600080fd5b82018360208201111561062357600080fd5b8035906020019184602083028401116401000000008311171561064557600080fd5b5090925090506112e1565b6101f56004803603604081101561066657600080fd5b506001600160a01b038135811691602001351661140d565b6101d96004803603602081101561069457600080fd5b50356001600160a01b031661142d565b610432600480360360208110156106ba57600080fd5b50356001600160a01b0316611442565b61036f611563565b60066020526000908152604090205460ff1681565b600281565b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151600093849316916370a08231916024808301926020929190829003018186803b15801561075457600080fd5b505afa158015610768573d6000803e3d6000fd5b505050506040513d602081101561077e57600080fd5b505111806107a457506001600160a01b03821660009081526007602052604090205460ff165b92915050565b6000856001600160a01b038116610808576040805162461bcd60e51b815260206004820152601160248201527f47617264656e206d757374206578697374000000000000000000000000000000604482015290519081900360640190fd5b600154604080517ff77c4791000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03908116929084169163f77c479191600480820192602092909190829003018186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b50516001600160a01b0316146108f3576040805162461bcd60e51b815260206004820152601560248201527f436f6e74726f6c6c6572206d757374206d617463680000000000000000000000604482015290519081900360640190fd5b6108fd8233611572565b6109385760405162461bcd60e51b8152600401808060200182810382526026815260200180611c496026913960400191505060405180910390fd5b600154604080517f364d11810000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151919092169163364d1181916024808301926020929190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50516109d357600080fd5b6003546001600160a01b0383166000908152600860205260409020541115610a2c5760405162461bcd60e51b8152600401808060200182810382526032815260200180611c6f6032913960400191505060405180910390fd5b858414610a80576040805162461bcd60e51b815260206004820181905260248201527f5065726d697373696f6e7320616e64207573657273206d757374206d61746368604482015290519081900360640190fd5b60005b60ff8116871115610b47576000888860ff8416818110610a9f57fe5b905060200201356001600160a01b03166001600160a01b03161415610afd576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b610b3e88888360ff16818110610b0f57fe5b905060200201356001600160a01b03168a88888560ff16818110610b2f57fe5b9050602002013560ff16611831565b50600101610a83565b50600198975050505050505050565b600181565b60086020526000908152604090205481565b60096020528160005260406000208181548110610b8957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000610bb18383611572565b15610bbe575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff1615610c2157506001600160a01b03828116600090815260046020908152604080832093851683529290522054600260ff90911610156107a4565b600254604080517f4d98fbf00000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015291519190921691634d98fbf0916044808301926020929190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6020811015610cb957600080fd5b50519392505050565b6000610cce8383611572565b15610cdb575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff1615610d3e57506001600160a01b03828116600090815260046020908152604080832093851683529290522054600360ff90911610156107a4565b600254604080517f5066c7140000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015291519190921691635066c714916044808301926020929190829003018186803b158015610c8f57600080fd5b600560209081526000928352604080842090915290825290205460ff1681565b610dd4611ad9565b6001600160a01b0316610de56111dd565b6001600160a01b031614610e40576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6003548111610e96576040805162461bcd60e51b815260206004820152601660248201527f496e7669746573206d7573742062652068696768657200000000000000000000604482015290519081900360640190fd5b600355565b6000610ea78333611572565b80610eba5750336001600160a01b038416145b610ef55760405162461bcd60e51b8152600401808060200182810382526028815260200180611cc76028913960400191505060405180910390fd5b6001600160a01b038416610f42576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b610f4d848484611831565b949350505050565b610f5d611ad9565b6001600160a01b0316610f6e6111dd565b6001600160a01b031614610fc9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600254604080517f7804a5dc0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291516000939290921691637804a5dc91602480820192602092909190829003018186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d60208110156110b457600080fd5b5051806107a45750506001600160a01b031660009081526006602052604090205460ff1690565b6001600160a01b03811660009081526009602090815260409182902080548351818402810184019094528084526060939283018282801561114557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611127575b50505050509050919050565b600061115b611ad9565b6001600160a01b031661116c6111dd565b6001600160a01b0316146111c7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6111d18383611add565b9392505050565b600081565b6000546001600160a01b031690565b600381565b60035481565b60006112038383611572565b15611210575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff161561127357506001600160a01b03828116600090815260046020908152604080832093851683529290522054600160ff90911610156107a4565b600254604080517fc7ec5d5d0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529151919092169163c7ec5d5d916044808301926020929190829003018186803b158015610c8f57600080fd5b60006112eb611ad9565b6001600160a01b03166112fc6111dd565b6001600160a01b031614611357576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8382146113ab576040805162461bcd60e51b815260206004820181905260248201527f5065726d697373696f6e7320616e64207573657273206d757374206d61746368604482015290519081900360640190fd5b60005b60ff8116851115611401576113f886868360ff168181106113cb57fe5b905060200201356001600160a01b031685858460ff168181106113ea57fe5b905060200201351515611add565b506001016113ae565b50600195945050505050565b600460209081526000928352604080842090915290825290205460ff1681565b60076020526000908152604090205460ff1681565b61144a611ad9565b6001600160a01b031661145b6111dd565b6001600160a01b0316146114b6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166114fb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ca16026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60006001600160a01b038216158015906111d15750816001600160a01b0316836001600160a01b03166363f568b960006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d602081101561160057600080fd5b50516001600160a01b031614806116985750816001600160a01b0316836001600160a01b03166363f568b960016040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561166157600080fd5b505afa158015611675573d6000803e3d6000fd5b505050506040513d602081101561168b57600080fd5b50516001600160a01b0316145b806117245750816001600160a01b0316836001600160a01b03166363f568b960026040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d602081101561171757600080fd5b50516001600160a01b0316145b806117b05750816001600160a01b0316836001600160a01b03166363f568b960036040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d60208110156117a357600080fd5b50516001600160a01b0316145b806111d15750826001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d602081101561181957600080fd5b50516001600160a01b03838116911614905092915050565b600060038260ff16111561188c576040805162461bcd60e51b815260206004820152601860248201527f5065726d697373696f6e206f7574206f6620626f756e64730000000000000000604482015290519081900360640190fd5b60008260ff161180156118c557506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff16155b156119b7576003546001600160a01b03841660009081526008602052604090205410611938576040805162461bcd60e51b815260206004820152601d60248201527f4d6178204e756d626572206f6620696e76697465732072656163686564000000604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604090205461195c906001611b91565b6001600160a01b03848116600090815260086020908152604080832094909455600981529281208054600181018255908252929020909101805473ffffffffffffffffffffffffffffffffffffffff19169186169190911790555b60ff82161580156119ef57506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff1615155b15611a32576001600160a01b038316600090815260086020526040902054611a18906001611beb565b6001600160a01b0384166000908152600860205260409020555b6001600160a01b038084166000818152600460209081526040808320948916808452948252808320805460ff891660ff199182168117909255858552600584528285208786528452828520805482166001908117909155600785529483902080549091169094179093558051928352519293927f23076a0bfdc16713e0e8cf883ead008da91a55a6fc673e9c7f58745781d05e4a9281900390910190a35060009392505050565b3390565b60006001600160a01b038316611b2c576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b6001600160a01b038316600081815260066020908152604091829020805460ff1916861515908117909155825190815291517fe0171d0fab3d6d56e1e7e4e35ae2c54571d00c5a4887a095e895e44901faea529281900390910190a250600092915050565b6000828201838110156111d1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611c42576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f6e6c792063726561746f722063616e20676976652061636365737320746f2067617264656e546865206e756d626572206f6620636f6e7472696275746f7273206d7573742062652062656c6f7720746865206c696d69744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f6e6c792063726561746f72206f722067617264656e2063616e206368616e676520706172616d73a2646970667358221220972ee54b48e67a92174275b56bba02e760aacb01292432b857247f547fd40fc264736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c80637804a5dc116100ee578063b07b7e7f11610097578063e9c6fe3111610071578063e9c6fe3114610650578063f118155c1461067e578063f2fde38b146106a4578063f77c4791146106ca576101ae565b8063b07b7e7f14610558578063c7ec5d5d14610560578063d16106521461058e576101ae565b806383525394116100c857806383525394146105405780638da5cb5b146105485780639cfdede314610550576101ae565b80637804a5dc146104765780637909745a1461049c57806382e8942314610512576101ae565b806343ee7eb91161015b5780636326847b116101355780636326847b146103e757806365f641181461041557806370793b4b14610434578063715018a61461046e576101ae565b806343ee7eb9146103435780634d98fbf01461038b5780635066c714146103b9576101ae565b80632561e6b21161018c5780632561e6b21461023157806327844ee21461030357806331eff3831461030b576101ae565b8063187af87d146101b35780631b8f1190146101ed57806320382f8e1461020b575b600080fd5b6101d9600480360360208110156101c957600080fd5b50356001600160a01b03166106d2565b604080519115158252519081900360200190f35b6101f56106e7565b6040805160ff9092168252519081900360200190f35b6101d96004803603602081101561022157600080fd5b50356001600160a01b03166106ec565b6101d96004803603606081101561024757600080fd5b6001600160a01b03823516919081019060408101602082013564010000000081111561027257600080fd5b82018360208201111561028457600080fd5b803590602001918460208302840111640100000000831117156102a657600080fd5b9193909290916020810190356401000000008111156102c457600080fd5b8201836020820111156102d657600080fd5b803590602001918460208302840111640100000000831117156102f857600080fd5b5090925090506107aa565b6101f5610b56565b6103316004803603602081101561032157600080fd5b50356001600160a01b0316610b5b565b60408051918252519081900360200190f35b61036f6004803603604081101561035957600080fd5b506001600160a01b038135169060200135610b6d565b604080516001600160a01b039092168252519081900360200190f35b6101d9600480360360408110156103a157600080fd5b506001600160a01b0381358116916020013516610ba5565b6101d9600480360360408110156103cf57600080fd5b506001600160a01b0381358116916020013516610cc2565b6101d9600480360360408110156103fd57600080fd5b506001600160a01b0381358116916020013516610dac565b6104326004803603602081101561042b57600080fd5b5035610dcc565b005b6103316004803603606081101561044a57600080fd5b5080356001600160a01b03908116916020810135909116906040013560ff16610e9b565b610432610f55565b6101d96004803603602081101561048c57600080fd5b50356001600160a01b0316611020565b6104c2600480360360208110156104b257600080fd5b50356001600160a01b03166110db565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156104fe5781810151838201526020016104e6565b505050509050019250505060405180910390f35b6103316004803603604081101561052857600080fd5b506001600160a01b0381351690602001351515611151565b6101f56111d8565b61036f6111dd565b6101f56111ec565b6103316111f1565b6101d96004803603604081101561057657600080fd5b506001600160a01b03813581169160200135166111f7565b6101d9600480360360408110156105a457600080fd5b8101906020810181356401000000008111156105bf57600080fd5b8201836020820111156105d157600080fd5b803590602001918460208302840111640100000000831117156105f357600080fd5b91939092909160208101903564010000000081111561061157600080fd5b82018360208201111561062357600080fd5b8035906020019184602083028401116401000000008311171561064557600080fd5b5090925090506112e1565b6101f56004803603604081101561066657600080fd5b506001600160a01b038135811691602001351661140d565b6101d96004803603602081101561069457600080fd5b50356001600160a01b031661142d565b610432600480360360208110156106ba57600080fd5b50356001600160a01b0316611442565b61036f611563565b60066020526000908152604090205460ff1681565b600281565b600254604080517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529151600093849316916370a08231916024808301926020929190829003018186803b15801561075457600080fd5b505afa158015610768573d6000803e3d6000fd5b505050506040513d602081101561077e57600080fd5b505111806107a457506001600160a01b03821660009081526007602052604090205460ff165b92915050565b6000856001600160a01b038116610808576040805162461bcd60e51b815260206004820152601160248201527f47617264656e206d757374206578697374000000000000000000000000000000604482015290519081900360640190fd5b600154604080517ff77c4791000000000000000000000000000000000000000000000000000000008152905183926001600160a01b03908116929084169163f77c479191600480820192602092909190829003018186803b15801561086c57600080fd5b505afa158015610880573d6000803e3d6000fd5b505050506040513d602081101561089657600080fd5b50516001600160a01b0316146108f3576040805162461bcd60e51b815260206004820152601560248201527f436f6e74726f6c6c6572206d757374206d617463680000000000000000000000604482015290519081900360640190fd5b6108fd8233611572565b6109385760405162461bcd60e51b8152600401808060200182810382526026815260200180611c496026913960400191505060405180910390fd5b600154604080517f364d11810000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301529151919092169163364d1181916024808301926020929190829003018186803b15801561099e57600080fd5b505afa1580156109b2573d6000803e3d6000fd5b505050506040513d60208110156109c857600080fd5b50516109d357600080fd5b6003546001600160a01b0383166000908152600860205260409020541115610a2c5760405162461bcd60e51b8152600401808060200182810382526032815260200180611c6f6032913960400191505060405180910390fd5b858414610a80576040805162461bcd60e51b815260206004820181905260248201527f5065726d697373696f6e7320616e64207573657273206d757374206d61746368604482015290519081900360640190fd5b60005b60ff8116871115610b47576000888860ff8416818110610a9f57fe5b905060200201356001600160a01b03166001600160a01b03161415610afd576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b610b3e88888360ff16818110610b0f57fe5b905060200201356001600160a01b03168a88888560ff16818110610b2f57fe5b9050602002013560ff16611831565b50600101610a83565b50600198975050505050505050565b600181565b60086020526000908152604090205481565b60096020528160005260406000208181548110610b8957600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000610bb18383611572565b15610bbe575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff1615610c2157506001600160a01b03828116600090815260046020908152604080832093851683529290522054600260ff90911610156107a4565b600254604080517f4d98fbf00000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015291519190921691634d98fbf0916044808301926020929190829003018186803b158015610c8f57600080fd5b505afa158015610ca3573d6000803e3d6000fd5b505050506040513d6020811015610cb957600080fd5b50519392505050565b6000610cce8383611572565b15610cdb575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff1615610d3e57506001600160a01b03828116600090815260046020908152604080832093851683529290522054600360ff90911610156107a4565b600254604080517f5066c7140000000000000000000000000000000000000000000000000000000081526001600160a01b038681166004830152858116602483015291519190921691635066c714916044808301926020929190829003018186803b158015610c8f57600080fd5b600560209081526000928352604080842090915290825290205460ff1681565b610dd4611ad9565b6001600160a01b0316610de56111dd565b6001600160a01b031614610e40576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6003548111610e96576040805162461bcd60e51b815260206004820152601660248201527f496e7669746573206d7573742062652068696768657200000000000000000000604482015290519081900360640190fd5b600355565b6000610ea78333611572565b80610eba5750336001600160a01b038416145b610ef55760405162461bcd60e51b8152600401808060200182810382526028815260200180611cc76028913960400191505060405180910390fd5b6001600160a01b038416610f42576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b610f4d848484611831565b949350505050565b610f5d611ad9565b6001600160a01b0316610f6e6111dd565b6001600160a01b031614610fc9576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b600080546040516001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600254604080517f7804a5dc0000000000000000000000000000000000000000000000000000000081526001600160a01b03848116600483015291516000939290921691637804a5dc91602480820192602092909190829003018186803b15801561108a57600080fd5b505afa15801561109e573d6000803e3d6000fd5b505050506040513d60208110156110b457600080fd5b5051806107a45750506001600160a01b031660009081526006602052604090205460ff1690565b6001600160a01b03811660009081526009602090815260409182902080548351818402810184019094528084526060939283018282801561114557602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611127575b50505050509050919050565b600061115b611ad9565b6001600160a01b031661116c6111dd565b6001600160a01b0316146111c7576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6111d18383611add565b9392505050565b600081565b6000546001600160a01b031690565b600381565b60035481565b60006112038383611572565b15611210575060016107a4565b6001600160a01b0380841660009081526005602090815260408083209386168352929052205460ff161561127357506001600160a01b03828116600090815260046020908152604080832093851683529290522054600160ff90911610156107a4565b600254604080517fc7ec5d5d0000000000000000000000000000000000000000000000000000000081526001600160a01b03868116600483015285811660248301529151919092169163c7ec5d5d916044808301926020929190829003018186803b158015610c8f57600080fd5b60006112eb611ad9565b6001600160a01b03166112fc6111dd565b6001600160a01b031614611357576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b8382146113ab576040805162461bcd60e51b815260206004820181905260248201527f5065726d697373696f6e7320616e64207573657273206d757374206d61746368604482015290519081900360640190fd5b60005b60ff8116851115611401576113f886868360ff168181106113cb57fe5b905060200201356001600160a01b031685858460ff168181106113ea57fe5b905060200201351515611add565b506001016113ae565b50600195945050505050565b600460209081526000928352604080842090915290825290205460ff1681565b60076020526000908152604090205460ff1681565b61144a611ad9565b6001600160a01b031661145b6111dd565b6001600160a01b0316146114b6576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166114fb5760405162461bcd60e51b8152600401808060200182810382526026815260200180611ca16026913960400191505060405180910390fd5b600080546040516001600160a01b03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001546001600160a01b031681565b60006001600160a01b038216158015906111d15750816001600160a01b0316836001600160a01b03166363f568b960006040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156115d657600080fd5b505afa1580156115ea573d6000803e3d6000fd5b505050506040513d602081101561160057600080fd5b50516001600160a01b031614806116985750816001600160a01b0316836001600160a01b03166363f568b960016040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561166157600080fd5b505afa158015611675573d6000803e3d6000fd5b505050506040513d602081101561168b57600080fd5b50516001600160a01b0316145b806117245750816001600160a01b0316836001600160a01b03166363f568b960026040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156116ed57600080fd5b505afa158015611701573d6000803e3d6000fd5b505050506040513d602081101561171757600080fd5b50516001600160a01b0316145b806117b05750816001600160a01b0316836001600160a01b03166363f568b960036040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561177957600080fd5b505afa15801561178d573d6000803e3d6000fd5b505050506040513d60208110156117a357600080fd5b50516001600160a01b0316145b806111d15750826001600160a01b03166302d05d3f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156117ef57600080fd5b505afa158015611803573d6000803e3d6000fd5b505050506040513d602081101561181957600080fd5b50516001600160a01b03838116911614905092915050565b600060038260ff16111561188c576040805162461bcd60e51b815260206004820152601860248201527f5065726d697373696f6e206f7574206f6620626f756e64730000000000000000604482015290519081900360640190fd5b60008260ff161180156118c557506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff16155b156119b7576003546001600160a01b03841660009081526008602052604090205410611938576040805162461bcd60e51b815260206004820152601d60248201527f4d6178204e756d626572206f6620696e76697465732072656163686564000000604482015290519081900360640190fd5b6001600160a01b03831660009081526008602052604090205461195c906001611b91565b6001600160a01b03848116600090815260086020908152604080832094909455600981529281208054600181018255908252929020909101805473ffffffffffffffffffffffffffffffffffffffff19169186169190911790555b60ff82161580156119ef57506001600160a01b0380841660009081526004602090815260408083209388168352929052205460ff1615155b15611a32576001600160a01b038316600090815260086020526040902054611a18906001611beb565b6001600160a01b0384166000908152600860205260409020555b6001600160a01b038084166000818152600460209081526040808320948916808452948252808320805460ff891660ff199182168117909255858552600584528285208786528452828520805482166001908117909155600785529483902080549091169094179093558051928352519293927f23076a0bfdc16713e0e8cf883ead008da91a55a6fc673e9c7f58745781d05e4a9281900390910190a35060009392505050565b3390565b60006001600160a01b038316611b2c576040805162461bcd60e51b815260206004820152600f60248201526e155cd95c881b5d5cdd08195e1a5cdd608a1b604482015290519081900360640190fd5b6001600160a01b038316600081815260066020908152604091829020805460ff1916861515908117909155825190815291517fe0171d0fab3d6d56e1e7e4e35ae2c54571d00c5a4887a095e895e44901faea529281900390910190a250600092915050565b6000828201838110156111d1576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b600082821115611c42576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b5090039056fe4f6e6c792063726561746f722063616e20676976652061636365737320746f2067617264656e546865206e756d626572206f6620636f6e7472696275746f7273206d7573742062652062656c6f7720746865206c696d69744f776e61626c653a206e6577206f776e657220697320746865207a65726f20616464726573734f6e6c792063726561746f72206f722067617264656e2063616e206368616e676520706172616d73a2646970667358221220972ee54b48e67a92174275b56bba02e760aacb01292432b857247f547fd40fc264736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Contract that implements guestlists without NFT and checks Ishtar Gate when needed",
    "kind": "dev",
    "methods": {
      "canAccessBeta(address)": {
        "params": {
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "bool               Whether or not the user can access the beta"
        }
      },
      "canAddStrategiesInAGarden(address,address)": {
        "params": {
          "_garden": "Address of the _garden",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "_canStrategize             Whether or not the user can create strategies"
        }
      },
      "canCreate(address)": {
        "params": {
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "_canCreate               Whether or not the user can create"
        }
      },
      "canJoinAGarden(address,address)": {
        "params": {
          "_garden": "Address of the _garden",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "_canJoin                   Whether or not the user can join"
        }
      },
      "canVoteInAGarden(address,address)": {
        "params": {
          "_garden": "Address of the _garden",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "_canVote                   Whether or not the user can vote"
        }
      },
      "constructor": {
        "params": {
          "_controller": "Address of controller contract",
          "_ishtarGate": "Address of the ishtar gate"
        }
      },
      "getInvitesPerGarden(address)": {
        "params": {
          "_garden": "Address of the _garden"
        },
        "returns": {
          "_0": "address[]                  All the invites sent"
        }
      },
      "grantCreatorsInBatch(address[],bool[])": {
        "params": {
          "_perms": "Lists of booleans",
          "_users": "Addresses of the users"
        }
      },
      "grantGardenAccessBatch(address,address[],uint8[])": {
        "params": {
          "_garden": "Community that the gate grants access to",
          "_perms": "List of permissions of what each user can do in the community",
          "_users": "Addresses of the users"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCreatorPermissions(address,bool)": {
        "params": {
          "_canCreate": "Boolean with permissions as to whether the user can create gardens",
          "_user": "Address of the user"
        }
      },
      "setGardenAccess(address,address,uint8)": {
        "params": {
          "_garden": "Community that the gate grants access to",
          "_permission": "Permissions of what user can do in the community",
          "_user": "Address of the user"
        }
      },
      "setMaxNumberOfInvites(uint256)": {
        "params": {
          "_maxNumberOfInvites": "New max number of invites per garden"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "MardukGate",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "canAccessBeta(address)": {
        "notice": "Check if a user can access the beta"
      },
      "canAddStrategiesInAGarden(address,address)": {
        "notice": "Check if a user can add strategies in a specific garden"
      },
      "canCreate(address)": {
        "notice": "Check if a user can create gardens"
      },
      "canJoinAGarden(address,address)": {
        "notice": "Check if a user can join a specific garden"
      },
      "canVoteInAGarden(address,address)": {
        "notice": "Check if a user can vote in a specific garden"
      },
      "constructor": {
        "notice": "Sets the protocol controller"
      },
      "getInvitesPerGarden(address)": {
        "notice": "Returns all the invites sent from a specific garden"
      },
      "grantCreatorsInBatch(address[],bool[])": {
        "notice": "Grants a list of users with permissions to create gardens"
      },
      "grantGardenAccessBatch(address,address[],uint8[])": {
        "notice": "Uses Marduk Gate to grant a list of users with permissions to a specific garden"
      },
      "setCreatorPermissions(address,bool)": {
        "notice": "Grants an user/remove garden creation capabilities via Marduk Gate."
      },
      "setGardenAccess(address,address,uint8)": {
        "notice": "Gives user access to a specific garden via Marduk Gate"
      },
      "setMaxNumberOfInvites(uint256)": {
        "notice": "Changs the number of invites we are going to give per garden"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1456,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13250,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "controller",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IBabController)33636"
      },
      {
        "astId": 13252,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "ishtarGate",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IIshtarGate)34249"
      },
      {
        "astId": 13255,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "maxNumberOfInvites",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 13261,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "permissionsByCommunity",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint8))"
      },
      {
        "astId": 13267,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "isOverriden",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 13271,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "canCreateAGarden",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13275,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "betaAccess",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 13279,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "gardenAccessCount",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 13284,
        "contract": "contracts/MardukGate.sol:MardukGate",
        "label": "invitesPerGarden",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)33636": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_contract(IIshtarGate)34249": {
        "encoding": "inplace",
        "label": "contract IIshtarGate",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint8))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint8))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint8)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}