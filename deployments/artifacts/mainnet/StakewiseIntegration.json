{
  "address": "0x699118Bd7cda572A25dDda8A04E409719744683E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "garden",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentTokensOut",
          "type": "uint256"
        }
      ],
      "name": "InvestmentEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "garden",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentTokensOut",
          "type": "uint256"
        }
      ],
      "name": "InvestmentExited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "enterInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentTokenIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_ethAmount",
          "type": "uint256"
        }
      ],
      "name": "getExpectedShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getInvestmentAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getResultAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4e7cc0bedc8ee0602fdda38c859fd24c89ed2ed13f8847235c6fcfb2228c4190",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x699118Bd7cda572A25dDda8A04E409719744683E",
    "transactionIndex": 75,
    "gasUsed": "1834563",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xbc30cc16d02d4c133d711dd97edbf0a48c5bc7ca9b5025070322193e5652720d",
    "transactionHash": "0x4e7cc0bedc8ee0602fdda38c859fd24c89ed2ed13f8847235c6fcfb2228c4190",
    "logs": [],
    "blockNumber": 14559112,
    "cumulativeGasUsed": "6680604",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 2,
  "solcInputHash": "6a0159c7df0f56adbfb684436014979f",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"garden\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentTokensOut\",\"type\":\"uint256\"}],\"name\":\"InvestmentEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"garden\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentTokensOut\",\"type\":\"uint256\"}],\"name\":\"InvestmentExited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"enterInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_ethAmount\",\"type\":\"uint256\"}],\"name\":\"getExpectedShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getInvestmentAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getResultAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol StakewiseIntegration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_controller\":\"Address of the controller\"}},\"enterInvestment(address,address,uint256,address,uint256)\":{\"params\":{\"_investmentAddress\":\"Address of the investment token to join\",\"_investmentTokensOut\":\"Min amount of investment tokens to receive\",\"_maxAmountIn\":\"Max amount of the token to deposit\",\"_strategy\":\"Address of the strategy\",\"_tokenIn\":\"Token address to deposit\"}},\"exitInvestment(address,address,uint256,address,uint256)\":{\"params\":{\"_investmentAddress\":\"Address of the investment token to exit\",\"_investmentTokenIn\":\"Quantity of investment tokens to return\",\"_minAmountOut\":\"Min token quantities to receive from the investment\",\"_strategy\":\"Address of the strategy\",\"_tokenOut\":\"Token address to withdraw\"}},\"getExpectedShares(address,uint256)\":{\"params\":{\"_ethAmount\":\"Amount of eth to invest\",\"_investmentAddress\":\"Investment address to check\"},\"returns\":{\"_0\":\"uint256                           Amount of investment shares to receive\"}},\"getInvestmentAsset(address)\":{\"returns\":{\"_0\":\"address                           Returns the asset that this investment needs\"}},\"getPricePerShare(address)\":{\"params\":{\"_investmentAddress\":\"Investment address to check\"},\"returns\":{\"_0\":\"uint256                           Returns the price in ETH of an investment share\"}},\"getResultAsset(address)\":{\"returns\":{\"_0\":\"address                            Returns the asset that this investment obtains\"}},\"getRewards(address,address)\":{\"params\":{\"_investmentAddress\":\"Address of the investment\",\"_strategy\":\"Address of the strategy\"},\"returns\":{\"_0\":\"address                            Returns the address with the token of extra rewards\",\"_1\":\"uint256                            Extra rewards received so far\"}}},\"title\":\"StakewiseIntegration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"enterInvestment(address,address,uint256,address,uint256)\":{\"notice\":\"Deposits tokens into an investment\"},\"exitInvestment(address,address,uint256,address,uint256)\":{\"notice\":\"Exits an outside passive investment\"},\"getExpectedShares(address,uint256)\":{\"notice\":\"Gets the amount of shares expected to get after depositing _ethAmount\"},\"getInvestmentAsset(address)\":{\"notice\":\"Gets the asset needed to enter the investment\"},\"getPricePerShare(address)\":{\"notice\":\"Gets how much eth one unit of the investment is worth\"},\"getResultAsset(address)\":{\"notice\":\"Gets the asset you obtained after entering the investment\"},\"getRewards(address,address)\":{\"notice\":\"Gets the rewards and the token that they are denominated in\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/passive/StakewiseIntegration.sol\":\"StakewiseIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"contracts/integrations/BaseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IIntegration} from '../interfaces/IIntegration.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IBaseIntegration} from '../interfaces/IBaseIntegration.sol';\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title BaseIntegration\\n * @author Babylon Finance\\n *\\n * Abstract class that houses common Integration-related state and functions.\\n */\\nabstract contract BaseIntegration is IBaseIntegration {\\n    using SafeCast for int256;\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlySystemContract() {\\n        require(controller.isSystemContract(msg.sender), 'Only system can call this');\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant ETH_ADD_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address internal constant sETH = 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb;\\n    address internal constant sUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    address internal constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IBabController public immutable controller;\\n\\n    // Name of the integration\\n    string public override name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n\\n    constructor(string memory _name, IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getTokenOrETHBalance(address _strategy, address _token) internal view returns (uint256) {\\n        if (_token == address(0) || _token == ETH_ADD_CURVE) {\\n            return _strategy.balance;\\n        }\\n        return ERC20(_token).balanceOf(_strategy);\\n    }\\n\\n    function _getDurationStrategy(address _strategy) internal view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        (, , , , uint256 executedAt, , ) = strategy.getStrategyState();\\n        return block.timestamp.sub(executedAt);\\n    }\\n}\\n\",\"keccak256\":\"0xf3a36479efd5acb10fd661fa58b013b65281689b3d2bda5a0adf275e3524676a\",\"license\":\"Apache-2.0\"},\"contracts/integrations/passive/PassiveIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport {IPassiveIntegration} from '../../interfaces/IPassiveIntegration.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\n\\nimport {BaseIntegration} from '../BaseIntegration.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\n\\n/**\\n * @title PassiveIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Base class for integration with passive investments like Yearn, Indexed\\n */\\nabstract contract PassiveIntegration is BaseIntegration, ReentrancyGuard, IPassiveIntegration {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n\\n    /* ============ Struct ============ */\\n\\n    struct InvestmentInfo {\\n        IStrategy strategy; // Strategy address\\n        IGarden garden; // Garden address\\n        address investment; // Investment address\\n        uint256 totalSupply; // Total Supply of the investment\\n        uint256 investmentTokensInTransaction; // Investment tokens affected by this transaction\\n        uint256 investmentTokensInGarden; // Investment tokens garden balance\\n        uint256 limitDepositTokenQuantity; // Limit deposit/withdrawal token amount\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event InvestmentEntered(\\n        address indexed garden,\\n        address indexed strategy,\\n        address indexed investment,\\n        address tokenIn,\\n        uint256 investmentTokensOut\\n    );\\n\\n    event InvestmentExited(\\n        address indexed garden,\\n        address indexed strategy,\\n        address indexed investment,\\n        uint256 investmentTokensOut\\n    );\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, IBabController _controller) BaseIntegration(_name, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits tokens into an investment\\n     *\\n     * @param _strategy                   Address of the strategy\\n     * @param _investmentAddress          Address of the investment token to join\\n     * @param _investmentTokensOut        Min amount of investment tokens to receive\\n     * @param _tokenIn                    Token address to deposit\\n     * @param _maxAmountIn                Max amount of the token to deposit\\n     */\\n    function enterInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokensOut,\\n        address _tokenIn,\\n        uint256 _maxAmountIn\\n    ) external override nonReentrant onlySystemContract {\\n        InvestmentInfo memory investmentInfo =\\n            _createInvestmentInfo(_strategy, _investmentAddress, _investmentTokensOut, _tokenIn, _maxAmountIn);\\n        _validatePreJoinInvestmentData(investmentInfo);\\n\\n        // Pre actions\\n        (address targetAddressP, uint256 callValueP, bytes memory methodDataP) =\\n            _getPreActionCallData(_investmentAddress, _maxAmountIn, 0, _strategy);\\n        if (targetAddressP != address(0)) {\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        // Approve spending of the token\\n        if (_tokenIn != address(0)) {\\n            investmentInfo.strategy.invokeApprove(_getSpender(_investmentAddress, 0), _tokenIn, _maxAmountIn);\\n        }\\n\\n        (address targetInvestment, uint256 callValue, bytes memory methodData) =\\n            _getEnterInvestmentCalldata(_strategy, _investmentAddress, _investmentTokensOut, _tokenIn, _maxAmountIn);\\n        investmentInfo.strategy.invokeFromIntegration(targetInvestment, callValue, methodData);\\n        _validatePostEnterInvestmentData(investmentInfo);\\n\\n        emit InvestmentEntered(\\n            address(investmentInfo.garden),\\n            address(investmentInfo.strategy),\\n            _investmentAddress,\\n            _tokenIn,\\n            _investmentTokensOut\\n        );\\n    }\\n\\n    /**\\n     * Exits an outside passive investment\\n     *\\n     * @param _strategy                   Address of the strategy\\n     * @param _investmentAddress          Address of the investment token to exit\\n     * @param _investmentTokenIn          Quantity of investment tokens to return\\n     * @param _tokenOut                   Token address to withdraw\\n     * @param _minAmountOut               Min token quantities to receive from the investment\\n     */\\n    function exitInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokenIn,\\n        address _tokenOut,\\n        uint256 _minAmountOut\\n    ) external override nonReentrant onlySystemContract {\\n        InvestmentInfo memory investmentInfo =\\n            _createInvestmentInfo(_strategy, _investmentAddress, _investmentTokenIn, _tokenOut, _minAmountOut);\\n        _validatePreExitInvestmentData(investmentInfo);\\n\\n        // Pre actions\\n        (address targetAddressP, uint256 callValueP, bytes memory methodDataP) =\\n            _getPreActionCallData(_investmentAddress, _investmentTokenIn, 1, _strategy);\\n\\n        if (targetAddressP != address(0)) {\\n            // Approve spending of the pre action token\\n            address approvalAsset = _preActionNeedsApproval();\\n            if (approvalAsset != address(0)) {\\n                investmentInfo.strategy.invokeApprove(\\n                    _getSpender(_investmentAddress, 1),\\n                    approvalAsset,\\n                    IERC20(approvalAsset).balanceOf(_strategy)\\n                );\\n            }\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n            _investmentAddress = _getAssetAfterExitPreAction(_investmentAddress);\\n            // BUG: Does not respect _investmentTokenIn/percentage\\n            _investmentTokenIn = IERC20(_investmentAddress).balanceOf(_strategy);\\n        }\\n\\n        // Approve spending of the investment token\\n        investmentInfo.strategy.invokeApprove(\\n            _getSpender(_investmentAddress, 1),\\n            _investmentAddress,\\n            _investmentTokenIn\\n        );\\n        (address targetInvestment, uint256 callValue, bytes memory methodData) =\\n            _getExitInvestmentCalldata(_strategy, _investmentAddress, _investmentTokenIn, _tokenOut, _minAmountOut);\\n        investmentInfo.strategy.invokeFromIntegration(targetInvestment, callValue, methodData);\\n\\n        // Pre actions\\n        (targetAddressP, callValueP, methodDataP) = _getPostActionCallData(_investmentAddress, _investmentTokenIn, 1);\\n\\n        if (targetAddressP != address(0)) {\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        _validatePostExitInvestmentData(investmentInfo);\\n\\n        emit InvestmentExited(\\n            address(investmentInfo.garden),\\n            address(investmentInfo.strategy),\\n            investmentInfo.investment,\\n            _investmentTokenIn\\n        );\\n    }\\n\\n    /**\\n     * Gets the amount of shares expected to get after depositing _ethAmount\\n     *\\n     * @param _investmentAddress                 Investment address to check\\n     * @param _ethAmount                         Amount of eth to invest\\n     * @return uint256                           Amount of investment shares to receive\\n     */\\n    function getExpectedShares(address _investmentAddress, uint256 _ethAmount)\\n        external\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        return _getExpectedShares(_investmentAddress, _ethAmount);\\n    }\\n\\n    /**\\n     * Gets how much eth one unit of the investment is worth\\n     *\\n     * @param _investmentAddress                 Investment address to check\\n     * @return uint256                           Returns the price in ETH of an investment share\\n     */\\n    function getPricePerShare(address _investmentAddress) external view override returns (uint256) {\\n        return _getPricePerShare(_investmentAddress);\\n    }\\n\\n    /**\\n     * Gets the asset needed to enter the investment\\n     *\\n     * @return address                           Returns the asset that this investment needs\\n     */\\n    function getInvestmentAsset(address _investmentAddress) external view override returns (address) {\\n        return _getInvestmentAsset(_investmentAddress);\\n    }\\n\\n    /**\\n     * Gets the asset you obtained after entering the investment\\n     *\\n     * @return address                            Returns the asset that this investment obtains\\n     */\\n    function getResultAsset(address _investmentAddress) external view override returns (address) {\\n        return _getResultAsset(_investmentAddress);\\n    }\\n\\n    /**\\n     * Gets the rewards and the token that they are denominated in\\n     *\\n     * @param _strategy                           Address of the strategy\\n     * @param _investmentAddress                  Address of the investment\\n     * @return address                            Returns the address with the token of extra rewards\\n     * @return uint256                            Extra rewards received so far\\n     */\\n    function getRewards(address _strategy, address _investmentAddress)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        return _getRewards(_strategy, _investmentAddress);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Create and return InvestmentInfo struct\\n     *\\n     * @param _strategy                                 Address of the strategy\\n     * @param _investment                               Address of the investment\\n     * @param _investmentTokensInTransaction            Number of investment tokens involved\\n     * hparam _tokenIn                                  Addresseses of the deposit token\\n     * @param _limitDepositToken                        Limit quantity of the deposit/withdrawal token\\n     *\\n     * return InvestmentInfo                            Struct containing data for the investment\\n     */\\n    function _createInvestmentInfo(\\n        address _strategy,\\n        address _investment,\\n        uint256 _investmentTokensInTransaction,\\n        address, /*_tokenIn*/\\n        uint256 _limitDepositToken\\n    ) internal view returns (InvestmentInfo memory) {\\n        InvestmentInfo memory investmentInfo;\\n        investmentInfo.strategy = IStrategy(_strategy);\\n        investmentInfo.garden = IGarden(investmentInfo.strategy.garden());\\n        investmentInfo.investment = _getResultAsset(_investment);\\n        investmentInfo.totalSupply = IERC20(_investment).totalSupply();\\n        investmentInfo.investmentTokensInGarden = IERC20(investmentInfo.investment).balanceOf(_strategy);\\n        investmentInfo.investmentTokensInTransaction = _investmentTokensInTransaction;\\n        investmentInfo.limitDepositTokenQuantity = _limitDepositToken;\\n\\n        return investmentInfo;\\n    }\\n\\n    /**\\n     * Validate pre investment join data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePreJoinInvestmentData(InvestmentInfo memory _investmentInfo) internal pure {\\n        require(\\n            _investmentInfo.investmentTokensInTransaction > 0,\\n            'Min investment tokens to receive must be greater than 0'\\n        );\\n    }\\n\\n    /**\\n     * Validate pre investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePreExitInvestmentData(InvestmentInfo memory _investmentInfo) internal pure {\\n        require(\\n            _investmentInfo.investmentTokensInTransaction > 0,\\n            'Investment tokens to exchange must be greater than 0'\\n        );\\n        require(\\n            _investmentInfo.investmentTokensInGarden >= _investmentInfo.investmentTokensInTransaction,\\n            'The strategy does not have enough investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post enter investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePostEnterInvestmentData(InvestmentInfo memory _investmentInfo) internal view {\\n        require(\\n            (IERC20(_investmentInfo.investment).balanceOf(address(_investmentInfo.strategy)) >\\n                _investmentInfo.investmentTokensInGarden),\\n            'The strategy did not receive the investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post exit investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePostExitInvestmentData(InvestmentInfo memory _investmentInfo) internal view {\\n        require(\\n            IERC20(_investmentInfo.investment).balanceOf(address(_investmentInfo.strategy)) <=\\n                (_investmentInfo.investmentTokensInGarden - _investmentInfo.investmentTokensInTransaction) + 100,\\n            'The strategy did not return the investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Return join investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _investmentAddress              Address of the investment\\n     * hparam  _investmentTokensOut            Amount of investment tokens to send\\n     * hparam  _tokenIn                       Addresses of tokens to send to the investment\\n     * hparam  _maxAmountIn                   Amounts of tokens to send to the investment\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getEnterInvestmentCalldata(\\n        address, /* _strategy */\\n        address, /* _investmentAddress */\\n        uint256, /* _investmentTokensOut */\\n        address, /* _tokenIn */\\n        uint256 /* _maxAmountIn */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _asset                    Address of the asset to deposit\\n     * hparam  _amount                   Amount of the token to deposit\\n     * hparam  _borrowOp                 Type of Passive op\\n     * hparam  _strategy                 Address of the strategy\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPreActionCallData(\\n        address, /* _asset */\\n        uint256, /* _amount */\\n        uint256, /* _borrowOp */\\n        address /* _strategy */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _asset                    Address of the asset to deposit\\n     * hparam  _amount                   Amount of the token to deposit\\n     * hparam  _passiveOp                 Type of op\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPostActionCallData(\\n        address, /* _asset */\\n        uint256, /* _amount */\\n        uint256 /* _passiveOp */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return exit investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _investmentAddress              Address of the investment\\n     * hparam  _investmentTokensIn             Amount of investment tokens to receive\\n     * hparam  _tokenOut                       Addresses of token to receive\\n     * hparam  _minAmountOut                   Amount of investment tokens to receive\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getExitInvestmentCalldata(\\n        address, /*_strategy */\\n        address, /*_investmentAddress */\\n        uint256, /*_investmentTokensIn */\\n        address, /*_tokenOut */\\n        uint256 /* _minAmountOut */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    function _getExpectedShares(\\n        address, //_investmentAddress\\n        uint256 // _ethAmount\\n    ) internal view virtual returns (uint256);\\n\\n    function _getPricePerShare(\\n        address //_investmentAddress\\n    ) internal view virtual returns (uint256);\\n\\n    function _getInvestmentAsset(\\n        address //_investmentAddress\\n    ) internal view virtual returns (address);\\n\\n    function _getSpender(\\n        address, //_investmentAddress,\\n        uint8 // op\\n    ) internal view virtual returns (address);\\n\\n    function _getRewards(\\n        address, // _strategy\\n        address //_investmentAddress\\n    ) internal view virtual returns (address, uint256) {\\n        return (address(0), 0);\\n    }\\n\\n    function _preActionNeedsApproval() internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    function _getAssetAfterExitPreAction(address _asset) internal view virtual returns (address) {\\n        return _asset;\\n    }\\n\\n    function _getResultAsset(address _investment) internal view virtual returns (address) {\\n        return _investment;\\n    }\\n}\\n\",\"keccak256\":\"0xb1ce1e29ecd2c50b6474c9706cf0237b79f8d278f47fe74eba947dd32bd2086a\",\"license\":\"Apache-2.0\"},\"contracts/integrations/passive/StakewiseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport {SafeDecimalMath} from '../../lib/SafeDecimalMath.sol';\\n\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {PassiveIntegration} from './PassiveIntegration.sol';\\nimport {IrETH2} from '../../interfaces/external/stakewise/IrETH2.sol';\\n\\n/**\\n * @title StakewiseIntegration\\n * @author Babylon Finance Protocol\\n *\\n * StakewiseIntegration\\n */\\ncontract StakewiseIntegration is PassiveIntegration {\\n    using LowGasSafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /* ============ State Variables ============ */\\n\\n    IERC20 private constant sETH2 = IERC20(0xFe2e637202056d30016725477c5da089Ab0A043A);\\n    IrETH2 private constant rETH2 = IrETH2(0x20BC832ca081b91433ff6c17f85701B6e92486c5);\\n    // uint256 private constant INSTANT_LIMIT = 321e18; // 32 ETH\\n    // address private constant stakeWisePool = 0xc874b064f465bdd6411d45734b56fac750cda29a;\\n\\n    uint24 private constant FEE_LOW = 500;\\n    uint24 private constant FEE_MEDIUM = 3000;\\n\\n    // Address of Uniswap V3 SwapRouter contract\\n    address private constant swapRouter = 0xE592427A0AEce92De3Edee1F18E0157C05861564;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _controller                   Address of the controller\\n     */\\n    constructor(IBabController _controller) PassiveIntegration('stakewise', _controller) {}\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getSpender(\\n        address, /* _asset */\\n        uint8 /* _op */\\n    ) internal pure override returns (address) {\\n        return swapRouter;\\n    }\\n\\n    function _getExpectedShares(\\n        address, /* _asset */\\n        uint256 _amount\\n    ) internal pure override returns (uint256) {\\n        return _amount;\\n    }\\n\\n    function _getPricePerShare(\\n        address /* _asset */\\n    ) internal pure override returns (uint256) {\\n        return 1e18;\\n    }\\n\\n    function _getInvestmentAsset(\\n        address /* _asset */\\n    ) internal pure override returns (address) {\\n        return WETH;\\n    }\\n\\n    /**\\n     * Return join investment calldata which is already generated from the investment API\\n     *\\n     * @param  _strategy                       Address of the strategy\\n     * hparam  _asset                          Address of the vault\\n     * @param  _investmentTokensOut            Amount of investment tokens to send\\n     * hparam  _tokenIn                        Addresses of tokens to send to the investment\\n     * @param  _maxAmountIn                    Amounts of tokens to send to the investment\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getEnterInvestmentCalldata(\\n        address _strategy,\\n        address, /* _asset */\\n        uint256 _investmentTokensOut,\\n        address, /* _tokenIn */\\n        uint256 _maxAmountIn\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        // Buy on univ3 directly\\n        bytes memory path = abi.encodePacked(WETH, FEE_MEDIUM, address(sETH2));\\n        ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams(path, _strategy, block.timestamp, _maxAmountIn, _investmentTokensOut);\\n\\n        // Buy sETH2 on univ3\\n        bytes memory methodData =\\n            abi.encodeWithSignature('exactInput((bytes,address,uint256,uint256,uint256))', params);\\n        return (swapRouter, 0, methodData);\\n    }\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _asset                    Address of the asset to deposit\\n     * hparam  _amount                   Amount of the token to deposit\\n     * @param  _op                       Type of op\\n     * @param  _strategy                 Address of the strategy\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPreActionCallData(\\n        address, /* _asset */\\n        uint256, /* _amount */\\n        uint256 _op,\\n        address _strategy\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        // Sell rETH2 on exit\\n        if (_op == 1) {\\n            bytes memory path = abi.encodePacked(address(rETH2), FEE_LOW, address(sETH2));\\n            uint256 rewardsBalance = rETH2.balanceOf(_strategy);\\n            // Enough rewards\\n            if (rewardsBalance > 2e16) {\\n                ISwapRouter.ExactInputParams memory params =\\n                    ISwapRouter.ExactInputParams(\\n                        path,\\n                        _strategy,\\n                        block.timestamp,\\n                        rewardsBalance,\\n                        rewardsBalance.preciseMul(98e16) // 2% slippage\\n                    );\\n\\n                // Sell rETH2 on univ3\\n                bytes memory methodData =\\n                    abi.encodeWithSignature('exactInput((bytes,address,uint256,uint256,uint256))', params);\\n                return (swapRouter, 0, methodData);\\n            }\\n        }\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return exit investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _asset                          Address of the investment\\n     * @param  _investmentTokensIn             Amount of investment tokens to receive\\n     * hparam  _tokenOut                       Addresses of tokens to receive\\n     * hparam  _minAmountOut                   Amounts of investment tokens to receive\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getExitInvestmentCalldata(\\n        address _strategy,\\n        address, /* _asset */\\n        uint256 _investmentTokensIn,\\n        address, /* _tokenOut */\\n        uint256 _minAmountOut\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        bytes memory path = abi.encodePacked(address(sETH2), FEE_MEDIUM, WETH);\\n        ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams(path, _strategy, block.timestamp, _investmentTokensIn, _minAmountOut);\\n\\n        // Sell sETH2 on univ3\\n        bytes memory methodData =\\n            abi.encodeWithSignature('exactInput((bytes,address,uint256,uint256,uint256))', params);\\n        return (swapRouter, 0, methodData);\\n    }\\n\\n    function _preActionNeedsApproval() internal pure override returns (address) {\\n        return address(rETH2);\\n    }\\n\\n    function _getRewards(\\n        address _strategy,\\n        address //_investmentAddress\\n    ) internal view override returns (address, uint256) {\\n        return (address(rETH2), rETH2.balanceOf(_strategy));\\n    }\\n}\\n\",\"keccak256\":\"0xdca6de33aef1d3cd0afa6d36ebf107a27532b0aec3862fb166b93e76be99aab8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function updateGardenAffiliateRate(address _garden, uint256 _affiliateRate) external;\\n\\n    function addAffiliateReward(\\n        address _depositor,\\n        address _referrer,\\n        uint256 _reserveAmount\\n    ) external;\\n\\n    function claimRewards() external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function gardenAffiliateRates(address _wantedAsset) external view returns (uint256);\\n\\n    function affiliateRewards(address _user) external view returns (uint256);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9e1c08ee1bdc06b5efc5e58dfda46340bf4320f782dadf322c0ec4cd61352892\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBaseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\ninterface IBaseIntegration {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc17c281287e52562f824b1eec248005af77da26b7e25b650ee5080b73c6f9d6f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe546cde30af3487ba52198348b57b5c220e7febede40c861c46589b105e0a01a\",\"license\":\"MIT\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC1271} from '../interfaces/IERC1271.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyGarden\\n *\\n * Interface for functions of the garden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function updateStrategyRewards(\\n        address _strategy,\\n        uint256 _newTotalAmount,\\n        uint256 _newCapitalReturned\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n *\\n * Interface for amdin functions of the Garden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[12] memory _newParams) external;\\n\\n    function verifyGarden(uint256 _verifiedCategory) external;\\n\\n    function resetHardlock(uint256 _hardlockStartsAt) external;\\n}\\n\\n/**\\n * @title IGarden\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256 lastDepositAt,\\n            uint256 initialDepositAt,\\n            uint256 claimedAt,\\n            uint256 claimedBABL,\\n            uint256 claimedRewards,\\n            uint256 withdrawnSince,\\n            uint256 totalDeposits,\\n            uint256 nonce,\\n            uint256 lockedBalance\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function verifiedCategory() external view returns (uint256);\\n\\n    function canMintNftAfter() external view returns (uint256);\\n\\n    function hardlockStartsAt() external view returns (uint256);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _to,\\n        address _referrer\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        address _referrer,\\n        bytes memory signature\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimAndStakeReturns(uint256 _minAmountOut, address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimAndStakeRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function stakeBySig(\\n        uint256 _amountIn,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function claimNFT() external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IERC20, IERC20Metadata, IERC1271 {\\n    struct Contributor {\\n        uint256 lastDepositAt;\\n        uint256 initialDepositAt;\\n        uint256 claimedAt;\\n        uint256 claimedBABL;\\n        uint256 claimedRewards;\\n        uint256 withdrawnSince;\\n        uint256 totalDeposits;\\n        uint256 nonce;\\n        uint256 lockedBalance;\\n    }\\n}\\n\",\"keccak256\":\"0xe9ea032ee07b911d91a6f907ef423acab84255a662cb08ca093c29047f935b06\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x48fbe466ea0bf19f7cb9a2fdb27e0c49dd7b60705d3cbf5191bb114695226d71\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPassiveIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPassiveIntegration\\n * @author Babylon Finance\\n *\\n * Interface for passive investments protocol integrations\\n */\\ninterface IPassiveIntegration {\\n    function enterInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokensOut,\\n        address _tokenIn,\\n        uint256 _maxAmountIn\\n    ) external;\\n\\n    function exitInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokenIn,\\n        address _tokenOut,\\n        uint256 _minAmountOut\\n    ) external;\\n\\n    function getExpectedShares(address _investmentAddress, uint256 _ethAmount) external view returns (uint256);\\n\\n    function getPricePerShare(address _investmentAddress) external view returns (uint256);\\n\\n    function getInvestmentAsset(address _investmentAddress) external view returns (address);\\n\\n    function getResultAsset(address _investmentAddress) external view returns (address);\\n\\n    function getRewards(address _strategy, address _investmentAddress) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0x6ec2c44cbd3d6bc39336ae8794a941470e84937f24398a1128ff31fbaf341da7\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[5] calldata _params) external;\\n\\n    function sweep(address _token, uint256 _newSlippage) external;\\n\\n    function updateStrategyRewards(uint256 _newTotalRewards, uint256 _newCapitalReturned) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(\\n        uint256 fee,\\n        string memory _tokenURI,\\n        uint256 _minReserveOut\\n    ) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _overrideSlippage\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0x9bb46b1237e6cc36aa7144ffb85d91a16bee3e872c283f6b94f865a842db72db\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/stakewise/IrETH2.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\n\\npragma solidity ^0.7.6;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\n/**\\n * @dev Interface of the RewardEthToken contract.\\n */\\ninterface IrETH2 is IERC20Upgradeable {\\n    /**\\n     * @dev Structure for storing information about user reward checkpoint.\\n     * @param rewardPerToken - user reward per token.\\n     * @param reward - user reward checkpoint.\\n     */\\n    struct Checkpoint {\\n        uint128 reward;\\n        uint128 rewardPerToken;\\n    }\\n\\n    /**\\n     * @dev Event for tracking updated protocol fee recipient.\\n     * @param recipient - address of the new fee recipient.\\n     */\\n    event ProtocolFeeRecipientUpdated(address recipient);\\n\\n    /**\\n     * @dev Event for tracking updated protocol fee.\\n     * @param protocolFee - new protocol fee.\\n     */\\n    event ProtocolFeeUpdated(uint256 protocolFee);\\n\\n    /**\\n     * @dev Event for tracking whether rewards distribution through merkle distributor is enabled/disabled.\\n     * @param account - address of the account.\\n     * @param isDisabled - whether rewards distribution is disabled.\\n     */\\n    event RewardsToggled(address indexed account, bool isDisabled);\\n\\n    /**\\n     * @dev Event for tracking rewards update by oracles.\\n     * @param periodRewards - rewards since the last update.\\n     * @param totalRewards - total amount of rewards.\\n     * @param rewardPerToken - calculated reward per token for account reward calculation.\\n     * @param distributorReward - distributor reward.\\n     * @param protocolReward - protocol reward.\\n     */\\n    event RewardsUpdated(\\n        uint256 periodRewards,\\n        uint256 totalRewards,\\n        uint256 rewardPerToken,\\n        uint256 distributorReward,\\n        uint256 protocolReward\\n    );\\n\\n    /**\\n     * @dev Function for upgrading the RewardEthToken contract. The `initialize` function must be defined\\n     * if deploying contract for the first time that will initialize the state variables above.\\n     * @param _oracles - address of the Oracles contract.\\n     */\\n    function upgrade(address _oracles) external;\\n\\n    /**\\n     * @dev Function for getting the address of the merkle distributor.\\n     */\\n    function merkleDistributor() external view returns (address);\\n\\n    /**\\n     * @dev Function for getting the address of the protocol fee recipient.\\n     */\\n    function protocolFeeRecipient() external view returns (address);\\n\\n    /**\\n     * @dev Function for changing the protocol fee recipient's address.\\n     * @param recipient - new protocol fee recipient's address.\\n     */\\n    function setProtocolFeeRecipient(address recipient) external;\\n\\n    /**\\n     * @dev Function for getting protocol fee. The percentage fee users pay from their reward for using the pool service.\\n     */\\n    function protocolFee() external view returns (uint256);\\n\\n    /**\\n     * @dev Function for changing the protocol fee.\\n     * @param _protocolFee - new protocol fee. Must be less than 10000 (100.00%).\\n     */\\n    function setProtocolFee(uint256 _protocolFee) external;\\n\\n    /**\\n     * @dev Function for retrieving the total rewards amount.\\n     */\\n    function totalRewards() external view returns (uint128);\\n\\n    /**\\n     * @dev Function for retrieving the last total rewards update block number.\\n     */\\n    function lastUpdateBlockNumber() external view returns (uint256);\\n\\n    /**\\n     * @dev Function for retrieving current reward per token used for account reward calculation.\\n     */\\n    function rewardPerToken() external view returns (uint128);\\n\\n    /**\\n     * @dev Function for setting whether rewards are disabled for the account.\\n     * Can only be called by the `StakedEthToken` contract.\\n     * @param account - address of the account to disable rewards for.\\n     * @param isDisabled - whether the rewards will be disabled.\\n     */\\n    function setRewardsDisabled(address account, bool isDisabled) external;\\n\\n    /**\\n     * @dev Function for retrieving account's current checkpoint.\\n     * @param account - address of the account to retrieve the checkpoint for.\\n     */\\n    function checkpoints(address account) external view returns (uint128, uint128);\\n\\n    /**\\n     * @dev Function for checking whether account's reward will be distributed through the merkle distributor.\\n     * @param account - address of the account.\\n     */\\n    function rewardsDisabled(address account) external view returns (bool);\\n\\n    /**\\n     * @dev Function for updating account's reward checkpoint.\\n     * @param account - address of the account to update the reward checkpoint for.\\n     */\\n    function updateRewardCheckpoint(address account) external returns (bool);\\n\\n    /**\\n     * @dev Function for updating reward checkpoints for two accounts simultaneously (for gas savings).\\n     * @param account1 - address of the first account to update the reward checkpoint for.\\n     * @param account2 - address of the second account to update the reward checkpoint for.\\n     */\\n    function updateRewardCheckpoints(address account1, address account2) external returns (bool, bool);\\n\\n    /**\\n     * @dev Function for updating validators total rewards.\\n     * Can only be called by Oracles contract.\\n     * @param newTotalRewards - new total rewards.\\n     */\\n    function updateTotalRewards(uint256 newTotalRewards) external;\\n\\n    /**\\n     * @dev Function for claiming rETH2 from the merkle distribution.\\n     * Can only be called by MerkleDistributor contract.\\n     * @param account - address of the account the tokens will be assigned to.\\n     * @param amount - amount of tokens to assign to the account.\\n     */\\n    function claim(address account, uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x2759a31b6e734fa94b9beccaccbc29cac186b150dac022aae2e844f0f893609c\",\"license\":\"AGPL-3.0-only\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8349571932df52641bc6c22f77b577acbb440da1ec0bb617905b8000663ed120\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param _from       ERC20 asset address\\n     * @param _to     ERC20 asset address\\n     * @param _amount Value _to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 fromDecimals = _isETH(_from) ? 18 : ERC20(_from).decimals();\\n        uint256 toDecimals = _isETH(_to) ? 18 : ERC20(_to).decimals();\\n\\n        if (fromDecimals == toDecimals) {\\n            return _amount;\\n        }\\n        if (toDecimals > fromDecimals) {\\n            return _amount.mul(10**(toDecimals - (fromDecimals)));\\n        }\\n        return _amount.div(10**(fromDecimals - (toDecimals)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xe930fa0982c8a7214c986a3dcfd3b5acdc90cd2228601985d1ead9b801a78b9a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200214338038062002143833981016040819052620000349162000194565b6040805180820190915260098152687374616b657769736560b81b60208201528181816001600160a01b038116620000b3576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604482015290519081900360640190fd5b8151620000c8906000906020850190620000e8565b5060601b6001600160601b03191660805250506001805550620001c49050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200012057600085556200016b565b82601f106200013b57805160ff19168380011785556200016b565b828001600101855582156200016b579182015b828111156200016b5782518255916020019190600101906200014e565b50620001799291506200017d565b5090565b5b808211156200017957600081556001016200017e565b600060208284031215620001a6578081fd5b81516001600160a01b0381168114620001bd578182fd5b9392505050565b60805160601c611f57620001ec600039806102c85280610c6352806112235250611f576000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063871be91111610076578063ec422afd1161005b578063ec422afd1461014f578063f337f63014610162578063f77c479114610175576100a3565b8063871be91114610127578063976a99be1461013c576100a3565b806306fdde03146100a85780634deef649146100c6578063779bcb9b146100e65780637b082a7414610107575b600080fd5b6100b061017d565b6040516100bd9190611dab565b60405180910390f35b6100d96100d4366004611c9f565b61020b565b6040516100bd9190611e17565b6100f96100f4366004611c19565b610220565b6040516100bd929190611d92565b61011a610115366004611bff565b610238565b6040516100bd9190611d7e565b61013a610135366004611c4b565b61024b565b005b61013a61014a366004611c4b565b610be6565b6100d961015d366004611bff565b61120b565b61011a610170366004611bff565b611216565b61011a611221565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102035780601f106101d857610100808354040283529160200191610203565b820191906000526020600020905b8154815290600101906020018083116101e657829003601f168201915b505050505081565b60006102178383610246565b90505b92915050565b60008061022d8484611245565b915091509250929050565b6000610243826112d3565b90505b919050565b600260015414156102a3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b15801561030e57600080fd5b505afa158015610322573d6000803e3d6000fd5b505050506040513d602081101561033857600080fd5b505161038b576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061039a86868686866112d6565b90506103a5816114a1565b60008060006103b7888860018c61152e565b919450925090506001600160a01b0383161561073e5760006103d7611713565b90506001600160a01b038116156105035784516001600160a01b03166397ccdc606104038b600161172b565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d602081101561047b57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561057a578181015183820152602001610562565b50505050905090810190601f1680156105a75780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561060557600080fd5b810190808051604051939291908464010000000082111561062557600080fd5b90830190602082018581111561063a57600080fd5b825164010000000081118282018810171561065457600080fd5b82525081516020918201929091019080838360005b83811015610681578181015183820152602001610669565b50505050905090810190601f1680156106ae5780820380516001836020036101000a031916815260200191505b50604052505050506106bf896112d3565b9850886001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d602081101561073857600080fd5b50519750505b83516001600160a01b03166397ccdc606107598a600161172b565b8a8a6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b5050505060008060006107db8c8c8c8c8c611746565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610858578181015183820152602001610840565b50505050905090810190601f1680156108855780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108e357600080fd5b810190808051604051939291908464010000000082111561090357600080fd5b90830190602082018581111561091857600080fd5b825164010000000081118282018810171561093257600080fd5b82525081516020918201929091019080838360005b8381101561095f578181015183820152602001610947565b50505050905090810190601f16801561098c5780820380516001836020036101000a031916815260200191505b50604052505050506109a08b8b6001611844565b919750955093506001600160a01b03861615610b6a5786600001516001600160a01b0316636bc195dd8787876040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a2d578181015183820152602001610a15565b50505050905090810190601f168015610a5a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ab857600080fd5b8101908080516040519392919084640100000000821115610ad857600080fd5b908301906020820185811115610aed57600080fd5b8251640100000000811182820188101715610b0757600080fd5b82525081516020918201929091019080838360005b83811015610b34578181015183820152602001610b1c565b50505050905090810190601f168015610b615780820380516001836020036101000a031916815260200191505b50604052505050505b610b738761185c565b86604001516001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167f99d773709d80de3e15433c22c381fd8e3b82a68b56322240ff4a304956ef0e528d6040518082815260200191505060405180910390a450506001805550505050505050505050565b60026001541415610c3e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b5051610d26576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b6000610d3586868686866112d6565b9050610d4081611928565b6000806000610d52888660008c61152e565b919450925090506001600160a01b03831615610f1c5783600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ddf578181015183820152602001610dc7565b50505050905090810190601f168015610e0c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e6a57600080fd5b8101908080516040519392919084640100000000821115610e8a57600080fd5b908301906020820185811115610e9f57600080fd5b8251640100000000811182820188101715610eb957600080fd5b82525081516020918201929091019080838360005b83811015610ee6578181015183820152602001610ece565b50505050905090810190601f168015610f135780820380516001836020036101000a031916815260200191505b50604052505050505b6001600160a01b03861615610fb75783516001600160a01b03166397ccdc60610f468a600061172b565b88886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b505050505b6000806000610fc98c8c8c8c8c61196b565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561104657818101518382015260200161102e565b50505050905090810190601f1680156110735780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561109457600080fd5b505af11580156110a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110d157600080fd5b81019080805160405193929190846401000000008211156110f157600080fd5b90830190602082018581111561110657600080fd5b825164010000000081118282018810171561112057600080fd5b82525081516020918201929091019080838360005b8381101561114d578181015183820152602001611135565b50505050905090810190601f16801561117a5780820380516001836020036101000a031916815260200191505b506040525050505061118b876119ff565b8a6001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167fdc0718d28ea0f80518c2c454af93bc46bf51dd4a1b25a048ca4ca75a7ac359c48c8e60405180836001600160a01b031681526020018281526020019250505060405180910390a450506001805550505050505050505050565b600061024382611ac1565b600061024382611ace565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b815260009081907320bc832ca081b91433ff6c17f85701b6e92486c59081906370a0823190611283908890600401611d7e565b60206040518083038186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190611cc8565b90565b6112de611b90565b6112e6611b90565b6001600160a01b038716808252604080517f56ba88b800000000000000000000000000000000000000000000000000000000815290516356ba88b891600480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50516001600160a01b03166020820152611385866112d3565b81604001906001600160a01b031690816001600160a01b031681525050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b5051606082015260408082015181516370a0823160e01b81526001600160a01b038a81166004830152925192909116916370a0823191602480820192602092909190829003018186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d602081101561148557600080fd5b505160a082015260808101949094525060c08301525092915050565b60008160800151116114e45760405162461bcd60e51b8152600401808060200182810382526034815260200180611eee6034913960400191505060405180910390fd5b80608001518160a00151101561152b5760405162461bcd60e51b8152600401808060200182810382526033815260200180611e216033913960400191505060405180910390fd5b50565b600080606084600114156116f25760007320bc832ca081b91433ff6c17f85701b6e92486c56101f473fe2e637202056d30016725477c5da089ab0a043a60405160200161157d93929190611d2b565b60408051601f19818403018152908290526370a0823160e01b825291506000907320bc832ca081b91433ff6c17f85701b6e92486c5906370a08231906115c7908990600401611d7e565b60206040518083038186803b1580156115df57600080fd5b505afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116179190611cc8565b905066470de4df8200008111156116ef5760006040518060a00160405280848152602001886001600160a01b03168152602001428152602001838152602001611671670d99a8cec7e2000085611ae790919063ffffffff16565b81525090506000816040516024016116899190611dbe565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663c04b8d5960e01b17905273e592427a0aece92de3edee1f18e0157c0586156497506000965094506117099350505050565b50505b505060408051602081019091526000808252915081905b9450945094915050565b7320bc832ca081b91433ff6c17f85701b6e92486c590565b73e592427a0aece92de3edee1f18e0157c0586156492915050565b6000806060600073fe2e637202056d30016725477c5da089ab0a043a610bb873c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260405160200161178c93929190611d2b565b60408051601f1981840301815260a0830182528083526001600160a01b038c1660208401524283830152606083018a90526080830188905290519092506000906117da908390602401611dbe565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663c04b8d5960e01b17905273e592427a0aece92de3edee1f18e0157c058615649650600095509350505050955095509592505050565b50506040805160208101909152600080825292839250565b80608001518160a001510360640181604001516001600160a01b03166370a0823183600001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118bf57600080fd5b505afa1580156118d3573d6000803e3d6000fd5b505050506040513d60208110156118e957600080fd5b5051111561152b5760405162461bcd60e51b8152600401808060200182810382526031815260200180611e866031913960400191505060405180910390fd5b600081608001511161152b5760405162461bcd60e51b8152600401808060200182810382526037815260200180611eb76037913960400191505060405180910390fd5b6000806060600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610bb873fe2e637202056d30016725477c5da089ab0a043a6040516020016119b193929190611d2b565b60408051601f1981840301815260a0830182528083526001600160a01b038c166020840152428383015260608301889052608083018a905290519092506000906117da908390602401611dbe565b8060a0015181604001516001600160a01b03166370a0823183600001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d6020811015611a8357600080fd5b50511161152b5760405162461bcd60e51b8152600401808060200182810382526032815260200180611e546032913960400191505060405180910390fd5b50670de0b6b3a764000090565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6000610217670de0b6b3a7640000611aff8585611b05565b90611b29565b6000821580611b2057505081810281838281611b1d57fe5b04145b61021a57600080fd5b6000808211611b7f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b8857fe5b049392505050565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461024657600080fd5b600060208284031215611c10578081fd5b61021782611be8565b60008060408385031215611c2b578081fd5b611c3483611be8565b9150611c4260208401611be8565b90509250929050565b600080600080600060a08688031215611c62578081fd5b611c6b86611be8565b9450611c7960208701611be8565b935060408601359250611c8e60608701611be8565b949793965091946080013592915050565b60008060408385031215611cb1578182fd5b611cba83611be8565b946020939093013593505050565b600060208284031215611cd9578081fd5b5051919050565b60008151808452815b81811015611d0557602081850181015186830182015201611ce9565b81811115611d165782602083870101525b50601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082526102176020830184611ce0565b600060208252825160a06020840152611dda60c0840182611ce0565b90506001600160a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b9081526020019056fe54686520737472617465677920646f6573206e6f74206861766520656e6f75676820696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f7420726563656976652074686520696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f742072657475726e2074686520696e766573746d656e7420746f6b656e734d696e20696e766573746d656e7420746f6b656e7320746f2072656365697665206d7573742062652067726561746572207468616e2030496e766573746d656e7420746f6b656e7320746f2065786368616e6765206d7573742062652067726561746572207468616e2030a264697066735822122048787cd6dcb695929151f3a8054b6a379639d88c8318d30718cf4a26a96c608f64736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063871be91111610076578063ec422afd1161005b578063ec422afd1461014f578063f337f63014610162578063f77c479114610175576100a3565b8063871be91114610127578063976a99be1461013c576100a3565b806306fdde03146100a85780634deef649146100c6578063779bcb9b146100e65780637b082a7414610107575b600080fd5b6100b061017d565b6040516100bd9190611dab565b60405180910390f35b6100d96100d4366004611c9f565b61020b565b6040516100bd9190611e17565b6100f96100f4366004611c19565b610220565b6040516100bd929190611d92565b61011a610115366004611bff565b610238565b6040516100bd9190611d7e565b61013a610135366004611c4b565b61024b565b005b61013a61014a366004611c4b565b610be6565b6100d961015d366004611bff565b61120b565b61011a610170366004611bff565b611216565b61011a611221565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102035780601f106101d857610100808354040283529160200191610203565b820191906000526020600020905b8154815290600101906020018083116101e657829003601f168201915b505050505081565b60006102178383610246565b90505b92915050565b60008061022d8484611245565b915091509250929050565b6000610243826112d3565b90505b919050565b600260015414156102a3576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b15801561030e57600080fd5b505afa158015610322573d6000803e3d6000fd5b505050506040513d602081101561033857600080fd5b505161038b576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061039a86868686866112d6565b90506103a5816114a1565b60008060006103b7888860018c61152e565b919450925090506001600160a01b0383161561073e5760006103d7611713565b90506001600160a01b038116156105035784516001600160a01b03166397ccdc606104038b600161172b565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561045157600080fd5b505afa158015610465573d6000803e3d6000fd5b505050506040513d602081101561047b57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b1580156104ea57600080fd5b505af11580156104fe573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561057a578181015183820152602001610562565b50505050905090810190601f1680156105a75780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561060557600080fd5b810190808051604051939291908464010000000082111561062557600080fd5b90830190602082018581111561063a57600080fd5b825164010000000081118282018810171561065457600080fd5b82525081516020918201929091019080838360005b83811015610681578181015183820152602001610669565b50505050905090810190601f1680156106ae5780820380516001836020036101000a031916815260200191505b50604052505050506106bf896112d3565b9850886001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561070e57600080fd5b505afa158015610722573d6000803e3d6000fd5b505050506040513d602081101561073857600080fd5b50519750505b83516001600160a01b03166397ccdc606107598a600161172b565b8a8a6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b5050505060008060006107db8c8c8c8c8c611746565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610858578181015183820152602001610840565b50505050905090810190601f1680156108855780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b1580156108a657600080fd5b505af11580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108e357600080fd5b810190808051604051939291908464010000000082111561090357600080fd5b90830190602082018581111561091857600080fd5b825164010000000081118282018810171561093257600080fd5b82525081516020918201929091019080838360005b8381101561095f578181015183820152602001610947565b50505050905090810190601f16801561098c5780820380516001836020036101000a031916815260200191505b50604052505050506109a08b8b6001611844565b919750955093506001600160a01b03861615610b6a5786600001516001600160a01b0316636bc195dd8787876040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610a2d578181015183820152602001610a15565b50505050905090810190601f168015610a5a5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610a7b57600080fd5b505af1158015610a8f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ab857600080fd5b8101908080516040519392919084640100000000821115610ad857600080fd5b908301906020820185811115610aed57600080fd5b8251640100000000811182820188101715610b0757600080fd5b82525081516020918201929091019080838360005b83811015610b34578181015183820152602001610b1c565b50505050905090810190601f168015610b615780820380516001836020036101000a031916815260200191505b50604052505050505b610b738761185c565b86604001516001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167f99d773709d80de3e15433c22c381fd8e3b82a68b56322240ff4a304956ef0e528d6040518082815260200191505060405180910390a450506001805550505050505050505050565b60026001541415610c3e576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d6020811015610cd357600080fd5b5051610d26576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b6000610d3586868686866112d6565b9050610d4081611928565b6000806000610d52888660008c61152e565b919450925090506001600160a01b03831615610f1c5783600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610ddf578181015183820152602001610dc7565b50505050905090810190601f168015610e0c5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e2d57600080fd5b505af1158015610e41573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e6a57600080fd5b8101908080516040519392919084640100000000821115610e8a57600080fd5b908301906020820185811115610e9f57600080fd5b8251640100000000811182820188101715610eb957600080fd5b82525081516020918201929091019080838360005b83811015610ee6578181015183820152602001610ece565b50505050905090810190601f168015610f135780820380516001836020036101000a031916815260200191505b50604052505050505b6001600160a01b03861615610fb75783516001600160a01b03166397ccdc60610f468a600061172b565b88886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610f9e57600080fd5b505af1158015610fb2573d6000803e3d6000fd5b505050505b6000806000610fc98c8c8c8c8c61196b565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561104657818101518382015260200161102e565b50505050905090810190601f1680156110735780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561109457600080fd5b505af11580156110a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156110d157600080fd5b81019080805160405193929190846401000000008211156110f157600080fd5b90830190602082018581111561110657600080fd5b825164010000000081118282018810171561112057600080fd5b82525081516020918201929091019080838360005b8381101561114d578181015183820152602001611135565b50505050905090810190601f16801561117a5780820380516001836020036101000a031916815260200191505b506040525050505061118b876119ff565b8a6001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167fdc0718d28ea0f80518c2c454af93bc46bf51dd4a1b25a048ca4ca75a7ac359c48c8e60405180836001600160a01b031681526020018281526020019250505060405180910390a450506001805550505050505050505050565b600061024382611ac1565b600061024382611ace565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040516370a0823160e01b815260009081907320bc832ca081b91433ff6c17f85701b6e92486c59081906370a0823190611283908890600401611d7e565b60206040518083038186803b15801561129b57600080fd5b505afa1580156112af573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022d9190611cc8565b90565b6112de611b90565b6112e6611b90565b6001600160a01b038716808252604080517f56ba88b800000000000000000000000000000000000000000000000000000000815290516356ba88b891600480820192602092909190829003018186803b15801561134257600080fd5b505afa158015611356573d6000803e3d6000fd5b505050506040513d602081101561136c57600080fd5b50516001600160a01b03166020820152611385866112d3565b81604001906001600160a01b031690816001600160a01b031681525050856001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d602081101561140557600080fd5b5051606082015260408082015181516370a0823160e01b81526001600160a01b038a81166004830152925192909116916370a0823191602480820192602092909190829003018186803b15801561145b57600080fd5b505afa15801561146f573d6000803e3d6000fd5b505050506040513d602081101561148557600080fd5b505160a082015260808101949094525060c08301525092915050565b60008160800151116114e45760405162461bcd60e51b8152600401808060200182810382526034815260200180611eee6034913960400191505060405180910390fd5b80608001518160a00151101561152b5760405162461bcd60e51b8152600401808060200182810382526033815260200180611e216033913960400191505060405180910390fd5b50565b600080606084600114156116f25760007320bc832ca081b91433ff6c17f85701b6e92486c56101f473fe2e637202056d30016725477c5da089ab0a043a60405160200161157d93929190611d2b565b60408051601f19818403018152908290526370a0823160e01b825291506000907320bc832ca081b91433ff6c17f85701b6e92486c5906370a08231906115c7908990600401611d7e565b60206040518083038186803b1580156115df57600080fd5b505afa1580156115f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116179190611cc8565b905066470de4df8200008111156116ef5760006040518060a00160405280848152602001886001600160a01b03168152602001428152602001838152602001611671670d99a8cec7e2000085611ae790919063ffffffff16565b81525090506000816040516024016116899190611dbe565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663c04b8d5960e01b17905273e592427a0aece92de3edee1f18e0157c0586156497506000965094506117099350505050565b50505b505060408051602081019091526000808252915081905b9450945094915050565b7320bc832ca081b91433ff6c17f85701b6e92486c590565b73e592427a0aece92de3edee1f18e0157c0586156492915050565b6000806060600073fe2e637202056d30016725477c5da089ab0a043a610bb873c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260405160200161178c93929190611d2b565b60408051601f1981840301815260a0830182528083526001600160a01b038c1660208401524283830152606083018a90526080830188905290519092506000906117da908390602401611dbe565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663c04b8d5960e01b17905273e592427a0aece92de3edee1f18e0157c058615649650600095509350505050955095509592505050565b50506040805160208101909152600080825292839250565b80608001518160a001510360640181604001516001600160a01b03166370a0823183600001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118bf57600080fd5b505afa1580156118d3573d6000803e3d6000fd5b505050506040513d60208110156118e957600080fd5b5051111561152b5760405162461bcd60e51b8152600401808060200182810382526031815260200180611e866031913960400191505060405180910390fd5b600081608001511161152b5760405162461bcd60e51b8152600401808060200182810382526037815260200180611eb76037913960400191505060405180910390fd5b6000806060600073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610bb873fe2e637202056d30016725477c5da089ab0a043a6040516020016119b193929190611d2b565b60408051601f1981840301815260a0830182528083526001600160a01b038c166020840152428383015260608301889052608083018a905290519092506000906117da908390602401611dbe565b8060a0015181604001516001600160a01b03166370a0823183600001516040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a5957600080fd5b505afa158015611a6d573d6000803e3d6000fd5b505050506040513d6020811015611a8357600080fd5b50511161152b5760405162461bcd60e51b8152600401808060200182810382526032815260200180611e546032913960400191505060405180910390fd5b50670de0b6b3a764000090565b5073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290565b6000610217670de0b6b3a7640000611aff8585611b05565b90611b29565b6000821580611b2057505081810281838281611b1d57fe5b04145b61021a57600080fd5b6000808211611b7f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611b8857fe5b049392505050565b6040518060e0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600081526020016000815260200160008152602001600081525090565b80356001600160a01b038116811461024657600080fd5b600060208284031215611c10578081fd5b61021782611be8565b60008060408385031215611c2b578081fd5b611c3483611be8565b9150611c4260208401611be8565b90509250929050565b600080600080600060a08688031215611c62578081fd5b611c6b86611be8565b9450611c7960208701611be8565b935060408601359250611c8e60608701611be8565b949793965091946080013592915050565b60008060408385031215611cb1578182fd5b611cba83611be8565b946020939093013593505050565b600060208284031215611cd9578081fd5b5051919050565b60008151808452815b81811015611d0557602081850181015186830182015201611ce9565b81811115611d165782602083870101525b50601f01601f19169290920160200192915050565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6000602082526102176020830184611ce0565b600060208252825160a06020840152611dda60c0840182611ce0565b90506001600160a01b0360208501511660408401526040840151606084015260608401516080840152608084015160a08401528091505092915050565b9081526020019056fe54686520737472617465677920646f6573206e6f74206861766520656e6f75676820696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f7420726563656976652074686520696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f742072657475726e2074686520696e766573746d656e7420746f6b656e734d696e20696e766573746d656e7420746f6b656e7320746f2072656365697665206d7573742062652067726561746572207468616e2030496e766573746d656e7420746f6b656e7320746f2065786368616e6765206d7573742062652067726561746572207468616e2030a264697066735822122048787cd6dcb695929151f3a8054b6a379639d88c8318d30718cf4a26a96c608f64736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol StakewiseIntegration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_controller": "Address of the controller"
        }
      },
      "enterInvestment(address,address,uint256,address,uint256)": {
        "params": {
          "_investmentAddress": "Address of the investment token to join",
          "_investmentTokensOut": "Min amount of investment tokens to receive",
          "_maxAmountIn": "Max amount of the token to deposit",
          "_strategy": "Address of the strategy",
          "_tokenIn": "Token address to deposit"
        }
      },
      "exitInvestment(address,address,uint256,address,uint256)": {
        "params": {
          "_investmentAddress": "Address of the investment token to exit",
          "_investmentTokenIn": "Quantity of investment tokens to return",
          "_minAmountOut": "Min token quantities to receive from the investment",
          "_strategy": "Address of the strategy",
          "_tokenOut": "Token address to withdraw"
        }
      },
      "getExpectedShares(address,uint256)": {
        "params": {
          "_ethAmount": "Amount of eth to invest",
          "_investmentAddress": "Investment address to check"
        },
        "returns": {
          "_0": "uint256                           Amount of investment shares to receive"
        }
      },
      "getInvestmentAsset(address)": {
        "returns": {
          "_0": "address                           Returns the asset that this investment needs"
        }
      },
      "getPricePerShare(address)": {
        "params": {
          "_investmentAddress": "Investment address to check"
        },
        "returns": {
          "_0": "uint256                           Returns the price in ETH of an investment share"
        }
      },
      "getResultAsset(address)": {
        "returns": {
          "_0": "address                            Returns the asset that this investment obtains"
        }
      },
      "getRewards(address,address)": {
        "params": {
          "_investmentAddress": "Address of the investment",
          "_strategy": "Address of the strategy"
        },
        "returns": {
          "_0": "address                            Returns the address with the token of extra rewards",
          "_1": "uint256                            Extra rewards received so far"
        }
      }
    },
    "title": "StakewiseIntegration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "enterInvestment(address,address,uint256,address,uint256)": {
        "notice": "Deposits tokens into an investment"
      },
      "exitInvestment(address,address,uint256,address,uint256)": {
        "notice": "Exits an outside passive investment"
      },
      "getExpectedShares(address,uint256)": {
        "notice": "Gets the amount of shares expected to get after depositing _ethAmount"
      },
      "getInvestmentAsset(address)": {
        "notice": "Gets the asset needed to enter the investment"
      },
      "getPricePerShare(address)": {
        "notice": "Gets how much eth one unit of the investment is worth"
      },
      "getResultAsset(address)": {
        "notice": "Gets the asset you obtained after entering the investment"
      },
      "getRewards(address,address)": {
        "notice": "Gets the rewards and the token that they are denominated in"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26986,
        "contract": "contracts/integrations/passive/StakewiseIntegration.sol:StakewiseIntegration",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6418,
        "contract": "contracts/integrations/passive/StakewiseIntegration.sol:StakewiseIntegration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}