{
  "address": "0x2B4A741F5281Ea672b7cc21C6d4B4e63c5d7F2A5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cryptoFactoryLpTokenToPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoRegistry",
      "outputs": [
        {
          "internalType": "contract ICryptoRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoRegistryF",
      "outputs": [
        {
          "internalType": "contract ICryptoFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveRegistry",
      "outputs": [
        {
          "internalType": "contract ICurveRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRegistry",
      "outputs": [
        {
          "internalType": "contract IFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "findPoolForCoins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_getUnderlying",
          "type": "bool"
        }
      ],
      "name": "getCoinAddresses",
      "outputs": [
        {
          "internalType": "address[8]",
          "name": "",
          "type": "address[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getCoinIndices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getNCoins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getPoolFromLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingAndRate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getVirtualPriceFromLpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isMeta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolToRegistry",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCryptoRegistries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePoolsList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3364c0bdb8933f2affe8e905d1975407a60e0c7bd4421f2e451840e83dc8797c",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x2B4A741F5281Ea672b7cc21C6d4B4e63c5d7F2A5",
    "transactionIndex": 9,
    "gasUsed": "6590026",
    "logsBloom": "0x
    "blockHash": "0xac128d271bab6bbbcef6b8f96f040c181046070803b58271ed9293b00aab0be3",
    "transactionHash": "0x3364c0bdb8933f2affe8e905d1975407a60e0c7bd4421f2e451840e83dc8797c",
    "logs": [],
    "blockNumber": 14210221,
    "cumulativeGasUsed": "7094825",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 1,
  "solcInputHash": "d473d609720c87a45aae96e5ba466dc4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cryptoFactoryLpTokenToPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoRegistry\",\"outputs\":[{\"internalType\":\"contract ICryptoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoRegistryF\",\"outputs\":[{\"internalType\":\"contract ICryptoFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"findPoolForCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_getUnderlying\",\"type\":\"bool\"}],\"name\":\"getCoinAddresses\",\"outputs\":[{\"internalType\":\"address[8]\",\"name\":\"\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getCoinIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getNCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getPoolFromLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingAndRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getVirtualPriceFromLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolToRegistry\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCryptoRegistries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePoolsList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Abstraction for all the different Curve registries\",\"kind\":\"dev\",\"methods\":{\"findPoolForCoins(address,address,uint256)\":{\"params\":{\"_fromToken\":\"Token 1\",\"_i\":\"Index of the pool to retrieve (if more than one)\",\"_toToken\":\"Token 2\"},\"returns\":{\"_0\":\"address                Address of the pool\"}},\"getCoinAddresses(address,bool)\":{\"params\":{\"_getUnderlying\":\"Whether or not to get the underlying coins\"},\"returns\":{\"_0\":\"address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)\"}},\"getCoinIndices(address,address,address)\":{\"params\":{\"_fromToken\":\"Token 1\",\"_pool\":\"Pool address\",\"_toToken\":\"Token 2\"},\"returns\":{\"_0\":\"uint256                Index of token 1\",\"_1\":\"uint256                Index of token 2\",\"_2\":\"bool                   Whether or not is underlying\"}},\"getLpToken(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"address                Address of the lp token\"}},\"getNCoins(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"uint256                Number of coins in the pool\"}},\"getPoolFromLpToken(address)\":{\"params\":{\"_lpToken\":\"Address of the lp token\"},\"returns\":{\"_0\":\"address                Address of the pool, 0 if it doesn't exist\"}},\"getUnderlyingAndRate(address,uint256)\":{\"params\":{\"_i\":\"Asset index\",\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"address                Address of the underlying asset. 0 if none\",\"_1\":\"uint256                Rate of conversion between the underlying and the asset\"}},\"getVirtualPriceFromLpToken(address)\":{\"params\":{\"_lpToken\":\"Lp token Address\"},\"returns\":{\"_0\":\"uint256                Whether the pool is a meta pool or not\"}},\"isMeta(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"bool                Whether the pool is a meta pool or not\"}},\"isPool(address)\":{\"params\":{\"_poolAddress\":\"Pool address\"},\"returns\":{\"_0\":\"bool                   Whether or not is underlying\"}}},\"title\":\"CurveMetaRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findPoolForCoins(address,address,uint256)\":{\"notice\":\"Finds a pool given those tokens and the index _i\"},\"getCoinAddresses(address,bool)\":{\"notice\":\"Gets the coin addresses of a pool\"},\"getCoinIndices(address,address,address)\":{\"notice\":\"Gets the indices of two tokens given a pool address\"},\"getLpToken(address)\":{\"notice\":\"Gets the lp token from a curve pool address\"},\"getNCoins(address)\":{\"notice\":\"Gets the number of coins of a curve pool\"},\"getPoolFromLpToken(address)\":{\"notice\":\"Gets the pool from a curve lp token\"},\"getUnderlyingAndRate(address,uint256)\":{\"notice\":\"Returns the underlying asset and the rate of conversion at the index i\"},\"getVirtualPriceFromLpToken(address)\":{\"notice\":\"Returns the virtual price of an lp token from curve\"},\"isMeta(address)\":{\"notice\":\"Returns whether the pool is a meta pool\"},\"isPool(address)\":{\"notice\":\"Returns whether or not a given address is a curve pool\"},\"updateCryptoRegistries()\":{\"notice\":\"Updates the addresses of the registries themselves\"},\"updatePoolsList()\":{\"notice\":\"Updates the mapping of pools for gas efficiency\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurveMetaRegistry.sol\":\"CurveMetaRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"contracts/CurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {ICurveMetaRegistry} from './interfaces/ICurveMetaRegistry.sol';\\nimport {IPriceTri} from './interfaces/external/curve/IPriceTri.sol';\\nimport {ICurvePoolV3} from './interfaces/external/curve/ICurvePoolV3.sol';\\nimport {ICurveAddressProvider} from './interfaces/external/curve/ICurveAddressProvider.sol';\\nimport {ICurveRegistry} from './interfaces/external/curve/ICurveRegistry.sol';\\nimport {IFactoryRegistry} from './interfaces/external/curve/IFactoryRegistry.sol';\\nimport {ICryptoRegistry} from './interfaces/external/curve/ICryptoRegistry.sol';\\nimport {ICryptoFactoryRegistry} from './interfaces/external/curve/ICryptoFactoryRegistry.sol';\\n\\nimport {ControllerLib} from './lib/ControllerLib.sol';\\n\\n/**\\n * @title CurveMetaRegistry\\n * @author Babylon Finance Protocol\\n *\\n * Abstraction for all the different Curve registries\\n */\\ncontract CurveMetaRegistry is ICurveMetaRegistry {\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constants ============ */\\n\\n    // Address of Curve Address provider\\n    ICurveAddressProvider internal constant curveAddressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    address private constant TRI_CURVE_POOL_2_LP = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;\\n\\n    IBabController public immutable controller;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Registry of first party pools\\n    ICurveRegistry public curveRegistry;\\n\\n    // Registry of user created pools\\n    IFactoryRegistry public factoryRegistry;\\n\\n    // Registry of first party crypto pools\\n    ICryptoRegistry public cryptoRegistry;\\n\\n    // Registry of third party crypto pools\\n    ICryptoFactoryRegistry public cryptoRegistryF;\\n\\n    mapping(address => address) public cryptoFactoryLpTokenToPools;\\n\\n    // Mapping of pool to registryId\\n    mapping(address => uint8) public poolToRegistry;\\n\\n    // 0 means doesnt exist\\n    // 1 means first party normal\\n    // 2 means factory pools\\n    // 3 means crypto first party\\n    // 4 means crypto third party\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller is not valid');\\n        controller = _controller;\\n        curveRegistry = ICurveRegistry(curveAddressProvider.get_registry());\\n        factoryRegistry = IFactoryRegistry(curveAddressProvider.get_address(3));\\n        cryptoRegistry = ICryptoRegistry(curveAddressProvider.get_address(5));\\n        cryptoRegistryF = ICryptoFactoryRegistry(curveAddressProvider.get_address(6));\\n\\n        _updateMapping(4, ICurveRegistry(address(cryptoRegistryF)));\\n        _updateMapping(2, ICurveRegistry(address(factoryRegistry)));\\n        _updateMapping(3, ICurveRegistry(address(cryptoRegistry)));\\n        _updateMapping(1, curveRegistry);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Updates the mapping of pools for gas efficiency\\n     *\\n     */\\n    function updatePoolsList() public override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateMapping(4, ICurveRegistry(address(cryptoRegistryF)));\\n        _updateMapping(3, ICurveRegistry(address(cryptoRegistry)));\\n        _updateMapping(2, ICurveRegistry(address(factoryRegistry)));\\n        _updateMapping(1, curveRegistry);\\n    }\\n\\n    /**\\n     * Updates the addresses of the registries themselves\\n     *\\n     */\\n    function updateCryptoRegistries() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        curveRegistry = ICurveRegistry(curveAddressProvider.get_registry());\\n        factoryRegistry = IFactoryRegistry(curveAddressProvider.get_address(3));\\n        cryptoRegistry = ICryptoRegistry(curveAddressProvider.get_address(5));\\n        cryptoRegistryF = ICryptoFactoryRegistry(curveAddressProvider.get_address(6));\\n        updatePoolsList();\\n    }\\n\\n    /**\\n     * Gets the coin addresses of a pool\\n     * @param _getUnderlying          Whether or not to get the underlying coins\\n     *\\n     * @return address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)\\n     */\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view override returns (address[8] memory) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (_getUnderlying) {\\n            if (registryKind == 1) {\\n                return curveRegistry.get_underlying_coins(_pool);\\n            }\\n            if (registryKind == 2) {\\n                try factoryRegistry.get_underlying_coins(_pool) returns (address[8] memory coins) {\\n                    return coins;\\n                } catch {\\n                    // try normal. Some pools revert\\n                    _getUnderlying = false;\\n                }\\n            }\\n            if (registryKind > 2) {\\n                // crypto pools only have normal\\n                _getUnderlying = false;\\n            }\\n        }\\n        if (!_getUnderlying) {\\n            if (registryKind == 1) {\\n                return curveRegistry.get_coins(_pool);\\n            }\\n            if (registryKind == 2) {\\n                address[4] memory addressesF = factoryRegistry.get_coins(_pool);\\n                return [\\n                    addressesF[0],\\n                    addressesF[1],\\n                    addressesF[2],\\n                    addressesF[3],\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0)\\n                ];\\n            }\\n            if (registryKind == 3) {\\n                return cryptoRegistry.get_coins(_pool);\\n            }\\n            if (registryKind == 4) {\\n                address[2] memory addressesCF = cryptoRegistryF.get_coins(_pool);\\n                return [\\n                    addressesCF[0],\\n                    addressesCF[1],\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0)\\n                ];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Gets the number of coins of a curve pool\\n     * @param _pool                   Pool Address\\n     *\\n     * @return uint256                Number of coins in the pool\\n     */\\n    function getNCoins(address _pool) public view override returns (uint256) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (registryKind == 1) {\\n            return curveRegistry.get_n_coins(_pool)[0];\\n        }\\n        if (registryKind == 2) {\\n            uint256 coins = factoryRegistry.get_n_coins(_pool);\\n            if (coins == 0) {\\n                // Try through meta\\n                (coins, ) = factoryRegistry.get_meta_n_coins(_pool);\\n            }\\n            return coins;\\n        }\\n        if (registryKind == 3) {\\n            return cryptoRegistry.get_n_coins(_pool);\\n        }\\n        // Crypto factory always two\\n        return 2;\\n    }\\n\\n    /**\\n     * Gets the lp token from a curve pool address\\n     * @param _pool                   Pool Address\\n     *\\n     * @return address                Address of the lp token\\n     */\\n    function getLpToken(address _pool) external view override returns (address) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        // For Deposits & stable swaps that support it get the LP token, otherwise get the pool\\n        if (registryKind == 1) {\\n            return curveRegistry.get_lp_token(_pool);\\n        }\\n        if (registryKind == 3) {\\n            return cryptoRegistry.get_lp_token(_pool);\\n        }\\n        // Factory pools use the pool as the token\\n        if (registryKind == 2) {\\n            return _pool;\\n        }\\n        return cryptoRegistryF.get_token(_pool);\\n    }\\n\\n    /**\\n     * Gets the pool from a curve lp token\\n     * @param _lpToken                Address of the lp token\\n     *\\n     * @return address                Address of the pool, 0 if it doesn't exist\\n     */\\n    function getPoolFromLpToken(address _lpToken) public view override returns (address) {\\n        // Factory pools use the pool as the token\\n        if (poolToRegistry[_lpToken] == 2) {\\n            return _lpToken;\\n        }\\n        address cryptoFactoryPool = cryptoFactoryLpTokenToPools[_lpToken];\\n        if (cryptoFactoryPool != address(0)) {\\n            return cryptoFactoryPool;\\n        }\\n        // For Deposits & stable swaps that support it get the LP token, otherwise get the pool\\n        try curveRegistry.get_pool_from_lp_token(_lpToken) returns (address pool) {\\n            if (pool != address(0)) {\\n                return pool;\\n            }\\n        } catch {}\\n        try cryptoRegistry.get_pool_from_lp_token(_lpToken) returns (address pool2) {\\n            return pool2;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n\\n    /**\\n     * Returns whether the pool is a meta pool\\n     * @param _pool                   Pool Address\\n     *\\n     * @return bool                Whether the pool is a meta pool or not\\n     */\\n    function isMeta(address _pool) external view override returns (bool) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (registryKind != 1 && registryKind != 2) {\\n            return false;\\n        }\\n        if (registryKind == 1) {\\n            return curveRegistry.is_meta(_pool);\\n        }\\n        return factoryRegistry.is_meta(_pool);\\n    }\\n\\n    /**\\n     * Returns the virtual price of an lp token from curve\\n     * @param _lpToken                Lp token Address\\n     *\\n     * @return uint256                Whether the pool is a meta pool or not\\n     */\\n    function getVirtualPriceFromLpToken(address _lpToken) external view override returns (uint256) {\\n        address pool = getPoolFromLpToken(_lpToken);\\n        uint256 registryKind = poolToRegistry[pool];\\n        // Normal pools\\n        if (registryKind == 1) {\\n            return curveRegistry.get_virtual_price_from_lp_token(_lpToken);\\n        }\\n        if (registryKind == 2) {\\n            // Factory registry do not have the method but pools do\\n            return ICurvePoolV3(pool).get_virtual_price();\\n        }\\n        // Special case tricrypto 2\\n        if (_lpToken == TRI_CURVE_POOL_2_LP) {\\n            return IPriceTri(0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950).lp_price();\\n        }\\n        // for crypto pools get directly from the pool the lp price\\n        try ICurvePoolV3(pool).lp_price() returns (uint256 price) {\\n            return price;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the underlying asset and the rate of conversion at the index i\\n     * @param _pool                   Pool Address\\n     * @param _i                      Asset index\\n     *\\n     * @return address                Address of the underlying asset. 0 if none\\n     * @return uint256                Rate of conversion between the underlying and the asset\\n     */\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view override returns (address, uint256) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n\\n        if (registryKind == 1) {\\n            return (curveRegistry.get_underlying_coins(_pool)[_i], curveRegistry.get_rates(_pool)[_i]);\\n        }\\n        if (registryKind == 2) {\\n            return (factoryRegistry.get_underlying_coins(_pool)[_i], factoryRegistry.get_rates(_pool)[_i]);\\n        }\\n        // No underlying\\n        return (address(0), 0);\\n    }\\n\\n    /**\\n     * Finds a pool given those tokens and the index _i\\n     * @param _fromToken              Token 1\\n     * @param _toToken                Token 2\\n     * @param _i                      Index of the pool to retrieve (if more than one)\\n     *\\n     * @return address                Address of the pool\\n     */\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view override returns (address) {\\n        address result = curveRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return result;\\n        }\\n        result = factoryRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return result;\\n        }\\n        result = cryptoRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return result;\\n        }\\n        return cryptoRegistryF.find_pool_for_coins(_fromToken, _toToken, _i);\\n    }\\n\\n    /**\\n     * Gets the indices of two tokens given a pool address\\n     * @param _pool                   Pool address\\n     * @param _fromToken              Token 1\\n     * @param _toToken                Token 2\\n     *\\n     * @return uint256                Index of token 1\\n     * @return uint256                Index of token 2\\n     * @return bool                   Whether or not is underlying\\n     */\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        bool underlying = false;\\n        uint256 oneIndex;\\n        uint256 twoIndex;\\n        if (registryKind == 1) {\\n            (int128 oneIndexI, int128 twoIndexI, bool underlyingI) =\\n                curveRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n            oneIndex = uint256(oneIndexI);\\n            twoIndex = uint256(twoIndexI);\\n            underlying = underlyingI;\\n        }\\n        if (registryKind == 2) {\\n            (int128 oneIndexI, int128 twoIndexI, bool underlyingI) =\\n                factoryRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n            oneIndex = uint256(oneIndexI);\\n            twoIndex = uint256(twoIndexI);\\n            underlying = underlyingI;\\n        }\\n        if (registryKind == 3) {\\n            (oneIndex, twoIndex) = cryptoRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n        }\\n        if (registryKind == 4) {\\n            (oneIndex, twoIndex) = cryptoRegistryF.get_coin_indices(_pool, _fromToken, _toToken);\\n        }\\n        return (oneIndex, twoIndex, underlying);\\n    }\\n\\n    /**\\n     * Returns whether or not a given address is a curve pool\\n     * @param _poolAddress            Pool address\\n     *\\n     * @return bool                   Whether or not is underlying\\n     */\\n    function isPool(address _poolAddress) external view override returns (bool) {\\n        return poolToRegistry[_poolAddress] != 0;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    // Function to the update the registry mappings\\n    function _updateMapping(uint8 _index, ICurveRegistry _registry) internal {\\n        for (uint256 i = 0; i < _registry.pool_count(); i++) {\\n            address pool = _registry.pool_list(i);\\n            poolToRegistry[pool] = _index;\\n            // Adds lptoken to pool for cryptofactory pools\\n            if (_index == 4) {\\n                cryptoFactoryLpTokenToPools[ICurvePoolV3(pool).token()] = pool;\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc41e33d0b0d59e5d1981d03efa28f5a764b48c8eefdecde5952a897a04bf1162\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x4658e4e06fba80545a68eeea6570913050028c26ba9f3e05e7c414c5a7f0382a\",\"license\":\"Apache License\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xb8b2aef9698f8ac2af013e3f0b71cc3ee3b2cdba0b5cae5e8d7c11e5f4a3039e\",\"license\":\"Apache License\"},\"contracts/interfaces/external/curve/ICryptoFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICryptoFactoryRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_token(address _pool) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x71ec68b7003685bf3cc06aca0218eb39412dfa5033728b92ee6e50537630c172\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICryptoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICryptoRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2704c172edd40da3d0a2bc831db1cfeb3ea4a6044cd716562b37c30905ec0889\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function max_id() external view returns (uint256);\\n\\n    function get_id_info(uint256 _id)\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            uint256,\\n            uint256,\\n            string calldata\\n        );\\n}\\n\",\"keccak256\":\"0x85fbe7211e95c23fde1862fde20e588eedd856d6b67efbfb98c1b338726f5ec2\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3 {\\n    function coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(int128 arg0) external view returns (address out);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256 out);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address out);\\n\\n    function token() external view returns (address out);\\n\\n    function curve() external view returns (address out);\\n\\n    function pool() external view returns (address out);\\n}\\n\",\"keccak256\":\"0x4757b8b84ec7e87564e32b1da52b392aa8f4d39cf3097e6abdfe5a201b7ad587\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICurveRegistry {\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x7bc87ae8a8838af0a578bc90b35768568e8a88232cb737186651e4920dd8f1dd\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IFactoryRegistry {\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address _pool) external view returns (uint256, uint256);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[4] memory);\\n\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x0cb5466d81dcb3088409ea5d2fa5ea7603601de8d2d61c6d5ce50e235ed17f57\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/IPriceTri.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// See https://mobile.twitter.com/curvefinance/status/1441538795493478415\\n// https://etherscan.io/address/0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950#readContract\\ninterface IPriceTri {\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x067368dae9c5cedb6ad77c7f0f660693866fa0b4247df7d1892342e672761878\",\"license\":\"MIT\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x39387b44420772715db25dc0ce61aab134a45367dc056f830c2af40816d5e09e\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620024ef380380620024ef833981810160405260208110156200003757600080fd5b50516001600160a01b03811662000095576040805162461bcd60e51b815260206004820152601760248201527f436f6e74726f6c6c6572206973206e6f742076616c6964000000000000000000604482015290519081900360640190fd5b6001600160601b0319606082901b166080526040805163a262904b60e01b815290516f22d53366457f9d5e68ec105046fc43839163a262904b916004808301926020929190829003018186803b158015620000ef57600080fd5b505afa15801562000104573d6000803e3d6000fd5b505050506040513d60208110156200011b57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b1580156200018b57600080fd5b505afa158015620001a0573d6000803e3d6000fd5b505050506040513d6020811015620001b757600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b1580156200022757600080fd5b505afa1580156200023c573d6000803e3d6000fd5b505050506040513d60208110156200025357600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015620002c357600080fd5b505afa158015620002d8573d6000803e3d6000fd5b505050506040513d6020811015620002ef57600080fd5b5051600380546001600160a01b0319166001600160a01b0392831617908190556200031e916004911662000373565b60015462000338906002906001600160a01b031662000373565b60025462000352906003906001600160a01b031662000373565b6000546200036c906001906001600160a01b031662000373565b506200053d565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b057600080fd5b505afa158015620003c5573d6000803e3d6000fd5b505050506040513d6020811015620003dc57600080fd5b505181101562000538576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156200042d57600080fd5b505afa15801562000442573d6000803e3d6000fd5b505050506040513d60208110156200045957600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff8716908117909155909150600414156200052e578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004ce57600080fd5b505afa158015620004e3573d6000803e3d6000fd5b505050506040513d6020811015620004fa57600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b5060010162000376565b505050565b60805160601c611f8a6200056560003980610a8552806114bd5280611bdd5250611f8a6000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80635b16ebb7116100cd578063b35084db11610081578063e39e268211610066578063e39e268214610426578063f77c47911461044c578063fc911e741461045457610151565b8063b35084db146103b8578063c4c09b55146103ee57610151565b806371174f16116100b257806371174f1614610323578063a07952a414610349578063aee466f6146103b057610151565b80635b16ebb71461029a57806364d894d2146102d457610151565b80632abd8a26116101245780633a5e5ceb116101095780633a5e5ceb1461024c5780633bf0c9fb14610256578063476987991461025e57610151565b80632abd8a26146102005780632ae914321461022657610151565b80630d56cc791461015657806324a592331461017a57806327c24a5d146101a057806329a0eb85146101a8575b600080fd5b61015e61045c565b604080516001600160a01b039092168252519081900360200190f35b61015e6004803603602081101561019057600080fd5b50356001600160a01b031661046b565b61015e6105e1565b6101e0600480360360608110156101be57600080fd5b506001600160a01b0381358116916020810135821691604090910135166105f0565b604080519384526020840192909252151582820152519081900360600190f35b61015e6004803603602081101561021657600080fd5b50356001600160a01b03166108bd565b61015e6004803603602081101561023c57600080fd5b50356001600160a01b0316610a65565b610254610a80565b005b61015e610d1b565b6102846004803603602081101561027457600080fd5b50356001600160a01b0316610d2a565b6040805160ff9092168252519081900360200190f35b6102c0600480360360208110156102b057600080fd5b50356001600160a01b0316610d3f565b604080519115158252519081900360200190f35b610300600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135610d5f565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102c06004803603602081101561033957600080fd5b50356001600160a01b0316610fc2565b6103776004803603604081101561035f57600080fd5b506001600160a01b03813516906020013515156110a2565b604051808261010080838360005b8381101561039d578181015183820152602001610385565b5050505090500191505060405180910390f35b6102546114b8565b61015e600480360360608110156103ce57600080fd5b506001600160a01b0381358116916020810135909116906040013561154a565b6104146004803603602081101561040457600080fd5b50356001600160a01b03166117c1565b60408051918252519081900360200190f35b6104146004803603602081101561043c57600080fd5b50356001600160a01b03166119ec565b61015e611bdb565b61015e611bff565b6003546001600160a01b031681565b6001600160a01b03811660009081526005602052604081205460ff16600214156104965750806105dc565b6001600160a01b038083166000908152600460205260409020541680156104be5790506105dc565b6000546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561050b57600080fd5b505afa92505050801561053057506040513d602081101561052b57600080fd5b505160015b61053957610553565b6001600160a01b038116156105515791506105dc9050565b505b6002546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b1580156105a057600080fd5b505afa9250505080156105c557506040513d60208110156105c057600080fd5b505160015b6105d35760009150506105dc565b91506105dc9050565b919050565b6000546001600160a01b031681565b6001600160a01b0383166000908152600560205260408120548190819060ff1681808060018414156106c357600080546040805163eb85226d60e01b81526001600160a01b038e811660048301528d811660248301528c81166044830152915184938493169163eb85226d916064808301926060929190829003018186803b15801561067b57600080fd5b505afa15801561068f573d6000803e3d6000fd5b505050506040513d60608110156106a557600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360021415610777576001546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b8116604483015291516000938493849391169163eb85226d91606480820192606092909190829003018186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d606081101561075957600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360031415610812576002546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d604081101561080357600080fd5b50805160209091015190925090505b83600414156108ad576003546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d604081101561089e57600080fd5b50805160209091015190925090505b9099909850909650945050505050565b6001600160a01b03811660009081526005602052604081205460ff1660018114156109645760005460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d602081101561095957600080fd5b505191506105dc9050565b80600314156109ba5760025460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b15801561092f57600080fd5b80600214156109cc57829150506105dc565b600354604080517f977d91220000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151919092169163977d9122916024808301926020929190829003018186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d6020811015610a5c57600080fd5b50519392505050565b6004602052600090815260409020546001600160a01b031681565b610ab27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c0e565b6f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610cc657600080fd5b505afa158015610cda573d6000803e3d6000fd5b505050506040513d6020811015610cf057600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055610d196114b8565b565b6001546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b031660009081526005602052604090205460ff16151590565b6001600160a01b038216600090815260056020526040812054819060ff166001811415610ec2576000546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610dd457600080fd5b505afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610e0e57600080fd5b508460088110610e1a57fe5b60200201516000546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b158015610e6d57600080fd5b505afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610ea757600080fd5b508560088110610eb357fe5b60200201519250925050610fbb565b8060021415610fb2576001546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610f5357600080fd5b508460088110610f5f57fe5b60200201516001546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b158015610e6d57600080fd5b60008092509250505b9250929050565b6001600160a01b03811660009081526005602052604081205460ff1660018114801590610ff0575080600214155b15610fff5760009150506105dc565b8060011415611055576000546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b15801561092f57600080fd5b6001546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610a3257600080fd5b6110aa611f0b565b6001600160a01b03831660009081526005602052604090205460ff168215611216578060011415611167576000546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561112357600080fd5b505afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561115d57600080fd5b5091506114b29050565b8060021415611208576001546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b1580156111be57600080fd5b505afa9250505080156111f257506040513d601f19601f820116820180604052506101008110156111ee57600080fd5b5060015b6111ff5760009250611208565b91506114b29050565b600281111561121657600092505b826114b05780600114156112725760005460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561112357600080fd5b806002141561136f5760015460408051639ac90d3d60e01b81526001600160a01b03878116600483015291516000939290921691639ac90d3d91602480820192608092909190829003018186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561130557600080fd5b50604080516101008101825282516001600160a01b039081168252602080850151821690830152838301518116928201929092526060928301519091169181019190915260006080820181905260a0820181905260c0820181905260e082015292506114b2915050565b80600314156113c65760025460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561112357600080fd5b80600414156114b05760035460408051639ac90d3d60e01b81526001600160a01b03878116600483015282516000949190911692639ac90d3d9260248082019391829003018186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561145457600080fd5b50604080516101008101825282516001600160a01b03908116825260209384015116928101929092526000908201819052606082018190526080820181905260a0820181905260c0820181905260e082015292506114b2915050565b505b92915050565b6114ea7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c0e565b600354611502906004906001600160a01b0316611d4d565b60025461151a906003906001600160a01b0316611d4d565b600154611532906002906001600160a01b0316611d4d565b600054610d19906001906001600160a01b0316611d4d565b6000805460408051636982eb0b60e01b81526001600160a01b038781166004830152868116602483015260448201869052915184939290921691636982eb0b91606480820192602092909190829003018186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d60208110156115d457600080fd5b505190506001600160a01b038116156115ee5790506117ba565b60015460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b15801561164a57600080fd5b505afa15801561165e573d6000803e3d6000fd5b505050506040513d602081101561167457600080fd5b505190506001600160a01b0381161561168e5790506117ba565b60025460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d602081101561171457600080fd5b505190506001600160a01b0381161561172e5790506117ba565b60035460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b50519150505b9392505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415611868576000546040805163940494f160e01b81526001600160a01b038681166004830152825193169263940494f192602480840193919291829003018186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561095957600080fd5b806002141561198d576001546040805163940494f160e01b81526001600160a01b0386811660048301529151600093929092169163940494f191602480820192602092909190829003018186803b1580156118c257600080fd5b505afa1580156118d6573d6000803e3d6000fd5b505050506040513d60208110156118ec57600080fd5b50519050806105d357600154604080517feb73f37d0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152825193169263eb73f37d92602480840193919291829003018186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d604081101561198157600080fd5b505192506105dc915050565b80600314156119e3576002546040805163940494f160e01b81526001600160a01b0386811660048301529151919092169163940494f1916024808301926020929190829003018186803b15801561092f57600080fd5b50600292915050565b6000806119f88361046b565b6001600160a01b03811660009081526005602052604090205490915060ff166001811415611ab057600054604080517fc5b7074a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529151919092169163c5b7074a916024808301926020929190829003018186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d602081101561198157600080fd5b8060021415611af257816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8657600080fd5b6001600160a01b03841673c4ad29ba4b3c580e6d59105fff484999997675ff1415611b645773e8b2989276e2ca8fdea2268e3551b2b4b24189506001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8657600080fd5b816001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9d57600080fd5b505afa925050508015611bc257506040513d6020811015611bbd57600080fd5b505160015b611bd1576000925050506105dc565b92506105dc915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4757600080fd5b505afa158015611c5b573d6000803e3d6000fd5b505050506040513d6020811015611c7157600080fd5b50516001600160a01b0316331480611cf55750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b50516001600160a01b031633145b611d4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611f2b602a913960400191505060405180910390fd5b50565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051811015611f06576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611e0257600080fd5b505afa158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff871690811790915590915060041415611efd578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9f57600080fd5b505afa158015611eb3573d6000803e3d6000fd5b505050506040513d6020811015611ec957600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b50600101611d50565b505050565b604051806101000160405280600890602082028036833750919291505056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a26469706673582212208af423c04971d7c189cc771bc5d1d4f36b5e152f4ea52773448b9b8985cc204064736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80635b16ebb7116100cd578063b35084db11610081578063e39e268211610066578063e39e268214610426578063f77c47911461044c578063fc911e741461045457610151565b8063b35084db146103b8578063c4c09b55146103ee57610151565b806371174f16116100b257806371174f1614610323578063a07952a414610349578063aee466f6146103b057610151565b80635b16ebb71461029a57806364d894d2146102d457610151565b80632abd8a26116101245780633a5e5ceb116101095780633a5e5ceb1461024c5780633bf0c9fb14610256578063476987991461025e57610151565b80632abd8a26146102005780632ae914321461022657610151565b80630d56cc791461015657806324a592331461017a57806327c24a5d146101a057806329a0eb85146101a8575b600080fd5b61015e61045c565b604080516001600160a01b039092168252519081900360200190f35b61015e6004803603602081101561019057600080fd5b50356001600160a01b031661046b565b61015e6105e1565b6101e0600480360360608110156101be57600080fd5b506001600160a01b0381358116916020810135821691604090910135166105f0565b604080519384526020840192909252151582820152519081900360600190f35b61015e6004803603602081101561021657600080fd5b50356001600160a01b03166108bd565b61015e6004803603602081101561023c57600080fd5b50356001600160a01b0316610a65565b610254610a80565b005b61015e610d1b565b6102846004803603602081101561027457600080fd5b50356001600160a01b0316610d2a565b6040805160ff9092168252519081900360200190f35b6102c0600480360360208110156102b057600080fd5b50356001600160a01b0316610d3f565b604080519115158252519081900360200190f35b610300600480360360408110156102ea57600080fd5b506001600160a01b038135169060200135610d5f565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6102c06004803603602081101561033957600080fd5b50356001600160a01b0316610fc2565b6103776004803603604081101561035f57600080fd5b506001600160a01b03813516906020013515156110a2565b604051808261010080838360005b8381101561039d578181015183820152602001610385565b5050505090500191505060405180910390f35b6102546114b8565b61015e600480360360608110156103ce57600080fd5b506001600160a01b0381358116916020810135909116906040013561154a565b6104146004803603602081101561040457600080fd5b50356001600160a01b03166117c1565b60408051918252519081900360200190f35b6104146004803603602081101561043c57600080fd5b50356001600160a01b03166119ec565b61015e611bdb565b61015e611bff565b6003546001600160a01b031681565b6001600160a01b03811660009081526005602052604081205460ff16600214156104965750806105dc565b6001600160a01b038083166000908152600460205260409020541680156104be5790506105dc565b6000546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561050b57600080fd5b505afa92505050801561053057506040513d602081101561052b57600080fd5b505160015b61053957610553565b6001600160a01b038116156105515791506105dc9050565b505b6002546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b1580156105a057600080fd5b505afa9250505080156105c557506040513d60208110156105c057600080fd5b505160015b6105d35760009150506105dc565b91506105dc9050565b919050565b6000546001600160a01b031681565b6001600160a01b0383166000908152600560205260408120548190819060ff1681808060018414156106c357600080546040805163eb85226d60e01b81526001600160a01b038e811660048301528d811660248301528c81166044830152915184938493169163eb85226d916064808301926060929190829003018186803b15801561067b57600080fd5b505afa15801561068f573d6000803e3d6000fd5b505050506040513d60608110156106a557600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360021415610777576001546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b8116604483015291516000938493849391169163eb85226d91606480820192606092909190829003018186803b15801561072f57600080fd5b505afa158015610743573d6000803e3d6000fd5b505050506040513d606081101561075957600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360031415610812576002546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b1580156107d957600080fd5b505afa1580156107ed573d6000803e3d6000fd5b505050506040513d604081101561080357600080fd5b50805160209091015190925090505b83600414156108ad576003546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b15801561087457600080fd5b505afa158015610888573d6000803e3d6000fd5b505050506040513d604081101561089e57600080fd5b50805160209091015190925090505b9099909850909650945050505050565b6001600160a01b03811660009081526005602052604081205460ff1660018114156109645760005460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b15801561092f57600080fd5b505afa158015610943573d6000803e3d6000fd5b505050506040513d602081101561095957600080fd5b505191506105dc9050565b80600314156109ba5760025460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b15801561092f57600080fd5b80600214156109cc57829150506105dc565b600354604080517f977d91220000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151919092169163977d9122916024808301926020929190829003018186803b158015610a3257600080fd5b505afa158015610a46573d6000803e3d6000fd5b505050506040513d6020811015610a5c57600080fd5b50519392505050565b6004602052600090815260409020546001600160a01b031681565b610ab27f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c0e565b6f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610afb57600080fd5b505afa158015610b0f573d6000803e3d6000fd5b505050506040513d6020811015610b2557600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610b9457600080fd5b505afa158015610ba8573d6000803e3d6000fd5b505050506040513d6020811015610bbe57600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610c2d57600080fd5b505afa158015610c41573d6000803e3d6000fd5b505050506040513d6020811015610c5757600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610cc657600080fd5b505afa158015610cda573d6000803e3d6000fd5b505050506040513d6020811015610cf057600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055610d196114b8565b565b6001546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b031660009081526005602052604090205460ff16151590565b6001600160a01b038216600090815260056020526040812054819060ff166001811415610ec2576000546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610dd457600080fd5b505afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610e0e57600080fd5b508460088110610e1a57fe5b60200201516000546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b158015610e6d57600080fd5b505afa158015610e81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610ea757600080fd5b508560088110610eb357fe5b60200201519250925050610fbb565b8060021415610fb2576001546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610f1957600080fd5b505afa158015610f2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250610100811015610f5357600080fd5b508460088110610f5f57fe5b60200201516001546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b158015610e6d57600080fd5b60008092509250505b9250929050565b6001600160a01b03811660009081526005602052604081205460ff1660018114801590610ff0575080600214155b15610fff5760009150506105dc565b8060011415611055576000546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b15801561092f57600080fd5b6001546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610a3257600080fd5b6110aa611f0b565b6001600160a01b03831660009081526005602052604090205460ff168215611216578060011415611167576000546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561112357600080fd5b505afa158015611137573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561115d57600080fd5b5091506114b29050565b8060021415611208576001546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b1580156111be57600080fd5b505afa9250505080156111f257506040513d601f19601f820116820180604052506101008110156111ee57600080fd5b5060015b6111ff5760009250611208565b91506114b29050565b600281111561121657600092505b826114b05780600114156112725760005460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561112357600080fd5b806002141561136f5760015460408051639ac90d3d60e01b81526001600160a01b03878116600483015291516000939290921691639ac90d3d91602480820192608092909190829003018186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561130557600080fd5b50604080516101008101825282516001600160a01b039081168252602080850151821690830152838301518116928201929092526060928301519091169181019190915260006080820181905260a0820181905260c0820181905260e082015292506114b2915050565b80600314156113c65760025460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561112357600080fd5b80600414156114b05760035460408051639ac90d3d60e01b81526001600160a01b03878116600483015282516000949190911692639ac90d3d9260248082019391829003018186803b15801561141b57600080fd5b505afa15801561142f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561145457600080fd5b50604080516101008101825282516001600160a01b03908116825260209384015116928101929092526000908201819052606082018190526080820181905260a0820181905260c0820181905260e082015292506114b2915050565b505b92915050565b6114ea7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611c0e565b600354611502906004906001600160a01b0316611d4d565b60025461151a906003906001600160a01b0316611d4d565b600154611532906002906001600160a01b0316611d4d565b600054610d19906001906001600160a01b0316611d4d565b6000805460408051636982eb0b60e01b81526001600160a01b038781166004830152868116602483015260448201869052915184939290921691636982eb0b91606480820192602092909190829003018186803b1580156115aa57600080fd5b505afa1580156115be573d6000803e3d6000fd5b505050506040513d60208110156115d457600080fd5b505190506001600160a01b038116156115ee5790506117ba565b60015460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b15801561164a57600080fd5b505afa15801561165e573d6000803e3d6000fd5b505050506040513d602081101561167457600080fd5b505190506001600160a01b0381161561168e5790506117ba565b60025460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156116ea57600080fd5b505afa1580156116fe573d6000803e3d6000fd5b505050506040513d602081101561171457600080fd5b505190506001600160a01b0381161561172e5790506117ba565b60035460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b15801561178a57600080fd5b505afa15801561179e573d6000803e3d6000fd5b505050506040513d60208110156117b457600080fd5b50519150505b9392505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415611868576000546040805163940494f160e01b81526001600160a01b038681166004830152825193169263940494f192602480840193919291829003018186803b15801561182f57600080fd5b505afa158015611843573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561095957600080fd5b806002141561198d576001546040805163940494f160e01b81526001600160a01b0386811660048301529151600093929092169163940494f191602480820192602092909190829003018186803b1580156118c257600080fd5b505afa1580156118d6573d6000803e3d6000fd5b505050506040513d60208110156118ec57600080fd5b50519050806105d357600154604080517feb73f37d0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152825193169263eb73f37d92602480840193919291829003018186803b15801561195757600080fd5b505afa15801561196b573d6000803e3d6000fd5b505050506040513d604081101561198157600080fd5b505192506105dc915050565b80600314156119e3576002546040805163940494f160e01b81526001600160a01b0386811660048301529151919092169163940494f1916024808301926020929190829003018186803b15801561092f57600080fd5b50600292915050565b6000806119f88361046b565b6001600160a01b03811660009081526005602052604090205490915060ff166001811415611ab057600054604080517fc5b7074a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529151919092169163c5b7074a916024808301926020929190829003018186803b158015611a8657600080fd5b505afa158015611a9a573d6000803e3d6000fd5b505050506040513d602081101561198157600080fd5b8060021415611af257816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8657600080fd5b6001600160a01b03841673c4ad29ba4b3c580e6d59105fff484999997675ff1415611b645773e8b2989276e2ca8fdea2268e3551b2b4b24189506001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611a8657600080fd5b816001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611b9d57600080fd5b505afa925050508015611bc257506040513d6020811015611bbd57600080fd5b505160015b611bd1576000925050506105dc565b92506105dc915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611c4757600080fd5b505afa158015611c5b573d6000803e3d6000fd5b505050506040513d6020811015611c7157600080fd5b50516001600160a01b0316331480611cf55750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611cbd57600080fd5b505afa158015611cd1573d6000803e3d6000fd5b505050506040513d6020811015611ce757600080fd5b50516001600160a01b031633145b611d4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611f2b602a913960400191505060405180910390fd5b50565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d8957600080fd5b505afa158015611d9d573d6000803e3d6000fd5b505050506040513d6020811015611db357600080fd5b5051811015611f06576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b158015611e0257600080fd5b505afa158015611e16573d6000803e3d6000fd5b505050506040513d6020811015611e2c57600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff871690811790915590915060041415611efd578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015611e9f57600080fd5b505afa158015611eb3573d6000803e3d6000fd5b505050506040513d6020811015611ec957600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b50600101611d50565b505050565b604051806101000160405280600890602082028036833750919291505056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a26469706673582212208af423c04971d7c189cc771bc5d1d4f36b5e152f4ea52773448b9b8985cc204064736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Abstraction for all the different Curve registries",
    "kind": "dev",
    "methods": {
      "findPoolForCoins(address,address,uint256)": {
        "params": {
          "_fromToken": "Token 1",
          "_i": "Index of the pool to retrieve (if more than one)",
          "_toToken": "Token 2"
        },
        "returns": {
          "_0": "address                Address of the pool"
        }
      },
      "getCoinAddresses(address,bool)": {
        "params": {
          "_getUnderlying": "Whether or not to get the underlying coins"
        },
        "returns": {
          "_0": "address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)"
        }
      },
      "getCoinIndices(address,address,address)": {
        "params": {
          "_fromToken": "Token 1",
          "_pool": "Pool address",
          "_toToken": "Token 2"
        },
        "returns": {
          "_0": "uint256                Index of token 1",
          "_1": "uint256                Index of token 2",
          "_2": "bool                   Whether or not is underlying"
        }
      },
      "getLpToken(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "address                Address of the lp token"
        }
      },
      "getNCoins(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "uint256                Number of coins in the pool"
        }
      },
      "getPoolFromLpToken(address)": {
        "params": {
          "_lpToken": "Address of the lp token"
        },
        "returns": {
          "_0": "address                Address of the pool, 0 if it doesn't exist"
        }
      },
      "getUnderlyingAndRate(address,uint256)": {
        "params": {
          "_i": "Asset index",
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "address                Address of the underlying asset. 0 if none",
          "_1": "uint256                Rate of conversion between the underlying and the asset"
        }
      },
      "getVirtualPriceFromLpToken(address)": {
        "params": {
          "_lpToken": "Lp token Address"
        },
        "returns": {
          "_0": "uint256                Whether the pool is a meta pool or not"
        }
      },
      "isMeta(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "bool                Whether the pool is a meta pool or not"
        }
      },
      "isPool(address)": {
        "params": {
          "_poolAddress": "Pool address"
        },
        "returns": {
          "_0": "bool                   Whether or not is underlying"
        }
      }
    },
    "title": "CurveMetaRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findPoolForCoins(address,address,uint256)": {
        "notice": "Finds a pool given those tokens and the index _i"
      },
      "getCoinAddresses(address,bool)": {
        "notice": "Gets the coin addresses of a pool"
      },
      "getCoinIndices(address,address,address)": {
        "notice": "Gets the indices of two tokens given a pool address"
      },
      "getLpToken(address)": {
        "notice": "Gets the lp token from a curve pool address"
      },
      "getNCoins(address)": {
        "notice": "Gets the number of coins of a curve pool"
      },
      "getPoolFromLpToken(address)": {
        "notice": "Gets the pool from a curve lp token"
      },
      "getUnderlyingAndRate(address,uint256)": {
        "notice": "Returns the underlying asset and the rate of conversion at the index i"
      },
      "getVirtualPriceFromLpToken(address)": {
        "notice": "Returns the virtual price of an lp token from curve"
      },
      "isMeta(address)": {
        "notice": "Returns whether the pool is a meta pool"
      },
      "isPool(address)": {
        "notice": "Returns whether or not a given address is a curve pool"
      },
      "updateCryptoRegistries()": {
        "notice": "Updates the addresses of the registries themselves"
      },
      "updatePoolsList()": {
        "notice": "Updates the mapping of pools for gas efficiency"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12966,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "curveRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICurveRegistry)44012"
      },
      {
        "astId": 12968,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "factoryRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFactoryRegistry)44147"
      },
      {
        "astId": 12970,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICryptoRegistry)43741"
      },
      {
        "astId": 12972,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoRegistryF",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICryptoFactoryRegistry)43649"
      },
      {
        "astId": 12976,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoFactoryLpTokenToPools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 12980,
        "contract": "contracts/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "poolToRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint8)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoFactoryRegistry)43649": {
        "encoding": "inplace",
        "label": "contract ICryptoFactoryRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoRegistry)43741": {
        "encoding": "inplace",
        "label": "contract ICryptoRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveRegistry)44012": {
        "encoding": "inplace",
        "label": "contract ICurveRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IFactoryRegistry)44147": {
        "encoding": "inplace",
        "label": "contract IFactoryRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}