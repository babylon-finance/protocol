{
  "address": "0x6897E6A2ABaD74738E51832ca85b1a9E3e3e4C08",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cryptoFactoryLpTokenToPools",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoRegistry",
      "outputs": [
        {
          "internalType": "contract ICryptoRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cryptoRegistryF",
      "outputs": [
        {
          "internalType": "contract ICryptoFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveRegistry",
      "outputs": [
        {
          "internalType": "contract ICurveRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "factoryRegistry",
      "outputs": [
        {
          "internalType": "contract IFactoryRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "findBestPoolForCoins",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "gaugeToPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_getUnderlying",
          "type": "bool"
        }
      ],
      "name": "getCoinAddresses",
      "outputs": [
        {
          "internalType": "address[8]",
          "name": "",
          "type": "address[8]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_toToken",
          "type": "address"
        }
      ],
      "name": "getCoinIndices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getGauge",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "getNCoins",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getPoolFromLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_i",
          "type": "uint256"
        }
      ],
      "name": "getUnderlyingAndRate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lpToken",
          "type": "address"
        }
      ],
      "name": "getVirtualPriceFromLpToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pool",
          "type": "address"
        }
      ],
      "name": "isMeta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_poolAddress",
          "type": "address"
        }
      ],
      "name": "isPool",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "poolToRegistry",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCryptoRegistries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePoolsList",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc59f7dc5c93292275a47a68bee6e5fac1c473125c6f7b53c95a3212845ecceb0",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x6897E6A2ABaD74738E51832ca85b1a9E3e3e4C08",
    "transactionIndex": 30,
    "gasUsed": "14592474",
    "logsBloom": "0x
    "blockHash": "0xaf6ec2c509be5e55e12918c22af2d9b2f9caa1a700895cd49b4486080f73930b",
    "transactionHash": "0xc59f7dc5c93292275a47a68bee6e5fac1c473125c6f7b53c95a3212845ecceb0",
    "logs": [],
    "blockNumber": 14875793,
    "cumulativeGasUsed": "16411453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 4,
  "solcInputHash": "1fc0761e8252e23a98ec5ddcb26779bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cryptoFactoryLpTokenToPools\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoRegistry\",\"outputs\":[{\"internalType\":\"contract ICryptoRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cryptoRegistryF\",\"outputs\":[{\"internalType\":\"contract ICryptoFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryRegistry\",\"outputs\":[{\"internalType\":\"contract IFactoryRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"findBestPoolForCoins\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"gaugeToPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_getUnderlying\",\"type\":\"bool\"}],\"name\":\"getCoinAddresses\",\"outputs\":[{\"internalType\":\"address[8]\",\"name\":\"\",\"type\":\"address[8]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_toToken\",\"type\":\"address\"}],\"name\":\"getCoinIndices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getGauge\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"getNCoins\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getPoolFromLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_i\",\"type\":\"uint256\"}],\"name\":\"getUnderlyingAndRate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lpToken\",\"type\":\"address\"}],\"name\":\"getVirtualPriceFromLpToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pool\",\"type\":\"address\"}],\"name\":\"isMeta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_poolAddress\",\"type\":\"address\"}],\"name\":\"isPool\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"poolToRegistry\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCryptoRegistries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePoolsList\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Abstraction for all the different Curve registries\",\"kind\":\"dev\",\"methods\":{\"findBestPoolForCoins(address,address)\":{\"params\":{\"_fromToken\":\"Token 1\",\"_toToken\":\"Token 2\"},\"returns\":{\"_0\":\"address                Address of the pool with enough liquidity\"}},\"getCoinAddresses(address,bool)\":{\"params\":{\"_getUnderlying\":\"Whether or not to get the underlying coins\"},\"returns\":{\"_0\":\"address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)\"}},\"getCoinIndices(address,address,address)\":{\"params\":{\"_fromToken\":\"Token 1\",\"_pool\":\"Pool address\",\"_toToken\":\"Token 2\"},\"returns\":{\"_0\":\"uint256                Index of token 1\",\"_1\":\"uint256                Index of token 2\",\"_2\":\"bool                   Whether or not is underlying\"}},\"getGauge(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"address                Address of the gauge\"}},\"getLpToken(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"address                Address of the lp token\"}},\"getNCoins(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"uint256                Number of coins in the pool\"}},\"getPoolFromLpToken(address)\":{\"params\":{\"_lpToken\":\"Address of the lp token\"},\"returns\":{\"_0\":\"address                Address of the pool, 0 if it doesn't exist\"}},\"getUnderlyingAndRate(address,uint256)\":{\"params\":{\"_i\":\"Asset index\",\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"address                Address of the underlying asset. 0 if none\",\"_1\":\"uint256                Rate of conversion between the underlying and the asset\"}},\"getVirtualPriceFromLpToken(address)\":{\"params\":{\"_lpToken\":\"Lp token Address\"},\"returns\":{\"_0\":\"uint256                Price of the lp token\"}},\"isMeta(address)\":{\"params\":{\"_pool\":\"Pool Address\"},\"returns\":{\"_0\":\"bool                Whether the pool is a meta pool or not\"}},\"isPool(address)\":{\"params\":{\"_poolAddress\":\"Pool address\"},\"returns\":{\"_0\":\"bool                   Whether or not is underlying\"}}},\"title\":\"CurveMetaRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"findBestPoolForCoins(address,address)\":{\"notice\":\"Finds the pool with the most liquidity given those tokens and the index _i\"},\"getCoinAddresses(address,bool)\":{\"notice\":\"Gets the coin addresses of a pool\"},\"getCoinIndices(address,address,address)\":{\"notice\":\"Gets the indices of two tokens given a pool address\"},\"getGauge(address)\":{\"notice\":\"Returns the gauge for a given pool address\"},\"getLpToken(address)\":{\"notice\":\"Gets the lp token from a curve pool address\"},\"getNCoins(address)\":{\"notice\":\"Gets the number of coins of a curve pool\"},\"getPoolFromLpToken(address)\":{\"notice\":\"Gets the pool from a curve lp token\"},\"getUnderlyingAndRate(address,uint256)\":{\"notice\":\"Returns the underlying asset and the rate of conversion at the index i\"},\"getVirtualPriceFromLpToken(address)\":{\"notice\":\"Returns the virtual price of an lp token from curve\"},\"isMeta(address)\":{\"notice\":\"Returns whether the pool is a meta pool\"},\"isPool(address)\":{\"notice\":\"Returns whether or not a given address is a curve pool\"},\"updateCryptoRegistries()\":{\"notice\":\"Updates the addresses of the registries themselves\"},\"updatePoolsList()\":{\"notice\":\"Updates the mapping of pools for gas efficiency\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/registries/CurveMetaRegistry.sol\":\"CurveMetaRegistry\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function updateGardenAffiliateRate(address _garden, uint256 _affiliateRate) external;\\n\\n    function addAffiliateReward(\\n        address _depositor,\\n        address _referrer,\\n        uint256 _reserveAmount\\n    ) external;\\n\\n    function claimRewards() external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function patchIntegration(address _old, address _new) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function gardenAffiliateRates(address _wantedAsset) external view returns (uint256);\\n\\n    function affiliateRewards(address _user) external view returns (uint256);\\n\\n    function patchedIntegrations(address _integration) external view returns (address);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd735b6881f3f7bc55f3cc667ab38778297e376b73e6e291d1e5d38d8121594d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function gaugeToPool(address _gaugeAddress) external view returns (address);\\n\\n    function getGauge(address _pool) external view returns (address);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findBestPoolForCoins(address _fromToken, address _toToken) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xba45909fe3561af41662f1cc8948d2d7d36897e1b7d8225b5765314c1c3d4d88\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/curve/ICryptoFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICryptoFactoryRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_coins(address _pool) external view returns (address[2] memory);\\n\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_token(address _pool) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x71ec68b7003685bf3cc06aca0218eb39412dfa5033728b92ee6e50537630c172\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICryptoRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICryptoRegistry {\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x2704c172edd40da3d0a2bc831db1cfeb3ea4a6044cd716562b37c30905ec0889\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICurveAddressProvider {\\n    function get_registry() external view returns (address);\\n\\n    function get_address(uint256 _id) external view returns (address);\\n\\n    function max_id() external view returns (uint256);\\n\\n    function get_id_info(uint256 _id)\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            uint256,\\n            uint256,\\n            string calldata\\n        );\\n}\\n\",\"keccak256\":\"0x85fbe7211e95c23fde1862fde20e588eedd856d6b67efbfb98c1b338726f5ec2\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3 {\\n    function coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(int128 arg0) external view returns (address out);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256 out);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address out);\\n\\n    function token() external view returns (address out);\\n\\n    function curve() external view returns (address out);\\n\\n    function pool() external view returns (address out);\\n\\n    function initial_A_time() external view returns (uint256 time);\\n}\\n\",\"keccak256\":\"0xb0a8bfe0eb815ec54d54056fb379c5a0f75eadd029ce3b9eb2cd3c035c4fc777\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface ICurveRegistry {\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256[2] memory);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_gauges(address _pool) external view returns (address[10] memory, int128[10] memory);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x47639228b2bf823eec7b6588fa63eff1b570018252d05b863ae9ab03cace18ec\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/IFactoryRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\ninterface IFactoryRegistry {\\n    function get_pool_from_lp_token(address _lpToken) external view returns (address);\\n\\n    function get_lp_token(address _pool) external view returns (address);\\n\\n    function get_gauge(address _pool) external view returns (address);\\n\\n    function find_pool_for_coins(\\n        address _from,\\n        address _to,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function find_pool_for_coins(address _from, address _to) external view returns (address);\\n\\n    function get_n_coins(address _pool) external view returns (uint256);\\n\\n    function get_meta_n_coins(address _pool) external view returns (uint256, uint256);\\n\\n    function get_rates(address _pool) external view returns (uint256[8] memory);\\n\\n    function get_virtual_price_from_lp_token(address _lpToken) external view returns (uint256);\\n\\n    function is_meta(address _pool) external view returns (bool);\\n\\n    function pool_count() external view returns (uint256);\\n\\n    function pool_list(uint256 i) external view returns (address);\\n\\n    function get_pool_name(address _pool) external view returns (string memory);\\n\\n    function get_A(address _pool) external view returns (uint256);\\n\\n    function get_coins(address _pool) external view returns (address[4] memory);\\n\\n    function get_underlying_coins(address _pool) external view returns (address[8] memory);\\n\\n    function get_coin_indices(\\n        address _pool,\\n        address _from,\\n        address _to\\n    )\\n        external\\n        view\\n        returns (\\n            int128,\\n            int128,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x2e6bff45f583c88a5ba01c55ca7799b445bbd9e0165207cb0f53457a2c254113\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/IPriceTri.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n// See https://mobile.twitter.com/curvefinance/status/1441538795493478415\\n// https://etherscan.io/address/0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950#readContract\\ninterface IPriceTri {\\n    function lp_price() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x067368dae9c5cedb6ad77c7f0f660693866fa0b4247df7d1892342e672761878\",\"license\":\"MIT\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfb8440b3c915eb148e4ef721ce6b240642a8c35c3f8729dc6d20db9f307b4cae\",\"license\":\"Apache-2.0\"},\"contracts/registries/CurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ICurveMetaRegistry} from '../interfaces/ICurveMetaRegistry.sol';\\nimport {IPriceTri} from '../interfaces/external/curve/IPriceTri.sol';\\nimport {ICurvePoolV3} from '../interfaces/external/curve/ICurvePoolV3.sol';\\nimport {ICurveAddressProvider} from '../interfaces/external/curve/ICurveAddressProvider.sol';\\nimport {ICurveRegistry} from '../interfaces/external/curve/ICurveRegistry.sol';\\nimport {IFactoryRegistry} from '../interfaces/external/curve/IFactoryRegistry.sol';\\nimport {ICryptoRegistry} from '../interfaces/external/curve/ICryptoRegistry.sol';\\nimport {ICryptoFactoryRegistry} from '../interfaces/external/curve/ICryptoFactoryRegistry.sol';\\nimport {ControllerLib} from '../lib/ControllerLib.sol';\\n\\n/**\\n * @title CurveMetaRegistry\\n * @author Babylon Finance Protocol\\n *\\n * Abstraction for all the different Curve registries\\n */\\ncontract CurveMetaRegistry is ICurveMetaRegistry {\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constants ============ */\\n\\n    // Address of Curve Address provider\\n    ICurveAddressProvider internal constant curveAddressProvider =\\n        ICurveAddressProvider(0x0000000022D53366457F9d5E68Ec105046FC4383);\\n\\n    address private constant TRI_CURVE_POOL_2_LP = 0xc4AD29ba4B3c580e6D59105FFf484999997675Ff;\\n\\n    IBabController public immutable controller;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Registry of first party pools\\n    ICurveRegistry public curveRegistry;\\n\\n    // Registry of user created pools\\n    IFactoryRegistry public factoryRegistry;\\n\\n    // Registry of first party crypto pools\\n    ICryptoRegistry public cryptoRegistry;\\n\\n    // Registry of third party crypto pools\\n    ICryptoFactoryRegistry public cryptoRegistryF;\\n\\n    mapping(address => address) public cryptoFactoryLpTokenToPools;\\n\\n    // Mapping of pool to registryId\\n    mapping(address => uint8) public poolToRegistry;\\n    mapping(address => address) public override gaugeToPool;\\n\\n    // 0 means doesnt exist\\n    // 1 means first party normal\\n    // 2 means factory pools\\n    // 3 means crypto first party\\n    // 4 means crypto third party\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller is not valid');\\n\\n        controller = _controller;\\n        curveRegistry = ICurveRegistry(curveAddressProvider.get_registry());\\n        factoryRegistry = IFactoryRegistry(curveAddressProvider.get_address(3));\\n        cryptoRegistry = ICryptoRegistry(curveAddressProvider.get_address(5));\\n        cryptoRegistryF = ICryptoFactoryRegistry(curveAddressProvider.get_address(6));\\n\\n        _updateMapping(4, ICurveRegistry(address(cryptoRegistryF)));\\n        _updateMapping(2, ICurveRegistry(address(factoryRegistry)));\\n        _updateMapping(3, ICurveRegistry(address(cryptoRegistry)));\\n        _updateMapping(1, curveRegistry);\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Updates the mapping of pools for gas efficiency\\n     *\\n     */\\n    function updatePoolsList() public override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateMapping(4, ICurveRegistry(address(cryptoRegistryF)));\\n        _updateMapping(3, ICurveRegistry(address(cryptoRegistry)));\\n        _updateMapping(2, ICurveRegistry(address(factoryRegistry)));\\n        _updateMapping(1, curveRegistry);\\n    }\\n\\n    /**\\n     * Updates the addresses of the registries themselves\\n     *\\n     */\\n    function updateCryptoRegistries() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        curveRegistry = ICurveRegistry(curveAddressProvider.get_registry());\\n        factoryRegistry = IFactoryRegistry(curveAddressProvider.get_address(3));\\n        cryptoRegistry = ICryptoRegistry(curveAddressProvider.get_address(5));\\n        cryptoRegistryF = ICryptoFactoryRegistry(curveAddressProvider.get_address(6));\\n        updatePoolsList();\\n    }\\n\\n    /**\\n     * Gets the coin addresses of a pool\\n     * @param _getUnderlying          Whether or not to get the underlying coins\\n     *\\n     * @return address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)\\n     */\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view override returns (address[8] memory) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (_getUnderlying) {\\n            if (registryKind == 1) {\\n                return curveRegistry.get_underlying_coins(_pool);\\n            }\\n            if (registryKind == 2) {\\n                try factoryRegistry.get_underlying_coins(_pool) returns (address[8] memory coins) {\\n                    return coins;\\n                } catch {\\n                    // try normal. Some pools revert\\n                    _getUnderlying = false;\\n                }\\n            }\\n            if (registryKind > 2) {\\n                // crypto pools only have normal\\n                _getUnderlying = false;\\n            }\\n        }\\n        if (!_getUnderlying) {\\n            if (registryKind == 1) {\\n                return curveRegistry.get_coins(_pool);\\n            }\\n            if (registryKind == 2) {\\n                address[4] memory addressesF = factoryRegistry.get_coins(_pool);\\n                return [\\n                    addressesF[0],\\n                    addressesF[1],\\n                    addressesF[2],\\n                    addressesF[3],\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0)\\n                ];\\n            }\\n            if (registryKind == 3) {\\n                return cryptoRegistry.get_coins(_pool);\\n            }\\n            if (registryKind == 4) {\\n                address[2] memory addressesCF = cryptoRegistryF.get_coins(_pool);\\n                return [\\n                    addressesCF[0],\\n                    addressesCF[1],\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0),\\n                    address(0)\\n                ];\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Gets the number of coins of a curve pool\\n     * @param _pool                   Pool Address\\n     *\\n     * @return uint256                Number of coins in the pool\\n     */\\n    function getNCoins(address _pool) public view override returns (uint256) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (registryKind == 1) {\\n            return curveRegistry.get_n_coins(_pool)[0];\\n        }\\n        if (registryKind == 2) {\\n            uint256 coins = factoryRegistry.get_n_coins(_pool);\\n            if (coins == 0) {\\n                // Try through meta\\n                (coins, ) = factoryRegistry.get_meta_n_coins(_pool);\\n            }\\n            return coins;\\n        }\\n        if (registryKind == 3) {\\n            return cryptoRegistry.get_n_coins(_pool);\\n        }\\n        // Crypto factory always two\\n        return 2;\\n    }\\n\\n    /**\\n     * Gets the lp token from a curve pool address\\n     * @param _pool                   Pool Address\\n     *\\n     * @return address                Address of the lp token\\n     */\\n    function getLpToken(address _pool) external view override returns (address) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        // For Deposits & stable swaps that support it get the LP token, otherwise get the pool\\n        if (registryKind == 1) {\\n            return curveRegistry.get_lp_token(_pool);\\n        }\\n        if (registryKind == 3) {\\n            return cryptoRegistry.get_lp_token(_pool);\\n        }\\n        // Factory pools use the pool as the token\\n        if (registryKind == 2) {\\n            return _pool;\\n        }\\n        return cryptoRegistryF.get_token(_pool);\\n    }\\n\\n    /**\\n     * Gets the pool from a curve lp token\\n     * @param _lpToken                Address of the lp token\\n     *\\n     * @return address                Address of the pool, 0 if it doesn't exist\\n     */\\n    function getPoolFromLpToken(address _lpToken) public view override returns (address) {\\n        // Factory pools use the pool as the token\\n        if (poolToRegistry[_lpToken] == 2) {\\n            return _lpToken;\\n        }\\n        address cryptoFactoryPool = cryptoFactoryLpTokenToPools[_lpToken];\\n        if (cryptoFactoryPool != address(0)) {\\n            return cryptoFactoryPool;\\n        }\\n        // For Deposits & stable swaps that support it get the LP token, otherwise get the pool\\n        try curveRegistry.get_pool_from_lp_token(_lpToken) returns (address pool) {\\n            if (pool != address(0)) {\\n                return pool;\\n            }\\n        } catch {}\\n        try cryptoRegistry.get_pool_from_lp_token(_lpToken) returns (address pool2) {\\n            return pool2;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n\\n    /**\\n     * Returns whether the pool is a meta pool\\n     * @param _pool                   Pool Address\\n     *\\n     * @return bool                Whether the pool is a meta pool or not\\n     */\\n    function isMeta(address _pool) external view override returns (bool) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        if (registryKind != 1 && registryKind != 2) {\\n            return false;\\n        }\\n        if (registryKind == 1) {\\n            return curveRegistry.is_meta(_pool);\\n        }\\n        return factoryRegistry.is_meta(_pool);\\n    }\\n\\n    /**\\n     * Returns the virtual price of an lp token from curve\\n     * @param _lpToken                Lp token Address\\n     *\\n     * @return uint256                Price of the lp token\\n     */\\n    function getVirtualPriceFromLpToken(address _lpToken) external view override returns (uint256) {\\n        address pool = getPoolFromLpToken(_lpToken);\\n        uint256 registryKind = poolToRegistry[pool];\\n        // Normal pools\\n        if (registryKind == 1) {\\n            return curveRegistry.get_virtual_price_from_lp_token(_lpToken);\\n        }\\n        if (registryKind == 2) {\\n            // Factory registry do not have the method but pools do\\n            return ICurvePoolV3(pool).get_virtual_price();\\n        }\\n        // Special case tricrypto 2\\n        if (_lpToken == TRI_CURVE_POOL_2_LP) {\\n            return IPriceTri(0xE8b2989276E2Ca8FDEA2268E3551b2b4B2418950).lp_price();\\n        }\\n        // for crypto pools get directly from the pool the lp price\\n        try ICurvePoolV3(pool).lp_price() returns (uint256 price) {\\n            return price;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the underlying asset and the rate of conversion at the index i\\n     * @param _pool                   Pool Address\\n     * @param _i                      Asset index\\n     *\\n     * @return address                Address of the underlying asset. 0 if none\\n     * @return uint256                Rate of conversion between the underlying and the asset\\n     */\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view override returns (address, uint256) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n\\n        if (registryKind == 1) {\\n            return (curveRegistry.get_underlying_coins(_pool)[_i], curveRegistry.get_rates(_pool)[_i]);\\n        }\\n        if (registryKind == 2) {\\n            return (factoryRegistry.get_underlying_coins(_pool)[_i], factoryRegistry.get_rates(_pool)[_i]);\\n        }\\n        // No underlying\\n        return (address(0), 0);\\n    }\\n\\n    /**\\n     * Returns the gauge for a given pool address\\n     * @param _pool                   Pool Address\\n     *\\n     * @return address                Address of the gauge\\n     */\\n    function getGauge(address _pool) public view override returns (address) {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        address registryToUse = address(curveRegistry);\\n        if (registryKind == 2) {\\n            registryToUse = address(factoryRegistry);\\n        }\\n        if (registryKind == 3) {\\n            registryToUse = address(cryptoRegistry);\\n        }\\n        if (registryKind == 4) {\\n            registryToUse = address(cryptoRegistryF);\\n        }\\n        if (registryKind == 1 || registryKind == 3) {\\n            (address[10] memory addresses, int128[10] memory types) = ICurveRegistry(registryToUse).get_gauges(_pool);\\n            for (uint256 i = 0; i < 10; i++) {\\n                if (types[i] == 0 || types[i] == 5) {\\n                    return addresses[i];\\n                }\\n            }\\n        }\\n        if (registryKind == 2 || registryKind == 4) {\\n            return IFactoryRegistry(registryToUse).get_gauge(_pool);\\n        }\\n        return address(0);\\n    }\\n\\n    /**\\n     * Finds the pool with the most liquidity given those tokens and the index _i\\n     * @param _fromToken              Token 1\\n     * @param _toToken                Token 2\\n     *\\n     * @return address                Address of the pool with enough liquidity\\n     */\\n    function findBestPoolForCoins(address _fromToken, address _toToken) external view override returns (address) {\\n        (address pool, uint8 _kind) = _findPoolForCoins(_fromToken, _toToken, 0);\\n        if (_kind == 0 || pool == address(0)) {\\n            return address(0);\\n        }\\n        // If there is a pool, find the best by checking balance of fromToken\\n        // We check max two more\\n        uint256 maxBalance = IERC20(_fromToken).balanceOf(pool);\\n        for (uint256 i = 1; i < 3; i++) {\\n            address newPool = _findPoolForCoinsByKind(_fromToken, _toToken, i, _kind);\\n            if (newPool == address(0)) {\\n                break;\\n            }\\n            uint256 newBalance = IERC20(_fromToken).balanceOf(pool);\\n            if (newBalance > maxBalance) {\\n                maxBalance = newBalance;\\n                pool = newPool;\\n            }\\n        }\\n        return pool;\\n    }\\n\\n    /**\\n     * Gets the indices of two tokens given a pool address\\n     * @param _pool                   Pool address\\n     * @param _fromToken              Token 1\\n     * @param _toToken                Token 2\\n     *\\n     * @return uint256                Index of token 1\\n     * @return uint256                Index of token 2\\n     * @return bool                   Whether or not is underlying\\n     */\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        )\\n    {\\n        uint256 registryKind = poolToRegistry[_pool];\\n        bool underlying = false;\\n        uint256 oneIndex;\\n        uint256 twoIndex;\\n        if (registryKind == 1) {\\n            (int128 oneIndexI, int128 twoIndexI, bool underlyingI) =\\n                curveRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n            oneIndex = uint256(oneIndexI);\\n            twoIndex = uint256(twoIndexI);\\n            underlying = underlyingI;\\n        }\\n        if (registryKind == 2) {\\n            (int128 oneIndexI, int128 twoIndexI, bool underlyingI) =\\n                factoryRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n            oneIndex = uint256(oneIndexI);\\n            twoIndex = uint256(twoIndexI);\\n            underlying = underlyingI;\\n        }\\n        if (registryKind == 3) {\\n            (oneIndex, twoIndex) = cryptoRegistry.get_coin_indices(_pool, _fromToken, _toToken);\\n        }\\n        if (registryKind == 4) {\\n            (oneIndex, twoIndex) = cryptoRegistryF.get_coin_indices(_pool, _fromToken, _toToken);\\n        }\\n        return (oneIndex, twoIndex, underlying);\\n    }\\n\\n    /**\\n     * Returns whether or not a given address is a curve pool\\n     * @param _poolAddress            Pool address\\n     *\\n     * @return bool                   Whether or not is underlying\\n     */\\n    function isPool(address _poolAddress) external view override returns (bool) {\\n        return poolToRegistry[_poolAddress] != 0;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    // Function to the update the registry mappings\\n    function _updateMapping(uint8 _index, ICurveRegistry _registry) internal {\\n        for (uint256 i = 0; i < _registry.pool_count(); i++) {\\n            address pool = _registry.pool_list(i);\\n            poolToRegistry[pool] = _index;\\n            // Adds lptoken to pool for cryptofactory pools\\n            if (_index == 4) {\\n                cryptoFactoryLpTokenToPools[ICurvePoolV3(pool).token()] = pool;\\n            }\\n            // Adds gauge\\n            gaugeToPool[getGauge(pool)] = pool;\\n        }\\n    }\\n\\n    /**\\n     * Finds a pool given those tokens and the index _i\\n     * @param _fromToken              Token 1\\n     * @param _toToken                Token 2\\n     * @param _i                      Index of the pool to retrieve (if more than one)\\n     *\\n     * @return address                Address of the pool\\n     */\\n    function _findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) private view returns (address, uint8) {\\n        address result = curveRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return (result, 1);\\n        }\\n        // Check crypto registry before factory ones\\n        result = cryptoRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return (result, 3);\\n        }\\n        result = factoryRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return (result, 2);\\n        }\\n        result = cryptoRegistryF.find_pool_for_coins(_fromToken, _toToken, _i);\\n        if (result != address(0)) {\\n            return (result, 4);\\n        }\\n        return (address(0), 0);\\n    }\\n\\n    function _findPoolForCoinsByKind(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i,\\n        uint8 _kind\\n    ) private view returns (address) {\\n        if (_kind == 1) {\\n            return curveRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        }\\n        if (_kind == 2) {\\n            return factoryRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        }\\n        if (_kind == 3) {\\n            return cryptoRegistry.find_pool_for_coins(_fromToken, _toToken, _i);\\n        }\\n        if (_kind == 4) {\\n            return cryptoRegistryF.find_pool_for_coins(_fromToken, _toToken, _i);\\n        }\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x59083229b5202359e7b4654f1bd67d61fe9252ae95401f4a27262300ee0d62ca\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002db038038062002db0833981810160405260208110156200003757600080fd5b50516001600160a01b03811662000095576040805162461bcd60e51b815260206004820152601760248201527f436f6e74726f6c6c6572206973206e6f742076616c6964000000000000000000604482015290519081900360640190fd5b6001600160601b0319606082901b166080526040805163a262904b60e01b815290516f22d53366457f9d5e68ec105046fc43839163a262904b916004808301926020929190829003018186803b158015620000ef57600080fd5b505afa15801562000104573d6000803e3d6000fd5b505050506040513d60208110156200011b57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b1580156200018b57600080fd5b505afa158015620001a0573d6000803e3d6000fd5b505050506040513d6020811015620001b757600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b1580156200022757600080fd5b505afa1580156200023c573d6000803e3d6000fd5b505050506040513d60208110156200025357600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015620002c357600080fd5b505afa158015620002d8573d6000803e3d6000fd5b505050506040513d6020811015620002ef57600080fd5b5051600380546001600160a01b0319166001600160a01b0392831617908190556200031e916004911662000373565b60015462000338906002906001600160a01b031662000373565b60025462000352906003906001600160a01b031662000373565b6000546200036c906001906001600160a01b031662000373565b50620007b6565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620003b057600080fd5b505afa158015620003c5573d6000803e3d6000fd5b505050506040513d6020811015620003dc57600080fd5b505181101562000579576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b1580156200042d57600080fd5b505afa15801562000442573d6000803e3d6000fd5b505050506040513d60208110156200045957600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff8716908117909155909150600414156200052e578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b158015620004ce57600080fd5b505afa158015620004e3573d6000803e3d6000fd5b505050506040513d6020811015620004fa57600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b80600660006200053e836200057e565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555060010162000376565b505050565b6001600160a01b038082166000908152600560205260408120548154919260ff90911691166002821415620005bb57506001546001600160a01b03165b8160031415620005d357506002546001600160a01b03165b8160041415620005eb57506003546001600160a01b03165b8160011480620005fb5750816003145b156200070d57600080826001600160a01b03166356059ffb876040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506102806040518083038186803b1580156200065357600080fd5b505afa15801562000668573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506102808110156200068f57600080fd5b50915050610140810160005b600a81101562000709578181600a8110620006b257fe5b6020020151600f0b1580620006db57508181600a8110620006cf57fe5b6020020151600f0b6005145b1562000700578281600a8110620006ee57fe5b602002015195505050505050620007b1565b6001016200069b565b5050505b81600214806200071d5750816004145b15620007aa57806001600160a01b031663daf297b9856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156200077157600080fd5b505afa15801562000786573d6000803e3d6000fd5b505050506040513d60208110156200079d57600080fd5b50519250620007b1915050565b6000925050505b919050565b60805160601c6125d2620007de60003980610c7d52806116cf5280611d6252506125d26000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80635b16ebb7116100d8578063aee466f61161008c578063e39e268211610066578063e39e268214610490578063f77c4791146104b6578063fc911e74146104be57610177565b8063aee466f61461042a578063b1c6f0e914610432578063c4c09b551461045857610177565b806371174f16116100bd57806371174f16146103775780637d54e7941461039d578063a07952a4146103c357610177565b80635b16ebb7146102ee57806364d894d21461032857610177565b80632abd8a261161012f5780633a5e5ceb116101145780633a5e5ceb146102a05780633bf0c9fb146102aa57806347698799146102b257610177565b80632abd8a26146102545780632ae914321461027a57610177565b806324a592331161016057806324a59233146101ce57806327c24a5d146101f457806329a0eb85146101fc57610177565b806302e56d1b1461017c5780630d56cc79146101c6575b600080fd5b6101aa6004803603604081101561019257600080fd5b506001600160a01b03813581169160200135166104c6565b604080516001600160a01b039092168252519081900360200190f35b6101aa610654565b6101aa600480360360208110156101e457600080fd5b50356001600160a01b0316610663565b6101aa6107d9565b6102346004803603606081101561021257600080fd5b506001600160a01b0381358116916020810135821691604090910135166107e8565b604080519384526020840192909252151582820152519081900360600190f35b6101aa6004803603602081101561026a57600080fd5b50356001600160a01b0316610ab5565b6101aa6004803603602081101561029057600080fd5b50356001600160a01b0316610c5d565b6102a8610c78565b005b6101aa610f13565b6102d8600480360360208110156102c857600080fd5b50356001600160a01b0316610f22565b6040805160ff9092168252519081900360200190f35b6103146004803603602081101561030457600080fd5b50356001600160a01b0316610f37565b604080519115158252519081900360200190f35b6103546004803603604081101561033e57600080fd5b506001600160a01b038135169060200135610f57565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103146004803603602081101561038d57600080fd5b50356001600160a01b03166111ba565b6101aa600480360360208110156103b357600080fd5b50356001600160a01b031661129a565b6103f1600480360360408110156103d957600080fd5b506001600160a01b03813516906020013515156112b5565b604051808261010080838360005b838110156104175781810151838201526020016103ff565b5050505090500191505060405180910390f35b6102a86116ca565b6101aa6004803603602081101561044857600080fd5b50356001600160a01b031661175c565b61047e6004803603602081101561046e57600080fd5b50356001600160a01b031661197c565b60408051918252519081900360200190f35b61047e600480360360208110156104a657600080fd5b50356001600160a01b0316611b9b565b6101aa611d60565b6101aa611d84565b60008060006104d785856000611d93565b915091508060ff16600014806104f457506001600160a01b038216155b156105045760009250505061064e565b6000856001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d602081101561057d57600080fd5b5051905060015b600381101561064757600061059b88888487612036565b90506001600160a01b0381166105b15750610647565b6000886001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b505190508381111561063d578093508195505b5050600101610584565b5091925050505b92915050565b6003546001600160a01b031681565b6001600160a01b03811660009081526005602052604081205460ff166002141561068e5750806107d4565b6001600160a01b038083166000908152600460205260409020541680156106b65790506107d4565b6000546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561070357600080fd5b505afa92505050801561072857506040513d602081101561072357600080fd5b505160015b6107315761074b565b6001600160a01b038116156107495791506107d49050565b505b6002546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561079857600080fd5b505afa9250505080156107bd57506040513d60208110156107b857600080fd5b505160015b6107cb5760009150506107d4565b91506107d49050565b919050565b6000546001600160a01b031681565b6001600160a01b0383166000908152600560205260408120548190819060ff1681808060018414156108bb57600080546040805163eb85226d60e01b81526001600160a01b038e811660048301528d811660248301528c81166044830152915184938493169163eb85226d916064808301926060929190829003018186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d606081101561089d57600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b836002141561096f576001546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b8116604483015291516000938493849391169163eb85226d91606480820192606092909190829003018186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d606081101561095157600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360031415610a0a576002546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60408110156109fb57600080fd5b50805160209091015190925090505b8360041415610aa5576003546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d6040811015610a9657600080fd5b50805160209091015190925090505b9099909850909650945050505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415610b5c5760005460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d6020811015610b5157600080fd5b505191506107d49050565b8060031415610bb25760025460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b158015610b2757600080fd5b8060021415610bc457829150506107d4565b600354604080517f977d91220000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151919092169163977d9122916024808301926020929190829003018186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d6020811015610c5457600080fd5b50519392505050565b6004602052600090815260409020546001600160a01b031681565b610caa7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612217565b6f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d6020811015610d1d57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d6020811015610db657600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610e2557600080fd5b505afa158015610e39573d6000803e3d6000fd5b505050506040513d6020811015610e4f57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d6020811015610ee857600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055610f116116ca565b565b6001546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b031660009081526005602052604090205460ff16151590565b6001600160a01b038216600090815260056020526040812054819060ff1660018114156110ba576000546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561100657600080fd5b50846008811061101257fe5b60200201516000546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b15801561106557600080fd5b505afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561109f57600080fd5b5085600881106110ab57fe5b602002015192509250506111b3565b80600214156111aa576001546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561114b57600080fd5b50846008811061115757fe5b60200201516001546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b15801561106557600080fd5b60008092509250505b9250929050565b6001600160a01b03811660009081526005602052604081205460ff16600181148015906111e8575080600214155b156111f75760009150506107d4565b806001141561124d576000546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610b2757600080fd5b6001546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610c2a57600080fd5b6006602052600090815260409020546001600160a01b031681565b6112bd612553565b6001600160a01b03831660009081526005602052604090205460ff16821561142957806001141561137a576000546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561133657600080fd5b505afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561137057600080fd5b50915061064e9050565b806002141561141b576001546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b1580156113d157600080fd5b505afa92505050801561140557506040513d601f19601f8201168201806040525061010081101561140157600080fd5b5060015b611412576000925061141b565b915061064e9050565b600281111561142957600092505b826116c35780600114156114855760005460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561133657600080fd5b80600214156115825760015460408051639ac90d3d60e01b81526001600160a01b03878116600483015291516000939290921691639ac90d3d91602480820192608092909190829003018186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561151857600080fd5b50604080516101008101825282516001600160a01b039081168252602080850151821690830152838301518116928201929092526060928301519091169181019190915260006080820181905260a0820181905260c0820181905260e0820152925061064e915050565b80600314156115d95760025460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561133657600080fd5b80600414156116c35760035460408051639ac90d3d60e01b81526001600160a01b03878116600483015282516000949190911692639ac90d3d9260248082019391829003018186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561166757600080fd5b50604080516101008101825282516001600160a01b03908116825260209384015116928101929092526000908201819052606082018190526080820181905260a0820181905260c0820181905260e0820152925061064e915050565b5092915050565b6116fc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612217565b600354611714906004906001600160a01b0316612356565b60025461172c906003906001600160a01b0316612356565b600154611744906002906001600160a01b0316612356565b600054610f11906001906001600160a01b0316612356565b6001600160a01b038082166000908152600560205260408120548154919260ff9091169116600282141561179857506001546001600160a01b03165b81600314156117af57506002546001600160a01b03165b81600414156117c657506003546001600160a01b03165b81600114806117d55750816003145b156118db57600080826001600160a01b03166356059ffb876040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506102806040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061028081101561186557600080fd5b50915050610140810160005b600a8110156118d7578181600a811061188657fe5b6020020151600f0b15806118ad57508181600a81106118a157fe5b6020020151600f0b6005145b156118cf578281600a81106118be57fe5b6020020151955050505050506107d4565b600101611871565b5050505b81600214806118ea5750816004145b1561197257806001600160a01b031663daf297b9856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d602081101561196657600080fd5b505192506107d4915050565b5060009392505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415611a23576000546040805163940494f160e01b81526001600160a01b038681166004830152825193169263940494f192602480840193919291829003018186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015610b5157600080fd5b8060021415611b3c576001546040805163940494f160e01b81526001600160a01b0386811660048301529151600093929092169163940494f191602480820192602092909190829003018186803b158015611a7d57600080fd5b505afa158015611a91573d6000803e3d6000fd5b505050506040513d6020811015611aa757600080fd5b50519050806107cb57600154604080517feb73f37d0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152825193169263eb73f37d92602480840193919291829003018186803b158015611b1257600080fd5b505afa158015611b26573d6000803e3d6000fd5b505050506040513d604081101561196657600080fd5b8060031415611b92576002546040805163940494f160e01b81526001600160a01b0386811660048301529151919092169163940494f1916024808301926020929190829003018186803b158015610b2757600080fd5b50600292915050565b600080611ba783610663565b6001600160a01b03811660009081526005602052604090205490915060ff166001811415611c3557600054604080517fc5b7074a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529151919092169163c5b7074a916024808301926020929190829003018186803b15801561193c57600080fd5b8060021415611c7757816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561193c57600080fd5b6001600160a01b03841673c4ad29ba4b3c580e6d59105fff484999997675ff1415611ce95773e8b2989276e2ca8fdea2268e3551b2b4b24189506001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561193c57600080fd5b816001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2257600080fd5b505afa925050508015611d4757506040513d6020811015611d4257600080fd5b505160015b611d56576000925050506107d4565b92506107d4915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000805460408051636982eb0b60e01b81526001600160a01b0387811660048301528681166024830152604482018690529151849384931691636982eb0b916064808301926020929190829003018186803b158015611df157600080fd5b505afa158015611e05573d6000803e3d6000fd5b505050506040513d6020811015611e1b57600080fd5b505190506001600160a01b03811615611e395791506001905061202e565b60025460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d6020811015611ebf57600080fd5b505190506001600160a01b03811615611edd5791506003905061202e565b60015460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611f3957600080fd5b505afa158015611f4d573d6000803e3d6000fd5b505050506040513d6020811015611f6357600080fd5b505190506001600160a01b03811615611f815791506002905061202e565b60035460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611fdd57600080fd5b505afa158015611ff1573d6000803e3d6000fd5b505050506040513d602081101561200757600080fd5b505190506001600160a01b038116156120255791506004905061202e565b60008092509250505b935093915050565b60008160ff16600114156120d35760005460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d60208110156120ca57600080fd5b5051905061220f565b8160ff166002141561213b5760015460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b8160ff16600314156121a35760025460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b8160ff166004141561220b5760035460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b5060005b949350505050565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225057600080fd5b505afa158015612264573d6000803e3d6000fd5b505050506040513d602081101561227a57600080fd5b50516001600160a01b03163314806122fe5750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c657600080fd5b505afa1580156122da573d6000803e3d6000fd5b505050506040513d60208110156122f057600080fd5b50516001600160a01b031633145b612353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612573602a913960400191505060405180910390fd5b50565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561239257600080fd5b505afa1580156123a6573d6000803e3d6000fd5b505050506040513d60208110156123bc57600080fd5b505181101561254e576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561240b57600080fd5b505afa15801561241f573d6000803e3d6000fd5b505050506040513d602081101561243557600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff871690811790915590915060041415612506578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124a857600080fd5b505afa1580156124bc573d6000803e3d6000fd5b505050506040513d60208110156124d257600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b80600660006125148461175c565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905550600101612359565b505050565b604051806101000160405280600890602082028036833750919291505056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220a980edf2649ed7f82cd43974d81c5f4dbacfe406e1461fc6011937ad7abd2a4464736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101775760003560e01c80635b16ebb7116100d8578063aee466f61161008c578063e39e268211610066578063e39e268214610490578063f77c4791146104b6578063fc911e74146104be57610177565b8063aee466f61461042a578063b1c6f0e914610432578063c4c09b551461045857610177565b806371174f16116100bd57806371174f16146103775780637d54e7941461039d578063a07952a4146103c357610177565b80635b16ebb7146102ee57806364d894d21461032857610177565b80632abd8a261161012f5780633a5e5ceb116101145780633a5e5ceb146102a05780633bf0c9fb146102aa57806347698799146102b257610177565b80632abd8a26146102545780632ae914321461027a57610177565b806324a592331161016057806324a59233146101ce57806327c24a5d146101f457806329a0eb85146101fc57610177565b806302e56d1b1461017c5780630d56cc79146101c6575b600080fd5b6101aa6004803603604081101561019257600080fd5b506001600160a01b03813581169160200135166104c6565b604080516001600160a01b039092168252519081900360200190f35b6101aa610654565b6101aa600480360360208110156101e457600080fd5b50356001600160a01b0316610663565b6101aa6107d9565b6102346004803603606081101561021257600080fd5b506001600160a01b0381358116916020810135821691604090910135166107e8565b604080519384526020840192909252151582820152519081900360600190f35b6101aa6004803603602081101561026a57600080fd5b50356001600160a01b0316610ab5565b6101aa6004803603602081101561029057600080fd5b50356001600160a01b0316610c5d565b6102a8610c78565b005b6101aa610f13565b6102d8600480360360208110156102c857600080fd5b50356001600160a01b0316610f22565b6040805160ff9092168252519081900360200190f35b6103146004803603602081101561030457600080fd5b50356001600160a01b0316610f37565b604080519115158252519081900360200190f35b6103546004803603604081101561033e57600080fd5b506001600160a01b038135169060200135610f57565b604080516001600160a01b03909316835260208301919091528051918290030190f35b6103146004803603602081101561038d57600080fd5b50356001600160a01b03166111ba565b6101aa600480360360208110156103b357600080fd5b50356001600160a01b031661129a565b6103f1600480360360408110156103d957600080fd5b506001600160a01b03813516906020013515156112b5565b604051808261010080838360005b838110156104175781810151838201526020016103ff565b5050505090500191505060405180910390f35b6102a86116ca565b6101aa6004803603602081101561044857600080fd5b50356001600160a01b031661175c565b61047e6004803603602081101561046e57600080fd5b50356001600160a01b031661197c565b60408051918252519081900360200190f35b61047e600480360360208110156104a657600080fd5b50356001600160a01b0316611b9b565b6101aa611d60565b6101aa611d84565b60008060006104d785856000611d93565b915091508060ff16600014806104f457506001600160a01b038216155b156105045760009250505061064e565b6000856001600160a01b03166370a08231846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561055357600080fd5b505afa158015610567573d6000803e3d6000fd5b505050506040513d602081101561057d57600080fd5b5051905060015b600381101561064757600061059b88888487612036565b90506001600160a01b0381166105b15750610647565b6000886001600160a01b03166370a08231876040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d602081101561062a57600080fd5b505190508381111561063d578093508195505b5050600101610584565b5091925050505b92915050565b6003546001600160a01b031681565b6001600160a01b03811660009081526005602052604081205460ff166002141561068e5750806107d4565b6001600160a01b038083166000908152600460205260409020541680156106b65790506107d4565b6000546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561070357600080fd5b505afa92505050801561072857506040513d602081101561072357600080fd5b505160015b6107315761074b565b6001600160a01b038116156107495791506107d49050565b505b6002546040805163bdf475c360e01b81526001600160a01b0386811660048301529151919092169163bdf475c3916024808301926020929190829003018186803b15801561079857600080fd5b505afa9250505080156107bd57506040513d60208110156107b857600080fd5b505160015b6107cb5760009150506107d4565b91506107d49050565b919050565b6000546001600160a01b031681565b6001600160a01b0383166000908152600560205260408120548190819060ff1681808060018414156108bb57600080546040805163eb85226d60e01b81526001600160a01b038e811660048301528d811660248301528c81166044830152915184938493169163eb85226d916064808301926060929190829003018186803b15801561087357600080fd5b505afa158015610887573d6000803e3d6000fd5b505050506040513d606081101561089d57600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b836002141561096f576001546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b8116604483015291516000938493849391169163eb85226d91606480820192606092909190829003018186803b15801561092757600080fd5b505afa15801561093b573d6000803e3d6000fd5b505050506040513d606081101561095157600080fd5b50805160208201516040909201519750600f90810b96500b93505050505b8360031415610a0a576002546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60408110156109fb57600080fd5b50805160209091015190925090505b8360041415610aa5576003546040805163eb85226d60e01b81526001600160a01b038d811660048301528c811660248301528b81166044830152825193169263eb85226d92606480840193919291829003018186803b158015610a6c57600080fd5b505afa158015610a80573d6000803e3d6000fd5b505050506040513d6040811015610a9657600080fd5b50805160209091015190925090505b9099909850909650945050505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415610b5c5760005460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b158015610b2757600080fd5b505afa158015610b3b573d6000803e3d6000fd5b505050506040513d6020811015610b5157600080fd5b505191506107d49050565b8060031415610bb25760025460408051633795104960e01b81526001600160a01b038681166004830152915191909216916337951049916024808301926020929190829003018186803b158015610b2757600080fd5b8060021415610bc457829150506107d4565b600354604080517f977d91220000000000000000000000000000000000000000000000000000000081526001600160a01b0386811660048301529151919092169163977d9122916024808301926020929190829003018186803b158015610c2a57600080fd5b505afa158015610c3e573d6000803e3d6000fd5b505050506040513d6020811015610c5457600080fd5b50519392505050565b6004602052600090815260409020546001600160a01b031681565b610caa7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612217565b6f22d53366457f9d5e68ec105046fc43836001600160a01b031663a262904b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610cf357600080fd5b505afa158015610d07573d6000803e3d6000fd5b505050506040513d6020811015610d1d57600080fd5b5051600080546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526003600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610d8c57600080fd5b505afa158015610da0573d6000803e3d6000fd5b505050506040513d6020811015610db657600080fd5b5051600180546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526005600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610e2557600080fd5b505afa158015610e39573d6000803e3d6000fd5b505050506040513d6020811015610e4f57600080fd5b5051600280546001600160a01b0319166001600160a01b039092169190911790556040805163124fd3dd60e21b81526006600482015290516f22d53366457f9d5e68ec105046fc43839163493f4f74916024808301926020929190829003018186803b158015610ebe57600080fd5b505afa158015610ed2573d6000803e3d6000fd5b505050506040513d6020811015610ee857600080fd5b5051600380546001600160a01b0319166001600160a01b03909216919091179055610f116116ca565b565b6001546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b031660009081526005602052604090205460ff16151590565b6001600160a01b038216600090815260056020526040812054819060ff1660018114156110ba576000546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b158015610fcc57600080fd5b505afa158015610fe0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561100657600080fd5b50846008811061101257fe5b60200201516000546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b15801561106557600080fd5b505afa158015611079573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561109f57600080fd5b5085600881106110ab57fe5b602002015192509250506111b3565b80600214156111aa576001546040805163a77576ef60e01b81526001600160a01b0388811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561111157600080fd5b505afa158015611125573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561114b57600080fd5b50846008811061115757fe5b60200201516001546040805163674cf22d60e11b81526001600160a01b0389811660048301529151919092169163ce99e45a91602480830192610100929190829003018186803b15801561106557600080fd5b60008092509250505b9250929050565b6001600160a01b03811660009081526005602052604081205460ff16600181148015906111e8575080600214155b156111f75760009150506107d4565b806001141561124d576000546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610b2757600080fd5b6001546040805163e4d332a960e01b81526001600160a01b0386811660048301529151919092169163e4d332a9916024808301926020929190829003018186803b158015610c2a57600080fd5b6006602052600090815260409020546001600160a01b031681565b6112bd612553565b6001600160a01b03831660009081526005602052604090205460ff16821561142957806001141561137a576000546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b15801561133657600080fd5b505afa15801561134a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061010081101561137057600080fd5b50915061064e9050565b806002141561141b576001546040805163a77576ef60e01b81526001600160a01b0387811660048301529151919092169163a77576ef91602480830192610100929190829003018186803b1580156113d157600080fd5b505afa92505050801561140557506040513d601f19601f8201168201806040525061010081101561140157600080fd5b5060015b611412576000925061141b565b915061064e9050565b600281111561142957600092505b826116c35780600114156114855760005460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561133657600080fd5b80600214156115825760015460408051639ac90d3d60e01b81526001600160a01b03878116600483015291516000939290921691639ac90d3d91602480820192608092909190829003018186803b1580156114df57600080fd5b505afa1580156114f3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250608081101561151857600080fd5b50604080516101008101825282516001600160a01b039081168252602080850151821690830152838301518116928201929092526060928301519091169181019190915260006080820181905260a0820181905260c0820181905260e0820152925061064e915050565b80600314156115d95760025460408051639ac90d3d60e01b81526001600160a01b03878116600483015291519190921691639ac90d3d91602480830192610100929190829003018186803b15801561133657600080fd5b80600414156116c35760035460408051639ac90d3d60e01b81526001600160a01b03878116600483015282516000949190911692639ac90d3d9260248082019391829003018186803b15801561162e57600080fd5b505afa158015611642573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250604081101561166757600080fd5b50604080516101008101825282516001600160a01b03908116825260209384015116928101929092526000908201819052606082018190526080820181905260a0820181905260c0820181905260e0820152925061064e915050565b5092915050565b6116fc7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316612217565b600354611714906004906001600160a01b0316612356565b60025461172c906003906001600160a01b0316612356565b600154611744906002906001600160a01b0316612356565b600054610f11906001906001600160a01b0316612356565b6001600160a01b038082166000908152600560205260408120548154919260ff9091169116600282141561179857506001546001600160a01b03165b81600314156117af57506002546001600160a01b03165b81600414156117c657506003546001600160a01b03165b81600114806117d55750816003145b156118db57600080826001600160a01b03166356059ffb876040518263ffffffff1660e01b815260040180826001600160a01b031681526020019150506102806040518083038186803b15801561182b57600080fd5b505afa15801561183f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061028081101561186557600080fd5b50915050610140810160005b600a8110156118d7578181600a811061188657fe5b6020020151600f0b15806118ad57508181600a81106118a157fe5b6020020151600f0b6005145b156118cf578281600a81106118be57fe5b6020020151955050505050506107d4565b600101611871565b5050505b81600214806118ea5750816004145b1561197257806001600160a01b031663daf297b9856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561193c57600080fd5b505afa158015611950573d6000803e3d6000fd5b505050506040513d602081101561196657600080fd5b505192506107d4915050565b5060009392505050565b6001600160a01b03811660009081526005602052604081205460ff166001811415611a23576000546040805163940494f160e01b81526001600160a01b038681166004830152825193169263940494f192602480840193919291829003018186803b1580156119ea57600080fd5b505afa1580156119fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506040811015610b5157600080fd5b8060021415611b3c576001546040805163940494f160e01b81526001600160a01b0386811660048301529151600093929092169163940494f191602480820192602092909190829003018186803b158015611a7d57600080fd5b505afa158015611a91573d6000803e3d6000fd5b505050506040513d6020811015611aa757600080fd5b50519050806107cb57600154604080517feb73f37d0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152825193169263eb73f37d92602480840193919291829003018186803b158015611b1257600080fd5b505afa158015611b26573d6000803e3d6000fd5b505050506040513d604081101561196657600080fd5b8060031415611b92576002546040805163940494f160e01b81526001600160a01b0386811660048301529151919092169163940494f1916024808301926020929190829003018186803b158015610b2757600080fd5b50600292915050565b600080611ba783610663565b6001600160a01b03811660009081526005602052604090205490915060ff166001811415611c3557600054604080517fc5b7074a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387811660048301529151919092169163c5b7074a916024808301926020929190829003018186803b15801561193c57600080fd5b8060021415611c7757816001600160a01b031663bb7b8b806040518163ffffffff1660e01b815260040160206040518083038186803b15801561193c57600080fd5b6001600160a01b03841673c4ad29ba4b3c580e6d59105fff484999997675ff1415611ce95773e8b2989276e2ca8fdea2268e3551b2b4b24189506001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b15801561193c57600080fd5b816001600160a01b03166354f0f7d56040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2257600080fd5b505afa925050508015611d4757506040513d6020811015611d4257600080fd5b505160015b611d56576000925050506107d4565b92506107d4915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6002546001600160a01b031681565b6000805460408051636982eb0b60e01b81526001600160a01b0387811660048301528681166024830152604482018690529151849384931691636982eb0b916064808301926020929190829003018186803b158015611df157600080fd5b505afa158015611e05573d6000803e3d6000fd5b505050506040513d6020811015611e1b57600080fd5b505190506001600160a01b03811615611e395791506001905061202e565b60025460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611e9557600080fd5b505afa158015611ea9573d6000803e3d6000fd5b505050506040513d6020811015611ebf57600080fd5b505190506001600160a01b03811615611edd5791506003905061202e565b60015460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611f3957600080fd5b505afa158015611f4d573d6000803e3d6000fd5b505050506040513d6020811015611f6357600080fd5b505190506001600160a01b03811615611f815791506002905061202e565b60035460408051636982eb0b60e01b81526001600160a01b03898116600483015288811660248301526044820188905291519190921691636982eb0b916064808301926020929190829003018186803b158015611fdd57600080fd5b505afa158015611ff1573d6000803e3d6000fd5b505050506040513d602081101561200757600080fd5b505190506001600160a01b038116156120255791506004905061202e565b60008092509250505b935093915050565b60008160ff16600114156120d35760005460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b505afa1580156120b4573d6000803e3d6000fd5b505050506040513d60208110156120ca57600080fd5b5051905061220f565b8160ff166002141561213b5760015460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b8160ff16600314156121a35760025460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b8160ff166004141561220b5760035460408051636982eb0b60e01b81526001600160a01b03888116600483015287811660248301526044820187905291519190921691636982eb0b916064808301926020929190829003018186803b1580156120a057600080fd5b5060005b949350505050565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561225057600080fd5b505afa158015612264573d6000803e3d6000fd5b505050506040513d602081101561227a57600080fd5b50516001600160a01b03163314806122fe5750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b1580156122c657600080fd5b505afa1580156122da573d6000803e3d6000fd5b505050506040513d60208110156122f057600080fd5b50516001600160a01b031633145b612353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180612573602a913960400191505060405180910390fd5b50565b60005b816001600160a01b031663956aae3a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561239257600080fd5b505afa1580156123a6573d6000803e3d6000fd5b505050506040513d60208110156123bc57600080fd5b505181101561254e576000826001600160a01b0316633a1d5d8e836040518263ffffffff1660e01b81526004018082815260200191505060206040518083038186803b15801561240b57600080fd5b505afa15801561241f573d6000803e3d6000fd5b505050506040513d602081101561243557600080fd5b50516001600160a01b0381166000908152600560205260409020805460ff191660ff871690811790915590915060041415612506578060046000836001600160a01b031663fc0c546a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156124a857600080fd5b505afa1580156124bc573d6000803e3d6000fd5b505050506040513d60208110156124d257600080fd5b50516001600160a01b039081168252602082019290925260400160002080546001600160a01b031916929091169190911790555b80600660006125148461175c565b6001600160a01b039081168252602082019290925260400160002080546001600160a01b0319169290911691909117905550600101612359565b505050565b604051806101000160405280600890602082028036833750919291505056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220a980edf2649ed7f82cd43974d81c5f4dbacfe406e1461fc6011937ad7abd2a4464736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Abstraction for all the different Curve registries",
    "kind": "dev",
    "methods": {
      "findBestPoolForCoins(address,address)": {
        "params": {
          "_fromToken": "Token 1",
          "_toToken": "Token 2"
        },
        "returns": {
          "_0": "address                Address of the pool with enough liquidity"
        }
      },
      "getCoinAddresses(address,bool)": {
        "params": {
          "_getUnderlying": "Whether or not to get the underlying coins"
        },
        "returns": {
          "_0": "address[8]             Addresses of the pool assets. Array of size 8 (filled with 0)"
        }
      },
      "getCoinIndices(address,address,address)": {
        "params": {
          "_fromToken": "Token 1",
          "_pool": "Pool address",
          "_toToken": "Token 2"
        },
        "returns": {
          "_0": "uint256                Index of token 1",
          "_1": "uint256                Index of token 2",
          "_2": "bool                   Whether or not is underlying"
        }
      },
      "getGauge(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "address                Address of the gauge"
        }
      },
      "getLpToken(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "address                Address of the lp token"
        }
      },
      "getNCoins(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "uint256                Number of coins in the pool"
        }
      },
      "getPoolFromLpToken(address)": {
        "params": {
          "_lpToken": "Address of the lp token"
        },
        "returns": {
          "_0": "address                Address of the pool, 0 if it doesn't exist"
        }
      },
      "getUnderlyingAndRate(address,uint256)": {
        "params": {
          "_i": "Asset index",
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "address                Address of the underlying asset. 0 if none",
          "_1": "uint256                Rate of conversion between the underlying and the asset"
        }
      },
      "getVirtualPriceFromLpToken(address)": {
        "params": {
          "_lpToken": "Lp token Address"
        },
        "returns": {
          "_0": "uint256                Price of the lp token"
        }
      },
      "isMeta(address)": {
        "params": {
          "_pool": "Pool Address"
        },
        "returns": {
          "_0": "bool                Whether the pool is a meta pool or not"
        }
      },
      "isPool(address)": {
        "params": {
          "_poolAddress": "Pool address"
        },
        "returns": {
          "_0": "bool                   Whether or not is underlying"
        }
      }
    },
    "title": "CurveMetaRegistry",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "findBestPoolForCoins(address,address)": {
        "notice": "Finds the pool with the most liquidity given those tokens and the index _i"
      },
      "getCoinAddresses(address,bool)": {
        "notice": "Gets the coin addresses of a pool"
      },
      "getCoinIndices(address,address,address)": {
        "notice": "Gets the indices of two tokens given a pool address"
      },
      "getGauge(address)": {
        "notice": "Returns the gauge for a given pool address"
      },
      "getLpToken(address)": {
        "notice": "Gets the lp token from a curve pool address"
      },
      "getNCoins(address)": {
        "notice": "Gets the number of coins of a curve pool"
      },
      "getPoolFromLpToken(address)": {
        "notice": "Gets the pool from a curve lp token"
      },
      "getUnderlyingAndRate(address,uint256)": {
        "notice": "Returns the underlying asset and the rate of conversion at the index i"
      },
      "getVirtualPriceFromLpToken(address)": {
        "notice": "Returns the virtual price of an lp token from curve"
      },
      "isMeta(address)": {
        "notice": "Returns whether the pool is a meta pool"
      },
      "isPool(address)": {
        "notice": "Returns whether or not a given address is a curve pool"
      },
      "updateCryptoRegistries()": {
        "notice": "Updates the addresses of the registries themselves"
      },
      "updatePoolsList()": {
        "notice": "Updates the mapping of pools for gas efficiency"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57438,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "curveRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ICurveRegistry)50944"
      },
      {
        "astId": 57440,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "factoryRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IFactoryRegistry)51086"
      },
      {
        "astId": 57442,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICryptoRegistry)50655"
      },
      {
        "astId": 57444,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoRegistryF",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICryptoFactoryRegistry)50563"
      },
      {
        "astId": 57448,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "cryptoFactoryLpTokenToPools",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 57452,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "poolToRegistry",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 57457,
        "contract": "contracts/registries/CurveMetaRegistry.sol:CurveMetaRegistry",
        "label": "gaugeToPool",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoFactoryRegistry)50563": {
        "encoding": "inplace",
        "label": "contract ICryptoFactoryRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ICryptoRegistry)50655": {
        "encoding": "inplace",
        "label": "contract ICryptoRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveRegistry)50944": {
        "encoding": "inplace",
        "label": "contract ICurveRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IFactoryRegistry)51086": {
        "encoding": "inplace",
        "label": "contract IFactoryRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}