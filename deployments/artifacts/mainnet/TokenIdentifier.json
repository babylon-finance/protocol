{
  "address": "0xca41c42F8f2dAb01cA88605f633153933A671961",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aTokenToAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenToAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crTokenToAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "contract ICurveMetaRegistry",
          "name": "_curveMetaRegistry",
          "type": "address"
        }
      ],
      "name": "identifyTokens",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "synths",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_aaveTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "updateAavePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "updateCompoundPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_creamTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "updateCreamPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_synths",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_values",
          "type": "bool[]"
        }
      ],
      "name": "updateSynth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_values",
          "type": "bool[]"
        }
      ],
      "name": "updateYearnVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x47d0099b3c9d7a57f2e9d8d88cfe4c029d3f29d5cc49731f890be4a997665841",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0xca41c42F8f2dAb01cA88605f633153933A671961",
    "transactionIndex": 105,
    "gasUsed": "6479894",
    "logsBloom": "0x
    "blockHash": "0x94ecdbea6dabb074789e163c0956650895d1ec06af5a378ac205d1dc64a41da7",
    "transactionHash": "0x47d0099b3c9d7a57f2e9d8d88cfe4c029d3f29d5cc49731f890be4a997665841",
    "logs": [],
    "blockNumber": 14406013,
    "cumulativeGasUsed": "15229054",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 3,
  "solcInputHash": "bcc21d5b3beb79d976a311ead5d37f18",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aTokenToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crTokenToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"contract ICurveMetaRegistry\",\"name\":\"_curveMetaRegistry\",\"type\":\"address\"}],\"name\":\"identifyTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"synths\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_aaveTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"updateAavePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"updateCompoundPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_creamTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"updateCreamPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_synths\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateSynth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateYearnVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Returns the type of the asset\",\"kind\":\"dev\",\"methods\":{\"identifyTokens(address,address,address)\":{\"params\":{\"_tokenIn\":\"Address of the first token\",\"_tokenOut\":\"Address of the second token\"},\"returns\":{\"_0\":\"(uint8,uint8)        Types of both tokens\"}}},\"title\":\"TokenIdentifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"identifyTokens(address,address,address)\":{\"notice\":\"Returns the types of the two tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenIdentifier.sol\":\"TokenIdentifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {ICToken} from './interfaces/external/compound/ICToken.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {ITokenIdentifier} from './interfaces/ITokenIdentifier.sol';\\nimport {ICurveMetaRegistry} from './interfaces/ICurveMetaRegistry.sol';\\nimport {ICurvePoolV3} from './interfaces/external/curve/ICurvePoolV3.sol';\\nimport {IMooniswap} from './interfaces/external/1inch/IMooniswap.sol';\\nimport {IYearnVault} from './interfaces/external/yearn/IYearnVault.sol';\\nimport {IStETH} from './interfaces/external/lido/IStETH.sol';\\nimport {IWstETH} from './interfaces/external/lido/IWstETH.sol';\\n\\nimport {ControllerLib} from './lib/ControllerLib.sol';\\n\\n/**\\n * @title TokenIdentifier\\n * @author Babylon Finance Protocol\\n *\\n * Returns the type of the asset\\n */\\ncontract TokenIdentifier is ITokenIdentifier {\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constants ============ */\\n\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IStETH private constant stETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    IWstETH private constant wstETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n    bytes32 private constant SUSHI_SYMBOL = keccak256(bytes('SLP'));\\n    bytes32 private constant UNI_SYMBOL = keccak256(bytes('UNI-V2'));\\n\\n    // Token Types\\n    uint8 private constant COMP_TOKEN = 1;\\n    uint8 private constant AAVE_TOKEN = 2;\\n    uint8 private constant CREAM_TOKEN = 3;\\n    uint8 private constant SYNTH_TOKEN = 4;\\n    uint8 private constant CURVE_LP_TOKEN = 5;\\n    uint8 private constant YEARN_TOKEN = 6;\\n    uint8 private constant LIDO_TOKEN = 7;\\n    uint8 private constant SUSHI_LP_TOKEN = 8;\\n    uint8 private constant UNIV2_LP_TOKEN = 9;\\n    uint8 private constant ONEINCH_LP_TOKEN = 10;\\n    uint8 private constant HARVESTV3_LP_TOKEN = 11;\\n    uint8 private constant VISOR_LP_TOKEN = 12;\\n\\n    /* ============ State Variables ============ */\\n\\n    IBabController public controller;\\n    // Mapping of cToken addresses\\n    mapping(address => address) public cTokenToAsset;\\n    // Mapping of interest bearing aave tokens\\n    mapping(address => address) public aTokenToAsset;\\n    // Mapping of cream tokens\\n    mapping(address => address) public crTokenToAsset;\\n    // Mapping of synths\\n    mapping(address => bool) public synths;\\n    // Mapping of yearn vaults\\n    mapping(address => bool) public vaults;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(IBabController _controller) {\\n        controller = _controller;\\n\\n        cTokenToAsset[0x5d3a536E4D6DbD6114cc1Ead35777bAB948E3643] = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI\\n        cTokenToAsset[0x35A18000230DA775CAc24873d00Ff85BccdeD550] = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // UNI\\n        cTokenToAsset[0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5] = WETH; // ETH\\n        cTokenToAsset[0x39AA39c021dfbaE8faC545936693aC917d5E7563] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC\\n        cTokenToAsset[0xf650C3d88D12dB855b8bf7D11Be6C55A4e07dCC9] = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\\n        cTokenToAsset[0xccF4429DB6322D5C611ee964527D42E5d685DD6a] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // WBTC2\\n        cTokenToAsset[0x70e36f6BF80a52b3B46b3aF8e106CC0ed743E8e4] = 0xc00e94Cb662C3520282E6f5717214004A7f26888; // COMP\\n        cTokenToAsset[0x6C8c6b02E7b2BE14d4fA6022Dfd6d75921D90E4E] = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF; // BAT\\n        cTokenToAsset[0xFAce851a4921ce59e912d19329929CE6da6EB0c7] = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // LINK\\n        cTokenToAsset[0x158079Ee67Fce2f58472A96584A73C7Ab9AC95c1] = 0x221657776846890989a759BA2973e427DfF5C9bB; // REP\\n        cTokenToAsset[0xF5DCe57282A584D2746FaF1593d3121Fcac444dC] = 0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359; // SAI\\n        cTokenToAsset[0x12392F67bdf24faE0AF363c24aC620a2f67DAd86] = 0x0000000000085d4780B73119b644AE5ecd22b376; // TUSD\\n        cTokenToAsset[0xB3319f5D18Bc0D84dD1b4825Dcde5d5f7266d407] = 0xE41d2489571d322189246DaFA5ebDe1F4699F498; // ZRX\\n        cTokenToAsset[0xe65cdB6479BaC1e22340E4E755fAE7E509EcD06c] = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9; // aave\\n        cTokenToAsset[0x95b4eF2869eBD94BEb4eEE400a99824BF5DC325b] = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2; // MKR\\n        cTokenToAsset[0x4B0181102A0112A2ef11AbEE5563bb4a3176c9d7] = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2; // SUSHI\\n        cTokenToAsset[0x041171993284df560249B57358F931D9eB7b925D] = 0x8E870D67F660D95d5be530380D0eC0bd388289E1; // USDP\\n        cTokenToAsset[0x80a2AE356fc9ef4305676f7a3E2Ed04e12C33946] = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e; // YFI\\n\\n        aTokenToAsset[0xFFC97d72E13E01096502Cb8Eb52dEe56f74DAD7B] = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9; // aave\\n        aTokenToAsset[0x1E6bb68Acec8fefBD87D192bE09bb274170a0548] = 0xD46bA6D942050d489DBd938a2C909A5d5039A161; // AAMPL\\n        aTokenToAsset[0x272F97b7a56a387aE942350bBC7Df5700f8a4576] = 0xba100000625a3754423978a60c9317c58a424e3D; // bal\\n        aTokenToAsset[0x05Ec93c0365baAeAbF7AefFb0972ea7ECdD39CF1] = 0x0D8775F648430679A709E98d2b0Cb6250d2887EF; // bat\\n        aTokenToAsset[0xA361718326c15715591c299427c62086F69923D9] = 0x4Fabb145d64652a948d72533023f6E7A623C7C53; // busd\\n        aTokenToAsset[0x8dAE6Cb04688C62d939ed9B68d32Bc62e49970b1] = 0xD533a949740bb3306d119CC777fa900bA034cd52; // crv\\n        aTokenToAsset[0x028171bCA77440897B824Ca71D1c56caC55b68A3] = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // dai\\n        aTokenToAsset[0xaC6Df26a590F08dcC95D5a4705ae8abbc88509Ef] = 0xF629cBd94d3791C9250152BD8dfBDF380E2a3B9c; // enj\\n        aTokenToAsset[0x683923dB55Fead99A79Fa01A27EeC3cB19679cC3] = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA; // fei\\n        aTokenToAsset[0xd4937682df3C8aEF4FE912A96A74121C0829E664] = 0x853d955aCEf822Db058eb8505911ED77F175b99e; // frax\\n        aTokenToAsset[0xD37EE7e4f452C6638c96536e68090De8cBcdb583] = 0x056Fd409E1d7A124BD7017459dFEa2F387b6d5Cd; // gusd\\n        aTokenToAsset[0x39C6b3e42d6A679d7D776778Fe880BC9487C2EDA] = 0xdd974D5C2e2928deA5F71b9825b8b646686BD200; // knc\\n        aTokenToAsset[0xa06bC25B5805d5F8d82847D191Cb4Af5A3e873E0] = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // link\\n        aTokenToAsset[0xa685a61171bb30d4072B338c80Cb7b2c865c873E] = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942; // mana\\n        aTokenToAsset[0xc713e5E149D5D0715DcD1c156a020976e7E56B88] = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2; // mkr\\n        aTokenToAsset[0xc9BC48c72154ef3e5425641a3c747242112a46AF] = 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919; // rai\\n        aTokenToAsset[0xCC12AbE4ff81c9378D670De1b57F8e0Dd228D77a] = 0x408e41876cCCDC0F92210600ef50372656052a38; // ren\\n        aTokenToAsset[0x514cd6756CCBe28772d4Cb81bC3156BA9d1744aa] = 0xD5147bc8e386d91Cc5DBE72099DAC6C9b99276F5; // renFIL\\n        aTokenToAsset[0x35f6B052C598d933D69A4EEC4D04c73A191fE6c2] = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F; // snx\\n        aTokenToAsset[0x6C5024Cd4F8A59110119C56f8933403A539555EB] = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51; // susd\\n        aTokenToAsset[0x101cc05f4A51C0319f570d5E146a8C625198e636] = 0x0000000000085d4780B73119b644AE5ecd22b376; // tusd\\n        aTokenToAsset[0xB9D7CB55f463405CDfBe4E90a6D2Df01C2B92BF1] = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // uni\\n        aTokenToAsset[0xBcca60bB61934080951369a648Fb03DF4F96263C] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // usdc\\n        aTokenToAsset[0x2e8F4bdbE3d47d7d7DE490437AeA9915D930F1A3] = 0x8E870D67F660D95d5be530380D0eC0bd388289E1; // usdp\\n        aTokenToAsset[0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811] = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // usdt\\n        aTokenToAsset[0x9ff58f4fFB29fA2266Ab25e75e2A8b3503311656] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // wbtc\\n        aTokenToAsset[0x030bA81f1c18d280636F32af80b9AAd02Cf0854e] = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // weth\\n        aTokenToAsset[0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a] = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // xsushi\\n        aTokenToAsset[0x5165d24277cD063F5ac44Efd447B27025e888f37] = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e; // yfi\\n        aTokenToAsset[0xDf7FF54aAcAcbFf42dfe29DD6144A69b629f8C9e] = 0xE41d2489571d322189246DaFA5ebDe1F4699F498; // zrx\\n\\n        crTokenToAsset[0xD06527D5e56A3495252A528C4987003b712860eE] = WETH;\\n        crTokenToAsset[0x797AAB1ce7c01eB727ab980762bA88e7133d2157] = 0xdAC17F958D2ee523a2206206994597C13D831ec7; // USDT\\n        crTokenToAsset[0x44fbeBd2F576670a6C33f6Fc0B00aA8c5753b322] = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48; // USDC\\n        crTokenToAsset[0xCbaE0A83f4f9926997c8339545fb8eE32eDc6b76] = 0x0bc529c00C6401aEF6D220BE8C6Ea1667F6Ad93e; // YFI\\n        crTokenToAsset[0xcE4Fe9b4b8Ff61949DCfeB7e03bc9FAca59D2Eb3] = 0xba100000625a3754423978a60c9317c58a424e3D; // BAL\\n        crTokenToAsset[0x19D1666f543D42ef17F66E376944A22aEa1a8E46] = 0xc00e94Cb662C3520282E6f5717214004A7f26888; // COMP\\n        crTokenToAsset[0x9baF8a5236d44AC410c0186Fe39178d5AAD0Bb87] = 0xdF5e0e81Dff6FAF3A7e52BA697820c5e32D806A8; // YCRV\\n        crTokenToAsset[0x892B14321a4FCba80669aE30Bd0cd99a7ECF6aC0] = 0x2ba592F78dB6436527729929AAf6c908497cB200; // CREAM\\n        crTokenToAsset[0x697256CAA3cCaFD62BB6d3Aa1C7C5671786A5fD9] = 0x514910771AF9Ca656af840dff83E8264EcF986CA; // LINK\\n        crTokenToAsset[0x8B86e0598616a8d4F1fdAE8b59E55FB5Bc33D0d6] = 0x80fB784B7eD66730e8b1DBd9820aFD29931aab03; // LEND\\n        crTokenToAsset[0xc7Fd8Dcee4697ceef5a2fd4608a7BD6A94C77480] = 0xD533a949740bb3306d119CC777fa900bA034cd52; // CRV\\n        crTokenToAsset[0x17107f40d70f4470d20CB3f138a052cAE8EbD4bE] = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D; // RENBTC\\n        crTokenToAsset[0x1FF8CDB51219a8838b52E9cAc09b71e591BC998e] = 0x4Fabb145d64652a948d72533023f6E7A623C7C53; // BUSD\\n        crTokenToAsset[0x3623387773010d9214B10C551d6e7fc375D31F58] = 0xa3BeD4E1c75D00fa6f4E5E6922DB7261B5E9AcD2; // MTA\\n        crTokenToAsset[0x4EE15f44c6F0d8d1136c83EfD2e8E4AC768954c6] = 0x4EE15f44c6F0d8d1136c83EfD2e8E4AC768954c6; // YYCRV\\n        crTokenToAsset[0x338286C0BC081891A4Bda39C7667ae150bf5D206] = 0x6B3595068778DD592e39A122f4f5a5cF09C90fE2; // SUSHI\\n        crTokenToAsset[0x10FDBD1e48eE2fD9336a482D746138AE19e649Db] = 0x50D1c9771902476076eCFc8B2A83Ad6b9355a4c9; // FTT\\n        crTokenToAsset[0x01da76DEa59703578040012357b81ffE62015C2d] = 0xe1237aA7f535b0CC33Fd973D66cBf830354D16c7; // YETH\\n        crTokenToAsset[0xef58b2d5A1b8D3cDE67b8aB054dC5C831E9Bc025] = 0x476c5E26a75bd202a9683ffD34359C0CC15be0fF; // SRM\\n        crTokenToAsset[0xe89a6D0509faF730BD707bf868d9A2A744a363C7] = 0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984; // UNI\\n        crTokenToAsset[0xeFF039C3c1D668f408d09dD7B63008622a77532C] = 0x0d438F3b5175Bebc262bF23753C1E53d03432bDE; // WNXM\\n        crTokenToAsset[0x22B243B96495C547598D9042B6f94B01C22B2e9E] = 0x87eDfFDe3E14c7a66c9b9724747a1C5696b742e6; // SWAG\\n        crTokenToAsset[0x8b3FF1ed4F36C2c2be675AFb13CC3AA5d73685a5] = 0xaaAEBE6Fe48E54f431b0C390CfaF0b017d09D42d; // CEL\\n        crTokenToAsset[0x2A537Fa9FFaea8C1A41D3C2B68a9cb791529366D] = 0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b; // DPI\\n        crTokenToAsset[0x7ea9C63E216D5565c3940A2B3d150e59C2907Db3] = 0x9BE89D2a4cd102D8Fecc6BF9dA793be995C22541; // BBTC\\n        crTokenToAsset[0x3225E3C669B39C7c8B3e204a8614bB218c5e31BC] = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9; // AAVE\\n        crTokenToAsset[0xf55BbE0255f7f4E70f63837Ff72A577fbDDbE924] = 0x0391D2021f89DC339F60Fff84546EA23E337750f; // BOND\\n        crTokenToAsset[0x903560b1CcE601794C584F58898dA8a8b789Fc5d] = 0x1cEB5cB57C4D4E2b2433641b95Dd330A33185A44; // KP3R\\n        crTokenToAsset[0x054B7ed3F45714d3091e82aAd64A1588dC4096Ed] = 0x0316EB71485b0Ab14103307bf65a021042c6d380; // HBTC\\n        crTokenToAsset[0xd5103AfcD0B3fA865997Ef2984C66742c51b2a8b] = 0x9AFb950948c2370975fb91a441F36FDC02737cD4; // HFIL\\n        crTokenToAsset[0xfd609a03B393F1A1cFcAcEdaBf068CAD09a924E2] = 0xcBc1065255cBc3aB41a6868c22d1f1C573AB89fd; // CRETH2\\n        crTokenToAsset[0xD692ac3245bb82319A31068D6B8412796eE85d2c] = 0xdF574c24545E5FfEcb9a659c229253D4111d87e1; // HUSD\\n        crTokenToAsset[0x92B767185fB3B04F881e3aC8e5B0662a027A1D9f] = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI\\n        crTokenToAsset[0x10a3da2BB0Fae4D591476fd97D6636fd172923a8] = 0x584bC13c7D411c00c01A62e8019472dE68768430; // HEGIC\\n        crTokenToAsset[0x3C6C553A95910F9FC81c98784736bd628636D296] = 0x36F3FD68E7325a35EB768F1AedaAe9EA0689d723; // ESD\\n        crTokenToAsset[0x85759961b116f1D36fD697855c57A6ae40793D9B] = 0x111111111117dC0aa78b770fA6A738034120C302; // 1INCH\\n        crTokenToAsset[0x7Aaa323D7e398be4128c7042d197a2545f0f1fea] = 0xd26114cd6EE289AccF82350c8d8487fedB8A0C07; // OMG\\n        crTokenToAsset[0x011a014d5e8Eb4771E575bB1000318D509230Afa] = 0xBb2b8038a1640196FbE3e38816F3e67Cba72D940; // UNI-V2-WBTC-ETH\\n        crTokenToAsset[0xE6C3120F38F56deb38B69b65cC7dcAF916373963] = 0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852; // UNI-V2-ETH-USDT\\n        crTokenToAsset[0x4Fe11BC316B6d7A345493127fBE298b95AdaAd85] = 0xB4e16d0168e52d35CaCD2c6185b44281Ec28C9Dc; // UNI-V2-USDC-ETH\\n        crTokenToAsset[0xcD22C4110c12AC41aCEfA0091c432ef44efaAFA0] = 0xA478c2975Ab1Ea89e8196811F51A7B7Ade33eB11; // UNI-V2-DAI-ETH\\n        crTokenToAsset[0x228619CCa194Fbe3Ebeb2f835eC1eA5080DaFbb2] = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // XSUSHI\\n        crTokenToAsset[0x73f6cBA38922960b7092175c0aDD22Ab8d0e81fC] = 0xCEfF51756c56CeFFCA006cD410B03FFC46dd3a58; // SLP-WBTC-ETH\\n        crTokenToAsset[0x38f27c03d6609a86FF7716ad03038881320BE4Ad] = 0xC3D03e4F041Fd4cD388c549Ee2A29a9E5075882f; // SLP-DAI-ETH\\n        crTokenToAsset[0x5EcaD8A75216CEa7DFF978525B2D523a251eEA92] = 0x397FF1542f962076d0BFE58eA045FfA2d347ACa0; // SLP-USDC-ETH\\n        crTokenToAsset[0x5C291bc83d15f71fB37805878161718eA4b6AEe9] = 0x06da0fd433C1A5d7a4faa01111c044910A184553; // SLP-ETH-USDT\\n        crTokenToAsset[0x6BA0C66C48641e220CF78177C144323b3838D375] = 0x795065dCc9f64b5614C407a6EFDC400DA6221FB0; // SLP-SUSHI-ETH\\n        crTokenToAsset[0xd532944df6DFd5Dd629E8772F03D4fC861873abF] = 0x088ee5007C98a9677165D78dD2109AE4a3D04d0C; // SLP-YFI-ETH\\n        crTokenToAsset[0x197070723CE0D3810a0E47F06E935c30a480D4Fc] = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599; // WBTC\\n        crTokenToAsset[0xC25EAE724f189Ba9030B2556a1533E7c8A732E14] = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F; // SNX\\n        crTokenToAsset[0x25555933a8246Ab67cbf907CE3d1949884E82B55] = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51; // SUSD\\n        crTokenToAsset[0xc68251421eDDa00a10815E273fA4b1191fAC651b] = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5; // PICKLE\\n        crTokenToAsset[0x65883978aDA0e707c3b2BE2A6825b1C4BDF76A90] = 0x8Ab7404063Ec4DBcfd4598215992DC3F8EC853d7; // AKRO\\n        crTokenToAsset[0x8B950f43fCAc4931D408F1fcdA55C6CB6cbF3096] = 0x19D97D8fA813EE2f51aD4B4e04EA08bAf4DFfC28; // BBADGER\\n        crTokenToAsset[0x59089279987DD76fC65Bf94Cb40E186b96e03cB3] = 0x8207c1FfC5B6804F6024322CcF34F29c3541Ae26; // OGN\\n        crTokenToAsset[0x2Db6c82CE72C8d7D770ba1b5F5Ed0b6E075066d6] = 0xfF20817765cB7f73d4bde2e66e067E58D11095C2; // AMP\\n        crTokenToAsset[0xb092b4601850E23903A42EaCBc9D8A0EeC26A4d5] = 0x853d955aCEf822Db058eb8505911ED77F175b99e; // FRAX\\n        crTokenToAsset[0x1d0986Fb43985c88Ffa9aD959CC24e6a087C7e35] = 0xa1faa113cbE53436Df28FF0aEe54275c13B40975; // ALPHA\\n        crTokenToAsset[0x51F48b638F82e8765F7a26373A2Cb4CcB10C07af] = 0xa47c8bf37f92aBed4A126BDA807A7b7498661acD; // UST\\n        crTokenToAsset[0xc36080892c64821fa8e396bc1bD8678fA3b82b17] = 0x4E15361FD6b4BB609Fa63C81A2be19d873717870; // FTM\\n        crTokenToAsset[0x8379BAA817c5c5aB929b03ee8E3c48e45018Ae41] = 0x3155BA85D5F96b2d030a4966AF206230e46849cb; // RUNE\\n        crTokenToAsset[0x299e254A8a165bBeB76D9D69305013329Eea3a3B] = 0xbC396689893D065F41bc2C6EcbeE5e0085233447; // PERP\\n        crTokenToAsset[0xf8445C529D363cE114148662387eba5E62016e20] = 0x03ab458634910AaD20eF5f1C8ee96F1D6ac54919; // RAI\\n        crTokenToAsset[0x7C3297cFB4c4bbd5f44b450c0872E0ADA5203112] = 0x967da4048cD07aB37855c090aAF366e4ce1b9F48; // OCEAN\\n        crTokenToAsset[0x081FE64df6dc6fc70043aedF3713a3ce6F190a21] = 0xFca59Cd816aB1eaD66534D82bc21E7515cE441CF; // RARI\\n        crTokenToAsset[0x28526Bb33d7230E65E735dB64296413731C5402e] = 0xb753428af26E81097e7fD17f40c88aaA3E04902c; // SFI\\n        crTokenToAsset[0x45406ba53bB84Cd32A58e7098a2D4D1b11B107F6] = 0x27b7b1ad7288079A66d12350c828D3C00A6F07d7; // YVCurve-IB CHECK!\\n        crTokenToAsset[0x6d1B9e01aF17Dd08d6DEc08E210dfD5984FF1C20] = 0x986b4AFF588a109c09B50A03f42E4110E29D353F; // YVCurve-sETH\\n        crTokenToAsset[0x1F9b4756B008106C806c7E64322d7eD3B72cB284] = 0xdCD90C7f6324cfa40d7169ef80b12031770B4325; // YVCurve-stETH\\n        crTokenToAsset[0xab10586C918612BA440482db77549d26B7ABF8f7] = 0x1337DEF16F9B486fAEd0293eb623Dc8395dFE46a; // ARMOR\\n        crTokenToAsset[0xdFFf11DFe6436e42a17B86e7F419Ac8292990393] = 0x1337DEF18C680aF1f9f45cBcab6309562975b1dD; // ARNXM\\n        crTokenToAsset[0xDbb5e3081dEf4b6cdD8864aC2aeDA4cBf778feCf] = 0xec67005c4E498Ec7f55E092bd1d35cbC47C91892; // MLN\\n        crTokenToAsset[0x71cEFCd324B732d4E058AfAcBA040d908c441847] = 0x1b40183EFB4Dd766f11bDa7A7c3AD8982e998421; // VSP\\n        crTokenToAsset[0x1A122348B73B58eA39F822A89e6ec67950c2bBD0] = 0xbA4cFE5741b357FA371b506e5db0774aBFeCf8Fc; // VVSP\\n        crTokenToAsset[0x523EFFC8bFEfC2948211A05A905F761CBA5E8e9E] = 0x6810e776880C02933D47DB1b9fc05908e5386b96; // GNO\\n        crTokenToAsset[0x4202D97E00B9189936EdF37f8D01cfF88BDd81d4] = 0xa9fE4601811213c340e850ea305481afF02f5b28; // YVWETH\\n        crTokenToAsset[0x4BAa77013ccD6705ab0522853cB0E9d453579Dd4] = 0x4BAa77013ccD6705ab0522853cB0E9d453579Dd4; // YUSD\\n        crTokenToAsset[0x98E329eB5aae2125af273102f3440DE19094b77c] = 0xCC4304A31d09258b0029eA7FE63d032f52e44EFe; // SWAP\\n        crTokenToAsset[0x8C3B7a4320ba70f8239F83770c4015B5bc4e6F91] = 0x956F47F50A910163D8BF957Cf5846D573E7f87CA; // FEI\\n        crTokenToAsset[0xE585c76573D7593ABF21537B607091F76c996E73] = 0x4691937a7508860F876c9c0a2a617E7d9E945D4B; // WOO\\n        crTokenToAsset[0x81E346729723C4D15d0FB1c5679b9f2926Ff13C6] = 0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C; // BNT\\n        crTokenToAsset[0xC581b735A1688071A1746c968e0798D642EDE491] = 0xC581b735A1688071A1746c968e0798D642EDE491; // EURT\\n        crTokenToAsset[0xD7394428536F63d5659cc869EF69d10f9E66314B] = 0x8E870D67F660D95d5be530380D0eC0bd388289E1; // PAX\\n        crTokenToAsset[0x1241B10E7EA55b22f5b2d007e8fECDF73DCff999] = 0x45804880De22913dAFE09f4980848ECE6EcbAf78; // PAXG\\n        crTokenToAsset[0x2A867fd776B83e1bd4e13C6611AFd2F6af07EA6D] = 0x9BE89D2a4cd102D8Fecc6BF9dA793be995C22541; // BBTC\\n        crTokenToAsset[0x250Fb308199FE8C5220509C1bf83D21d60b7f74A] = 0x0000000000095413afC295d19EDeb1Ad7B71c952; // LON\\n        crTokenToAsset[0x4112a717edD051F77d834A6703a1eF5e3d73387F] = 0x25f8087EAD173b73D6e8B84329989A8eEA16CF73; // YGG\\n        crTokenToAsset[0xF04ce2e71D32D789a259428ddcD02D3C9F97fb4E] = 0xBB0E17EF65F82Ab018d8EDd776e8DD940327B28b; // AXS\\n        crTokenToAsset[0x89e42987c39f72e2EAd95a8a5bC92114323d5828] = 0x3845badAde8e6dFF049820680d1F14bD3903a5d0; // SAND\\n        crTokenToAsset[0x58DA9c9fC3eb30AbBcbBAb5DDabb1E6e2eF3d2EF] = 0x0F5D2fB29fb7d3CFeE444a200298f468908cC942; // MANA\\n\\n        synths[0x57Ab1ec28D129707052df4dF418D58a2D46d5f51] = true; // ProxyERC20sUSD\\n        synths[0xd2dF355C19471c8bd7D8A3aa27Ff4e26A21b4076] = true; // ProxysAAVE\\n        synths[0xe36E2D3c7c34281FA3bC737950a68571736880A1] = true; // ProxysADA\\n        synths[0xF48e200EAF9906362BB1442fca31e0835773b8B4] = true; // ProxysAUD\\n        synths[0xfE18be6b3Bd88A2D2A7f928d00292E7a9963CfC6] = true; // ProxysBTC\\n        synths[0x0F83287FF768D1c1e17a42F44d644D7F22e8ee1d] = true; // ProxysCHF\\n        synths[0xD38aEb759891882e78E957c80656572503D8c1B1] = true; // ProxysCRV\\n        synths[0xfE33ae95A9f0DA8A845aF33516EDc240DCD711d6] = true; // ProxysDEFI\\n        synths[0x1715AC0743102BF5Cd58EfBB6Cf2dC2685d967b6] = true; // ProxysDOT\\n        synths[0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb] = true; // ProxysETH\\n        synths[0x104eDF1da359506548BFc7c25bA1E28C16a70235] = true; // ProxysETHBTC\\n        synths[0xD71eCFF9342A5Ced620049e616c5035F1dB98620] = true; // ProxysEUR\\n        synths[0x97fe22E7341a0Cd8Db6F6C021A24Dc8f4DAD855F] = true; // ProxysGBP\\n        synths[0xF6b1C627e95BFc3c1b4c9B825a032Ff0fBf3e07d] = true; // ProxysJPY\\n        synths[0x269895a3dF4D73b077Fc823dD6dA1B95f72Aaf9B] = true; // ProxysKRW\\n        synths[0xbBC455cb4F1B9e4bFC4B73970d360c8f032EfEE6] = true; // ProxysLINK\\n\\n        // Yearn vaults\\n        // https://medium.com/yearn-state-of-the-vaults/the-vaults-at-yearn-9237905ffed3\\n        vaults[0xc5bDdf9843308380375a611c18B50Fb9341f502A] = true; // veCRV-DAO yVault\\n        vaults[0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a] = true; // Yearn Compounding veCRV yVault\\n        vaults[0xdb25cA703181E7484a155DD612b06f57E12Be5F0] = true; // YFI yVault\\n        vaults[0xF29AE508698bDeF169B89834F76704C3B205aedf] = true; // SNX yVault\\n        vaults[0x873fB544277FD7b977B196a826459a69E27eA4ea] = true; // RAI yVault\\n        vaults[0x671a912C10bba0CFA74Cfc2d6Fba9BA1ed9530B2] = true; // LINK yVault\\n        vaults[0xa5cA62D95D24A4a350983D5B8ac4EB8638887396] = true; // sUSD yVault\\n        vaults[0xB8C3B7A2A618C552C23B1E4701109a9E756Bab67] = true; // 1INCH yVault\\n        vaults[0xa258C4606Ca8206D8aA700cE2143D7db854D168c] = true; // WETH yVault\\n        vaults[0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9] = true; // USDC yVault\\n        vaults[0xdA816459F1AB5631232FE5e97a05BBBb94970c95] = true; // DAI yVault\\n        vaults[0xA696a63cc78DfFa1a63E9E50587C197387FF6C7E] = true; // WBTC yVault\\n        vaults[0x7Da96a3891Add058AdA2E826306D812C638D87a7] = true; // USDT yVault\\n        vaults[0xFBEB78a723b8087fD2ea7Ef1afEc93d35E8Bed42] = true; // UNI yVault\\n        vaults[0xd9788f3931Ede4D5018184E198699dC6d66C1915] = true; // AAVE yVault\\n        vaults[0x4A3FE75762017DB0eD73a71C9A06db7768DB5e66] = true; // COMP yVault\\n        vaults[0x6d765CbE5bC922694afE112C140b8878b9FB0390] = true; // SUSHI yVault\\n        vaults[0xFD0877d9095789cAF24c98F7CCe092fa8E120775] = true; // TUSD yVault\\n        // Curve yearn vaults\\n        vaults[0xE537B5cc158EB71037D4125BDD7538421981E6AA] = true; // Curve 3Crypto Pool yVault\\n        vaults[0x6FAfCA7f49B4Fd9dC38117469cd31A1E5aec91F5] = true; // Curve USDM Pool yVault\\n        vaults[0x718AbE90777F5B778B52D553a5aBaa148DD0dc5D] = true; // Curve alETH Pool yVault\\n        vaults[0x8b9C0c24307344B6D7941ab654b2Aeee25347473] = true; // Curve EURN Pool yVault\\n        vaults[0xd8C620991b8E626C099eAaB29B1E3eEa279763bb] = true; // Curve MIM-UST\\n        vaults[0x0d4EA8536F9A13e4FBa16042a46c30f092b06aA5] = true; // Curve EURT Pool yVault\\n        vaults[0x2DfB14E32e2F8156ec15a2c21c3A6c053af52Be8] = true; // Curve MIM Pool yVault\\n        vaults[0x4560b99C904aAD03027B5178CCa81584744AC01f] = true; // Curve cvxCRV Pool yVault\\n        vaults[0x67e019bfbd5a67207755D04467D6A70c0B75bF60] = true; // Curve ibEUR Pool yVault\\n        vaults[0x528D50dC9a333f01544177a924893FA1F5b9F748] = true; // Curve ibKRW Pool yVault\\n        vaults[0x595a68a8c9D5C230001848B69b1947ee2A607164] = true; // Curve ibGBP Pool yVault\\n        vaults[0x1b905331F7dE2748F4D6a0678e1521E20347643F] = true; // Curve ibAUD Pool yVault\\n        vaults[0x490bD0886F221A5F79713D3E84404355A9293C50] = true; // Curve ibCHF Pool yVault\\n        vaults[0x59518884EeBFb03e90a18ADBAAAB770d4666471e] = true; // Curve ibJPY Pool yVault\\n        vaults[0x8cc94ccd0f3841a468184aCA3Cc478D2148E1757] = true; // Curve mUSD Pool yVault\\n        vaults[0x625b7DF2fa8aBe21B0A976736CDa4775523aeD1E] = true; // Curve HBTC Pool yVault\\n        vaults[0x3D27705c64213A5DcD9D26880c1BcFa72d5b6B0E] = true; // Curve USDK Pool yVault\\n        vaults[0x80bbeE2fa460dA291e796B9045e93d19eF948C6A] = true; // Curve Pax Pool yVault\\n        vaults[0xC116dF49c02c5fD147DE25Baa105322ebF26Bd97] = true; // Curve RSV Pool yVault\\n        vaults[0x28a5b95C101df3Ded0C0d9074DB80C438774B6a9] = true; // Curve USDT Pool yVault\\n        vaults[0x3D980E50508CFd41a13837A60149927a11c03731] = true; // Curve triCrypto Pool yVault\\n        vaults[0x25212Df29073FfFA7A67399AcEfC2dd75a831A1A] = true; // Curve EURS Pool yVault\\n        vaults[0x5a770DbD3Ee6bAF2802D29a901Ef11501C44797A] = true; // Curve sUSD Pool yVault\\n        vaults[0x39CAF13a104FF567f71fd2A4c68C026FDB6E740B] = true; // Curve Aave Pool yVault\\n        vaults[0x054AF22E1519b020516D72D749221c24756385C9] = true; // Curve HUSD Pool yVault\\n        vaults[0x3B96d491f067912D18563d56858Ba7d6EC67a6fa] = true; // Curve USDN Pool yVault\\n        vaults[0xBfedbcbe27171C418CDabC2477042554b1904857] = true; // Curve rETH Pool yVault\\n        vaults[0x132d8D2C76Db3812403431fAcB00F3453Fc42125] = true; // Curve ankrETH Pool yVault\\n        vaults[0xf2db9a7c0ACd427A680D640F02d90f6186E71725] = true; // Curve LINK Pool yVault\\n        vaults[0xA74d4B67b3368E83797a35382AFB776bAAE4F5C8] = true; // Curve alUSD Pool yVault\\n        vaults[0xC4dAf3b5e2A9e93861c3FBDd25f1e943B8D87417] = true; // Curve USDP Pool yVault\\n        vaults[0x1C6a9783F812b3Af3aBbf7de64c3cD7CC7D1af44] = true; // Curve UST Pool yVault\\n        vaults[0x30FCf7c6cDfC46eC237783D94Fc78553E79d4E9C] = true; // Curve DUSD Pool yVault\\n        vaults[0xf8768814b88281DE4F532a3beEfA5b85B69b9324] = true; // Curve TUSD Pool yVault\\n        vaults[0x4B5BfD52124784745c1071dcB244C6688d2533d3] = true; // Curve Y Pool yVault\\n        vaults[0x84E13785B5a27879921D6F685f041421C7F482dA] = true; // Curve 3pool yVault\\n        vaults[0x2a38B9B0201Ca39B17B460eD2f11e4929559071E] = true; // Curve GUSD Pool yVault\\n        vaults[0x27b7b1ad7288079A66d12350c828D3C00A6F07d7] = true; // Curve Iron Bank Pool yVault\\n        vaults[0x986b4AFF588a109c09B50A03f42E4110E29D353F] = true; // Curve sETH Pool yVault\\n        vaults[0xdCD90C7f6324cfa40d7169ef80b12031770B4325] = true; // Curve stETH Pool yVault\\n        vaults[0x8414Db07a7F743dEbaFb402070AB01a4E0d2E45e] = true; // Curve sBTC Pool yVault\\n        vaults[0x7047F90229a057C13BF847C0744D646CFb6c9E1A] = true; // Curve renBTC Pool yVault\\n        vaults[0xe9Dc63083c464d6EDcCFf23444fF3CFc6886f6FB] = true; // Curve oBTC Pool yVault\\n        vaults[0x3c5DF3077BcF800640B5DAE8c91106575a4826E6] = true; // Curve pBTC Pool yVault\\n        vaults[0x23D3D0f1c697247d5e0a9efB37d8b0ED0C464f7f] = true; // Curve tBTC Pool yVault\\n        vaults[0xB4AdA607B9d6b2c9Ee07A275e9616B84AC560139] = true; // Curve FRAX Pool yVault\\n        vaults[0x5fA5B62c8AF877CB37031e0a3B2f34A78e3C56A6] = true; // Curve LUSD Pool yVault\\n        vaults[0xb4D1Be44BfF40ad6e506edf43156577a3f8672eC] = true; // Curve SAAVE Pool yVault\\n        vaults[0x8fA3A9ecd9EFb07A8CE90A6eb014CF3c0E3B32Ef] = true; // Curve BBTC Pool yVault\\n        vaults[0x6Ede7F19df5df6EF23bD5B9CeDb651580Bdf56Ca] = true; // Curve BUSD Pool yVault\\n        vaults[0x2994529C0652D127b7842094103715ec5299bBed] = true; // yearn Curve.fi yDAI/yUSDC/yUSDT/yBUSD\\n        vaults[0xD6Ea40597Be05c201845c0bFd2e96A60bACde267] = true; // Curve Compound Pool yVault\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            vaults[_vaults[i]] = _values[i];\\n        }\\n    }\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _synths.length; i++) {\\n            synths[_synths[i]] = _values[i];\\n        }\\n    }\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _creamTokens.length; i++) {\\n            crTokenToAsset[_creamTokens[i]] = _underlyings[i];\\n        }\\n    }\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _aaveTokens.length; i++) {\\n            aTokenToAsset[_aaveTokens[i]] = _underlyings[i];\\n        }\\n    }\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _cTokens.length; i++) {\\n            cTokenToAsset[_cTokens[i]] = _underlyings[i];\\n        }\\n    }\\n\\n    /**\\n     * Returns the types of the two tokens\\n     * @param _tokenIn              Address of the first token\\n     * @param _tokenOut             Address of the second token\\n     * @return (uint8,uint8)        Types of both tokens\\n     */\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        override\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        )\\n    {\\n        uint8 tokenInType;\\n        uint8 tokenOutType;\\n        address finalAssetIn;\\n        address finalAssetOut;\\n        // Comp assets\\n        if (cTokenToAsset[_tokenIn] != address(0)) {\\n            tokenInType = COMP_TOKEN;\\n            finalAssetIn = cTokenToAsset[_tokenIn];\\n        }\\n        if (cTokenToAsset[_tokenOut] != address(0)) {\\n            tokenOutType = COMP_TOKEN;\\n            finalAssetOut = cTokenToAsset[_tokenOut];\\n        }\\n\\n        // aave tokens. 1 to 1 with underlying\\n        if (aTokenToAsset[_tokenIn] != address(0)) {\\n            tokenInType = AAVE_TOKEN;\\n            finalAssetIn = aTokenToAsset[_tokenIn];\\n        }\\n        if (aTokenToAsset[_tokenOut] != address(0)) {\\n            tokenOutType = AAVE_TOKEN;\\n            finalAssetOut = aTokenToAsset[_tokenOut];\\n        }\\n\\n        // crTokens Cream prices 0xde19f5a7cF029275Be9cEC538E81Aa298E297266\\n        // cTkens use same interface as compound\\n        if (crTokenToAsset[_tokenIn] != address(0)) {\\n            finalAssetIn = crTokenToAsset[_tokenIn];\\n            tokenInType = CREAM_TOKEN;\\n        }\\n        if (crTokenToAsset[_tokenOut] != address(0)) {\\n            finalAssetOut = crTokenToAsset[_tokenOut];\\n            tokenOutType = CREAM_TOKEN;\\n        }\\n\\n        // Checks synthetix\\n        if (synths[_tokenIn]) {\\n            tokenInType = SYNTH_TOKEN;\\n        }\\n\\n        if (synths[_tokenOut]) {\\n            tokenOutType = SYNTH_TOKEN;\\n        }\\n\\n        // Early exit\\n        if (tokenInType > 0 && tokenOutType > 0) {\\n            return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n        }\\n\\n        if (tokenInType == 0) {\\n            // Curve LP Token\\n            address crvPool = _curveMetaRegistry.getPoolFromLpToken(_tokenIn);\\n            if (crvPool != address(0)) {\\n                tokenInType = CURVE_LP_TOKEN;\\n            }\\n        }\\n\\n        if (tokenOutType == 0) {\\n            address crvPool = _curveMetaRegistry.getPoolFromLpToken(_tokenOut);\\n            if (crvPool != address(0)) {\\n                tokenOutType = CURVE_LP_TOKEN;\\n            }\\n        }\\n\\n        // Yearn vaults\\n        if (_isYearnVault(_tokenIn)) {\\n            tokenInType = YEARN_TOKEN;\\n        }\\n\\n        if (_isYearnVault(_tokenOut)) {\\n            tokenOutType = YEARN_TOKEN;\\n        }\\n\\n        // Checks stETH && wstETH (Lido tokens)\\n        if (_tokenIn == address(stETH) || _tokenIn == address(wstETH)) {\\n            tokenInType = LIDO_TOKEN;\\n        }\\n        if (_tokenOut == address(stETH) || _tokenOut == address(wstETH)) {\\n            tokenOutType = LIDO_TOKEN;\\n        }\\n\\n        // Early exit\\n        if (tokenInType > 0 && tokenOutType > 0) {\\n            return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n        }\\n\\n        // Check sushi pairs (univ2)\\n        if (tokenInType == 0) {\\n            string memory tokenInSymbol = ERC20(_tokenIn).symbol();\\n            if (keccak256(bytes(tokenInSymbol)) == SUSHI_SYMBOL) {\\n                tokenInType = SUSHI_LP_TOKEN;\\n            }\\n            // Checks univ2\\n            if (keccak256(bytes(tokenInSymbol)) == UNI_SYMBOL) {\\n                tokenInType = UNIV2_LP_TOKEN;\\n            }\\n        }\\n        if (tokenOutType == 0) {\\n            string memory tokenOutSymbol = ERC20(_tokenOut).symbol();\\n            if (keccak256(bytes(tokenOutSymbol)) == SUSHI_SYMBOL) {\\n                tokenOutType = SUSHI_LP_TOKEN;\\n            }\\n            if (keccak256(bytes(tokenOutSymbol)) == UNI_SYMBOL) {\\n                tokenOutType = UNIV2_LP_TOKEN;\\n            }\\n        }\\n\\n        // todo: mooniswap\\n        // todo: pickle\\n        // todo: convex tokens\\n        // todo: Harvest v3 lp token\\n        // todo: Visor (univ3 lp token)\\n\\n        return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _isYearnVault(address _token) private view returns (bool) {\\n        return vaults[_token];\\n    }\\n}\\n\",\"keccak256\":\"0x5f98fae47d948a86281ce9f8f7763598d81d89599f12d2386ebb54938946a684\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6387fc1c0d888155360b0c3fb2360c6387250ed75881dfdbce5ea86133973c27\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x0d794604791fe40cd0864e0fa18b54d3adbac74144006ffa4f47b30cc391a650\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ Functions ============ */\\n\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external;\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0xa30bdb97ab135172a145ea6f08fda87a3c5d891f65f35275e5b9c2c73f04f5f6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/1inch/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMooniswap is IERC20 {\\n    function getTokens() external view returns (address[] memory _tokens);\\n\\n    function tokens(uint256 i) external view returns (IERC20);\\n\\n    function mooniswapFactoryGovernance() external view returns (address);\\n\\n    function getBalanceForAddition(IERC20 token) external view returns (uint256);\\n\\n    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\\n\\n    function getReturn(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\n        external\\n        payable\\n        returns (uint256 fairSupply, uint256[2] memory receivedAmounts);\\n\\n    function depositFor(\\n        uint256[2] memory maxAmounts,\\n        uint256[2] memory minAmounts,\\n        address target\\n    ) external payable returns (uint256 fairSupply, uint256[2] memory receivedAmounts);\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns)\\n        external\\n        returns (uint256[2] memory withdrawnAmounts);\\n\\n    function withdrawFor(\\n        uint256 amount,\\n        uint256[] memory minReturns,\\n        address payable target\\n    ) external returns (uint256[2] memory withdrawnAmounts);\\n\\n    function swap(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount,\\n        uint256 minReturn,\\n        address referral\\n    ) external payable returns (uint256 result);\\n\\n    function swapFor(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount,\\n        uint256 minReturn,\\n        address referral,\\n        address payable receiver\\n    ) external payable returns (uint256 result);\\n}\\n\",\"keccak256\":\"0x4d42eae22a74b5f47e645297d483e8f26e571195d9809d2db581fb3eeab3a053\",\"license\":\"MIT\"},\"contracts/interfaces/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICToken is IERC20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function repayBorrowBehalf(address borrower, uint256 amount) external payable returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc270858943ac9927559cac341eb0c695165c7d5587cdee4c9a927d6122d21f25\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3 {\\n    function coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(int128 arg0) external view returns (address out);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256 out);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address out);\\n\\n    function token() external view returns (address out);\\n\\n    function curve() external view returns (address out);\\n\\n    function pool() external view returns (address out);\\n}\\n\",\"keccak256\":\"0x4757b8b84ec7e87564e32b1da52b392aa8f4d39cf3097e6abdfe5a201b7ad587\",\"license\":\"MIT\"},\"contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStETH is IERC20 {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _pooledEthAmount) external view returns (uint256);\\n\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x0b71a50f82d2ecb6f850c5cbb347178879b1c021f23f4ac29679356faa08c0f1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title StETH token wrapper with static balances.\\n * @dev It's an ERC20 token that represents the account's share of the total\\n * supply of stETH tokens. WstETH token's balance only changes on transfers,\\n * unlike StETH that is also changed when oracles report staking rewards and\\n * penalties. It's a \\\"power user\\\" token for DeFi protocols which don't\\n * support rebasable tokens.\\n *\\n * The contract is also a trustless wrapper that accepts stETH tokens and mints\\n * wstETH in return. Then the user unwraps, the contract burns user's wstETH\\n * and sends user locked stETH in return.\\n *\\n * The contract provides the staking shortcut: user can send ETH with regular\\n * transfer and get wstETH in return. The contract will send ETH to Lido submit\\n * method, staking it and wrapping the received stETH.\\n *\\n */\\ninterface IWstETH is IERC20 {\\n    /**\\n     * @notice Exchanges stETH to wstETH\\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n     * @dev Requirements:\\n     *  - `_stETHAmount` must be non-zero\\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n     *    contract.\\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\\n     * User should first approve _stETHAmount to the WstETH contract\\n     * @return Amount of wstETH user receives after wrap\\n     */\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Exchanges wstETH to stETH\\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n     * @dev Requirements:\\n     *  - `_wstETHAmount` must be non-zero\\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n     * @return Amount of stETH user receives after unwrap\\n     */\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Shortcut to stake ETH and auto-wrap returned stETH\\n     */\\n    // receive() external payable {\\n    //     uint256 shares = stETH.submit{value: msg.value}(address(0));\\n    //     _mint(msg.sender, shares);\\n    // }\\n\\n    /**\\n     * @notice Get amount of wstETH for a given amount of stETH\\n     * @param _stETHAmount amount of stETH\\n     * @return Amount of wstETH for a given stETH amount\\n     */\\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a given amount of wstETH\\n     * @param _wstETHAmount amount of wstETH\\n     * @return Amount of stETH for a given wstETH amount\\n     */\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a one wstETH\\n     * @return Amount of wstETH for a 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1da6eb5bad8dbb88aac49e190a10b2a3badd8df8503a76d730abffe6743a7639\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/yearn/IYearnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IYearnVault {\\n    function pricePerShare() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 shares) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x46f32ad8c60d681953263abeeaf86a7c1185420971d75067fa7ec264704a6610\",\"license\":\"MIT\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfb8440b3c915eb148e4ef721ce6b240642a8c35c3f8729dc6d20db9f307b4cae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051616c89380380616c898339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a8154816001600160a01b0302191690836001600160a01b03160217905550736b175474e89094c44da98b954eedeac495271d0f60016000735d3a536e4d6dbd6114cc1ead35777bab948e36436001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731f9840a85d5af5bf1d1762f925bdaddc4201f984600160007335a18000230da775cac24873d00ff85bccded5506001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc260016000734ddc2d193948926d02f9b1fe9e1daa0718270ed56001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48600160007339aa39c021dfbae8fac545936693ac917d5e75636001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073dac17f958d2ee523a2206206994597c13d831ec76001600073f650c3d88d12db855b8bf7d11be6c55a4e07dcc96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550732260fac5e5542a773aa44fbcfedf7c193bc2c5996001600073ccf4429db6322d5c611ee964527d42e5d685dd6a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c00e94cb662c3520282e6f5717214004a7f26888600160007370e36f6bf80a52b3b46b3af8e106cc0ed743e8e46001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730d8775f648430679a709e98d2b0cb6250d2887ef60016000736c8c6b02e7b2be14d4fa6022dfd6d75921d90e4e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073514910771af9ca656af840dff83e8264ecf986ca6001600073face851a4921ce59e912d19329929ce6da6eb0c76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073221657776846890989a759ba2973e427dff5c9bb6001600073158079ee67fce2f58472a96584a73c7ab9ac95c16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507389d24a6b4ccb1b6faa2625fe562bdd9a232603596001600073f5dce57282a584d2746faf1593d3121fcac444dc6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506e085d4780b73119b644ae5ecd22b376600160007312392f67bdf24fae0af363c24ac620a2f67dad866001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073e41d2489571d322189246dafa5ebde1f4699f4986001600073b3319f5d18bc0d84dd1b4825dcde5d5f7266d4076001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550737fc66500c84a76ad7e9c93437bfc5ac33e2ddae96001600073e65cdb6479bac1e22340e4e755fae7e509ecd06c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550739f8f72aa9304c8b593d555f12ef6589cc3a579a2600160007395b4ef2869ebd94beb4eee400a99824bf5dc325b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736b3595068778dd592e39a122f4f5a5cf09c90fe260016000734b0181102a0112a2ef11abee5563bb4a3176c9d76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738e870d67f660d95d5be530380d0ec0bd388289e16001600073041171993284df560249b57358f931d9eb7b925d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730bc529c00c6401aef6d220be8c6ea1667f6ad93e600160007380a2ae356fc9ef4305676f7a3e2ed04e12c339466001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550737fc66500c84a76ad7e9c93437bfc5ac33e2ddae96002600073ffc97d72e13e01096502cb8eb52dee56f74dad7b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d46ba6d942050d489dbd938a2c909a5d5039a16160026000731e6bb68acec8fefbd87d192be09bb274170a05486001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ba100000625a3754423978a60c9317c58a424e3d6002600073272f97b7a56a387ae942350bbc7df5700f8a45766001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730d8775f648430679a709e98d2b0cb6250d2887ef600260007305ec93c0365baaeabf7aeffb0972ea7ecdd39cf16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734fabb145d64652a948d72533023f6e7a623c7c536002600073a361718326c15715591c299427c62086f69923d96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d533a949740bb3306d119cc777fa900ba034cd5260026000738dae6cb04688c62d939ed9b68d32bc62e49970b16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736b175474e89094c44da98b954eedeac495271d0f6002600073028171bca77440897b824ca71d1c56cac55b68a36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073f629cbd94d3791c9250152bd8dfbdf380e2a3b9c6002600073ac6df26a590f08dcc95d5a4705ae8abbc88509ef6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073956f47f50a910163d8bf957cf5846d573e7f87ca6002600073683923db55fead99a79fa01a27eec3cb19679cc36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073853d955acef822db058eb8505911ed77f175b99e6002600073d4937682df3c8aef4fe912a96a74121c0829e6646001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073056fd409e1d7a124bd7017459dfea2f387b6d5cd6002600073d37ee7e4f452c6638c96536e68090de8cbcdb5836001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073dd974d5c2e2928dea5f71b9825b8b646686bd200600260007339c6b3e42d6a679d7d776778fe880bc9487c2eda6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073514910771af9ca656af840dff83e8264ecf986ca6002600073a06bc25b5805d5f8d82847d191cb4af5a3e873e06001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730f5d2fb29fb7d3cfee444a200298f468908cc9426002600073a685a61171bb30d4072b338c80cb7b2c865c873e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550739f8f72aa9304c8b593d555f12ef6589cc3a579a26002600073c713e5e149d5d0715dcd1c156a020976e7e56b886001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507303ab458634910aad20ef5f1c8ee96f1d6ac549196002600073c9bc48c72154ef3e5425641a3c747242112a46af6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073408e41876cccdc0f92210600ef50372656052a386002600073cc12abe4ff81c9378d670de1b57f8e0dd228d77a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d5147bc8e386d91cc5dbe72099dac6c9b99276f56002600073514cd6756ccbe28772d4cb81bc3156ba9d1744aa6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f600260007335f6b052c598d933d69a4eec4d04c73a191fe6c26001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507357ab1ec28d129707052df4df418d58a2d46d5f5160026000736c5024cd4f8a59110119c56f8933403a539555eb6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506e085d4780b73119b644ae5ecd22b3766002600073101cc05f4a51c0319f570d5e146a8c625198e6366001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731f9840a85d5af5bf1d1762f925bdaddc4201f9846002600073b9d7cb55f463405cdfbe4e90a6d2df01c2b92bf16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb486002600073bcca60bb61934080951369a648fb03df4f96263c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738e870d67f660d95d5be530380d0ec0bd388289e160026000732e8f4bdbe3d47d7d7de490437aea9915d930f1a36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073dac17f958d2ee523a2206206994597c13d831ec760026000733ed3b47dd13ec9a98b44e6204a523e766b2258116001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550732260fac5e5542a773aa44fbcfedf7c193bc2c59960026000739ff58f4ffb29fa2266ab25e75e2a8b35033116566001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26002600073030ba81f1c18d280636f32af80b9aad02cf0854e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738798249c2e607446efb7ad49ec89dd1865ff42726002600073f256cc7847e919fac9b808cc216cac87ccf2f47a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730bc529c00c6401aef6d220be8c6ea1667f6ad93e60026000735165d24277cd063f5ac44efd447b27025e888f376001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073e41d2489571d322189246dafa5ebde1f4699f4986002600073df7ff54aacacbff42dfe29dd6144a69b629f8c9e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26003600073d06527d5e56a3495252a528c4987003b712860ee6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073dac17f958d2ee523a2206206994597c13d831ec76003600073797aab1ce7c01eb727ab980762ba88e7133d21576001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48600360007344fbebd2f576670a6c33f6fc0b00aa8c5753b3226001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730bc529c00c6401aef6d220be8c6ea1667f6ad93e6003600073cbae0a83f4f9926997c8339545fb8ee32edc6b766001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ba100000625a3754423978a60c9317c58a424e3d6003600073ce4fe9b4b8ff61949dcfeb7e03bc9faca59d2eb36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c00e94cb662c3520282e6f5717214004a7f26888600360007319d1666f543d42ef17f66e376944a22aea1a8e466001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073df5e0e81dff6faf3a7e52ba697820c5e32d806a860036000739baf8a5236d44ac410c0186fe39178d5aad0bb876001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550732ba592f78db6436527729929aaf6c908497cb2006003600073892b14321a4fcba80669ae30bd0cd99a7ecf6ac06001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073514910771af9ca656af840dff83e8264ecf986ca6003600073697256caa3ccafd62bb6d3aa1c7c5671786a5fd96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507380fb784b7ed66730e8b1dbd9820afd29931aab0360036000738b86e0598616a8d4f1fdae8b59e55fb5bc33d0d66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d533a949740bb3306d119cc777fa900ba034cd526003600073c7fd8dcee4697ceef5a2fd4608a7bd6a94c774806001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073eb4c2781e4eba804ce9a9803c67d0893436bb27d600360007317107f40d70f4470d20cb3f138a052cae8ebd4be6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734fabb145d64652a948d72533023f6e7a623c7c5360036000731ff8cdb51219a8838b52e9cac09b71e591bc998e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a3bed4e1c75d00fa6f4e5e6922db7261b5e9acd260036000733623387773010d9214b10c551d6e7fc375d31f586001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734ee15f44c6f0d8d1136c83efd2e8e4ac768954c660036000734ee15f44c6f0d8d1136c83efd2e8e4ac768954c66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736b3595068778dd592e39a122f4f5a5cf09c90fe26003600073338286c0bc081891a4bda39c7667ae150bf5d2066001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507350d1c9771902476076ecfc8b2a83ad6b9355a4c9600360007310fdbd1e48ee2fd9336a482d746138ae19e649db6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073e1237aa7f535b0cc33fd973d66cbf830354d16c7600360007301da76dea59703578040012357b81ffe62015c2d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073476c5e26a75bd202a9683ffd34359c0cc15be0ff6003600073ef58b2d5a1b8d3cde67b8ab054dc5c831e9bc0256001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731f9840a85d5af5bf1d1762f925bdaddc4201f9846003600073e89a6d0509faf730bd707bf868d9a2a744a363c76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730d438f3b5175bebc262bf23753c1e53d03432bde6003600073eff039c3c1d668f408d09dd7b63008622a77532c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507387edffde3e14c7a66c9b9724747a1c5696b742e6600360007322b243b96495c547598d9042b6f94b01c22b2e9e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073aaaebe6fe48e54f431b0c390cfaf0b017d09d42d60036000738b3ff1ed4f36c2c2be675afb13cc3aa5d73685a56001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731494ca1f11d487c2bbe4543e90080aeba4ba3c2b60036000732a537fa9ffaea8c1a41d3c2b68a9cb791529366d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550739be89d2a4cd102d8fecc6bf9da793be995c2254160036000737ea9c63e216d5565c3940a2b3d150e59c2907db36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550737fc66500c84a76ad7e9c93437bfc5ac33e2ddae960036000733225e3c669b39c7c8b3e204a8614bb218c5e31bc6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730391d2021f89dc339f60fff84546ea23e337750f6003600073f55bbe0255f7f4e70f63837ff72a577fbddbe9246001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731ceb5cb57c4d4e2b2433641b95dd330a33185a446003600073903560b1cce601794c584f58898da8a8b789fc5d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730316eb71485b0ab14103307bf65a021042c6d3806003600073054b7ed3f45714d3091e82aad64a1588dc4096ed6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550739afb950948c2370975fb91a441f36fdc02737cd46003600073d5103afcd0b3fa865997ef2984c66742c51b2a8b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073cbc1065255cbc3ab41a6868c22d1f1c573ab89fd6003600073fd609a03b393f1a1cfcacedabf068cad09a924e26001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073df574c24545e5ffecb9a659c229253d4111d87e16003600073d692ac3245bb82319a31068d6b8412796ee85d2c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736b175474e89094c44da98b954eedeac495271d0f600360007392b767185fb3b04f881e3ac8e5b0662a027a1d9f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073584bc13c7d411c00c01a62e8019472de68768430600360007310a3da2bb0fae4d591476fd97d6636fd172923a86001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507336f3fd68e7325a35eb768f1aedaae9ea0689d72360036000733c6c553a95910f9fc81c98784736bd628636d2966001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073111111111117dc0aa78b770fa6a738034120c302600360007385759961b116f1d36fd697855c57a6ae40793d9b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073d26114cd6ee289accf82350c8d8487fedb8a0c0760036000737aaa323d7e398be4128c7042d197a2545f0f1fea6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073bb2b8038a1640196fbe3e38816f3e67cba72d9406003600073011a014d5e8eb4771e575bb1000318d509230afa6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730d4a11d5eeaac28ec3f61d100daf4d40471f18526003600073e6c3120f38f56deb38b69b65cc7dcaf9163739636001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073b4e16d0168e52d35cacd2c6185b44281ec28c9dc60036000734fe11bc316b6d7a345493127fbe298b95adaad856001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a478c2975ab1ea89e8196811f51a7b7ade33eb116003600073cd22c4110c12ac41acefa0091c432ef44efaafa06001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738798249c2e607446efb7ad49ec89dd1865ff42726003600073228619cca194fbe3ebeb2f835ec1ea5080dafbb26001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ceff51756c56ceffca006cd410b03ffc46dd3a58600360007373f6cba38922960b7092175c0add22ab8d0e81fc6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c3d03e4f041fd4cd388c549ee2a29a9e5075882f600360007338f27c03d6609a86ff7716ad03038881320be4ad6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073397ff1542f962076d0bfe58ea045ffa2d347aca060036000735ecad8a75216cea7dff978525b2d523a251eea926001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507306da0fd433c1a5d7a4faa01111c044910a18455360036000735c291bc83d15f71fb37805878161718ea4b6aee96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073795065dcc9f64b5614c407a6efdc400da6221fb060036000736ba0c66c48641e220cf78177c144323b3838d3756001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073088ee5007c98a9677165d78dd2109ae4a3d04d0c6003600073d532944df6dfd5dd629e8772f03d4fc861873abf6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550732260fac5e5542a773aa44fbcfedf7c193bc2c5996003600073197070723ce0d3810a0e47f06e935c30a480d4fc6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c011a73ee8576fb46f5e1c5751ca3b9fe0af2a6f6003600073c25eae724f189ba9030b2556a1533e7c8a732e146001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507357ab1ec28d129707052df4df418d58a2d46d5f51600360007325555933a8246ab67cbf907ce3d1949884e82b556001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073429881672b9ae42b8eba0e26cd9c73711b891ca56003600073c68251421edda00a10815e273fa4b1191fac651b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738ab7404063ec4dbcfd4598215992dc3f8ec853d7600360007365883978ada0e707c3b2be2a6825b1c4bdf76a906001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507319d97d8fa813ee2f51ad4b4e04ea08baf4dffc2860036000738b950f43fcac4931d408f1fcda55c6cb6cbf30966001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738207c1ffc5b6804f6024322ccf34f29c3541ae26600360007359089279987dd76fc65bf94cb40e186b96e03cb36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ff20817765cb7f73d4bde2e66e067e58d11095c260036000732db6c82ce72c8d7d770ba1b5f5ed0b6e075066d66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073853d955acef822db058eb8505911ed77f175b99e6003600073b092b4601850e23903a42eacbc9d8a0eec26a4d56001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a1faa113cbe53436df28ff0aee54275c13b4097560036000731d0986fb43985c88ffa9ad959cc24e6a087c7e356001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a47c8bf37f92abed4a126bda807a7b7498661acd600360007351f48b638f82e8765f7a26373a2cb4ccb10c07af6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734e15361fd6b4bb609fa63c81a2be19d8737178706003600073c36080892c64821fa8e396bc1bd8678fa3b82b176001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550733155ba85d5f96b2d030a4966af206230e46849cb60036000738379baa817c5c5ab929b03ee8e3c48e45018ae416001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073bc396689893d065f41bc2c6ecbee5e00852334476003600073299e254a8a165bbeb76d9d69305013329eea3a3b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507303ab458634910aad20ef5f1c8ee96f1d6ac549196003600073f8445c529d363ce114148662387eba5e62016e206001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073967da4048cd07ab37855c090aaf366e4ce1b9f4860036000737c3297cfb4c4bbd5f44b450c0872e0ada52031126001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073fca59cd816ab1ead66534d82bc21e7515ce441cf6003600073081fe64df6dc6fc70043aedf3713a3ce6f190a216001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073b753428af26e81097e7fd17f40c88aaa3e04902c600360007328526bb33d7230e65e735db64296413731c5402e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507327b7b1ad7288079a66d12350c828d3c00a6f07d7600360007345406ba53bb84cd32a58e7098a2d4d1b11b107f66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073986b4aff588a109c09b50a03f42e4110e29d353f60036000736d1b9e01af17dd08d6dec08e210dfd5984ff1c206001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073dcd90c7f6324cfa40d7169ef80b12031770b432560036000731f9b4756b008106c806c7e64322d7ed3b72cb2846001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731337def16f9b486faed0293eb623dc8395dfe46a6003600073ab10586c918612ba440482db77549d26b7abf8f76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731337def18c680af1f9f45cbcab6309562975b1dd6003600073dfff11dfe6436e42a17b86e7f419ac82929903936001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ec67005c4e498ec7f55e092bd1d35cbc47c918926003600073dbb5e3081def4b6cdd8864ac2aeda4cbf778fecf6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731b40183efb4dd766f11bda7a7c3ad8982e998421600360007371cefcd324b732d4e058afacba040d908c4418476001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073ba4cfe5741b357fa371b506e5db0774abfecf8fc60036000731a122348b73b58ea39f822a89e6ec67950c2bbd06001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550736810e776880c02933d47db1b9fc05908e5386b966003600073523effc8bfefc2948211a05a905f761cba5e8e9e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073a9fe4601811213c340e850ea305481aff02f5b2860036000734202d97e00b9189936edf37f8d01cff88bdd81d46001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734baa77013ccd6705ab0522853cb0e9d453579dd460036000734baa77013ccd6705ab0522853cb0e9d453579dd46001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073cc4304a31d09258b0029ea7fe63d032f52e44efe600360007398e329eb5aae2125af273102f3440de19094b77c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073956f47f50a910163d8bf957cf5846d573e7f87ca60036000738c3b7a4320ba70f8239f83770c4015b5bc4e6f916001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550734691937a7508860f876c9c0a2a617e7d9e945d4b6003600073e585c76573d7593abf21537b607091f76c996e736001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550731f573d6fb3f13d689ff844b4ce37794d79a7ff1c600360007381e346729723c4d15d0fb1c5679b9f2926ff13c66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073c581b735a1688071a1746c968e0798d642ede4916003600073c581b735a1688071a1746c968e0798d642ede4916001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550738e870d67f660d95d5be530380d0ec0bd388289e16003600073d7394428536f63d5659cc869ef69d10f9e66314b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507345804880de22913dafe09f4980848ece6ecbaf7860036000731241b10e7ea55b22f5b2d007e8fecdf73dcff9996001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550739be89d2a4cd102d8fecc6bf9da793be995c2254160036000732a867fd776b83e1bd4e13c6611afd2f6af07ea6d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506e095413afc295d19edeb1ad7b71c9526003600073250fb308199fe8c5220509c1bf83d21d60b7f74a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055507325f8087ead173b73d6e8b84329989a8eea16cf7360036000734112a717edd051f77d834a6703a1ef5e3d73387f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555073bb0e17ef65f82ab018d8edd776e8dd940327b28b6003600073f04ce2e71d32d789a259428ddcd02d3c9f97fb4e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550733845badade8e6dff049820680d1f14bd3903a5d0600360007389e42987c39f72e2ead95a8a5bc92114323d58286001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b03160217905550730f5d2fb29fb7d3cfee444a200298f468908cc942600360007358da9c9fc3eb30abbcbbab5ddabb1e6e2ef3d2ef6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506001600460007357ab1ec28d129707052df4df418d58a2d46d5f516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073d2df355c19471c8bd7d8a3aa27ff4e26a21b40766001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073e36e2d3c7c34281fa3bc737950a68571736880a16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073f48e200eaf9906362bb1442fca31e0835773b8b46001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073fe18be6b3bd88a2d2a7f928d00292e7a9963cfc66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000730f83287ff768d1c1e17a42f44d644d7f22e8ee1d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073d38aeb759891882e78e957c80656572503d8c1b16001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073fe33ae95a9f0da8a845af33516edc240dcd711d66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000731715ac0743102bf5cd58efbb6cf2dc2685d967b66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160046000735e74c9036fb86bd7ecdcb084a0673efc32ea31cb6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073104edf1da359506548bfc7c25ba1e28c16a702356001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073d71ecff9342a5ced620049e616c5035f1db986206001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600460007397fe22e7341a0cd8db6f6c021a24dc8f4dad855f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073f6b1c627e95bfc3c1b4c9b825a032ff0fbf3e07d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073269895a3df4d73b077fc823dd6da1b95f72aaf9b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016004600073bbc455cb4f1b9e4bfc4b73970d360c8f032efee66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073c5bddf9843308380375a611c18b50fb9341f502a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000739d409a0a012cfba9b15f6d4b36ac57a46966ab9a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073db25ca703181e7484a155dd612b06f57e12be5f06001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073f29ae508698bdef169b89834f76704c3b205aedf6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073873fb544277fd7b977b196a826459a69e27ea4ea6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073671a912c10bba0cfa74cfc2d6fba9ba1ed9530b26001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073a5ca62d95d24a4a350983d5b8ac4eb86388873966001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073b8c3b7a2a618c552c23b1e4701109a9e756bab676001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073a258c4606ca8206d8aa700ce2143d7db854d168c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000735f18c75abdae578b483e5f43f12a39cf75b973a96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073da816459f1ab5631232fe5e97a05bbbb94970c956001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073a696a63cc78dffa1a63e9e50587c197387ff6c7e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000737da96a3891add058ada2e826306d812c638d87a76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073fbeb78a723b8087fd2ea7ef1afec93d35e8bed426001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073d9788f3931ede4d5018184e198699dc6d66c19156001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000734a3fe75762017db0ed73a71c9a06db7768db5e666001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000736d765cbe5bc922694afe112c140b8878b9fb03906001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073fd0877d9095789caf24c98f7cce092fa8e1207756001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073e537b5cc158eb71037d4125bdd7538421981e6aa6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000736fafca7f49b4fd9dc38117469cd31a1e5aec91f56001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073718abe90777f5b778b52d553a5abaa148dd0dc5d6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000738b9c0c24307344b6d7941ab654b2aeee253474736001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073d8c620991b8e626c099eaab29b1e3eea279763bb6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000730d4ea8536f9a13e4fba16042a46c30f092b06aa56001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000732dfb14e32e2f8156ec15a2c21c3a6c053af52be86001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000734560b99c904aad03027b5178cca81584744ac01f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007367e019bfbd5a67207755d04467d6a70c0b75bf606001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073528d50dc9a333f01544177a924893fa1f5b9f7486001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073595a68a8c9d5c230001848b69b1947ee2a6071646001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000731b905331f7de2748f4d6a0678e1521e20347643f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073490bd0886f221a5f79713d3e84404355a9293c506001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007359518884eebfb03e90a18adbaaab770d4666471e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000738cc94ccd0f3841a468184aca3cc478d2148e17576001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073625b7df2fa8abe21b0a976736cda4775523aed1e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000733d27705c64213a5dcd9d26880c1bcfa72d5b6b0e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007380bbee2fa460da291e796b9045e93d19ef948c6a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073c116df49c02c5fd147de25baa105322ebf26bd976001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007328a5b95c101df3ded0c0d9074db80c438774b6a96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000733d980e50508cfd41a13837a60149927a11c037316001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007325212df29073fffa7a67399acefc2dd75a831a1a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000735a770dbd3ee6baf2802d29a901ef11501c44797a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007339caf13a104ff567f71fd2a4c68c026fdb6e740b6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073054af22e1519b020516d72d749221c24756385c96001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000733b96d491f067912d18563d56858ba7d6ec67a6fa6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073bfedbcbe27171c418cdabc2477042554b19048576001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073132d8d2c76db3812403431facb00f3453fc421256001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073f2db9a7c0acd427a680d640f02d90f6186e717256001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073a74d4b67b3368e83797a35382afb776baae4f5c86001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073c4daf3b5e2a9e93861c3fbdd25f1e943b8d874176001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000731c6a9783f812b3af3abbf7de64c3cd7cc7d1af446001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007330fcf7c6cdfc46ec237783d94fc78553e79d4e9c6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073f8768814b88281de4f532a3beefa5b85b69b93246001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000734b5bfd52124784745c1071dcb244c6688d2533d36001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007384e13785b5a27879921d6f685f041421c7f482da6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000732a38b9b0201ca39b17b460ed2f11e4929559071e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007327b7b1ad7288079a66d12350c828d3c00a6f07d76001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073986b4aff588a109c09b50a03f42e4110e29d353f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073dcd90c7f6324cfa40d7169ef80b12031770b43256001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000738414db07a7f743debafb402070ab01a4e0d2e45e6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000737047f90229a057c13bf847c0744d646cfb6c9e1a6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073e9dc63083c464d6edccff23444ff3cfc6886f6fb6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000733c5df3077bcf800640b5dae8c91106575a4826e66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560007323d3d0f1c697247d5e0a9efb37d8b0ed0c464f7f6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073b4ada607b9d6b2c9ee07a275e9616b84ac5601396001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000735fa5b62c8af877cb37031e0a3b2f34a78e3c56a66001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073b4d1be44bff40ad6e506edf43156577a3f8672ec6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000738fa3a9ecd9efb07a8ce90a6eb014cf3c0e3b32ef6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000736ede7f19df5df6ef23bd5b9cedb651580bdf56ca6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000732994529c0652d127b7842094103715ec5299bbed6001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600073d6ea40597be05c201845c0bfd2e96a60bacde2676001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff0219169083151502179055505061131e8061596b6000396000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c80639f087dd611610081578063e166fa901161005b578063e166fa901461056d578063e21ead9b146105da578063f77c479114610600576100d4565b80639f087dd6146104e75780639fb5305014610521578063a622ee7c14610547576100d4565b80637031932a116100b25780637031932a1461032157806371f0706b146103e3578063780c2067146104a5576100d4565b80630d4cfeb6146100d9578063520874ed1461019d5780635bda818b1461025f575b600080fd5b61019b600480360360408110156100ef57600080fd5b81019060208101813564010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b91939092909160208101903564010000000081111561015c57600080fd5b82018360208201111561016e57600080fd5b8035906020019184602083028401116401000000008311171561019057600080fd5b509092509050610608565b005b61019b600480360360408110156101b357600080fd5b8101906020810181356401000000008111156101ce57600080fd5b8201836020820111156101e057600080fd5b8035906020019184602083028401116401000000008311171561020257600080fd5b91939092909160208101903564010000000081111561022057600080fd5b82018360208201111561023257600080fd5b8035906020019184602083028401116401000000008311171561025457600080fd5b5090925090506106ae565b61019b6004803603604081101561027557600080fd5b81019060208101813564010000000081111561029057600080fd5b8201836020820111156102a257600080fd5b803590602001918460208302840111640100000000831117156102c457600080fd5b9193909290916020810190356401000000008111156102e257600080fd5b8201836020820111156102f457600080fd5b8035906020019184602083028401116401000000008311171561031657600080fd5b50909250905061074d565b61019b6004803603604081101561033757600080fd5b81019060208101813564010000000081111561035257600080fd5b82018360208201111561036457600080fd5b8035906020019184602083028401116401000000008311171561038657600080fd5b9193909290916020810190356401000000008111156103a457600080fd5b8201836020820111156103b657600080fd5b803590602001918460208302840111640100000000831117156103d857600080fd5b5090925090506107cb565b61019b600480360360408110156103f957600080fd5b81019060208101813564010000000081111561041457600080fd5b82018360208201111561042657600080fd5b8035906020019184602083028401116401000000008311171561044857600080fd5b91939092909160208101903564010000000081111561046657600080fd5b82018360208201111561047857600080fd5b8035906020019184602083028401116401000000008311171561049a57600080fd5b50909250905061086a565b6104cb600480360360208110156104bb57600080fd5b50356001600160a01b03166108e8565b604080516001600160a01b039092168252519081900360200190f35b61050d600480360360208110156104fd57600080fd5b50356001600160a01b0316610903565b604080519115158252519081900360200190f35b6104cb6004803603602081101561053757600080fd5b50356001600160a01b0316610918565b61050d6004803603602081101561055d57600080fd5b50356001600160a01b0316610933565b6105a56004803603606081101561058357600080fd5b506001600160a01b038135811691602081013582169160409091013516610948565b6040805160ff95861681529390941660208401526001600160a01b039182168385015216606082015290519081900360800190f35b6104cb600480360360208110156105f057600080fd5b50356001600160a01b0316611137565b6104cb611152565b60005461061d906001600160a01b0316611161565b60005b838110156106a75782828281811061063457fe5b905060200201356001600160a01b03166002600087878581811061065457fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff199093169290921790915550600101610620565b5050505050565b6000546106c3906001600160a01b0316611161565b60005b838110156106a7578282828181106106da57fe5b905060200201356001600160a01b0316600160008787858181106106fa57fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff1990931692909217909155506001016106c6565b600054610762906001600160a01b0316611161565b60005b838110156106a75782828281811061077957fe5b9050602002013515156004600087878581811061079257fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610765565b6000546107e0906001600160a01b0316611161565b60005b838110156106a7578282828181106107f757fe5b905060200201356001600160a01b03166003600087878581811061081757fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff1990931692909217909155506001016107e3565b60005461087f906001600160a01b0316611161565b60005b838110156106a75782828281811061089657fe5b905060200201351515600560008787858181106108af57fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610882565b6003602052600090815260409020546001600160a01b031681565b60046020526000908152604090205460ff1681565b6001602052600090815260409020546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b0383811660009081526001602052604081205490918291829182918291829182918291161561099c576001600160a01b03808c166000908152600160208190526040909120549095501691505b6001600160a01b038a811660009081526001602052604090205416156109df57506001600160a01b03808a16600090815260016020819052604090912054909350165b6001600160a01b038b81166000908152600260205260409020541615610a23576001600160a01b03808c166000908152600260208190526040909120549095501691505b6001600160a01b038a81166000908152600260205260409020541615610a6657506001600160a01b03808a16600090815260026020819052604090912054909350165b6001600160a01b038b81166000908152600360205260409020541615610aaa576001600160a01b03808c166000908152600360208190526040909120549095501691505b6001600160a01b038a81166000908152600360205260409020541615610aed57506001600160a01b03808a16600090815260036020819052604090912054909350165b6001600160a01b038b1660009081526004602052604090205460ff1615610b1357600493505b6001600160a01b038a1660009081526004602052604090205460ff1615610b3957600492505b60008460ff16118015610b4f575060008360ff16115b15610b63579296509094509250905061112e565b60ff8416610bfe576000896001600160a01b03166324a592338d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d6020811015610be457600080fd5b505190506001600160a01b03811615610bfc57600594505b505b60ff8316610c99576000896001600160a01b03166324a592338c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b505190506001600160a01b03811615610c9757600593505b505b610ca28b6112a0565b15610cac57600693505b610cb58a6112a0565b15610cbf57600692505b6001600160a01b038b1673ae7ab96520de3a18e5e111b5eaab095312d7fe841480610d0657506001600160a01b038b16737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0145b15610d1057600793505b6001600160a01b038a1673ae7ab96520de3a18e5e111b5eaab095312d7fe841480610d5757506001600160a01b038a16737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0145b15610d6157600792505b60008460ff16118015610d77575060008360ff16115b15610d8b579296509094509250905061112e565b60ff8416610f575760008b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e0b57600080fd5b8101908080516040519392919084640100000000821115610e2b57600080fd5b908301906020820185811115610e4057600080fd5b8251640100000000811182820188101715610e5a57600080fd5b82525081516020918201929091019080838360005b83811015610e87578181015183820152602001610e6f565b50505050905090810190601f168015610eb45780820380516001836020036101000a031916815260200191505b506040818101905260038152620534c560ec1b6020918201528451908501209394505050507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610f0557600894505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610f5557600994505b505b60ff83166111235760008a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9a57600080fd5b505afa158015610fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610fd757600080fd5b8101908080516040519392919084640100000000821115610ff757600080fd5b90830190602082018581111561100c57600080fd5b825164010000000081118282018810171561102657600080fd5b82525081516020918201929091019080838360005b8381101561105357818101518382015260200161103b565b50505050905090810190601f1680156110805780820380516001836020036101000a031916815260200191505b506040818101905260038152620534c560ec1b6020918201528451908501209394505050507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d74514156110d157600893505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255141561112157600993505b505b929650909450925090505b93509350935093565b6002602052600090815260409020546001600160a01b031681565b6000546001600160a01b031681565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d60208110156111c457600080fd5b50516001600160a01b03163314806112485750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d602081101561123a57600080fd5b50516001600160a01b031633145b61129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806112bf602a913960400191505060405180910390fd5b50565b6001600160a01b031660009081526005602052604090205460ff169056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220c392221858fd9a326d8389a8f0af4e084664851a2936b2173c94d5cf3afc9de364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c80639f087dd611610081578063e166fa901161005b578063e166fa901461056d578063e21ead9b146105da578063f77c479114610600576100d4565b80639f087dd6146104e75780639fb5305014610521578063a622ee7c14610547576100d4565b80637031932a116100b25780637031932a1461032157806371f0706b146103e3578063780c2067146104a5576100d4565b80630d4cfeb6146100d9578063520874ed1461019d5780635bda818b1461025f575b600080fd5b61019b600480360360408110156100ef57600080fd5b81019060208101813564010000000081111561010a57600080fd5b82018360208201111561011c57600080fd5b8035906020019184602083028401116401000000008311171561013e57600080fd5b91939092909160208101903564010000000081111561015c57600080fd5b82018360208201111561016e57600080fd5b8035906020019184602083028401116401000000008311171561019057600080fd5b509092509050610608565b005b61019b600480360360408110156101b357600080fd5b8101906020810181356401000000008111156101ce57600080fd5b8201836020820111156101e057600080fd5b8035906020019184602083028401116401000000008311171561020257600080fd5b91939092909160208101903564010000000081111561022057600080fd5b82018360208201111561023257600080fd5b8035906020019184602083028401116401000000008311171561025457600080fd5b5090925090506106ae565b61019b6004803603604081101561027557600080fd5b81019060208101813564010000000081111561029057600080fd5b8201836020820111156102a257600080fd5b803590602001918460208302840111640100000000831117156102c457600080fd5b9193909290916020810190356401000000008111156102e257600080fd5b8201836020820111156102f457600080fd5b8035906020019184602083028401116401000000008311171561031657600080fd5b50909250905061074d565b61019b6004803603604081101561033757600080fd5b81019060208101813564010000000081111561035257600080fd5b82018360208201111561036457600080fd5b8035906020019184602083028401116401000000008311171561038657600080fd5b9193909290916020810190356401000000008111156103a457600080fd5b8201836020820111156103b657600080fd5b803590602001918460208302840111640100000000831117156103d857600080fd5b5090925090506107cb565b61019b600480360360408110156103f957600080fd5b81019060208101813564010000000081111561041457600080fd5b82018360208201111561042657600080fd5b8035906020019184602083028401116401000000008311171561044857600080fd5b91939092909160208101903564010000000081111561046657600080fd5b82018360208201111561047857600080fd5b8035906020019184602083028401116401000000008311171561049a57600080fd5b50909250905061086a565b6104cb600480360360208110156104bb57600080fd5b50356001600160a01b03166108e8565b604080516001600160a01b039092168252519081900360200190f35b61050d600480360360208110156104fd57600080fd5b50356001600160a01b0316610903565b604080519115158252519081900360200190f35b6104cb6004803603602081101561053757600080fd5b50356001600160a01b0316610918565b61050d6004803603602081101561055d57600080fd5b50356001600160a01b0316610933565b6105a56004803603606081101561058357600080fd5b506001600160a01b038135811691602081013582169160409091013516610948565b6040805160ff95861681529390941660208401526001600160a01b039182168385015216606082015290519081900360800190f35b6104cb600480360360208110156105f057600080fd5b50356001600160a01b0316611137565b6104cb611152565b60005461061d906001600160a01b0316611161565b60005b838110156106a75782828281811061063457fe5b905060200201356001600160a01b03166002600087878581811061065457fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff199093169290921790915550600101610620565b5050505050565b6000546106c3906001600160a01b0316611161565b60005b838110156106a7578282828181106106da57fe5b905060200201356001600160a01b0316600160008787858181106106fa57fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff1990931692909217909155506001016106c6565b600054610762906001600160a01b0316611161565b60005b838110156106a75782828281811061077957fe5b9050602002013515156004600087878581811061079257fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610765565b6000546107e0906001600160a01b0316611161565b60005b838110156106a7578282828181106107f757fe5b905060200201356001600160a01b03166003600087878581811061081757fe5b6001600160a01b036020918202939093013583168452830193909352604090910160002080549390911673ffffffffffffffffffffffffffffffffffffffff1990931692909217909155506001016107e3565b60005461087f906001600160a01b0316611161565b60005b838110156106a75782828281811061089657fe5b905060200201351515600560008787858181106108af57fe5b602090810292909201356001600160a01b0316835250810191909152604001600020805460ff1916911515919091179055600101610882565b6003602052600090815260409020546001600160a01b031681565b60046020526000908152604090205460ff1681565b6001602052600090815260409020546001600160a01b031681565b60056020526000908152604090205460ff1681565b6001600160a01b0383811660009081526001602052604081205490918291829182918291829182918291161561099c576001600160a01b03808c166000908152600160208190526040909120549095501691505b6001600160a01b038a811660009081526001602052604090205416156109df57506001600160a01b03808a16600090815260016020819052604090912054909350165b6001600160a01b038b81166000908152600260205260409020541615610a23576001600160a01b03808c166000908152600260208190526040909120549095501691505b6001600160a01b038a81166000908152600260205260409020541615610a6657506001600160a01b03808a16600090815260026020819052604090912054909350165b6001600160a01b038b81166000908152600360205260409020541615610aaa576001600160a01b03808c166000908152600360208190526040909120549095501691505b6001600160a01b038a81166000908152600360205260409020541615610aed57506001600160a01b03808a16600090815260036020819052604090912054909350165b6001600160a01b038b1660009081526004602052604090205460ff1615610b1357600493505b6001600160a01b038a1660009081526004602052604090205460ff1615610b3957600492505b60008460ff16118015610b4f575060008360ff16115b15610b63579296509094509250905061112e565b60ff8416610bfe576000896001600160a01b03166324a592338d6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610bba57600080fd5b505afa158015610bce573d6000803e3d6000fd5b505050506040513d6020811015610be457600080fd5b505190506001600160a01b03811615610bfc57600594505b505b60ff8316610c99576000896001600160a01b03166324a592338c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610c5557600080fd5b505afa158015610c69573d6000803e3d6000fd5b505050506040513d6020811015610c7f57600080fd5b505190506001600160a01b03811615610c9757600593505b505b610ca28b6112a0565b15610cac57600693505b610cb58a6112a0565b15610cbf57600692505b6001600160a01b038b1673ae7ab96520de3a18e5e111b5eaab095312d7fe841480610d0657506001600160a01b038b16737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0145b15610d1057600793505b6001600160a01b038a1673ae7ab96520de3a18e5e111b5eaab095312d7fe841480610d5757506001600160a01b038a16737f39c581f595b53c5cb19bd0b3f8da6c935e2ca0145b15610d6157600792505b60008460ff16118015610d77575060008360ff16115b15610d8b579296509094509250905061112e565b60ff8416610f575760008b6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610dce57600080fd5b505afa158015610de2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610e0b57600080fd5b8101908080516040519392919084640100000000821115610e2b57600080fd5b908301906020820185811115610e4057600080fd5b8251640100000000811182820188101715610e5a57600080fd5b82525081516020918201929091019080838360005b83811015610e87578181015183820152602001610e6f565b50505050905090810190601f168015610eb45780820380516001836020036101000a031916815260200191505b506040818101905260038152620534c560ec1b6020918201528451908501209394505050507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610f0557600894505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610f5557600994505b505b60ff83166111235760008a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610f9a57600080fd5b505afa158015610fae573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610fd757600080fd5b8101908080516040519392919084640100000000821115610ff757600080fd5b90830190602082018581111561100c57600080fd5b825164010000000081118282018810171561102657600080fd5b82525081516020918201929091019080838360005b8381101561105357818101518382015260200161103b565b50505050905090810190601f1680156110805780820380516001836020036101000a031916815260200191505b506040818101905260038152620534c560ec1b6020918201528451908501209394505050507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d74514156110d157600893505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba563255141561112157600993505b505b929650909450925090505b93509350935093565b6002602052600090815260409020546001600160a01b031681565b6000546001600160a01b031681565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561119a57600080fd5b505afa1580156111ae573d6000803e3d6000fd5b505050506040513d60208110156111c457600080fd5b50516001600160a01b03163314806112485750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b15801561121057600080fd5b505afa158015611224573d6000803e3d6000fd5b505050506040513d602081101561123a57600080fd5b50516001600160a01b031633145b61129d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a8152602001806112bf602a913960400191505060405180910390fd5b50565b6001600160a01b031660009081526005602052604090205460ff169056fe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a2646970667358221220c392221858fd9a326d8389a8f0af4e084664851a2936b2173c94d5cf3afc9de364736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Returns the type of the asset",
    "kind": "dev",
    "methods": {
      "identifyTokens(address,address,address)": {
        "params": {
          "_tokenIn": "Address of the first token",
          "_tokenOut": "Address of the second token"
        },
        "returns": {
          "_0": "(uint8,uint8)        Types of both tokens"
        }
      }
    },
    "title": "TokenIdentifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "identifyTokens(address,address,address)": {
        "notice": "Returns the types of the two tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 20983,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IBabController)42522"
      },
      {
        "astId": 20987,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "cTokenToAsset",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20991,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "aTokenToAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20995,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "crTokenToAsset",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 20999,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "synths",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 21003,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "vaults",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBabController)42522": {
        "encoding": "inplace",
        "label": "contract IBabController",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}