{
  "address": "0x21c056b317037054fd78940F9ADea338B6668DC8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IPickleJarRegistry",
          "name": "_jarRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IYearnVaultRegistry",
          "name": "_vaultRegistry",
          "type": "address"
        },
        {
          "internalType": "contract ICurveMetaRegistry",
          "name": "_curveMetaRegistry",
          "type": "address"
        },
        {
          "internalType": "contract IConvexRegistry",
          "name": "_convexRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aTokenToAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "cTokenToAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "convexPools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "convexRegistry",
      "outputs": [
        {
          "internalType": "contract IConvexRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "curveMetaRegistry",
      "outputs": [
        {
          "internalType": "contract ICurveMetaRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        }
      ],
      "name": "identifyTokens",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "jarRegistry",
      "outputs": [
        {
          "internalType": "contract IPickleJarRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "jars",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "pickleGauges",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshAAveReserves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "refreshCompoundTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_aaveTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "updateAavePair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_cTokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "_underlyings",
          "type": "address[]"
        }
      ],
      "name": "updateCompoundPair",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateConvexPools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePickleJars",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_visors",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_values",
          "type": "bool[]"
        }
      ],
      "name": "updateVisor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_vaults",
          "type": "address[]"
        },
        {
          "internalType": "bool[]",
          "name": "_values",
          "type": "bool[]"
        }
      ],
      "name": "updateYearnVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateYearnVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultRegistry",
      "outputs": [
        {
          "internalType": "contract IYearnVaultRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "visors",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xda268232b6eda5598422ac7d4c44720f606d79428bd1e47f576db7c3ec5fd509",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x21c056b317037054fd78940F9ADea338B6668DC8",
    "transactionIndex": 64,
    "gasUsed": "13708930",
    "logsBloom": "0x
    "blockHash": "0xd18fd79730985632e73722bf829213c6a8d3e2a2c22086bbee18d875943bc6f3",
    "transactionHash": "0xda268232b6eda5598422ac7d4c44720f606d79428bd1e47f576db7c3ec5fd509",
    "logs": [],
    "blockNumber": 14875845,
    "cumulativeGasUsed": "17635725",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0xB3fE136A9Cc0c0Bc37e31E21f681E7Cff8FcCE80",
    "0x61c733fE0Eb89b75440A21cD658C4011ec512EB8",
    "0x6897E6A2ABaD74738E51832ca85b1a9E3e3e4C08",
    "0xB95d213cdDBd256D3B9ae98b21CC6B9D8a1818ef"
  ],
  "numDeployments": 7,
  "solcInputHash": "1fc0761e8252e23a98ec5ddcb26779bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IPickleJarRegistry\",\"name\":\"_jarRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IYearnVaultRegistry\",\"name\":\"_vaultRegistry\",\"type\":\"address\"},{\"internalType\":\"contract ICurveMetaRegistry\",\"name\":\"_curveMetaRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IConvexRegistry\",\"name\":\"_convexRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aTokenToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"cTokenToAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"convexPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"convexRegistry\",\"outputs\":[{\"internalType\":\"contract IConvexRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"curveMetaRegistry\",\"outputs\":[{\"internalType\":\"contract ICurveMetaRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"}],\"name\":\"identifyTokens\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"jarRegistry\",\"outputs\":[{\"internalType\":\"contract IPickleJarRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"jars\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"pickleGauges\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshAAveReserves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"refreshCompoundTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_aaveTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"updateAavePair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_cTokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"_underlyings\",\"type\":\"address[]\"}],\"name\":\"updateCompoundPair\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateConvexPools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePickleJars\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_visors\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateVisor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_vaults\",\"type\":\"address[]\"},{\"internalType\":\"bool[]\",\"name\":\"_values\",\"type\":\"bool[]\"}],\"name\":\"updateYearnVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateYearnVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultRegistry\",\"outputs\":[{\"internalType\":\"contract IYearnVaultRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"visors\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Returns the type of the asset\",\"kind\":\"dev\",\"methods\":{\"identifyTokens(address,address)\":{\"params\":{\"_tokenIn\":\"Address of the first token\",\"_tokenOut\":\"Address of the second token\"},\"returns\":{\"_0\":\"(uint8,uint8)        Types of both tokens\"}}},\"title\":\"TokenIdentifier\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"identifyTokens(address,address)\":{\"notice\":\"Returns the types of the two tokens\"},\"refreshAAveReserves()\":{\"notice\":\"Refreshes all aave mappings from protocol data provider on mainnetx\"},\"refreshCompoundTokens()\":{\"notice\":\"Refreshes all ctoken mappings from compound comptroller\"},\"updateConvexPools()\":{\"notice\":\"Refreshes all convex pools from the registry\"},\"updatePickleJars()\":{\"notice\":\"Refreshes all pickle jars from our registry\"},\"updateVisor(address[],bool[])\":{\"notice\":\"Adds/deletes visor vaults\"},\"updateYearnVaults()\":{\"notice\":\"Refreshes all yearn vaults from our registry\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TokenIdentifier.sol\":\"TokenIdentifier\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/TokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {ICToken} from './interfaces/external/compound/ICToken.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {ITokenIdentifier} from './interfaces/ITokenIdentifier.sol';\\nimport {IProtocolDataProvider} from './interfaces/external/aave/IProtocolDataProvider.sol';\\nimport {AaveToken} from './interfaces/external/aave/AaveToken.sol';\\nimport {IComptroller} from './interfaces/external/compound/IComptroller.sol';\\nimport {IBooster} from './interfaces/external/convex/IBooster.sol';\\nimport {IConvexRegistry} from './interfaces/IConvexRegistry.sol';\\nimport {ICurveMetaRegistry} from './interfaces/ICurveMetaRegistry.sol';\\nimport {IPickleJarRegistry} from './interfaces/IPickleJarRegistry.sol';\\nimport {IYearnVaultRegistry} from './interfaces/IYearnVaultRegistry.sol';\\nimport {ICurvePoolV3} from './interfaces/external/curve/ICurvePoolV3.sol';\\nimport {IMooniswap} from './interfaces/external/1inch/IMooniswap.sol';\\nimport {IYearnVault} from './interfaces/external/yearn/IYearnVault.sol';\\nimport {IStETH} from './interfaces/external/lido/IStETH.sol';\\nimport {IWstETH} from './interfaces/external/lido/IWstETH.sol';\\n\\nimport {ControllerLib} from './lib/ControllerLib.sol';\\n\\n/**\\n * @title TokenIdentifier\\n * @author Babylon Finance Protocol\\n *\\n * Returns the type of the asset\\n */\\ncontract TokenIdentifier is ITokenIdentifier {\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Constants ============ */\\n\\n    IComptroller private constant COMP_COMPTROLLER = IComptroller(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\\n    IProtocolDataProvider private constant AAVE_PROVIDER =\\n        IProtocolDataProvider(address(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d)); // Aave Mainnet\\n\\n    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IStETH private constant stETH = IStETH(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);\\n    IWstETH private constant wstETH = IWstETH(0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0);\\n    bytes32 private constant SUSHI_SYMBOL = keccak256(bytes('SLP'));\\n    bytes32 private constant UNI_SYMBOL = keccak256(bytes('UNI-V2'));\\n\\n    // Token Types\\n    uint8 private constant COMP_TOKEN = 1;\\n    uint8 private constant AAVE_TOKEN = 2;\\n    uint8 private constant CREAM_TOKEN = 3; // DEPRECATED\\n    uint8 private constant SYNTH_TOKEN = 4; // DEPRECATED\\n    uint8 private constant CURVE_LP_TOKEN = 5;\\n    uint8 private constant YEARN_TOKEN = 6;\\n    uint8 private constant LIDO_TOKEN = 7; // DEPRECATED\\n    uint8 private constant SUSHI_LP_TOKEN = 8;\\n    uint8 private constant UNIV2_LP_TOKEN = 9;\\n    uint8 private constant ONEINCH_LP_TOKEN = 10;\\n    uint8 private constant HARVESTV3_LP_TOKEN = 11;\\n    uint8 private constant VISOR_LP_TOKEN = 12;\\n    uint8 private constant PICKLE_JAR_TOKEN = 13;\\n    uint8 private constant PICKLE_JAR_TOKEN_V3 = 14;\\n    uint8 private constant PICKLE_JAR_GAUGE_TOKEN = 15;\\n    uint8 private constant CONVEX_TOKEN = 16;\\n    uint8 private constant CURVE_GAUGE_TOKEN = 17;\\n\\n    /* ============ State Variables ============ */\\n\\n    IBabController public immutable controller;\\n    IPickleJarRegistry public override jarRegistry;\\n    IYearnVaultRegistry public override vaultRegistry;\\n    ICurveMetaRegistry public override curveMetaRegistry;\\n    IConvexRegistry public override convexRegistry;\\n\\n    // Mapping of interest bearing aave tokens\\n    mapping(address => address) public override aTokenToAsset;\\n    // Mapping of interest bearing compound tokens\\n    mapping(address => address) public override cTokenToAsset;\\n    // Mapping of yearn vaults\\n    mapping(address => bool) public override vaults;\\n    // Mapping of gamma visors\\n    mapping(address => bool) public override visors;\\n    // Mapping of pickle jars\\n    mapping(address => uint8) public override jars;\\n    // Mapping of pickle gauges\\n    mapping(address => bool) public override pickleGauges;\\n    // Mapping of convex vaults\\n    mapping(address => bool) public override convexPools;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /* ============ Constructor ============ */\\n\\n    constructor(\\n        IBabController _controller,\\n        IPickleJarRegistry _jarRegistry,\\n        IYearnVaultRegistry _vaultRegistry,\\n        ICurveMetaRegistry _curveMetaRegistry,\\n        IConvexRegistry _convexRegistry\\n    ) {\\n        controller = _controller;\\n        jarRegistry = _jarRegistry;\\n        vaultRegistry = _vaultRegistry;\\n        curveMetaRegistry = _curveMetaRegistry;\\n        convexRegistry = _convexRegistry;\\n\\n        // Fetches and copies data for faster & cheaper reads\\n        _refreshAaveReserves();\\n        _refreshCompoundTokens();\\n        _refreshFuseTokens();\\n        _updateYearnVaults();\\n        _updatePickleJars();\\n        _updateConvexPools();\\n\\n        visors[0x705b3aCaF102404CfDd5e4A60535E4e70091273C] = true; // BABL-ETH Visor\\n        visors[0xf6eeCA73646ea6A5c878814e6508e87facC7927C] = true; // GAMMA-ETH Visor\\n        visors[0xc86B1e7FA86834CaC1468937cdd53ba3cCbC1153] = true; // FLOAT-ETH Visor\\n        visors[0x705b3aCaF102404CfDd5e4A60535E4e70091273C] = true; // BABL-ETH Visor\\n        visors[0xf6eeCA73646ea6A5c878814e6508e87facC7927C] = true; // GAMMA-ETH Visor\\n        visors[0xc86B1e7FA86834CaC1468937cdd53ba3cCbC1153] = true; // FLOAT-ETH Visor\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Refreshes all aave mappings from protocol data provider on mainnetx\\n     */\\n    function refreshAAveReserves() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _refreshAaveReserves();\\n    }\\n\\n    /**\\n     * Refreshes all ctoken mappings from compound comptroller\\n     */\\n    function refreshCompoundTokens() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _refreshCompoundTokens();\\n    }\\n\\n    /**\\n     * Refreshes all yearn vaults from our registry\\n     */\\n    function updateYearnVaults() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateYearnVaults();\\n    }\\n\\n    /**\\n     * Refreshes all pickle jars from our registry\\n     */\\n    function updatePickleJars() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updatePickleJars();\\n    }\\n\\n    /**\\n     * Refreshes all convex pools from the registry\\n     */\\n    function updateConvexPools() external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateConvexPools();\\n    }\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _vaults.length; i++) {\\n            vaults[_vaults[i]] = _values[i];\\n        }\\n    }\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _aaveTokens.length; i++) {\\n            aTokenToAsset[_aaveTokens[i]] = _underlyings[i];\\n        }\\n    }\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        for (uint256 i = 0; i < _cTokens.length; i++) {\\n            cTokenToAsset[_cTokens[i]] = _underlyings[i];\\n        }\\n    }\\n\\n    /**\\n     * Adds/deletes visor vaults\\n     */\\n    function updateVisor(address[] calldata _visors, bool[] calldata _values) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        _updateVisor(_visors, _values);\\n    }\\n\\n    /**\\n     * Returns the types of the two tokens\\n     * @param _tokenIn              Address of the first token\\n     * @param _tokenOut             Address of the second token\\n     * @return (uint8,uint8)        Types of both tokens\\n     */\\n    function identifyTokens(address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        override\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        )\\n    {\\n        uint8 tokenInType;\\n        uint8 tokenOutType;\\n        address finalAssetIn;\\n        address finalAssetOut;\\n\\n        // Compound\\n        if (cTokenToAsset[_tokenIn] != address(0)) {\\n            tokenInType = COMP_TOKEN;\\n            finalAssetIn = cTokenToAsset[_tokenIn];\\n        }\\n        if (cTokenToAsset[_tokenOut] != address(0)) {\\n            tokenOutType = COMP_TOKEN;\\n            finalAssetOut = cTokenToAsset[_tokenOut];\\n        }\\n\\n        // aave tokens. 1 to 1 with underlying\\n        if (aTokenToAsset[_tokenIn] != address(0)) {\\n            tokenInType = AAVE_TOKEN;\\n            finalAssetIn = aTokenToAsset[_tokenIn];\\n        }\\n        if (aTokenToAsset[_tokenOut] != address(0)) {\\n            tokenOutType = AAVE_TOKEN;\\n            finalAssetOut = aTokenToAsset[_tokenOut];\\n        }\\n\\n        // Checks visor\\n        if (visors[_tokenIn]) {\\n            tokenInType = VISOR_LP_TOKEN;\\n        }\\n\\n        if (visors[_tokenOut]) {\\n            tokenOutType = VISOR_LP_TOKEN;\\n        }\\n\\n        // Yearn vaults\\n        if (vaults[_tokenIn]) {\\n            tokenInType = YEARN_TOKEN;\\n        }\\n\\n        if (vaults[_tokenOut]) {\\n            tokenOutType = YEARN_TOKEN;\\n        }\\n\\n        // Pickle jars\\n        if (jars[_tokenIn] > 0) {\\n            tokenInType = jars[_tokenIn] == 1 ? PICKLE_JAR_TOKEN : PICKLE_JAR_TOKEN_V3;\\n        }\\n\\n        if (jars[_tokenOut] > 0) {\\n            tokenOutType = jars[_tokenOut] == 1 ? PICKLE_JAR_TOKEN : PICKLE_JAR_TOKEN_V3;\\n        }\\n\\n        // Pickle gauges\\n        if (pickleGauges[_tokenIn]) {\\n            tokenInType = PICKLE_JAR_GAUGE_TOKEN;\\n        }\\n\\n        if (pickleGauges[_tokenOut]) {\\n            tokenOutType = PICKLE_JAR_GAUGE_TOKEN;\\n        }\\n\\n        // Convex tokens\\n        if (convexPools[_tokenIn]) {\\n            tokenInType = CONVEX_TOKEN;\\n        }\\n\\n        if (convexPools[_tokenOut]) {\\n            tokenOutType = CONVEX_TOKEN;\\n        }\\n\\n        // Early exit\\n        if (tokenInType > 0 && tokenOutType > 0) {\\n            return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n        }\\n\\n        if (tokenInType == 0) {\\n            // Curve LP Token\\n            address crvPool = curveMetaRegistry.getPoolFromLpToken(_tokenIn);\\n            if (crvPool != address(0)) {\\n                tokenInType = CURVE_LP_TOKEN;\\n            }\\n        }\\n\\n        if (tokenOutType == 0) {\\n            address crvPool = curveMetaRegistry.getPoolFromLpToken(_tokenOut);\\n            if (crvPool != address(0)) {\\n                tokenOutType = CURVE_LP_TOKEN;\\n            }\\n        }\\n\\n        // Curve Gauge Tokens\\n        if (curveMetaRegistry.gaugeToPool(_tokenIn) != address(0)) {\\n            tokenInType = CURVE_GAUGE_TOKEN;\\n        }\\n\\n        if (curveMetaRegistry.gaugeToPool(_tokenOut) != address(0)) {\\n            tokenOutType = CURVE_GAUGE_TOKEN;\\n        }\\n\\n        // Early exit\\n        if (tokenInType > 0 && tokenOutType > 0) {\\n            return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n        }\\n\\n        // Check sushi pairs (univ2)\\n        if (tokenInType == 0) {\\n            string memory tokenInSymbol = ERC20(_tokenIn).symbol();\\n            if (keccak256(bytes(tokenInSymbol)) == SUSHI_SYMBOL) {\\n                tokenInType = SUSHI_LP_TOKEN;\\n            }\\n            // Checks univ2\\n            if (keccak256(bytes(tokenInSymbol)) == UNI_SYMBOL) {\\n                tokenInType = UNIV2_LP_TOKEN;\\n            }\\n        }\\n        if (tokenOutType == 0) {\\n            string memory tokenOutSymbol = ERC20(_tokenOut).symbol();\\n            if (keccak256(bytes(tokenOutSymbol)) == SUSHI_SYMBOL) {\\n                tokenOutType = SUSHI_LP_TOKEN;\\n            }\\n            if (keccak256(bytes(tokenOutSymbol)) == UNI_SYMBOL) {\\n                tokenOutType = UNIV2_LP_TOKEN;\\n            }\\n        }\\n\\n        return (tokenInType, tokenOutType, finalAssetIn, finalAssetOut);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _refreshAaveReserves() private {\\n        IProtocolDataProvider.TokenData[] memory atokens = AAVE_PROVIDER.getAllATokens();\\n        for (uint256 i = 0; i < atokens.length; i++) {\\n            aTokenToAsset[atokens[i].tokenAddress] = AaveToken(atokens[i].tokenAddress).UNDERLYING_ASSET_ADDRESS();\\n        }\\n    }\\n\\n    /**\\n     * Refreshes all ctoken mappings from compound comptroller\\n     */\\n    function _refreshCompoundTokens() private {\\n        address[] memory markets = COMP_COMPTROLLER.getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (markets[i] == 0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5) {\\n                cTokenToAsset[markets[i]] = WETH;\\n            } else {\\n                cTokenToAsset[markets[i]] = ICToken(markets[i]).underlying();\\n            }\\n        }\\n    }\\n\\n    function _refreshFuseTokens() private {\\n        address[] memory markets = IComptroller(0xC7125E3A2925877C7371d579D29dAe4729Ac9033).getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (markets[i] == 0x7DBC3aF9251756561Ce755fcC11c754184Af71F7) {\\n                cTokenToAsset[markets[i]] = WETH;\\n            } else {\\n                cTokenToAsset[markets[i]] = ICToken(markets[i]).underlying();\\n            }\\n        }\\n    }\\n\\n    /**\\n     * Refreshes all yearn vaults from our registry\\n     */\\n    function _updateYearnVaults() private {\\n        address[] memory yvaults = vaultRegistry.getAllVaults();\\n        for (uint256 i = 0; i < yvaults.length; i++) {\\n            vaults[yvaults[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * Refreshes all pickle jars from our registry\\n     */\\n    function _updatePickleJars() private {\\n        address[] memory pjars = jarRegistry.getAllJars();\\n        for (uint256 i = 0; i < pjars.length; i++) {\\n            jars[pjars[i]] = jarRegistry.isUniv3(pjars[i]) ? 2 : 1;\\n        }\\n        address[] memory pgauges = jarRegistry.getAllGauges();\\n        for (uint256 i = 0; i < pgauges.length; i++) {\\n            pickleGauges[pgauges[i]] = true;\\n        }\\n    }\\n\\n    /**\\n     * Adds/deletes visor vaults\\n     */\\n    function _updateVisor(address[] calldata _visors, bool[] calldata _values) private {\\n        for (uint256 i = 0; i < _visors.length; i++) {\\n            visors[_visors[i]] = _values[i];\\n        }\\n    }\\n\\n    /**\\n     * Updates convex vaults\\n     */\\n    function _updateConvexPools() private {\\n        address[] memory cpools = convexRegistry.getAllConvexPools();\\n        for (uint256 i = 0; i < cpools.length; i++) {\\n            convexPools[cpools[i]] = true;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfef96a2de00d474e4bb4f10bd9894d8fbc637b839092b2313f19291a6f8fe1cc\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function updateGardenAffiliateRate(address _garden, uint256 _affiliateRate) external;\\n\\n    function addAffiliateReward(\\n        address _depositor,\\n        address _referrer,\\n        uint256 _reserveAmount\\n    ) external;\\n\\n    function claimRewards() external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function patchIntegration(address _old, address _new) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function gardenAffiliateRates(address _wantedAsset) external view returns (uint256);\\n\\n    function affiliateRewards(address _user) external view returns (uint256);\\n\\n    function patchedIntegrations(address _integration) external view returns (address);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd735b6881f3f7bc55f3cc667ab38778297e376b73e6e291d1e5d38d8121594d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IConvexRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBooster} from './external/convex/IBooster.sol';\\n\\n/**\\n * @title IConvexRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the convex pools\\n */\\ninterface IConvexRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateCache() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function getPid(address _asset) external view returns (bool, uint256);\\n\\n    function convexPools(address _convexAddress) external view returns (bool);\\n\\n    function booster() external view returns (IBooster);\\n\\n    function getRewardPool(address _asset) external view returns (address reward);\\n\\n    function getConvexInputToken(address _pool) external view returns (address inputToken);\\n\\n    function getAllConvexPools() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xcec04ac179aec85a06b2a21e5f7251059421e3dc89721900b421680757760d33\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function gaugeToPool(address _gaugeAddress) external view returns (address);\\n\\n    function getGauge(address _pool) external view returns (address);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findBestPoolForCoins(address _fromToken, address _toToken) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xba45909fe3561af41662f1cc8948d2d7d36897e1b7d8225b5765314c1c3d4d88\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPickleJarRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPickleJarRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the pickle jars\\n */\\ninterface IPickleJarRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateJars(\\n        address[] calldata _jars,\\n        bool[] calldata _values,\\n        bool[] calldata _uniflags\\n    ) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function jars(address _jarAddress) external view returns (bool);\\n\\n    function noSwapParam(address _jarAddress) external view returns (bool);\\n\\n    function isUniv3(address _jarAddress) external view returns (bool);\\n\\n    function getJarStrategy(address _jarAddress) external view returns (address);\\n\\n    function getJarGauge(address _jarAddress) external view returns (address);\\n\\n    function getJarFromGauge(address _gauge) external view returns (address);\\n\\n    function getAllJars() external view returns (address[] memory);\\n\\n    function getAllGauges() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4e16ccc53a3e071cc90eaa954cc9ac476d8c45231b14ad7bff40f3e4dc83b00f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\nimport {IPickleJarRegistry} from './IPickleJarRegistry.sol';\\nimport {IConvexRegistry} from './IConvexRegistry.sol';\\nimport {IYearnVaultRegistry} from './IYearnVaultRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ View Functions ============ */\\n\\n    function identifyTokens(address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function convexPools(address _pool) external view returns (bool);\\n\\n    function jars(address _jar) external view returns (uint8);\\n\\n    function pickleGauges(address _gauge) external view returns (bool);\\n\\n    function visors(address _visor) external view returns (bool);\\n\\n    function vaults(address _vault) external view returns (bool);\\n\\n    function aTokenToAsset(address _aToken) external view returns (address);\\n\\n    function cTokenToAsset(address _cToken) external view returns (address);\\n\\n    function jarRegistry() external view returns (IPickleJarRegistry);\\n\\n    function vaultRegistry() external view returns (IYearnVaultRegistry);\\n\\n    function curveMetaRegistry() external view returns (ICurveMetaRegistry);\\n\\n    function convexRegistry() external view returns (IConvexRegistry);\\n\\n    /* ============ Functions ============ */\\n\\n    function updateVisor(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function refreshAAveReserves() external;\\n\\n    function refreshCompoundTokens() external;\\n\\n    function updateYearnVaults() external;\\n\\n    function updatePickleJars() external;\\n\\n    function updateConvexPools() external;\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0x5048699b54ba396a363b79a02f9f8dc3c941be3cd4e0398ed43f1a25fd84c2e6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IYearnVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IYearnVaultRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the pickle jars\\n */\\ninterface IYearnVaultRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateVaults(address[] calldata _jars, bool[] calldata _values) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function vaults(address _vaultAddress) external view returns (bool);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x73992e6e7885cdf208bd6c61a5724f38573c0fc8b68ac3b33a8e0988ee902aae\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/1inch/IMooniswap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IMooniswap is IERC20 {\\n    function getTokens() external view returns (address[] memory _tokens);\\n\\n    function tokens(uint256 i) external view returns (IERC20);\\n\\n    function mooniswapFactoryGovernance() external view returns (address);\\n\\n    function getBalanceForAddition(IERC20 token) external view returns (uint256);\\n\\n    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\\n\\n    function getReturn(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function deposit(uint256[2] memory maxAmounts, uint256[2] memory minAmounts)\\n        external\\n        payable\\n        returns (uint256 fairSupply, uint256[2] memory receivedAmounts);\\n\\n    function depositFor(\\n        uint256[2] memory maxAmounts,\\n        uint256[2] memory minAmounts,\\n        address target\\n    ) external payable returns (uint256 fairSupply, uint256[2] memory receivedAmounts);\\n\\n    function withdraw(uint256 amount, uint256[] memory minReturns)\\n        external\\n        returns (uint256[2] memory withdrawnAmounts);\\n\\n    function withdrawFor(\\n        uint256 amount,\\n        uint256[] memory minReturns,\\n        address payable target\\n    ) external returns (uint256[2] memory withdrawnAmounts);\\n\\n    function swap(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount,\\n        uint256 minReturn,\\n        address referral\\n    ) external payable returns (uint256 result);\\n\\n    function swapFor(\\n        IERC20 src,\\n        IERC20 dst,\\n        uint256 amount,\\n        uint256 minReturn,\\n        address referral,\\n        address payable receiver\\n    ) external payable returns (uint256 result);\\n}\\n\",\"keccak256\":\"0x4d42eae22a74b5f47e645297d483e8f26e571195d9809d2db581fb3eeab3a053\",\"license\":\"MIT\"},\"contracts/interfaces/external/aave/AaveToken.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface AaveToken {\\n    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\\n}\\n\",\"keccak256\":\"0x8926c6567fa398aa4509e0503f736b9973263d3d934737da30759cbcdff1a4fb\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/ILendingPoolAddressesProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\n/**\\n * @title LendingPoolAddressesProvider contract\\n * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\\n * - Acting also as factory of proxies and admin of those, so with right to change its implementations\\n * - Owned by the Aave Governance\\n * @author Aave\\n **/\\ninterface ILendingPoolAddressesProvider {\\n    event MarketIdSet(string newMarketId);\\n    event LendingPoolUpdated(address indexed newAddress);\\n    event ConfigurationAdminUpdated(address indexed newAddress);\\n    event EmergencyAdminUpdated(address indexed newAddress);\\n    event LendingPoolConfiguratorUpdated(address indexed newAddress);\\n    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\\n    event PriceOracleUpdated(address indexed newAddress);\\n    event LendingRateOracleUpdated(address indexed newAddress);\\n    event ProxyCreated(bytes32 id, address indexed newAddress);\\n    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\\n\\n    function getMarketId() external view returns (string memory);\\n\\n    function setMarketId(string calldata marketId) external;\\n\\n    function setAddress(bytes32 id, address newAddress) external;\\n\\n    function setAddressAsProxy(bytes32 id, address impl) external;\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n\\n    function getLendingPool() external view returns (address);\\n\\n    function setLendingPoolImpl(address pool) external;\\n\\n    function getLendingPoolConfigurator() external view returns (address);\\n\\n    function setLendingPoolConfiguratorImpl(address configurator) external;\\n\\n    function getLendingPoolCollateralManager() external view returns (address);\\n\\n    function setLendingPoolCollateralManager(address manager) external;\\n\\n    function getPoolAdmin() external view returns (address);\\n\\n    function setPoolAdmin(address admin) external;\\n\\n    function getEmergencyAdmin() external view returns (address);\\n\\n    function setEmergencyAdmin(address admin) external;\\n\\n    function getPriceOracle() external view returns (address);\\n\\n    function setPriceOracle(address priceOracle) external;\\n\\n    function getLendingRateOracle() external view returns (address);\\n\\n    function setLendingRateOracle(address lendingRateOracle) external;\\n}\\n\",\"keccak256\":\"0xff67e6d985c0674791ddee8ff693498afa654a76a23eaca236678620cbf8ec87\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/aave/IProtocolDataProvider.sol\":{\"content\":\"// SPDX-License-Identifier: agpl-3.0\\npragma solidity >=0.7.0 <0.9.0;\\npragma experimental ABIEncoderV2;\\n\\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol';\\n\\ninterface IProtocolDataProvider {\\n    struct TokenData {\\n        string symbol;\\n        address tokenAddress;\\n    }\\n\\n    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\\n\\n    function getAllReservesTokens() external view returns (TokenData[] memory);\\n\\n    function getAllATokens() external view returns (TokenData[] memory);\\n\\n    function getReserveConfigurationData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 decimals,\\n            uint256 ltv,\\n            uint256 liquidationThreshold,\\n            uint256 liquidationBonus,\\n            uint256 reserveFactor,\\n            bool usageAsCollateralEnabled,\\n            bool borrowingEnabled,\\n            bool stableBorrowRateEnabled,\\n            bool isActive,\\n            bool isFrozen\\n        );\\n\\n    function getReserveData(address asset)\\n        external\\n        view\\n        returns (\\n            uint256 availableLiquidity,\\n            uint256 totalStableDebt,\\n            uint256 totalVariableDebt,\\n            uint256 liquidityRate,\\n            uint256 variableBorrowRate,\\n            uint256 stableBorrowRate,\\n            uint256 averageStableBorrowRate,\\n            uint256 liquidityIndex,\\n            uint256 variableBorrowIndex,\\n            uint40 lastUpdateTimestamp\\n        );\\n\\n    function getUserReserveData(address asset, address user)\\n        external\\n        view\\n        returns (\\n            uint256 currentATokenBalance,\\n            uint256 currentStableDebt,\\n            uint256 currentVariableDebt,\\n            uint256 principalStableDebt,\\n            uint256 scaledVariableDebt,\\n            uint256 stableBorrowRate,\\n            uint256 liquidityRate,\\n            uint40 stableRateLastUpdated,\\n            bool usageAsCollateralEnabled\\n        );\\n\\n    function getReserveTokensAddresses(address asset)\\n        external\\n        view\\n        returns (\\n            address aTokenAddress,\\n            address stableDebtTokenAddress,\\n            address variableDebtTokenAddress\\n        );\\n}\\n\",\"keccak256\":\"0xb356063607b02191d83c4f2faf10c703a0fa18f8cd8088338825fe12a30c797c\",\"license\":\"agpl-3.0\"},\"contracts/interfaces/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICToken is IERC20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrows() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function repayBorrowBehalf(address borrower, uint256 amount) external payable returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xc270858943ac9927559cac341eb0c695165c7d5587cdee4c9a927d6122d21f25\",\"license\":\"MIT\"},\"contracts/interfaces/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IComptroller {\\n    /**\\n     * @notice Marker function used for light validation when updating the comptroller of a market\\n     * @dev Implementations should simply return true.\\n     * @return true\\n     */\\n    function isComptroller() external view returns (bool);\\n\\n    function markets(address _cToken) external view returns (bool, uint256);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function _borrowGuardianPaused() external view returns (bool);\\n\\n    function borrowGuardianPaused(address _asset) external view returns (bool);\\n\\n    function borrowCaps(address _asset) external view returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xbef4279c68f23f9caa38666ae679dc441138182dc0fef8beb6cd8d1f15dde89f\",\"license\":\"MIT\"},\"contracts/interfaces/external/convex/IBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IBooster {\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function poolLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x051e36045256c2b170fc4bc58f3e5ccad7df1cf18d81eb4ebdfa0203273de9dd\",\"license\":\"MIT\"},\"contracts/interfaces/external/curve/ICurvePoolV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface ICurvePoolV3 {\\n    function coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(uint256 arg0) external view returns (address out);\\n\\n    function underlying_coins(int128 arg0) external view returns (address out);\\n\\n    function get_dy(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function get_dy_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 amount\\n    ) external view returns (uint256);\\n\\n    function balances(uint256 arg0) external view returns (uint256 out);\\n\\n    function get_virtual_price() external view returns (uint256);\\n\\n    function lp_price() external view returns (uint256);\\n\\n    function lp_token() external view returns (address out);\\n\\n    function token() external view returns (address out);\\n\\n    function curve() external view returns (address out);\\n\\n    function pool() external view returns (address out);\\n\\n    function initial_A_time() external view returns (uint256 time);\\n}\\n\",\"keccak256\":\"0xb0a8bfe0eb815ec54d54056fb379c5a0f75eadd029ce3b9eb2cd3c035c4fc777\",\"license\":\"MIT\"},\"contracts/interfaces/external/lido/IStETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IStETH is IERC20 {\\n    function getPooledEthByShares(uint256 _sharesAmount) external view returns (uint256);\\n\\n    function getSharesByPooledEth(uint256 _pooledEthAmount) external view returns (uint256);\\n\\n    function submit(address _referral) external payable returns (uint256);\\n}\\n\",\"keccak256\":\"0x0b71a50f82d2ecb6f850c5cbb347178879b1c021f23f4ac29679356faa08c0f1\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/lido/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity 0.7.6;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * @title StETH token wrapper with static balances.\\n * @dev It's an ERC20 token that represents the account's share of the total\\n * supply of stETH tokens. WstETH token's balance only changes on transfers,\\n * unlike StETH that is also changed when oracles report staking rewards and\\n * penalties. It's a \\\"power user\\\" token for DeFi protocols which don't\\n * support rebasable tokens.\\n *\\n * The contract is also a trustless wrapper that accepts stETH tokens and mints\\n * wstETH in return. Then the user unwraps, the contract burns user's wstETH\\n * and sends user locked stETH in return.\\n *\\n * The contract provides the staking shortcut: user can send ETH with regular\\n * transfer and get wstETH in return. The contract will send ETH to Lido submit\\n * method, staking it and wrapping the received stETH.\\n *\\n */\\ninterface IWstETH is IERC20 {\\n    /**\\n     * @notice Exchanges stETH to wstETH\\n     * @param _stETHAmount amount of stETH to wrap in exchange for wstETH\\n     * @dev Requirements:\\n     *  - `_stETHAmount` must be non-zero\\n     *  - msg.sender must approve at least `_stETHAmount` stETH to this\\n     *    contract.\\n     *  - msg.sender must have at least `_stETHAmount` of stETH.\\n     * User should first approve _stETHAmount to the WstETH contract\\n     * @return Amount of wstETH user receives after wrap\\n     */\\n    function wrap(uint256 _stETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Exchanges wstETH to stETH\\n     * @param _wstETHAmount amount of wstETH to uwrap in exchange for stETH\\n     * @dev Requirements:\\n     *  - `_wstETHAmount` must be non-zero\\n     *  - msg.sender must have at least `_wstETHAmount` wstETH.\\n     * @return Amount of stETH user receives after unwrap\\n     */\\n    function unwrap(uint256 _wstETHAmount) external returns (uint256);\\n\\n    /**\\n     * @notice Shortcut to stake ETH and auto-wrap returned stETH\\n     */\\n    // receive() external payable {\\n    //     uint256 shares = stETH.submit{value: msg.value}(address(0));\\n    //     _mint(msg.sender, shares);\\n    // }\\n\\n    /**\\n     * @notice Get amount of wstETH for a given amount of stETH\\n     * @param _stETHAmount amount of stETH\\n     * @return Amount of wstETH for a given stETH amount\\n     */\\n    function getWstETHByStETH(uint256 _stETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a given amount of wstETH\\n     * @param _wstETHAmount amount of wstETH\\n     * @return Amount of stETH for a given wstETH amount\\n     */\\n    function getStETHByWstETH(uint256 _wstETHAmount) external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for a one stETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of stETH for a one wstETH\\n     * @return Amount of wstETH for a 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x1da6eb5bad8dbb88aac49e190a10b2a3badd8df8503a76d730abffe6743a7639\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/yearn/IYearnVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IYearnVault {\\n    function pricePerShare() external view returns (uint256);\\n\\n    function name() external view returns (string memory);\\n\\n    function token() external view returns (address);\\n\\n    function deposit(uint256 amount) external;\\n\\n    function withdraw(uint256 shares) external;\\n\\n    function balanceOf(address) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x46f32ad8c60d681953263abeeaf86a7c1185420971d75067fa7ec264704a6610\",\"license\":\"MIT\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xfb8440b3c915eb148e4ef721ce6b240642a8c35c3f8729dc6d20db9f307b4cae\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002dfd38038062002dfd833981016040819052620000349162000e4f565b6001600160601b0319606086901b16608052600080546001600160a01b038681166001600160a01b031992831617909255600180548684169083161790556002805485841690831617905560038054928416929091169190911790556200009a62000186565b620000a46200030e565b620000ae62000557565b620000b8620007a0565b620000c262000881565b620000cc62000b0e565b5050600760205250507f3aef0dd43484d11a950591a36c7e6b0fbe53feaea242d7d7f81515c4efc0e9a680547f9229b90bddefd4f6858379b7ddf4bcd726c94c82184ead1c289b099b64fe19f580547fdd8ad3ce14755ee096b5478458b1bcceea5bb370fa1d65adabaa7987a0c5cfff8054600160ff1995861681178616811790965591841685178416851790925573c86b1e7fa86834cac1468937cdd53ba3ccbc11536000528216831790911690911790555062000f3d565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b031663f561ae416040518163ffffffff1660e01b815260040160006040518083038186803b158015620001d657600080fd5b505afa158015620001eb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000215919081019062000cd0565b905060005b81518110156200030a578181815181106200023157fe5b6020026020010151602001516001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b1580156200027657600080fd5b505afa1580156200028b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002b1919062000c01565b60046000848481518110620002c257fe5b6020908102919091018101518101516001600160a01b0390811683529082019290925260400160002080546001600160a01b031916929091169190911790556001016200021a565b5050565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b6001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156200035e57600080fd5b505afa15801562000373573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526200039d919081019062000c27565b905060005b81518110156200030a57818181518110620003b957fe5b60200260200101516001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed56001600160a01b03161415620004675773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600560008484815181106200041557fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055506200054e565b8181815181106200047457fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015620004b557600080fd5b505afa158015620004ca573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620004f0919062000c01565b600560008484815181106200050157fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101620003a2565b600073c7125e3a2925877c7371d579d29dae4729ac90336001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b158015620005a757600080fd5b505afa158015620005bc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620005e6919081019062000c27565b905060005b81518110156200030a578181815181106200060257fe5b60200260200101516001600160a01b0316737dbc3af9251756561ce755fcc11c754184af71f76001600160a01b03161415620006b05773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600560008484815181106200065e57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555062000797565b818181518110620006bd57fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b158015620006fe57600080fd5b505afa15801562000713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000739919062000c01565b600560008484815181106200074a57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b600101620005eb565b600154604080516397331bf960e01b815290516000926001600160a01b0316916397331bf99160048083019286929190829003018186803b158015620007e557600080fd5b505afa158015620007fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000824919081019062000c27565b905060005b81518110156200030a576001600660008484815181106200084657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000829565b60008060009054906101000a90046001600160a01b03166001600160a01b03166311820e466040518163ffffffff1660e01b815260040160006040518083038186803b158015620008d157600080fd5b505afa158015620008e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000910919081019062000c27565b905060005b815181101562000a1c5760005482516001600160a01b03909116906382136a60908490849081106200094357fe5b60200260200101516040518263ffffffff1660e01b815260040162000969919062000ece565b60206040518083038186803b1580156200098257600080fd5b505afa15801562000997573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620009bd919062000e2d565b620009ca576001620009cd565b60025b60086000848481518110620009de57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660ff9290921691909117905560010162000915565b5060008060009054906101000a90046001600160a01b03166001600160a01b031663c946c5cc6040518163ffffffff1660e01b815260040160006040518083038186803b15801562000a6d57600080fd5b505afa15801562000a82573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000aac919081019062000c27565b905060005b815181101562000b095760016009600084848151811062000ace57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000ab1565b505050565b6003546040805163d523d1c560e01b815290516000926001600160a01b03169163d523d1c59160048083019286929190829003018186803b15801562000b5357600080fd5b505afa15801562000b68573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405262000b92919081019062000c27565b905060005b81518110156200030a576001600a600084848151811062000bb457fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010162000b97565b805162000bfc8162000f24565b919050565b60006020828403121562000c13578081fd5b815162000c208162000f24565b9392505050565b6000602080838503121562000c3a578182fd5b82516001600160401b0381111562000c50578283fd5b8301601f8101851362000c61578283fd5b805162000c7862000c728262000f06565b62000ee2565b818152838101908385018584028501860189101562000c95578687fd5b8694505b8385101562000cc457805162000caf8162000f24565b83526001949094019391850191850162000c99565b50979650505050505050565b6000602080838503121562000ce3578182fd5b82516001600160401b038082111562000cfa578384fd5b818501915085601f83011262000d0e578384fd5b815162000d1f62000c728262000f06565b81815284810190848601875b8481101562000e1e5781518701601f196040828e038201121562000d4d578a8bfd5b604051604081018181108a8211171562000d6357fe5b604052828b01518981111562000d77578c8dfd5b8301603f81018f1362000d88578c8dfd5b8b8101518a81111562000d9757fe5b62000da98d85601f8401160162000ee2565b93508084528f604082840101111562000dc0578d8efd5b8d5b8181101562000de057828101604001518582018f01528d0162000dc2565b8181111562000df1578e8e83870101525b50505081815262000e056040840162000bef565b818c015286525050928701929087019060010162000d2b565b50909998505050505050505050565b60006020828403121562000e3f578081fd5b8151801515811462000c20578182fd5b600080600080600060a0868803121562000e67578081fd5b855162000e748162000f24565b602087015190955062000e878162000f24565b604087015190945062000e9a8162000f24565b606087015190935062000ead8162000f24565b608087015190925062000ec08162000f24565b809150509295509295909350565b6001600160a01b0391909116815260200190565b6040518181016001600160401b038111828210171562000efe57fe5b604052919050565b60006001600160401b0382111562000f1a57fe5b5060209081020190565b6001600160a01b038116811462000f3a57600080fd5b50565b60805160601c611e7562000f886000398061031752806103e75280610c1f5280610c595280610d555280610e085280610e425280610e7c5280610f0a5280610f8a5250611e756000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806380a446db116100d8578063cdd7b38a1161008c578063e29e14ea11610066578063e29e14ea146102da578063f4afedd1146102ed578063f77c4791146102f557610182565b8063cdd7b38a146102ac578063e121f370146102b4578063e21ead9b146102c757610182565b80639fb53050116100bd5780639fb5305014610266578063a622ee7c14610279578063ca6a48c21461028c57610182565b806380a446db146102565780638c9509d51461025e57610182565b8063520874ed1161013a5780636360c5d0116101145780636360c5d01461022857806371f0706b1461023b57806378dbbd981461024e57610182565b8063520874ed146101f85780635826694b1461020b5780635853075a1461022057610182565b80631fca855c1161016b5780631fca855c146101c55780633149ea1a146101cd5780634b7aa206146101f057610182565b8063017cb1f4146101875780630d4cfeb6146101b0575b600080fd5b61019a610195366004611a55565b6102fd565b6040516101a79190611d69565b60405180910390f35b6101c36101be366004611acc565b610312565b005b6101c36103e2565b6101e06101db366004611a94565b61041e565b6040516101a79493929190611d82565b6101c3610c1a565b6101c3610206366004611acc565b610c54565b610213610d1d565b6040516101a79190611d55565b610213610d2c565b61019a610236366004611a55565b610d3b565b6101c3610249366004611b35565b610d50565b6101c3610e03565b6101c3610e3d565b6101c3610e77565b610213610274366004611a55565b610eb1565b61019a610287366004611a55565b610ecc565b61029f61029a366004611a55565b610ee1565b6040516101a79190611d74565b610213610ef6565b6101c36102c2366004611b35565b610f05565b6102136102d5366004611a55565b610f49565b61019a6102e8366004611a55565b610f64565b610213610f79565b610213610f88565b600a6020526000908152604090205460ff1681565b6103447f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db5782828281811061035b57fe5b90506020020160208101906103709190611a55565b6004600087878581811061038057fe5b90506020020160208101906103959190611a55565b6001600160a01b0390811682526020820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055600101610347565b5050505050565b6104147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6110eb565b565b6001600160a01b03828116600090815260056020526040812054909182918291829182918291829182911615610470576001600160a01b03808b16600090815260056020526040902054600195501691505b6001600160a01b0389811660009081526005602052604090205416156104b157506001600160a01b0380891660009081526005602052604090205460019350165b6001600160a01b038a811660009081526004602052604090205416156104f3576001600160a01b03808b16600090815260046020526040902054600295501691505b6001600160a01b03898116600090815260046020526040902054161561053457506001600160a01b0380891660009081526004602052604090205460029350165b6001600160a01b038a1660009081526007602052604090205460ff161561055a57600c93505b6001600160a01b03891660009081526007602052604090205460ff161561058057600c92505b6001600160a01b038a1660009081526006602052604090205460ff16156105a657600693505b6001600160a01b03891660009081526006602052604090205460ff16156105cc57600692505b6001600160a01b038a1660009081526008602052604090205460ff161561061d576001600160a01b038a1660009081526008602052604090205460ff1660011461061757600e61061a565b600d5b93505b6001600160a01b03891660009081526008602052604090205460ff161561066e576001600160a01b03891660009081526008602052604090205460ff1660011461066857600e61066b565b600d5b92505b6001600160a01b038a1660009081526009602052604090205460ff161561069457600f93505b6001600160a01b03891660009081526009602052604090205460ff16156106ba57600f92505b6001600160a01b038a166000908152600a602052604090205460ff16156106e057601093505b6001600160a01b0389166000908152600a602052604090205460ff161561070657601092505b60008460ff1611801561071c575060008360ff16115b156107305792965090945092509050610c11565b60ff84166107d1576002546040516324a5923360e01b81526000916001600160a01b0316906324a5923390610769908e90600401611d55565b60206040518083038186803b15801561078157600080fd5b505afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b99190611a78565b90506001600160a01b038116156107cf57600594505b505b60ff8316610872576002546040516324a5923360e01b81526000916001600160a01b0316906324a592339061080a908d90600401611d55565b60206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611a78565b90506001600160a01b0381161561087057600593505b505b600254604051631f5539e560e21b81526000916001600160a01b031690637d54e794906108a3908e90600401611d55565b60206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190611a78565b6001600160a01b03161461090657601193505b600254604051631f5539e560e21b81526000916001600160a01b031690637d54e79490610937908d90600401611d55565b60206040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190611a78565b6001600160a01b03161461099a57601192505b60008460ff161180156109b0575060008360ff16115b156109c45792965090945092509050610c11565b60ff8416610ae55760008a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a439190810190611d1a565b6040805180820190915260038152620534c560ec1b6020918201528151908201209091507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610a9357600894505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610ae357600994505b505b60ff8316610c06576000896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b649190810190611d1a565b6040805180820190915260038152620534c560ec1b6020918201528151908201209091507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610bb457600893505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610c0457600993505b505b929650909450925090505b92959194509250565b610c4c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c611328565b610c867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db57828282818110610c9d57fe5b9050602002016020810190610cb29190611a55565b60056000878785818110610cc257fe5b9050602002016020810190610cd79190611a55565b6001600160a01b0390811682526020820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055600101610c89565b6003546001600160a01b031681565b6000546001600160a01b031681565b60096020526000908152604090205460ff1681565b610d827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db57828282818110610d9957fe5b9050602002016020810190610dae9190611ce2565b60066000878785818110610dbe57fe5b9050602002016020810190610dd39190611a55565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610d85565b610e357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6114ad565b610e6f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6115a0565b610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c611816565b6005602052600090815260409020546001600160a01b031681565b60066020526000908152604090205460ff1681565b60086020526000908152604090205460ff1681565b6001546001600160a01b031681565b610f377f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b610f4384848484611909565b50505050565b6004602052600090815260409020546001600160a01b031681565b60076020526000908152604090205460ff1681565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b50516001600160a01b03163314806110935750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d602081101561108557600080fd5b50516001600160a01b031633145b6110e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611e16602a913960400191505060405180910390fd5b50565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b6001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111769190810190611b61565b905060005b81518110156113245781818151811061119057fe5b60200260200101516001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed56001600160a01b0316141561123b5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600560008484815181106111ea57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061131c565b81818151811061124757fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561128757600080fd5b505afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf9190611a78565b600560008484815181106112cf57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60010161117b565b5050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b031663f561ae416040518163ffffffff1660e01b815260040160006040518083038186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b39190810190611bff565b905060005b8151811015611324578181815181106113cd57fe5b6020026020010151602001516001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114499190611a78565b6004600084848151811061145957fe5b6020908102919091018101518101516001600160a01b03908116835290820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff1916929091169190911790556001016113b8565b600154604080517f97331bf900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916397331bf99160048083019286929190829003018186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115469190810190611b61565b905060005b81518110156113245760016006600084848151811061156657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161154b565b60008060009054906101000a90046001600160a01b03166001600160a01b03166311820e466040518163ffffffff1660e01b815260040160006040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162b9190810190611b61565b905060005b815181101561172b5760005482516001600160a01b03909116906382136a609084908490811061165c57fe5b60200260200101516040518263ffffffff1660e01b81526004016116809190611d55565b60206040518083038186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190611cfe565b6116db5760016116de565b60025b600860008484815181106116ee57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660ff92909216919091179055600101611630565b5060008060009054906101000a90046001600160a01b03166001600160a01b031663c946c5cc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561177b57600080fd5b505afa15801561178f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b79190810190611b61565b905060005b8151811015611811576001600960008484815181106117d757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016117bc565b505050565b600354604080517fd523d1c500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163d523d1c59160048083019286929190829003018186803b15801561187357600080fd5b505afa158015611887573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118af9190810190611b61565b905060005b8151811015611324576001600a60008484815181106118cf57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016118b4565b60005b838110156103db5782828281811061192057fe5b90506020020160208101906119359190611ce2565b6007600087878581811061194557fe5b905060200201602081019061195a9190611a55565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161190c565b60008083601f84011261199b578182fd5b50813567ffffffffffffffff8111156119b2578182fd5b60208301915083602080830285010111156119cc57600080fd5b9250929050565b600082601f8301126119e3578081fd5b815167ffffffffffffffff8111156119f757fe5b6020611a0b601f8301601f19168201611db0565b8281528582848701011115611a1e578384fd5b835b83811015611a3b578581018301518282018401528201611a20565b83811115611a4b57848385840101525b5095945050505050565b600060208284031215611a66578081fd5b8135611a7181611df2565b9392505050565b600060208284031215611a89578081fd5b8151611a7181611df2565b60008060408385031215611aa6578081fd5b8235611ab181611df2565b91506020830135611ac181611df2565b809150509250929050565b60008060008060408587031215611ae1578182fd5b843567ffffffffffffffff80821115611af8578384fd5b611b048883890161198a565b90965094506020870135915080821115611b1c578384fd5b50611b298782880161198a565b95989497509550505050565b60008060008060408587031215611b4a578384fd5b843567ffffffffffffffff80821115611af8578586fd5b60006020808385031215611b73578182fd5b825167ffffffffffffffff811115611b89578283fd5b8301601f81018513611b99578283fd5b8051611bac611ba782611dd4565b611db0565b8181528381019083850185840285018601891015611bc8578687fd5b8694505b83851015611bf3578051611bdf81611df2565b835260019490940193918501918501611bcc565b50979650505050505050565b60006020808385031215611c11578182fd5b825167ffffffffffffffff80821115611c28578384fd5b818501915085601f830112611c3b578384fd5b8151611c49611ba782611dd4565b81815284810190848601875b84811015611cd35781518701604080601f19838f03011215611c75578a8bfd5b80518181018181108a82111715611c8857fe5b8252828b015189811115611c9a578c8dfd5b611ca88f8d838701016119d3565b8252509181015191611cb983611df2565b808b01929092525084529287019290870190600101611c55565b50909998505050505050505050565b600060208284031215611cf3578081fd5b8135611a7181611e07565b600060208284031215611d0f578081fd5b8151611a7181611e07565b600060208284031215611d2b578081fd5b815167ffffffffffffffff811115611d41578182fd5b611d4d848285016119d3565b949350505050565b6001600160a01b0391909116815260200190565b901515815260200190565b60ff91909116815260200190565b60ff94851681529290931660208301526001600160a01b039081166040830152909116606082015260800190565b60405181810167ffffffffffffffff81118282101715611dcc57fe5b604052919050565b600067ffffffffffffffff821115611de857fe5b5060209081020190565b6001600160a01b03811681146110e857600080fd5b80151581146110e857600080fdfe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a26469706673582212206b413d667e94135d28d9ad3404d153d139ed5fcb28f0386ec08f3eae4f5b5c0464736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806380a446db116100d8578063cdd7b38a1161008c578063e29e14ea11610066578063e29e14ea146102da578063f4afedd1146102ed578063f77c4791146102f557610182565b8063cdd7b38a146102ac578063e121f370146102b4578063e21ead9b146102c757610182565b80639fb53050116100bd5780639fb5305014610266578063a622ee7c14610279578063ca6a48c21461028c57610182565b806380a446db146102565780638c9509d51461025e57610182565b8063520874ed1161013a5780636360c5d0116101145780636360c5d01461022857806371f0706b1461023b57806378dbbd981461024e57610182565b8063520874ed146101f85780635826694b1461020b5780635853075a1461022057610182565b80631fca855c1161016b5780631fca855c146101c55780633149ea1a146101cd5780634b7aa206146101f057610182565b8063017cb1f4146101875780630d4cfeb6146101b0575b600080fd5b61019a610195366004611a55565b6102fd565b6040516101a79190611d69565b60405180910390f35b6101c36101be366004611acc565b610312565b005b6101c36103e2565b6101e06101db366004611a94565b61041e565b6040516101a79493929190611d82565b6101c3610c1a565b6101c3610206366004611acc565b610c54565b610213610d1d565b6040516101a79190611d55565b610213610d2c565b61019a610236366004611a55565b610d3b565b6101c3610249366004611b35565b610d50565b6101c3610e03565b6101c3610e3d565b6101c3610e77565b610213610274366004611a55565b610eb1565b61019a610287366004611a55565b610ecc565b61029f61029a366004611a55565b610ee1565b6040516101a79190611d74565b610213610ef6565b6101c36102c2366004611b35565b610f05565b6102136102d5366004611a55565b610f49565b61019a6102e8366004611a55565b610f64565b610213610f79565b610213610f88565b600a6020526000908152604090205460ff1681565b6103447f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db5782828281811061035b57fe5b90506020020160208101906103709190611a55565b6004600087878581811061038057fe5b90506020020160208101906103959190611a55565b6001600160a01b0390811682526020820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055600101610347565b5050505050565b6104147f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6110eb565b565b6001600160a01b03828116600090815260056020526040812054909182918291829182918291829182911615610470576001600160a01b03808b16600090815260056020526040902054600195501691505b6001600160a01b0389811660009081526005602052604090205416156104b157506001600160a01b0380891660009081526005602052604090205460019350165b6001600160a01b038a811660009081526004602052604090205416156104f3576001600160a01b03808b16600090815260046020526040902054600295501691505b6001600160a01b03898116600090815260046020526040902054161561053457506001600160a01b0380891660009081526004602052604090205460029350165b6001600160a01b038a1660009081526007602052604090205460ff161561055a57600c93505b6001600160a01b03891660009081526007602052604090205460ff161561058057600c92505b6001600160a01b038a1660009081526006602052604090205460ff16156105a657600693505b6001600160a01b03891660009081526006602052604090205460ff16156105cc57600692505b6001600160a01b038a1660009081526008602052604090205460ff161561061d576001600160a01b038a1660009081526008602052604090205460ff1660011461061757600e61061a565b600d5b93505b6001600160a01b03891660009081526008602052604090205460ff161561066e576001600160a01b03891660009081526008602052604090205460ff1660011461066857600e61066b565b600d5b92505b6001600160a01b038a1660009081526009602052604090205460ff161561069457600f93505b6001600160a01b03891660009081526009602052604090205460ff16156106ba57600f92505b6001600160a01b038a166000908152600a602052604090205460ff16156106e057601093505b6001600160a01b0389166000908152600a602052604090205460ff161561070657601092505b60008460ff1611801561071c575060008360ff16115b156107305792965090945092509050610c11565b60ff84166107d1576002546040516324a5923360e01b81526000916001600160a01b0316906324a5923390610769908e90600401611d55565b60206040518083038186803b15801561078157600080fd5b505afa158015610795573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b99190611a78565b90506001600160a01b038116156107cf57600594505b505b60ff8316610872576002546040516324a5923360e01b81526000916001600160a01b0316906324a592339061080a908d90600401611d55565b60206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190611a78565b90506001600160a01b0381161561087057600593505b505b600254604051631f5539e560e21b81526000916001600160a01b031690637d54e794906108a3908e90600401611d55565b60206040518083038186803b1580156108bb57600080fd5b505afa1580156108cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f39190611a78565b6001600160a01b03161461090657601193505b600254604051631f5539e560e21b81526000916001600160a01b031690637d54e79490610937908d90600401611d55565b60206040518083038186803b15801561094f57600080fd5b505afa158015610963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109879190611a78565b6001600160a01b03161461099a57601192505b60008460ff161180156109b0575060008360ff16115b156109c45792965090945092509050610c11565b60ff8416610ae55760008a6001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610a0757600080fd5b505afa158015610a1b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a439190810190611d1a565b6040805180820190915260038152620534c560ec1b6020918201528151908201209091507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610a9357600894505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610ae357600994505b505b60ff8316610c06576000896001600160a01b03166395d89b416040518163ffffffff1660e01b815260040160006040518083038186803b158015610b2857600080fd5b505afa158015610b3c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b649190810190611d1a565b6040805180820190915260038152620534c560ec1b6020918201528151908201209091507fe0136b3661826a483734248681e4f59ae66bc6065ceb43fdd469ecb22c21d7451415610bb457600893505b6040805180820190915260068152652aa72496ab1960d11b6020918201528151908201207f0c49a525f6758cfb27d0ada1467d2a2e99733995423d47ae30ae4ba2ba5632551415610c0457600993505b505b929650909450925090505b92959194509250565b610c4c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c611328565b610c867f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db57828282818110610c9d57fe5b9050602002016020810190610cb29190611a55565b60056000878785818110610cc257fe5b9050602002016020810190610cd79190611a55565b6001600160a01b0390811682526020820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff191692909116919091179055600101610c89565b6003546001600160a01b031681565b6000546001600160a01b031681565b60096020526000908152604090205460ff1681565b610d827f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b60005b838110156103db57828282818110610d9957fe5b9050602002016020810190610dae9190611ce2565b60066000878785818110610dbe57fe5b9050602002016020810190610dd39190611a55565b6001600160a01b031681526020810191909152604001600020805460ff1916911515919091179055600101610d85565b610e357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6114ad565b610e6f7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c6115a0565b610ea97f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b61041c611816565b6005602052600090815260409020546001600160a01b031681565b60066020526000908152604090205460ff1681565b60086020526000908152604090205460ff1681565b6001546001600160a01b031681565b610f377f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316610fac565b610f4384848484611909565b50505050565b6004602052600090815260409020546001600160a01b031681565b60076020526000908152604090205460ff1681565b6002546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610fe557600080fd5b505afa158015610ff9573d6000803e3d6000fd5b505050506040513d602081101561100f57600080fd5b50516001600160a01b03163314806110935750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b15801561105b57600080fd5b505afa15801561106f573d6000803e3d6000fd5b505050506040513d602081101561108557600080fd5b50516001600160a01b031633145b6110e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602a815260200180611e16602a913960400191505060405180910390fd5b50565b6000733d9819210a31b4961b30ef54be2aed79b9c9cd3b6001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b15801561113a57600080fd5b505afa15801561114e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111769190810190611b61565b905060005b81518110156113245781818151811061119057fe5b60200260200101516001600160a01b0316734ddc2d193948926d02f9b1fe9e1daa0718270ed56001600160a01b0316141561123b5773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2600560008484815181106111ea57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061131c565b81818151811061124757fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561128757600080fd5b505afa15801561129b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112bf9190611a78565b600560008484815181106112cf57fe5b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b60010161117b565b5050565b600073057835ad21a177dbdd3090bb1cae03eacf78fc6d6001600160a01b031663f561ae416040518163ffffffff1660e01b815260040160006040518083038186803b15801561137757600080fd5b505afa15801561138b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113b39190810190611bff565b905060005b8151811015611324578181815181106113cd57fe5b6020026020010151602001516001600160a01b031663b16a19de6040518163ffffffff1660e01b815260040160206040518083038186803b15801561141157600080fd5b505afa158015611425573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114499190611a78565b6004600084848151811061145957fe5b6020908102919091018101518101516001600160a01b03908116835290820192909252604001600020805473ffffffffffffffffffffffffffffffffffffffff1916929091169190911790556001016113b8565b600154604080517f97331bf900000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916397331bf99160048083019286929190829003018186803b15801561150a57600080fd5b505afa15801561151e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115469190810190611b61565b905060005b81518110156113245760016006600084848151811061156657fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905560010161154b565b60008060009054906101000a90046001600160a01b03166001600160a01b03166311820e466040518163ffffffff1660e01b815260040160006040518083038186803b1580156115ef57600080fd5b505afa158015611603573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261162b9190810190611b61565b905060005b815181101561172b5760005482516001600160a01b03909116906382136a609084908490811061165c57fe5b60200260200101516040518263ffffffff1660e01b81526004016116809190611d55565b60206040518083038186803b15801561169857600080fd5b505afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d09190611cfe565b6116db5760016116de565b60025b600860008484815181106116ee57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191660ff92909216919091179055600101611630565b5060008060009054906101000a90046001600160a01b03166001600160a01b031663c946c5cc6040518163ffffffff1660e01b815260040160006040518083038186803b15801561177b57600080fd5b505afa15801561178f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117b79190810190611b61565b905060005b8151811015611811576001600960008484815181106117d757fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016117bc565b505050565b600354604080517fd523d1c500000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163d523d1c59160048083019286929190829003018186803b15801561187357600080fd5b505afa158015611887573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118af9190810190611b61565b905060005b8151811015611324576001600a60008484815181106118cf57fe5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169115159190911790556001016118b4565b60005b838110156103db5782828281811061192057fe5b90506020020160208101906119359190611ce2565b6007600087878581811061194557fe5b905060200201602081019061195a9190611a55565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905560010161190c565b60008083601f84011261199b578182fd5b50813567ffffffffffffffff8111156119b2578182fd5b60208301915083602080830285010111156119cc57600080fd5b9250929050565b600082601f8301126119e3578081fd5b815167ffffffffffffffff8111156119f757fe5b6020611a0b601f8301601f19168201611db0565b8281528582848701011115611a1e578384fd5b835b83811015611a3b578581018301518282018401528201611a20565b83811115611a4b57848385840101525b5095945050505050565b600060208284031215611a66578081fd5b8135611a7181611df2565b9392505050565b600060208284031215611a89578081fd5b8151611a7181611df2565b60008060408385031215611aa6578081fd5b8235611ab181611df2565b91506020830135611ac181611df2565b809150509250929050565b60008060008060408587031215611ae1578182fd5b843567ffffffffffffffff80821115611af8578384fd5b611b048883890161198a565b90965094506020870135915080821115611b1c578384fd5b50611b298782880161198a565b95989497509550505050565b60008060008060408587031215611b4a578384fd5b843567ffffffffffffffff80821115611af8578586fd5b60006020808385031215611b73578182fd5b825167ffffffffffffffff811115611b89578283fd5b8301601f81018513611b99578283fd5b8051611bac611ba782611dd4565b611db0565b8181528381019083850185840285018601891015611bc8578687fd5b8694505b83851015611bf3578051611bdf81611df2565b835260019490940193918501918501611bcc565b50979650505050505050565b60006020808385031215611c11578182fd5b825167ffffffffffffffff80821115611c28578384fd5b818501915085601f830112611c3b578384fd5b8151611c49611ba782611dd4565b81815284810190848601875b84811015611cd35781518701604080601f19838f03011215611c75578a8bfd5b80518181018181108a82111715611c8857fe5b8252828b015189811115611c9a578c8dfd5b611ca88f8d838701016119d3565b8252509181015191611cb983611df2565b808b01929092525084529287019290870190600101611c55565b50909998505050505050505050565b600060208284031215611cf3578081fd5b8135611a7181611e07565b600060208284031215611d0f578081fd5b8151611a7181611e07565b600060208284031215611d2b578081fd5b815167ffffffffffffffff811115611d41578182fd5b611d4d848285016119d3565b949350505050565b6001600160a01b0391909116815260200190565b901515815260200190565b60ff91909116815260200190565b60ff94851681529290931660208301526001600160a01b039081166040830152909116606082015260800190565b60405181810167ffffffffffffffff81118282101715611dcc57fe5b604052919050565b600067ffffffffffffffff821115611de857fe5b5060209081020190565b6001600160a01b03811681146110e857600080fd5b80151581146110e857600080fdfe4f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c2074686973a26469706673582212206b413d667e94135d28d9ad3404d153d139ed5fcb28f0386ec08f3eae4f5b5c0464736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Returns the type of the asset",
    "kind": "dev",
    "methods": {
      "identifyTokens(address,address)": {
        "params": {
          "_tokenIn": "Address of the first token",
          "_tokenOut": "Address of the second token"
        },
        "returns": {
          "_0": "(uint8,uint8)        Types of both tokens"
        }
      }
    },
    "title": "TokenIdentifier",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "identifyTokens(address,address)": {
        "notice": "Returns the types of the two tokens"
      },
      "refreshAAveReserves()": {
        "notice": "Refreshes all aave mappings from protocol data provider on mainnetx"
      },
      "refreshCompoundTokens()": {
        "notice": "Refreshes all ctoken mappings from compound comptroller"
      },
      "updateConvexPools()": {
        "notice": "Refreshes all convex pools from the registry"
      },
      "updatePickleJars()": {
        "notice": "Refreshes all pickle jars from our registry"
      },
      "updateVisor(address[],bool[])": {
        "notice": "Adds/deletes visor vaults"
      },
      "updateYearnVaults()": {
        "notice": "Refreshes all yearn vaults from our registry"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 19160,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "jarRegistry",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IPickleJarRegistry)46598"
      },
      {
        "astId": 19163,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "vaultRegistry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IYearnVaultRegistry)47871"
      },
      {
        "astId": 19166,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "curveMetaRegistry",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(ICurveMetaRegistry)45028"
      },
      {
        "astId": 19169,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "convexRegistry",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IConvexRegistry)44916"
      },
      {
        "astId": 19174,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "aTokenToAsset",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 19179,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "cTokenToAsset",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 19184,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "vaults",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19189,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "visors",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19194,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "jars",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 19199,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "pickleGauges",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19204,
        "contract": "contracts/TokenIdentifier.sol:TokenIdentifier",
        "label": "convexPools",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IConvexRegistry)44916": {
        "encoding": "inplace",
        "label": "contract IConvexRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(ICurveMetaRegistry)45028": {
        "encoding": "inplace",
        "label": "contract ICurveMetaRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IPickleJarRegistry)46598": {
        "encoding": "inplace",
        "label": "contract IPickleJarRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IYearnVaultRegistry)47871": {
        "encoding": "inplace",
        "label": "contract IYearnVaultRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}