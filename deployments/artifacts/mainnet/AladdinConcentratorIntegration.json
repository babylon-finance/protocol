{
  "address": "0x694D3F149525a26FeAba948E5038b4467EbdAF5F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IAladdinCRV",
          "name": "_aladdinCRV",
          "type": "address"
        },
        {
          "internalType": "contract IAladdinConvexVault",
          "name": "_aladdinConvexVault",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "garden",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "tokenIn",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentTokensOut",
          "type": "uint256"
        }
      ],
      "name": "InvestmentEntered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "garden",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "investment",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "investmentTokensOut",
          "type": "uint256"
        }
      ],
      "name": "InvestmentExited",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aladdinCRV",
      "outputs": [
        {
          "internalType": "contract IAladdinCRV",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aladdinConvexVault",
      "outputs": [
        {
          "internalType": "contract IAladdinConvexVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "aladdinList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "aladdinPools",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IBabController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentTokensOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenIn",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxAmountIn",
          "type": "uint256"
        }
      ],
      "name": "enterInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_investmentTokenIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_tokenOut",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmountOut",
          "type": "uint256"
        }
      ],
      "name": "exitInvestment",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getInvestmentAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "getPid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getResultAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_resultAssetAddress",
          "type": "address"
        }
      ],
      "name": "getResultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_investmentAddress",
          "type": "address"
        }
      ],
      "name": "getRewards",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "needsUnlockSignal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_strategy",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "signalUnlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa516bdb8f600b2a8200098657985240b11177c6a5f78d32726f62a7c8680d146",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x694D3F149525a26FeAba948E5038b4467EbdAF5F",
    "transactionIndex": 128,
    "gasUsed": "4183558",
    "logsBloom": "0x
    "blockHash": "0x181d73e55474b072a6c1d3813a5bf6fe82a5638c986f8596dd1e91e5201a7c8f",
    "transactionHash": "0xa516bdb8f600b2a8200098657985240b11177c6a5f78d32726f62a7c8680d146",
    "logs": [],
    "blockNumber": 14875837,
    "cumulativeGasUsed": "12297152",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0x2b95A1Dcc3D405535f9ed33c219ab38E8d7e0884",
    "0xc8fF37F7d057dF1BB9Ad681b53Fa4726f268E0e8"
  ],
  "numDeployments": 1,
  "solcInputHash": "1fc0761e8252e23a98ec5ddcb26779bb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IAladdinCRV\",\"name\":\"_aladdinCRV\",\"type\":\"address\"},{\"internalType\":\"contract IAladdinConvexVault\",\"name\":\"_aladdinConvexVault\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"garden\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentTokensOut\",\"type\":\"uint256\"}],\"name\":\"InvestmentEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"garden\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investment\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"investmentTokensOut\",\"type\":\"uint256\"}],\"name\":\"InvestmentExited\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aladdinCRV\",\"outputs\":[{\"internalType\":\"contract IAladdinCRV\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aladdinConvexVault\",\"outputs\":[{\"internalType\":\"contract IAladdinConvexVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"aladdinList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"aladdinPools\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentTokensOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenIn\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxAmountIn\",\"type\":\"uint256\"}],\"name\":\"enterInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_investmentTokenIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenOut\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmountOut\",\"type\":\"uint256\"}],\"name\":\"exitInvestment\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getInvestmentAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"getPid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getResultAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_resultAssetAddress\",\"type\":\"address\"}],\"name\":\"getResultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_investmentAddress\",\"type\":\"address\"}],\"name\":\"getRewards\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"needsUnlockSignal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_strategy\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"signalUnlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Protocol Aladdin Concentrator Integration\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_aladdinCRV\":\"Address of our aladdin crv\",\"_aladdinConvexVault\":\"Address of our aladdin convex vault contract\",\"_controller\":\"Address of the controller\"}},\"enterInvestment(address,address,uint256,address,uint256)\":{\"params\":{\"_investmentAddress\":\"Address of the investment token to join\",\"_investmentTokensOut\":\"Min amount of investment tokens to receive\",\"_maxAmountIn\":\"Max amount of the token to deposit\",\"_strategy\":\"Address of the strategy\",\"_tokenIn\":\"Token address to deposit\"}},\"exitInvestment(address,address,uint256,address,uint256)\":{\"params\":{\"_investmentAddress\":\"Address of the investment token to exit\",\"_investmentTokenIn\":\"Quantity of investment tokens to return\",\"_minAmountOut\":\"Min token quantities to receive from the investment\",\"_strategy\":\"Address of the strategy\",\"_tokenOut\":\"Token address to withdraw\"}},\"getInvestmentAsset(address)\":{\"returns\":{\"_0\":\"address                           Returns the asset that this investment needs\"}},\"getPid(address)\":{\"params\":{\"_asset\":\"Address of the convex lp token\"},\"returns\":{\"_0\":\"uint256                       Pid of the pool in convex\"}},\"getResultAsset(address)\":{\"returns\":{\"_0\":\"address                            Returns the asset that this investment obtains\"}},\"getResultBalance(address,address)\":{\"params\":{\"_resultAssetAddress\":\"Result asset address\",\"_strategy\":\"Strategy calling\"},\"returns\":{\"_0\":\"uint256                            Returns the balance of the result asset\"}},\"getRewards(address,address)\":{\"params\":{\"_investmentAddress\":\"Address of the investment\",\"_strategy\":\"Address of the strategy\"},\"returns\":{\"_0\":\"address                            Returns the address with the token of extra rewards\",\"_1\":\"uint256                            Extra rewards received so far\"}},\"needsUnlockSignal(address,bytes)\":{\"params\":{\"_data\":\"Data param\",\"_strategy\":\"Address of the strategy\"},\"returns\":{\"_0\":\"bool                               True if it is needed\"}},\"signalUnlock(address,bytes)\":{\"params\":{\"_data\":\"Params\",\"_strategy\":\"Address of the strategy\"}}},\"title\":\"AladdinConcentratorIntegration\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"enterInvestment(address,address,uint256,address,uint256)\":{\"notice\":\"Deposits tokens into an investment\"},\"exitInvestment(address,address,uint256,address,uint256)\":{\"notice\":\"Exits an outside passive investment\"},\"getInvestmentAsset(address)\":{\"notice\":\"Gets the asset needed to enter the investment\"},\"getPid(address)\":{\"notice\":\"Gets the PID in convex of a convex lp token\"},\"getResultAsset(address)\":{\"notice\":\"Gets the asset you obtained after entering the investment\"},\"getResultBalance(address,address)\":{\"notice\":\"Gets the balance of the asset you obtained after entering the investment\"},\"getRewards(address,address)\":{\"notice\":\"Gets the rewards and the token that they are denominated in\"},\"needsUnlockSignal(address,bytes)\":{\"notice\":\"Checks if the integration needs to execute a tx to prepare the withdrawal\"},\"signalUnlock(address,bytes)\":{\"notice\":\"Executes an unlock to prepare for withdrawal\"},\"updateCache()\":{\"notice\":\"Refreshes aladdin vaults\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/integrations/passive/AladdinConcentratorIntegration.sol\":\"AladdinConcentratorIntegration\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa1931c47a617014f858580db625aa0dcf343796f39acd4b5b51effc092a1f0a9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () internal {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x8bbbc2f5c10065ee272592ae0a7a6ceb23de2fbd81564ee0bb015ecf404d5f61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value < 2**128, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value < 2**64, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value < 2**32, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value < 2**16, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value < 2**8, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= -2**127 && value < 2**127, \\\"SafeCast: value doesn\\\\'t fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= -2**63 && value < 2**63, \\\"SafeCast: value doesn\\\\'t fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= -2**31 && value < 2**31, \\\"SafeCast: value doesn\\\\'t fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= -2**15 && value < 2**15, \\\"SafeCast: value doesn\\\\'t fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= -2**7 && value < 2**7, \\\"SafeCast: value doesn\\\\'t fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        require(value < 2**255, \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x7b2b8baa20fd60ab4a328c8e34c64a353651b80ba4b5b157cbb61813f6f85d55\",\"license\":\"MIT\"},\"contracts/integrations/BaseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\nimport {IPriceOracle} from '../interfaces/IPriceOracle.sol';\\nimport {IIntegration} from '../interfaces/IIntegration.sol';\\nimport {IStrategy} from '../interfaces/IStrategy.sol';\\nimport {IGarden} from '../interfaces/IGarden.sol';\\nimport {IBaseIntegration} from '../interfaces/IBaseIntegration.sol';\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {PreciseUnitMath} from '../lib/PreciseUnitMath.sol';\\n\\n/**\\n * @title BaseIntegration\\n * @author Babylon Finance\\n *\\n * Abstract class that houses common Integration-related state and functions.\\n */\\nabstract contract BaseIntegration is IBaseIntegration {\\n    using SafeCast for int256;\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlySystemContract() {\\n        require(controller.isSystemContract(msg.sender), 'Only system can call this');\\n        _;\\n    }\\n\\n    /* ============ Constants ============ */\\n\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\\n    address internal constant WBTC = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\\n    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\\n    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\\n    address internal constant ETH_ADD_CURVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address internal constant SNX = 0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F;\\n    address internal constant sETH = 0x5e74C9036fb86BD7eCdcb084a0673EFc32eA31cb;\\n    address internal constant sUSD = 0x57Ab1ec28D129707052df4dF418D58a2D46d5f51;\\n    address internal constant AAVE = 0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Address of the controller\\n    IBabController public immutable controller;\\n\\n    // Name of the integration\\n    string public override name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n\\n    constructor(string memory _name, IBabController _controller) {\\n        require(address(_controller) != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getTokenOrETHBalance(address _strategy, address _token) internal view returns (uint256) {\\n        if (_token == address(0) || _token == ETH_ADD_CURVE) {\\n            return _strategy.balance;\\n        }\\n        return ERC20(_token).balanceOf(_strategy);\\n    }\\n\\n    function _getDurationStrategy(address _strategy) internal view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        (, , , , uint256 executedAt, , ) = strategy.getStrategyState();\\n        return block.timestamp.sub(executedAt);\\n    }\\n\\n    function _getRemainingDurationStrategy(address _strategy) internal view returns (uint256) {\\n        IStrategy strategy = IStrategy(_strategy);\\n        (, , , , uint256 executedAt, , ) = strategy.getStrategyState();\\n        uint256 runningFor = block.timestamp.sub(executedAt);\\n        if (runningFor > strategy.duration()) {\\n            return 0;\\n        }\\n        return strategy.duration().sub(runningFor);\\n    }\\n\\n    function _getPrice(address _tokenIn, address _tokenOut) internal view returns (uint256) {\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        return oracle.getPrice(_tokenIn, _tokenOut);\\n    }\\n\\n    function _getTradeCallData(\\n        address _strategy,\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amountIn,\\n        uint256 _minAmountOut\\n    )\\n        internal\\n        view\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        bytes memory methodData =\\n            abi.encodeWithSignature(\\n                'trade(address,address,uint256,address,uint256)',\\n                _strategy,\\n                _tokenIn,\\n                _amountIn,\\n                _tokenOut,\\n                _minAmountOut\\n            );\\n        return (controller.masterSwapper(), 0, methodData);\\n    }\\n}\\n\",\"keccak256\":\"0x631d1807f29dbe2076f9c82e3f390c5b95c90f7665a722a3e05d4cdf2a516cdc\",\"license\":\"Apache-2.0\"},\"contracts/integrations/passive/AladdinConcentratorIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeDecimalMath} from '../../lib/SafeDecimalMath.sol';\\n\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {IPriceOracle} from '../../interfaces/IPriceOracle.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IPickleJarRegistry} from '../../interfaces/IPickleJarRegistry.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\nimport {BytesLib} from '../../lib/BytesLib.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {PassiveIntegration} from './PassiveIntegration.sol';\\nimport {IAladdinCRV} from '../../interfaces/external/aladdin/IAladdinCRV.sol';\\nimport {IAladdinConvexVault} from '../../interfaces/external/aladdin/IAladdinConvexVault.sol';\\nimport {ICleverCVXLocker} from '../../interfaces/external/aladdin/ICleverCVXLocker.sol';\\n\\n/**\\n * @title AladdinConcentratorIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Aladdin Concentrator Integration\\n */\\ncontract AladdinConcentratorIntegration is PassiveIntegration {\\n    using LowGasSafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /* ============ Constants ============ */\\n    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52; // crv\\n    address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B; // cvx\\n    ICleverCVXLocker private constant aladdinCVXLocker = ICleverCVXLocker(0x96C68D861aDa016Ed98c30C810879F9df7c64154);\\n\\n    /* ============ State Variables ============ */\\n    IAladdinCRV public immutable aladdinCRV;\\n    IAladdinConvexVault public aladdinConvexVault;\\n\\n    mapping(address => uint256) private cacheAladdinLpTokenToPid;\\n    uint256 private elementsCached = 0;\\n\\n    // Mapping of valid Vaults\\n    mapping(address => bool) public aladdinPools;\\n    address[] public aladdinList;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _controller                   Address of the controller\\n     * @param _aladdinCRV                   Address of our aladdin crv\\n     * @param _aladdinConvexVault           Address of our aladdin convex vault contract\\n     */\\n    constructor(\\n        IBabController _controller,\\n        IAladdinCRV _aladdinCRV,\\n        IAladdinConvexVault _aladdinConvexVault\\n    ) PassiveIntegration('aladdin_concentrator', _controller) {\\n        aladdinCRV = _aladdinCRV;\\n        aladdinConvexVault = _aladdinConvexVault;\\n        updateCache();\\n    }\\n\\n    /* ============ Public Functions ============ */\\n\\n    /**\\n     * Refreshes aladdin vaults\\n     */\\n    function updateCache() public {\\n        uint256 poolLength = aladdinConvexVault.poolLength();\\n        if (elementsCached >= poolLength) {\\n            return;\\n        }\\n        for (uint256 i = elementsCached; i < poolLength; i++) {\\n            (, , , , address lpToken, , , , , , ) = aladdinConvexVault.poolInfo(i);\\n            cacheAladdinLpTokenToPid[lpToken] = i + 1;\\n            aladdinPools[lpToken] = true;\\n            aladdinList.push(lpToken);\\n        }\\n        elementsCached = poolLength;\\n    }\\n\\n    /**\\n     * Gets the PID in convex of a convex lp token\\n     * @param _asset                         Address of the convex lp token\\n     * @return uint256                       Pid of the pool in convex\\n     */\\n    function getPid(address _asset) public view returns (bool, uint256) {\\n        if (cacheAladdinLpTokenToPid[_asset] > 0) {\\n            return (true, cacheAladdinLpTokenToPid[_asset] - 1);\\n        }\\n        uint256 poolLength = aladdinConvexVault.poolLength();\\n        if (elementsCached >= poolLength) {\\n            return (false, 0);\\n        }\\n        for (uint256 i = elementsCached; i < poolLength; i++) {\\n            (, , , , address lpToken, , , , , , ) = aladdinConvexVault.poolInfo(i);\\n            if (lpToken == _asset) {\\n                return (true, i);\\n            }\\n        }\\n        return (false, 0);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    function _getSpender(\\n        address _lpToken,\\n        uint8 /* _op */\\n    ) internal view override returns (address) {\\n        // clever\\n        if (_lpToken == CVX) {\\n            return address(aladdinCVXLocker);\\n        }\\n        // curve concentrator\\n        if (_lpToken == CRV) {\\n            return address(aladdinCRV);\\n        }\\n        // concentrator convex vaults\\n        return address(aladdinConvexVault);\\n    }\\n\\n    function _getInvestmentAsset(address _lpToken) internal pure override returns (address) {\\n        return _lpToken;\\n    }\\n\\n    function _getResultAsset(address _lpToken) internal view override returns (address) {\\n        if (_lpToken == CRV) {\\n            return address(aladdinCRV);\\n        }\\n        return _lpToken;\\n    }\\n\\n    function _getResultBalance(address _strategy, address _resultAssetAddress)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        // clever\\n        if (_resultAssetAddress == CVX) {\\n            (uint256 totalDeposited, , , , ) = aladdinCVXLocker.getUserInfo(_strategy);\\n            return totalDeposited;\\n        }\\n        // curve concentrator\\n        if (_resultAssetAddress == address(aladdinCRV)) {\\n            return ERC20(address(aladdinCRV)).balanceOf(_strategy);\\n        }\\n        // convex concentrator\\n        (, uint256 pid) = getPid(_resultAssetAddress);\\n        (uint128 shares, , ) = aladdinConvexVault.userInfo(pid, _strategy);\\n        return uint256(shares);\\n    }\\n\\n    function _getRewards(address _strategy, address _investmentAddress)\\n        internal\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        // clever\\n        if (_investmentAddress == CVX) {\\n            (, , , , uint256 totalReward) = aladdinCVXLocker.getUserInfo(_strategy);\\n            return (CVX, totalReward);\\n        }\\n        // curve concentrator\\n        if (_investmentAddress == CRV) {\\n            return (address(0), 0);\\n        }\\n        // convex concentrator\\n        (, uint256 pid) = getPid(_investmentAddress);\\n        (, uint256 rewards, ) = aladdinConvexVault.userInfo(pid, _strategy);\\n        // No need to return amount because it is included in the balance\\n        // This is just for exit in the convex vaults\\n        return (CRV, rewards);\\n    }\\n\\n    /**\\n     * Return join investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * @param  _asset                          Address of the vault\\n     * hparam  _investmentTokensOut            Amount of investment tokens to send\\n     * hparam  _tokenIn                        Addresses of tokens to send to the investment\\n     * hparam  _maxAmountIn                    Amounts of tokens to send to the investment\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getEnterInvestmentCalldata(\\n        address _strategy,\\n        address _asset,\\n        uint256, /* _investmentTokensOut */\\n        address, /* _tokenIn */\\n        uint256 _maxAmountIn\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        (bool found, uint256 pid) = getPid(_asset);\\n        require(_asset == CRV || _asset == CVX || found, 'Aladdin pool does not exist');\\n        // convex concentrator as default\\n        bytes memory methodData = abi.encodeWithSignature('depositAll(uint256)', pid);\\n        address target = address(aladdinConvexVault);\\n        // Clever\\n        if (_asset == CVX) {\\n            target = address(aladdinCVXLocker);\\n            methodData = abi.encodeWithSignature('deposit(uint256)', _maxAmountIn);\\n        }\\n        // aCRV is a special case. Curve concentrator\\n        if (_asset == CRV) {\\n            target = address(aladdinCRV);\\n            methodData = abi.encodeWithSignature('depositAllWithCRV(address)', _strategy);\\n        }\\n        // Encode method data for Garden to invoke\\n        return (target, 0, methodData);\\n    }\\n\\n    /**\\n     * Return exit investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _asset                          Address of the investment\\n     * hparam  _investmentTokensIn             Amount of investment tokens to receive\\n     * hparam  _tokenOut                       Addresses of tokens to receive\\n     * hparam  _minAmountOut                   Amounts of investment tokens to receive\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getExitInvestmentCalldata(\\n        address _strategy,\\n        address _asset,\\n        uint256 _investmentTokensIn,\\n        address, /* _tokenOut */\\n        uint256 _minAmountOut\\n    )\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        (bool found, uint256 pid) = getPid(_asset);\\n        require(_asset == CRV || _asset == CVX || found, 'Aladdin pool does not exist');\\n        // convex concentrator as default\\n        bytes memory methodData =\\n            abi.encodeWithSignature(\\n                'withdrawAndClaim(uint256,uint256,uint256,uint8)',\\n                pid,\\n                _investmentTokensIn,\\n                _minAmountOut,\\n                IAladdinConvexVault.ClaimOption.ClaimAsCRV\\n            );\\n        address target = address(aladdinConvexVault);\\n        // clever\\n        if (_asset == CVX) {\\n            target = address(aladdinCVXLocker);\\n            methodData = abi.encodeWithSignature('withdrawUnlocked()');\\n        }\\n        // curve concentrator\\n        if (_asset == CRV) {\\n            target = address(aladdinCRV);\\n            methodData = abi.encodeWithSignature(\\n                'withdraw(address,uint256,uint256,uint8)',\\n                _strategy,\\n                _investmentTokensIn,\\n                _minAmountOut,\\n                IAladdinCRV.WithdrawOption.WithdrawAsCRV\\n            );\\n        }\\n        return (target, 0, methodData);\\n    }\\n\\n    /**\\n     * Return unlock investment calldata to prepare for withdrawal\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _data                           Data\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getUnlockInvestmentCalldata(address _strategy, bytes calldata _data)\\n        internal\\n        view\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        address _asset = BytesLib.decodeOpDataAddress(_data);\\n        if (_asset == CVX) {\\n            (uint256 totalDeposited, uint256 totalPendingUnlocked, , , ) = aladdinCVXLocker.getUserInfo(_strategy);\\n            bytes memory methodData =\\n                abi.encodeWithSignature('unlock(uint256)', totalDeposited.sub(totalPendingUnlocked));\\n            return (address(aladdinCVXLocker), 0, methodData);\\n        }\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Checks if the integration needs to execute a tx to prepare the withdrawal\\n     *\\n     * @param _strategy                           Address of the strategy\\n     * @param _data                               Data param\\n     * @return bool                               True if it is needed\\n     */\\n    function _needsUnlockSignal(address _strategy, bytes calldata _data) internal view override returns (bool) {\\n        address _asset = BytesLib.decodeOpDataAddress(_data);\\n        if (_asset != CVX) {\\n            return false;\\n        }\\n        // Only needed for clever\\n        (uint256 totalDeposited, uint256 totalPendingUnlocked, , , ) = aladdinCVXLocker.getUserInfo(_strategy);\\n        return totalDeposited > totalPendingUnlocked && _getRemainingDurationStrategy(_strategy) <= (17 weeks + 3 days);\\n    }\\n}\\n\",\"keccak256\":\"0x48c9f49e74ee8498fa2e394d828ed7d9d0d3bc16c97c8b93df48151e078a38b4\",\"license\":\"Apache-2.0\"},\"contracts/integrations/passive/PassiveIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeCast} from '@openzeppelin/contracts/utils/SafeCast.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\\n\\nimport {IPassiveIntegration} from '../../interfaces/IPassiveIntegration.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {UniversalERC20} from '../../lib/UniversalERC20.sol';\\nimport {BaseIntegration} from '../BaseIntegration.sol';\\nimport {LowGasSafeMath} from '../../lib/LowGasSafeMath.sol';\\n\\n/**\\n * @title PassiveIntegration\\n * @author Babylon Finance Protocol\\n *\\n * Base class for integration with passive investments like Yearn, Indexed\\n */\\nabstract contract PassiveIntegration is BaseIntegration, ReentrancyGuard, IPassiveIntegration {\\n    using LowGasSafeMath for uint256;\\n    using SafeCast for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    /* ============ Struct ============ */\\n\\n    struct InvestmentInfo {\\n        IStrategy strategy; // Strategy address\\n        IGarden garden; // Garden address\\n        address investment; // Investment address\\n        uint256 investmentTokensInTransaction; // Investment tokens affected by this transaction\\n        uint256 investmentTokensInStrategy; // Investment tokens garden balance\\n        uint256 limitDepositTokenQuantity; // Limit deposit/withdrawal token amount\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event InvestmentEntered(\\n        address indexed garden,\\n        address indexed strategy,\\n        address indexed investment,\\n        address tokenIn,\\n        uint256 investmentTokensOut\\n    );\\n\\n    event InvestmentExited(\\n        address indexed garden,\\n        address indexed strategy,\\n        address indexed investment,\\n        uint256 investmentTokensOut\\n    );\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, IBabController _controller) BaseIntegration(_name, _controller) {}\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Deposits tokens into an investment\\n     *\\n     * @param _strategy                   Address of the strategy\\n     * @param _investmentAddress          Address of the investment token to join\\n     * @param _investmentTokensOut        Min amount of investment tokens to receive\\n     * @param _tokenIn                    Token address to deposit\\n     * @param _maxAmountIn                Max amount of the token to deposit\\n     */\\n    function enterInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokensOut,\\n        address _tokenIn,\\n        uint256 _maxAmountIn\\n    ) external override nonReentrant onlySystemContract {\\n        InvestmentInfo memory investmentInfo =\\n            _createInvestmentInfo(_strategy, _investmentAddress, _investmentTokensOut, _tokenIn, _maxAmountIn);\\n        _validatePreJoinInvestmentData(investmentInfo);\\n        // Pre actions\\n        (address targetAddressP, uint256 callValueP, bytes memory methodDataP) =\\n            _getPreActionCallData(_strategy, _investmentAddress, _maxAmountIn, 0);\\n        if (targetAddressP != address(0)) {\\n            // Approve spending of the pre action token\\n            address approvalAsset = _preActionNeedsApproval(_investmentAddress);\\n            if (approvalAsset != address(0)) {\\n                uint256 bal = IERC20(approvalAsset).balanceOf(_strategy);\\n                investmentInfo.strategy.invokeApprove(_getSpender(_investmentAddress, 0), approvalAsset, bal);\\n            }\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        // Approve spending of the token\\n        if (_tokenIn != address(0)) {\\n            investmentInfo.strategy.invokeApprove(_getSpender(_investmentAddress, 0), _tokenIn, _maxAmountIn);\\n            address extraApproval = _getExtraAssetToApproveEnter(_investmentAddress);\\n            if (extraApproval != address(0)) {\\n                investmentInfo.strategy.invokeApprove(\\n                    _getSpender(_investmentAddress, 0),\\n                    extraApproval,\\n                    IERC20(extraApproval).balanceOf(_strategy)\\n                );\\n            }\\n        }\\n\\n        (address targetInvestment, uint256 callValue, bytes memory methodData) =\\n            _getEnterInvestmentCalldata(_strategy, _investmentAddress, _investmentTokensOut, _tokenIn, _maxAmountIn);\\n        investmentInfo.strategy.invokeFromIntegration(targetInvestment, callValue, methodData);\\n\\n        // Post actions\\n        (targetAddressP, callValueP, methodDataP) = _getPostActionCallData(\\n            _strategy,\\n            _investmentAddress,\\n            _investmentTokensOut,\\n            0\\n        );\\n\\n        if (targetAddressP != address(0)) {\\n            // Approve spending of the post action token\\n            address approvalAsset = _postActionNeedsApproval(_investmentAddress);\\n            if (approvalAsset != address(0)) {\\n                uint256 bal = IERC20(approvalAsset).balanceOf(_strategy);\\n                investmentInfo.strategy.invokeApprove(_getSpender(_investmentAddress, 1), approvalAsset, bal);\\n            }\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        _validatePostEnterInvestmentData(investmentInfo);\\n\\n        emit InvestmentEntered(\\n            address(investmentInfo.garden),\\n            address(investmentInfo.strategy),\\n            _investmentAddress,\\n            _tokenIn,\\n            _investmentTokensOut\\n        );\\n    }\\n\\n    /**\\n     * Exits an outside passive investment\\n     *\\n     * @param _strategy                   Address of the strategy\\n     * @param _investmentAddress          Address of the investment token to exit\\n     * @param _investmentTokenIn          Quantity of investment tokens to return\\n     * @param _tokenOut                   Token address to withdraw\\n     * @param _minAmountOut               Min token quantities to receive from the investment\\n     */\\n    function exitInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokenIn,\\n        address _tokenOut,\\n        uint256 _minAmountOut\\n    ) external override nonReentrant onlySystemContract {\\n        InvestmentInfo memory investmentInfo =\\n            _createInvestmentInfo(_strategy, _investmentAddress, _investmentTokenIn, _tokenOut, _minAmountOut);\\n        _validatePreExitInvestmentData(investmentInfo);\\n\\n        // Pre actions\\n        (address targetAddressP, uint256 callValueP, bytes memory methodDataP) =\\n            _getPreActionCallData(_strategy, _investmentAddress, _investmentTokenIn, 1);\\n\\n        if (targetAddressP != address(0)) {\\n            // Approve spending of the pre action token\\n            address approvalAsset = _preActionNeedsApproval(_investmentAddress);\\n            if (approvalAsset != address(0)) {\\n                investmentInfo.strategy.invokeApprove(\\n                    _getSpender(_investmentAddress, 1),\\n                    approvalAsset,\\n                    IERC20(approvalAsset).balanceOf(_strategy)\\n                );\\n            }\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n            _investmentAddress = _getAssetAfterExitPreAction(_investmentAddress);\\n            // BUG: Does not respect _investmentTokenIn/percentage\\n            _investmentTokenIn = IERC20(_investmentAddress).balanceOf(_strategy);\\n        }\\n        if (_getResultAsset(_investmentAddress) != _getSpender(_investmentAddress, 1)) {\\n            // Approve spending of the investment token\\n            investmentInfo.strategy.invokeApprove(\\n                _getSpender(_investmentAddress, 1),\\n                _investmentAddress,\\n                _investmentTokenIn\\n            );\\n        }\\n        (address targetInvestment, uint256 callValue, bytes memory methodData) =\\n            _getExitInvestmentCalldata(_strategy, _investmentAddress, _investmentTokenIn, _tokenOut, _minAmountOut);\\n\\n        investmentInfo.strategy.invokeFromIntegration(targetInvestment, callValue, methodData);\\n\\n        // Post actions\\n        (targetAddressP, callValueP, methodDataP) = _getPostActionCallData(\\n            _strategy,\\n            _investmentAddress,\\n            _investmentTokenIn,\\n            1\\n        );\\n\\n        if (targetAddressP != address(0)) {\\n            // Approve spending of the post action token\\n            address approvalAsset = _postActionNeedsApproval(_investmentAddress);\\n            if (approvalAsset != address(0)) {\\n                uint256 bal = IERC20(approvalAsset).balanceOf(_strategy);\\n                investmentInfo.strategy.invokeApprove(_getSpender(_investmentAddress, 1), approvalAsset, bal);\\n            }\\n            // Invoke protocol specific call\\n            investmentInfo.strategy.invokeFromIntegration(targetAddressP, callValueP, methodDataP);\\n        }\\n\\n        _validatePostExitInvestmentData(investmentInfo);\\n\\n        emit InvestmentExited(\\n            address(investmentInfo.garden),\\n            address(investmentInfo.strategy),\\n            investmentInfo.investment,\\n            _investmentTokenIn\\n        );\\n    }\\n\\n    /**\\n     * Gets the asset needed to enter the investment\\n     *\\n     * @return address                           Returns the asset that this investment needs\\n     */\\n    function getInvestmentAsset(address _investmentAddress) external view override returns (address) {\\n        return _getInvestmentAsset(_investmentAddress);\\n    }\\n\\n    /**\\n     * Gets the asset you obtained after entering the investment\\n     *\\n     * @return address                            Returns the asset that this investment obtains\\n     */\\n    function getResultAsset(address _investmentAddress) external view override returns (address) {\\n        return _getResultAsset(_investmentAddress);\\n    }\\n\\n    /**\\n     * Gets the balance of the asset you obtained after entering the investment\\n     *\\n     * @param _strategy                           Strategy calling\\n     * @param _resultAssetAddress                 Result asset address\\n     * @return uint256                            Returns the balance of the result asset\\n     */\\n    function getResultBalance(address _strategy, address _resultAssetAddress) external view override returns (uint256) {\\n        return _getResultBalance(_strategy, _resultAssetAddress);\\n    }\\n\\n    /**\\n     * Gets the rewards and the token that they are denominated in\\n     *\\n     * @param _strategy                           Address of the strategy\\n     * @param _investmentAddress                  Address of the investment\\n     * @return address                            Returns the address with the token of extra rewards\\n     * @return uint256                            Extra rewards received so far\\n     */\\n    function getRewards(address _strategy, address _investmentAddress)\\n        external\\n        view\\n        override\\n        returns (address, uint256)\\n    {\\n        return _getRewards(_strategy, _investmentAddress);\\n    }\\n\\n    /**\\n     * Checks if the integration needs to execute a tx to prepare the withdrawal\\n     *\\n     * @param _strategy                           Address of the strategy\\n     * @param _data                               Data param\\n     * @return bool                               True if it is needed\\n     */\\n    function needsUnlockSignal(address _strategy, bytes calldata _data) external view override returns (bool) {\\n        return _needsUnlockSignal(_strategy, _data);\\n    }\\n\\n    /**\\n     * Executes an unlock to prepare for withdrawal\\n     *\\n     * @param _strategy                   Address of the strategy\\n     * @param _data                       Params\\n     */\\n    function signalUnlock(address _strategy, bytes calldata _data) external override nonReentrant onlySystemContract {\\n        (address targetInvestment, uint256 callValue, bytes memory methodData) =\\n            _getUnlockInvestmentCalldata(_strategy, _data);\\n\\n        IStrategy(_strategy).invokeFromIntegration(targetInvestment, callValue, methodData);\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Create and return InvestmentInfo struct\\n     *\\n     * @param _strategy                                 Address of the strategy\\n     * @param _investment                               Address of the investment\\n     * @param _investmentTokensInTransaction            Number of investment tokens involved\\n     * hparam _tokenIn                                  Addresseses of the deposit token\\n     * @param _limitDepositToken                        Limit quantity of the deposit/withdrawal token\\n     *\\n     * return InvestmentInfo                            Struct containing data for the investment\\n     */\\n    function _createInvestmentInfo(\\n        address _strategy,\\n        address _investment,\\n        uint256 _investmentTokensInTransaction,\\n        address, /*_tokenIn*/\\n        uint256 _limitDepositToken\\n    ) internal view returns (InvestmentInfo memory) {\\n        InvestmentInfo memory investmentInfo;\\n        investmentInfo.strategy = IStrategy(_strategy);\\n        investmentInfo.garden = IGarden(investmentInfo.strategy.garden());\\n        investmentInfo.investment = _getResultAsset(_investment);\\n        investmentInfo.investmentTokensInStrategy = _getResultBalance(_strategy, investmentInfo.investment);\\n        investmentInfo.investmentTokensInTransaction = _investmentTokensInTransaction;\\n        investmentInfo.limitDepositTokenQuantity = _limitDepositToken;\\n\\n        return investmentInfo;\\n    }\\n\\n    /**\\n     * Validate pre investment join data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePreJoinInvestmentData(InvestmentInfo memory _investmentInfo) internal pure {\\n        require(\\n            _investmentInfo.investmentTokensInTransaction > 0,\\n            'Min investment tokens to receive must be greater than 0'\\n        );\\n    }\\n\\n    /**\\n     * Validate pre investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePreExitInvestmentData(InvestmentInfo memory _investmentInfo) internal pure {\\n        require(\\n            _investmentInfo.investmentTokensInTransaction > 0,\\n            'Investment tokens to exchange must be greater than 0'\\n        );\\n        require(\\n            _investmentInfo.investmentTokensInStrategy >= _investmentInfo.investmentTokensInTransaction,\\n            'The strategy does not have enough investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post enter investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePostEnterInvestmentData(InvestmentInfo memory _investmentInfo) internal view {\\n        require(\\n            _getResultBalance(address(_investmentInfo.strategy), _investmentInfo.investment) >=\\n                _investmentInfo.investmentTokensInStrategy,\\n            'The strategy did not receive the investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Validate post exit investment data. Check investment is valid, token quantity is valid.\\n     *\\n     * @param _investmentInfo               Struct containing investment information used in internal functions\\n     */\\n    function _validatePostExitInvestmentData(InvestmentInfo memory _investmentInfo) internal view {\\n        require(\\n            _getResultBalance(address(_investmentInfo.strategy), _investmentInfo.investment) <=\\n                (_investmentInfo.investmentTokensInStrategy - _investmentInfo.investmentTokensInTransaction) + 100,\\n            'The strategy did not return the investment tokens'\\n        );\\n    }\\n\\n    /**\\n     * Return join investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _investmentAddress              Address of the investment\\n     * hparam  _investmentTokensOut            Amount of investment tokens to send\\n     * hparam  _tokenIn                       Addresses of tokens to send to the investment\\n     * hparam  _maxAmountIn                   Amounts of tokens to send to the investment\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getEnterInvestmentCalldata(\\n        address, /* _strategy */\\n        address, /* _investmentAddress */\\n        uint256, /* _investmentTokensOut */\\n        address, /* _tokenIn */\\n        uint256 /* _maxAmountIn */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam _strategy                  Address of the strategy\\n     * hparam  _asset                    Address of the asset to deposit\\n     * hparam  _amount                   Amount of the token to deposit\\n     * hparam  _borrowOp                 Type of Passive op\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPreActionCallData(\\n        address, /* _strategy */\\n        address, /* _asset */\\n        uint256, /* _amount */\\n        uint256 /* _borrowOp */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return pre action calldata\\n     *\\n     * hparam  _strategy                 Address of the asset to deposit\\n     * hparam  _asset                    Address of the asset to deposit\\n     * hparam  _amount                   Amount of the token to deposit\\n     * hparam  _passiveOp                 Type of op\\n     *\\n     * @return address                   Target contract address\\n     * @return uint256                   Call value\\n     * @return bytes                     Trade calldata\\n     */\\n    function _getPostActionCallData(\\n        address, /* _strategy */\\n        address, /* _asset */\\n        uint256, /* _amount */\\n        uint256 /* _passiveOp */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    /**\\n     * Return exit investment calldata which is already generated from the investment API\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _investmentAddress              Address of the investment\\n     * hparam  _investmentTokensIn             Amount of investment tokens to receive\\n     * hparam  _tokenOut                       Addresses of token to receive\\n     * hparam  _minAmountOut                   Amount of investment tokens to receive\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getExitInvestmentCalldata(\\n        address, /*_strategy */\\n        address, /*_investmentAddress */\\n        uint256, /*_investmentTokensIn */\\n        address, /*_tokenOut */\\n        uint256 /* _minAmountOut */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        );\\n\\n    /**\\n     * Return unlock investment calldata to prepare for withdrawal\\n     *\\n     * hparam  _strategy                       Address of the strategy\\n     * hparam  _data                           Data\\n     *\\n     * @return address                         Target contract address\\n     * @return uint256                         Call value\\n     * @return bytes                           Trade calldata\\n     */\\n    function _getUnlockInvestmentCalldata(\\n        address, /*_strategy */\\n        bytes calldata /* _data */\\n    )\\n        internal\\n        view\\n        virtual\\n        returns (\\n            address,\\n            uint256,\\n            bytes memory\\n        )\\n    {\\n        return (address(0), 0, bytes(''));\\n    }\\n\\n    function _getInvestmentAsset(\\n        address //_investmentAddress\\n    ) internal view virtual returns (address);\\n\\n    function _getSpender(\\n        address, //_investmentAddress,\\n        uint8 // op\\n    ) internal view virtual returns (address);\\n\\n    function _getRewards(\\n        address, // _strategy\\n        address //_investmentAddress\\n    ) internal view virtual returns (address, uint256) {\\n        return (address(0), 0);\\n    }\\n\\n    function _preActionNeedsApproval(\\n        address /* _asset */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    function _postActionNeedsApproval(\\n        address /* _asset */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n\\n    function _getAssetAfterExitPreAction(address _asset) internal view virtual returns (address) {\\n        return _asset;\\n    }\\n\\n    function _getResultAsset(address _investment) internal view virtual returns (address) {\\n        return _investment;\\n    }\\n\\n    function _getResultBalance(address _strategy, address _resultAssetAddress) internal view virtual returns (uint256) {\\n        return IERC20(_resultAssetAddress).universalBalanceOf(_strategy);\\n    }\\n\\n    /**\\n     * Checks if the integration needs to execute a tx to prepare the withdrawal\\n     *\\n     * hparam _strategy                           Address of the strategy\\n     * hparam _data                               Data param\\n     * @return bool                               True if it is needed\\n     */\\n    function _needsUnlockSignal(\\n        address, /* _strategy */\\n        bytes calldata /* _data */\\n    ) internal view virtual returns (bool) {\\n        return false;\\n    }\\n\\n    function _getExtraAssetToApproveEnter(\\n        address /* _asset */\\n    ) internal view virtual returns (address) {\\n        return address(0);\\n    }\\n}\\n\",\"keccak256\":\"0xd04e4cc0d1965248634c1c78cbd98d12e8438f98049905e5efe3d9c166c66978\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function updateGardenAffiliateRate(address _garden, uint256 _affiliateRate) external;\\n\\n    function addAffiliateReward(\\n        address _depositor,\\n        address _referrer,\\n        uint256 _reserveAmount\\n    ) external;\\n\\n    function claimRewards() external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function patchIntegration(address _old, address _new) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function gardenAffiliateRates(address _wantedAsset) external view returns (uint256);\\n\\n    function affiliateRewards(address _user) external view returns (uint256);\\n\\n    function patchedIntegrations(address _integration) external view returns (address);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xcd735b6881f3f7bc55f3cc667ab38778297e376b73e6e291d1e5d38d8121594d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBaseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\ninterface IBaseIntegration {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc17c281287e52562f824b1eec248005af77da26b7e25b650ee5080b73c6f9d6f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IConvexRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBooster} from './external/convex/IBooster.sol';\\n\\n/**\\n * @title IConvexRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the convex pools\\n */\\ninterface IConvexRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateCache() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function getPid(address _asset) external view returns (bool, uint256);\\n\\n    function convexPools(address _convexAddress) external view returns (bool);\\n\\n    function booster() external view returns (IBooster);\\n\\n    function getRewardPool(address _asset) external view returns (address reward);\\n\\n    function getConvexInputToken(address _pool) external view returns (address inputToken);\\n\\n    function getAllConvexPools() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0xcec04ac179aec85a06b2a21e5f7251059421e3dc89721900b421680757760d33\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function gaugeToPool(address _gaugeAddress) external view returns (address);\\n\\n    function getGauge(address _pool) external view returns (address);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findBestPoolForCoins(address _fromToken, address _toToken) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xba45909fe3561af41662f1cc8948d2d7d36897e1b7d8225b5765314c1c3d4d88\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xe546cde30af3487ba52198348b57b5c220e7febede40c861c46589b105e0a01a\",\"license\":\"MIT\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IERC1271} from '../interfaces/IERC1271.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IEmergencyGarden\\n */\\ninterface IEmergencyGarden {\\n    /* ============ Write ============ */\\n\\n    function wrap() external;\\n}\\n\\n/**\\n * @title IStrategyGarden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy() external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n\\n    function updateStrategyRewards(\\n        address _strategy,\\n        uint256 _newTotalBABLAmount,\\n        uint256 _newCapitalReturned,\\n        uint256 _newRewardsToSetAside\\n    ) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[13] memory _newParams) external;\\n\\n    function verifyGarden(uint256 _verifiedCategory) external;\\n\\n    function resetHardlock(uint256 _hardlockStartsAt) external;\\n}\\n\\n/**\\n * @title IGarden\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256 lastDepositAt,\\n            uint256 initialDepositAt,\\n            uint256 claimedAt,\\n            uint256 claimedBABL,\\n            uint256 claimedRewards,\\n            uint256 withdrawnSince,\\n            uint256 totalDeposits,\\n            uint256 nonce,\\n            uint256 lockedBalance\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function verifiedCategory() external view returns (uint256);\\n\\n    function canMintNftAfter() external view returns (uint256);\\n\\n    function customIntegrationsEnabled() external view returns (bool);\\n\\n    function hardlockStartsAt() external view returns (uint256);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address _to,\\n        address _referrer\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        address _referrer,\\n        bytes memory signature\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimAndStakeReturns(uint256 _minAmountOut, address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimAndStakeRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function stakeBySig(\\n        uint256 _amountIn,\\n        uint256 _profits,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _nonceHeart,\\n        uint256 _maxFee,\\n        address _to,\\n        uint256 _pricePerShare,\\n        address _signer,\\n        bytes memory _signature\\n    ) external;\\n\\n    function claimNFT() external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IEmergencyGarden, IERC20, IERC20Metadata, IERC1271 {\\n    struct Contributor {\\n        uint256 lastDepositAt;\\n        uint256 initialDepositAt;\\n        uint256 claimedAt;\\n        uint256 claimedBABL;\\n        uint256 claimedRewards;\\n        uint256 withdrawnSince;\\n        uint256 totalDeposits;\\n        uint256 nonce;\\n        uint256 lockedBalance;\\n    }\\n}\\n\",\"keccak256\":\"0x894558d0f67ed77b0bf0bf1f0bf2182e63793c2c6557b6bd34e1906bec5f7e2a\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IIntegration\\n * @author Babylon Finance\\n *\\n * Interface for protocol integrations\\n */\\ninterface IIntegration {\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x48fbe466ea0bf19f7cb9a2fdb27e0c49dd7b60705d3cbf5191bb114695226d71\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPassiveIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPassiveIntegration\\n * @author Babylon Finance\\n *\\n * Interface for passive investments protocol integrations\\n */\\ninterface IPassiveIntegration {\\n    function enterInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokensOut,\\n        address _tokenIn,\\n        uint256 _maxAmountIn\\n    ) external;\\n\\n    function exitInvestment(\\n        address _strategy,\\n        address _investmentAddress,\\n        uint256 _investmentTokenIn,\\n        address _tokenOut,\\n        uint256 _minAmountOut\\n    ) external;\\n\\n    function signalUnlock(address _strategy, bytes calldata _data) external;\\n\\n    function getInvestmentAsset(address _investmentAddress) external view returns (address);\\n\\n    function getResultAsset(address _investmentAddress) external view returns (address);\\n\\n    function getResultBalance(address _strategy, address _resultAssetAddress) external view returns (uint256);\\n\\n    function getRewards(address _strategy, address _investmentAddress) external view returns (address, uint256);\\n\\n    function needsUnlockSignal(address _strategy, bytes calldata _data) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x02926f189b1f8f9a9b158f706534f1c5ea89e2bea8e6c24418e3498823b30061\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPickleJarRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPickleJarRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the pickle jars\\n */\\ninterface IPickleJarRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateJars(\\n        address[] calldata _jars,\\n        bool[] calldata _values,\\n        bool[] calldata _uniflags\\n    ) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function jars(address _jarAddress) external view returns (bool);\\n\\n    function noSwapParam(address _jarAddress) external view returns (bool);\\n\\n    function isUniv3(address _jarAddress) external view returns (bool);\\n\\n    function getJarStrategy(address _jarAddress) external view returns (address);\\n\\n    function getJarGauge(address _jarAddress) external view returns (address);\\n\\n    function getJarFromGauge(address _gauge) external view returns (address);\\n\\n    function getAllJars() external view returns (address[] memory);\\n\\n    function getAllGauges() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x4e16ccc53a3e071cc90eaa954cc9ac476d8c45231b14ad7bff40f3e4dc83b00f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ITokenIdentifier} from './ITokenIdentifier.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateReserves(address[] memory list) external;\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) external;\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) external;\\n\\n    function getCompoundExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8cd99857180b06fe33ccc458e35395a94cdb6acda9441819b375a6e1ada7f0d2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[5] calldata _params) external;\\n\\n    function sweep(address _token, uint256 _newSlippage) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(\\n        uint256 fee,\\n        string memory _tokenURI,\\n        uint256 _minReserveOut\\n    ) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _overrideSlippage\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function signalUnlock(uint256 _fee) external;\\n\\n    function updateStrategyRewards(uint256 _newTotalBABLRewards, uint256 _newCapitalReturned) external;\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[15] memory,\\n            bool[2] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0xd3061d0be14785da4b4e45e895faa3d4ebedcdc09b13a3f46a2826f1786a13d8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\nimport {IPickleJarRegistry} from './IPickleJarRegistry.sol';\\nimport {IConvexRegistry} from './IConvexRegistry.sol';\\nimport {IYearnVaultRegistry} from './IYearnVaultRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ View Functions ============ */\\n\\n    function identifyTokens(address _tokenIn, address _tokenOut)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function convexPools(address _pool) external view returns (bool);\\n\\n    function jars(address _jar) external view returns (uint8);\\n\\n    function pickleGauges(address _gauge) external view returns (bool);\\n\\n    function visors(address _visor) external view returns (bool);\\n\\n    function vaults(address _vault) external view returns (bool);\\n\\n    function aTokenToAsset(address _aToken) external view returns (address);\\n\\n    function cTokenToAsset(address _cToken) external view returns (address);\\n\\n    function jarRegistry() external view returns (IPickleJarRegistry);\\n\\n    function vaultRegistry() external view returns (IYearnVaultRegistry);\\n\\n    function curveMetaRegistry() external view returns (ICurveMetaRegistry);\\n\\n    function convexRegistry() external view returns (IConvexRegistry);\\n\\n    /* ============ Functions ============ */\\n\\n    function updateVisor(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function refreshAAveReserves() external;\\n\\n    function refreshCompoundTokens() external;\\n\\n    function updateYearnVaults() external;\\n\\n    function updatePickleJars() external;\\n\\n    function updateConvexPools() external;\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0x5048699b54ba396a363b79a02f9f8dc3c941be3cd4e0398ed43f1a25fd84c2e6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IYearnVaultRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IYearnVaultRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the pickle jars\\n */\\ninterface IYearnVaultRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updateVaults(address[] calldata _jars, bool[] calldata _values) external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function vaults(address _vaultAddress) external view returns (bool);\\n\\n    function getAllVaults() external view returns (address[] memory);\\n}\\n\",\"keccak256\":\"0x73992e6e7885cdf208bd6c61a5724f38573c0fc8b68ac3b33a8e0988ee902aae\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/aladdin/IAladdinCRV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol';\\n\\ninterface IAladdinCRV is IERC20Upgradeable {\\n    event Harvest(address indexed _caller, uint256 _amount);\\n    event Deposit(address indexed _sender, address indexed _recipient, uint256 _amount);\\n    event Withdraw(\\n        address indexed _sender,\\n        address indexed _recipient,\\n        uint256 _shares,\\n        IAladdinCRV.WithdrawOption _option\\n    );\\n\\n    event UpdateWithdrawalFeePercentage(uint256 _feePercentage);\\n    event UpdatePlatformFeePercentage(uint256 _feePercentage);\\n    event UpdateHarvestBountyPercentage(uint256 _percentage);\\n    event UpdatePlatform(address indexed _platform);\\n    event UpdateZap(address indexed _zap);\\n\\n    enum WithdrawOption {Withdraw, WithdrawAndStake, WithdrawAsCRV, WithdrawAsCVX, WithdrawAsETH}\\n\\n    /// @dev return the total amount of cvxCRV staked.\\n    function totalUnderlying() external view returns (uint256);\\n\\n    /// @dev return the amount of cvxCRV staked for user\\n    function balanceOfUnderlying(address _user) external view returns (uint256);\\n\\n    function deposit(address _recipient, uint256 _amount) external returns (uint256);\\n\\n    function depositAll(address _recipient) external returns (uint256);\\n\\n    function depositWithCRV(address _recipient, uint256 _amount) external returns (uint256);\\n\\n    function depositAllWithCRV(address _recipient) external returns (uint256);\\n\\n    function withdraw(\\n        address _recipient,\\n        uint256 _shares,\\n        uint256 _minimumOut,\\n        WithdrawOption _option\\n    ) external returns (uint256);\\n\\n    function withdrawAll(\\n        address _recipient,\\n        uint256 _minimumOut,\\n        WithdrawOption _option\\n    ) external returns (uint256);\\n\\n    function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xe67a53fb2448fdf21a6a0d3c6d85321ef82e963cb24db1fd8d73ebee416417bb\",\"license\":\"MIT\"},\"contracts/interfaces/external/aladdin/IAladdinConvexVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface IAladdinConvexVault {\\n    enum ClaimOption {None, Claim, ClaimAsCvxCRV, ClaimAsCRV, ClaimAsCVX, ClaimAsETH}\\n\\n    struct PoolInfo {\\n        // The amount of total deposited token.\\n        uint128 totalUnderlying;\\n        // The amount of total deposited shares.\\n        uint128 totalShare;\\n        // The accumulated acrv reward per share, with 1e18 precision.\\n        uint256 accRewardPerShare;\\n        // The pool id in Convex Booster.\\n        uint256 convexPoolId;\\n        // The address of deposited token.\\n        address lpToken;\\n        // The address of Convex reward contract.\\n        address crvRewards;\\n        // The withdraw fee percentage, with 1e9 precision.\\n        uint256 withdrawFeePercentage;\\n        // The platform fee percentage, with 1e9 precision.\\n        uint256 platformFeePercentage;\\n        // The harvest bounty percentage, with 1e9 precision.\\n        uint256 harvestBountyPercentage;\\n        // Whether deposit for the pool is paused.\\n        bool pauseDeposit;\\n        // Whether withdraw for the pool is paused.\\n        bool pauseWithdraw;\\n        // The list of addresses of convex reward tokens.\\n        address[] convexRewardTokens;\\n    }\\n\\n    struct UserInfo {\\n        // The amount of shares the user deposited.\\n        uint128 shares;\\n        // The amount of current accrued rewards.\\n        uint128 rewards;\\n        // The reward per share already paid for the user, with 1e18 precision.\\n        uint256 rewardPerSharePaid;\\n    }\\n\\n    event Deposit(uint256 indexed _pid, address indexed _sender, uint256 _amount);\\n    event Withdraw(uint256 indexed _pid, address indexed _sender, uint256 _shares);\\n    event Claim(address indexed _sender, uint256 _reward, ClaimOption _option);\\n    event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);\\n\\n    event UpdateWithdrawalFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\\n    event UpdatePlatformFeePercentage(uint256 indexed _pid, uint256 _feePercentage);\\n    event UpdateHarvestBountyPercentage(uint256 indexed _pid, uint256 _percentage);\\n    event UpdatePlatform(address indexed _platform);\\n    event UpdateZap(address indexed _zap);\\n    event UpdatePoolRewardTokens(uint256 indexed _pid, address[] _rewardTokens);\\n    event AddPool(uint256 indexed _pid, uint256 _convexPid, address[] _rewardTokens);\\n    event PausePoolDeposit(uint256 indexed _pid, bool _status);\\n    event PausePoolWithdraw(uint256 indexed _pid, bool _status);\\n\\n    function pendingReward(uint256 _pid, address _account) external view returns (uint256);\\n\\n    function pendingRewardAll(address _account) external view returns (uint256);\\n\\n    function deposit(uint256 _pid, uint256 _amount) external returns (uint256);\\n\\n    function depositAll(uint256 _pid) external returns (uint256);\\n\\n    function zapAndDeposit(\\n        uint256 _pid,\\n        address _token,\\n        uint256 _amount,\\n        uint256 _minAmount\\n    ) external payable returns (uint256);\\n\\n    function zapAllAndDeposit(\\n        uint256 _pid,\\n        address _token,\\n        uint256 _minAmount\\n    ) external payable returns (uint256);\\n\\n    function withdrawAndZap(\\n        uint256 _pid,\\n        uint256 _shares,\\n        address _token,\\n        uint256 _minOut\\n    ) external returns (uint256);\\n\\n    function withdrawAllAndZap(\\n        uint256 _pid,\\n        address _token,\\n        uint256 _minOut\\n    ) external returns (uint256);\\n\\n    function withdrawAndClaim(\\n        uint256 _pid,\\n        uint256 _shares,\\n        uint256 _minOut,\\n        ClaimOption _option\\n    ) external returns (uint256, uint256);\\n\\n    function withdrawAllAndClaim(\\n        uint256 _pid,\\n        uint256 _minOut,\\n        ClaimOption _option\\n    ) external returns (uint256, uint256);\\n\\n    function claim(\\n        uint256 _pid,\\n        uint256 _minOut,\\n        ClaimOption _option\\n    ) external returns (uint256);\\n\\n    function claimAll(uint256 _minOut, ClaimOption _option) external returns (uint256);\\n\\n    function harvest(\\n        uint256 _pid,\\n        address _recipient,\\n        uint256 _minimumOut\\n    ) external returns (uint256);\\n\\n    function poolInfo(uint256 _pid)\\n        external\\n        view\\n        returns (\\n            uint128 totalUnderlying,\\n            uint128 totalShare,\\n            uint256 accRewardPerShare,\\n            uint256 convexPoolId,\\n            address lpToken,\\n            address crvRewards,\\n            uint256 withdrawFeePercentage,\\n            uint256 platformFeePercentage,\\n            uint256 harvestBountyPercentage,\\n            bool pauseDeposit,\\n            bool pauseWithdraw\\n        );\\n\\n    function poolLength() external view returns (uint256 pools);\\n\\n    function userInfo(uint256 _pid, address _user)\\n        external\\n        view\\n        returns (\\n            uint128 shares,\\n            uint128 rewards,\\n            uint256 rewardPerSharePaid\\n        );\\n}\\n\",\"keccak256\":\"0xed5a2676468a7e36bcf8fcc07bc736f2b9b323868f257867f342fc6ee1e1aa75\",\"license\":\"MIT\"},\"contracts/interfaces/external/aladdin/ICleverCVXLocker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\ninterface ICleverCVXLocker {\\n    event Deposit(address indexed _account, uint256 _amount);\\n    event Unlock(address indexed _account, uint256 _amount);\\n    event Withdraw(address indexed _account, uint256 _amount);\\n    event Repay(address indexed _account, uint256 _cvxAmount, uint256 _clevCVXAmount);\\n    event Borrow(address indexed _account, uint256 _amount);\\n    event Claim(address indexed _account, uint256 _amount);\\n    event Harvest(address indexed _caller, uint256 _reward, uint256 _platformFee, uint256 _harvestBounty);\\n\\n    function getUserInfo(address _account)\\n        external\\n        view\\n        returns (\\n            uint256 totalDeposited,\\n            uint256 totalPendingUnlocked,\\n            uint256 totalUnlocked,\\n            uint256 totalBorrowed,\\n            uint256 totalReward\\n        );\\n\\n    function deposit(uint256 _amount) external;\\n\\n    function unlock(uint256 _amount) external;\\n\\n    function withdrawUnlocked() external;\\n\\n    function repay(uint256 _cvxAmount, uint256 _clevCVXAmount) external;\\n\\n    function borrow(uint256 _amount, bool _depositToFurnace) external;\\n\\n    function donate(uint256 _amount) external;\\n\\n    function harvest(address _recipient, uint256 _minimumOut) external returns (uint256);\\n\\n    // function harvestVotium(IVotiumMultiMerkleStash.claimParam[] calldata claims, uint256 _minimumOut)\\n    //   external\\n    //   returns (uint256);\\n}\\n\",\"keccak256\":\"0x74a8953afeb59348e5f9bbd967445a0a07eb6ebdddc5782c2ebc0c80d16e86e1\",\"license\":\"MIT\"},\"contracts/interfaces/external/convex/IBooster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\ninterface IBooster {\\n    function depositAll(uint256 _pid, bool _stake) external returns (bool);\\n\\n    function poolInfo(uint256)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            address,\\n            address,\\n            address,\\n            bool\\n        );\\n\\n    function deposit(\\n        uint256 _pid,\\n        uint256 _amount,\\n        bool _stake\\n    ) external returns (bool);\\n\\n    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\\n\\n    function withdrawAll(uint256 _pid) external returns (bool);\\n\\n    function poolLength() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x051e36045256c2b170fc4bc58f3e5ccad7df1cf18d81eb4ebdfa0203273de9dd\",\"license\":\"MIT\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * original version by @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n *  Adapted by Babylon Finance.\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.7.6;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n                case 2 {\\n                    // Since the new array still fits in the slot, we just need to\\n                    // update the contents of the slot.\\n                    // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                    sstore(\\n                        _preBytes.slot,\\n                        // all the modifications to the slot are inside this\\n                        // next block\\n                        add(\\n                            // we can just add to the slot contents because the\\n                            // bytes we want to change are the LSBs\\n                            fslot,\\n                            add(\\n                                mul(\\n                                    div(\\n                                        // load the bytes from memory\\n                                        mload(add(_postBytes, 0x20)),\\n                                        // zero all bytes to the right\\n                                        exp(0x100, sub(32, mlength))\\n                                    ),\\n                                    // and now shift left the number of bytes to\\n                                    // leave space for the length in the slot\\n                                    exp(0x100, sub(32, newlength))\\n                                ),\\n                                // increase length by the double of the memory\\n                                // bytes length\\n                                mul(mlength, 2)\\n                            )\\n                        )\\n                    )\\n                }\\n                case 1 {\\n                    // The stored value fits in the slot, but the combined value\\n                    // will exceed it.\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // The contents of the _postBytes array start 32 bytes into\\n                    // the structure. Our first read should obtain the `submod`\\n                    // bytes that can fit into the unused space in the last word\\n                    // of the stored array. To get this, we read 32 bytes starting\\n                    // from `submod`, so the data we read overlaps with the array\\n                    // contents by `submod` bytes. Masking the lowest-order\\n                    // `submod` bytes allows us to add that value directly to the\\n                    // stored value.\\n\\n                    let submod := sub(32, slength)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(\\n                        sc,\\n                        add(\\n                            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                            and(mload(mc), mask)\\n                        )\\n                    )\\n\\n                    for {\\n                        mc := add(mc, 0x20)\\n                        sc := add(sc, 1)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n                default {\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    // Start copying to the last used word of the stored array.\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // Copy over the first `submod` bytes of the new data as in\\n                    // case 1 above.\\n                    let slengthmod := mod(slength, 32)\\n                    let mlengthmod := mod(mlength, 32)\\n                    let submod := sub(32, slengthmod)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                    for {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, 'toUint32_outOfBounds');\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, 'toUint96_outOfBounds');\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, 'toUint128_outOfBounds');\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, 'toBytes32_outOfBounds');\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n                case 1 {\\n                    // slength can contain both the length and contents of the array\\n                    // if length < 32 bytes so let's prepare for that\\n                    // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                    if iszero(iszero(slength)) {\\n                        switch lt(slength, 32)\\n                            case 1 {\\n                                // blank the last byte which is the length\\n                                fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                                if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                                    // unsuccess:\\n                                    success := 0\\n                                }\\n                            }\\n                            default {\\n                                // cb is a circuit breaker in the for loop since there's\\n                                //  no said feature for inline assembly loops\\n                                // cb = 1 - don't breaker\\n                                // cb = 0 - break\\n                                let cb := 1\\n\\n                                // get the keccak hash to get the contents of the array\\n                                mstore(0x0, _preBytes.slot)\\n                                let sc := keccak256(0x0, 0x20)\\n\\n                                let mc := add(_postBytes, 0x20)\\n                                let end := add(mc, mlength)\\n\\n                                // the next line is the loop condition:\\n                                // while(uint256(mc < end) + cb == 2)\\n                                for {\\n\\n                                } eq(add(lt(mc, end), cb), 2) {\\n                                    sc := add(sc, 1)\\n                                    mc := add(mc, 0x20)\\n                                } {\\n                                    if iszero(eq(sload(sc), mload(mc))) {\\n                                        // unsuccess:\\n                                        success := 0\\n                                        cb := 0\\n                                    }\\n                                }\\n                            }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function get64Bytes(bytes memory _data, uint256 _index) internal pure returns (bytes memory) {\\n        return slice(_data, (64 * _index), 64);\\n    }\\n\\n    function decodeOpDataAddressAssembly(bytes memory _data, uint256 _startingByte) internal pure returns (address) {\\n        return toAddress(_data, _startingByte);\\n    }\\n\\n    function decodeOpDataAddress(bytes calldata _data) internal pure returns (address) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address));\\n    }\\n\\n    function decodeOpDataAddressAndUint(bytes memory _data) internal pure returns (address, uint256) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address, uint256));\\n    }\\n\\n    function decodeOpDataAsType(\\n        bytes memory _data,\\n        uint8 _type,\\n        uint8 _offset\\n    ) internal pure returns (bytes memory) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        // type: 0 - uint8, 1: uint256, 2: bool, 3: address\\n        if (_type == 0 || _type == 2) {\\n            // boolean is also 1 byte\\n            // returning bytes type\\n            return slice(_data, _offset, 1); // to return uint8 type better use toUint8(_data, _offset);\\n        } else if (_type == 1) {\\n            // returning bytes type\\n            return slice(_data, _offset, 32); // to return uint256 type better use toUint256(_data, _offset);\\n        } else if (_type == 3) {\\n            // returning bytes type\\n            return slice(_data, _offset, 20); // to return address type better use toAddress(_data, _offset);\\n        }\\n        // Default uint\\n        return slice(_data, _offset, 1);\\n    }\\n}\\n\",\"keccak256\":\"0xc931365fa4fd2e0b3e8b521207f234a23fed80edc552bac651fa9efb21e051e1\",\"license\":\"Unlicense\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8349571932df52641bc6c22f77b577acbb440da1ec0bb617905b8000663ed120\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {UniversalERC20} from '../lib/UniversalERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n    using UniversalERC20 for IERC20;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param _from       ERC20 asset address\\n     * @param _to     ERC20 asset address\\n     * @param _amount Value _to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) internal view returns (uint256) {\\n        uint256 fromDecimals = IERC20(_from).universalDecimals();\\n        uint256 toDecimals = IERC20(_to).universalDecimals();\\n\\n        if (fromDecimals == toDecimals) {\\n            return _amount;\\n        }\\n        if (toDecimals > fromDecimals) {\\n            return _amount.mul(10**(toDecimals - (fromDecimals)));\\n        }\\n        return _amount.div(10**(fromDecimals - (toDecimals)));\\n    }\\n}\\n\",\"keccak256\":\"0x6893691a2b52572965b6816c82e8032c62a16a9437ad3dd6e35b6ded5539a836\",\"license\":\"Apache-2.0\"},\"contracts/lib/UniversalERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\n\\nlibrary UniversalERC20 {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 private constant ZERO_ADDRESS = IERC20(0x0000000000000000000000000000000000000000);\\n    IERC20 private constant ETH_ADDRESS = IERC20(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\n\\n    function universalTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal returns (bool) {\\n        if (amount == 0) {\\n            return true;\\n        }\\n\\n        if (isETH(token)) {\\n            address(uint160(to)).transfer(amount);\\n            return true;\\n        } else {\\n            token.safeTransfer(to, amount);\\n            return true;\\n        }\\n    }\\n\\n    function universalTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (amount == 0) {\\n            return;\\n        }\\n\\n        if (isETH(token)) {\\n            require(from == msg.sender && msg.value >= amount, 'msg.value is zero');\\n            if (to != address(this)) {\\n                address(uint160(to)).transfer(amount);\\n            }\\n            if (msg.value > amount) {\\n                msg.sender.transfer(msg.value.sub(amount));\\n            }\\n        } else {\\n            token.safeTransferFrom(from, to, amount);\\n        }\\n    }\\n\\n    function universalApprove(\\n        IERC20 token,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        if (!isETH(token)) {\\n            if (amount > 0 && token.allowance(address(this), to) > 0) {\\n                token.safeApprove(to, 0);\\n            }\\n            token.safeApprove(to, amount);\\n        }\\n    }\\n\\n    function universalBalanceOf(IERC20 token, address who) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return who.balance;\\n        } else {\\n            return token.balanceOf(who);\\n        }\\n    }\\n\\n    function universalDecimals(IERC20 token) internal view returns (uint256) {\\n        if (isETH(token)) {\\n            return 18;\\n        }\\n\\n        (bool success, bytes memory data) = address(token).staticcall(abi.encodeWithSignature('decimals()'));\\n\\n        return success ? abi.decode(data, (uint256)) : 18;\\n    }\\n\\n    function isETH(IERC20 token) internal pure returns (bool) {\\n        return address(token) == address(ZERO_ADDRESS) || address(token) == address(ETH_ADDRESS);\\n    }\\n}\\n\",\"keccak256\":\"0xcc22cb699452a5d1a29c99622c7dcbe1a49d7242c3376fdc29875484731a837e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405260006004553480156200001657600080fd5b5060405162003bf438038062003bf48339810160408190526200003991620003c6565b60408051808201909152601481527f616c616464696e5f636f6e63656e747261746f7200000000000000000000000060208201528381816001600160a01b038116620000cc576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604482015290519081900360640190fd5b8151620000e1906000906020850190620002ec565b50606090811b6001600160601b0319908116608052600180559086901b1660a0525050600280546001600160a01b0319166001600160a01b038416179055506200012a62000133565b50505062000510565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b1580156200017957600080fd5b505afa1580156200018e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001b49190620004d5565b90508060045410620001c75750620002ea565b6004545b81811015620002e557600254604051631526fe2760e01b81526000916001600160a01b031690631526fe279062000207908590600401620004ee565b6101606040518083038186803b1580156200022157600080fd5b505afa15801562000236573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200025c919062000419565b5050506001600160a01b03909316600081815260036020908152604080832060019d8e019081905560059092528220805460ff19168d179055600680549c8d0181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909a0180546001600160a01b031916909117905550620001cb9650505050505050565b506004555b565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200032457600085556200036f565b82601f106200033f57805160ff19168380011785556200036f565b828001600101855582156200036f579182015b828111156200036f57825182559160200191906001019062000352565b506200037d92915062000381565b5090565b5b808211156200037d576000815560010162000382565b80518015158114620003a957600080fd5b919050565b80516001600160801b0381168114620003a957600080fd5b600080600060608486031215620003db578283fd5b8351620003e881620004f7565b6020850151909350620003fb81620004f7565b60408501519092506200040e81620004f7565b809150509250925092565b60008060008060008060008060008060006101608c8e0312156200043b578687fd5b620004468c620003ae565b9a506200045660208d01620003ae565b995060408c0151985060608c0151975060808c01516200047681620004f7565b60a08d01519097506200048981620004f7565b8096505060c08c0151945060e08c015193506101008c01519250620004b26101208d0162000398565b9150620004c36101408d0162000398565b90509295989b509295989b9093969950565b600060208284031215620004e7578081fd5b5051919050565b90815260200190565b6001600160a01b03811681146200050d57600080fd5b50565b60805160601c60a05160601c61368d62000567600039806104c352806122d752806124fb52806126cc5280612a8e5280612daa5280612e1252508061058e52806110965280611c4452806120bd525061368d6000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806391122e4611610097578063d6e5acb011610066578063d6e5acb014610216578063f01fbcc714610236578063f337f6301461023e578063f77c47911461025157610100565b806391122e46146101ca578063976a99be146101dd578063c7eb7846146101f0578063d64bd2981461020357610100565b806360320903116100d35780636032090314610179578063779bcb9b146101815780637b082a74146101a2578063871be911146101b557610100565b806306fdde031461010557806343b55f351461012357806355f974e2146101445780635a59833714610159575b600080fd5b61010d610259565b60405161011a9190613478565b60405180910390f35b610136610131366004613172565b6102e7565b60405161011a929190613468565b61014c61049d565b60405161011a91906133f9565b61016c610167366004613172565b6104ac565b60405161011a919061345d565b61014c6104c1565b61019461018f36600461318e565b6104e5565b60405161011a92919061340d565b61014c6101b0366004613172565b6104fe565b6101c86101c33660046131c6565b610511565b005b61016c6101d8366004613220565b611002565b6101c86101eb3660046131c6565b611019565b61014c6101fe36600461338a565b611b9d565b6101c8610211366004613220565b611bc7565b61022961022436600461318e565b611ed8565b60405161011a9190613502565b6101c8611eed565b61014c61024c366004613172565b6120b0565b61014c6120bb565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081565b6001600160a01b03811660009081526003602052604081205481901561032e5750506001600160a01b03811660009081526003602052604090205460019060001901610498565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b15801561037357600080fd5b505afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab91906133a2565b905080600454106103c3576000809250925050610498565b6004545b8181101561048e57600254604051631526fe2760e01b81526000916001600160a01b031690631526fe2790610400908590600401613502565b6101606040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906132db565b505050505050945050505050856001600160a01b0316816001600160a01b0316141561048557506001935091506104989050565b506001016103c7565b5060008092509250505b915091565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104f284846120df565b915091505b9250929050565b6000610509826122ad565b90505b919050565b60026001541415610569576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b1580156105d457600080fd5b505afa1580156105e8573d6000803e3d6000fd5b505050506040513d60208110156105fe57600080fd5b5051610651576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061066086868686866122ff565b905061066b816123e3565b600080600061067d8989896001612470565b919450925090506001600160a01b03831615610a0557600061069e8961248b565b90506001600160a01b038116156107ca5784516001600160a01b03166397ccdc606106ca8b6001612491565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d602081101561074257600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610841578181015183820152602001610829565b50505050905090810190601f16801561086e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108cc57600080fd5b81019080805160405193929190846401000000008211156108ec57600080fd5b90830190602082018581111561090157600080fd5b825164010000000081118282018810171561091b57600080fd5b82525081516020918201929091019080838360005b83811015610948578181015183820152602001610930565b50505050905090810190601f1680156109755780820380516001836020036101000a031916815260200191505b506040525050505061098689612532565b9850886001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109d557600080fd5b505afa1580156109e9573d6000803e3d6000fd5b505050506040513d60208110156109ff57600080fd5b50519750505b610a10886001612491565b6001600160a01b0316610a22896122ad565b6001600160a01b031614610abc5783516001600160a01b03166397ccdc60610a4b8a6001612491565b8a8a6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050505b6000806000610ace8c8c8c8c8c612535565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b4b578181015183820152602001610b33565b50505050905090810190601f168015610b785780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610bd657600080fd5b8101908080516040519392919084640100000000821115610bf657600080fd5b908301906020820185811115610c0b57600080fd5b8251640100000000811182820188101715610c2557600080fd5b82525081516020918201929091019080838360005b83811015610c52578181015183820152602001610c3a565b50505050905090810190601f168015610c7f5780820380516001836020036101000a031916815260200191505b5060405250505050610c948c8c8c6001612470565b919750955093506001600160a01b03861615610f86576000610cb58c61248b565b90506001600160a01b03811615610dd1576000816001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b505189519091506001600160a01b03166397ccdc60610d5f8f6001612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b50505050505b87600001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e48578181015183820152602001610e30565b50505050905090810190601f168015610e755780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ed357600080fd5b8101908080516040519392919084640100000000821115610ef357600080fd5b908301906020820185811115610f0857600080fd5b8251640100000000811182820188101715610f2257600080fd5b82525081516020918201929091019080838360005b83811015610f4f578181015183820152602001610f37565b50505050905090810190601f168015610f7c5780820380516001836020036101000a031916815260200191505b5060405250505050505b610f8f8761275e565b86604001516001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167f99d773709d80de3e15433c22c381fd8e3b82a68b56322240ff4a304956ef0e528d6040518082815260200191505060405180910390a450506001805550505050505050505050565b600061100f8484846127bb565b90505b9392505050565b60026001541415611071576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d602081101561110657600080fd5b5051611159576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061116886868686866122ff565b9050611173816128b0565b60008060006111858989876000612470565b919450925090506001600160a01b038316156114775760006111a68961248b565b90506001600160a01b038116156112c2576000816001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b505186519091506001600160a01b03166397ccdc606112508c6000612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156112a857600080fd5b505af11580156112bc573d6000803e3d6000fd5b50505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611339578181015183820152602001611321565b50505050905090810190601f1680156113665780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113c457600080fd5b81019080805160405193929190846401000000008211156113e457600080fd5b9083019060208201858111156113f957600080fd5b825164010000000081118282018810171561141357600080fd5b82525081516020918201929091019080838360005b83811015611440578181015183820152602001611428565b50505050905090810190601f16801561146d5780820380516001836020036101000a031916815260200191505b5060405250505050505b6001600160a01b0386161561164a5783516001600160a01b03166397ccdc606114a18a6000612491565b88886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b50505050600061151c8961248b565b90506001600160a01b038116156116485784516001600160a01b03166397ccdc606115488b6000612491565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561159657600080fd5b505afa1580156115aa573d6000803e3d6000fd5b505050506040513d60208110156115c057600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050505b505b600080600061165c8c8c8c8c8c6128f3565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116d95781810151838201526020016116c1565b50505050905090810190601f1680156117065780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561176457600080fd5b810190808051604051939291908464010000000082111561178457600080fd5b90830190602082018581111561179957600080fd5b82516401000000008111828201881017156117b357600080fd5b82525081516020918201929091019080838360005b838110156117e05781810151838201526020016117c8565b50505050905090810190601f16801561180d5780820380516001836020036101000a031916815260200191505b50604052505050506118228c8c8c6000612470565b919750955093506001600160a01b03861615611b145760006118438c61248b565b90506001600160a01b0381161561195f576000816001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118a357600080fd5b505afa1580156118b7573d6000803e3d6000fd5b505050506040513d60208110156118cd57600080fd5b505189519091506001600160a01b03166397ccdc606118ed8f6001612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b50505050505b87600001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119d65781810151838201526020016119be565b50505050905090810190601f168015611a035780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611a6157600080fd5b8101908080516040519392919084640100000000821115611a8157600080fd5b908301906020820185811115611a9657600080fd5b8251640100000000811182820188101715611ab057600080fd5b82525081516020918201929091019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b5060405250505050505b611b1d87612b1a565b8a6001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167fdc0718d28ea0f80518c2c454af93bc46bf51dd4a1b25a048ca4ca75a7ac359c48c8e60405180836001600160a01b031681526020018281526020019250505060405180910390a450506001805550505050505050505050565b60068181548110611bad57600080fd5b6000918252602090912001546001600160a01b0316905081565b60026001541415611c1f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b158015611c8a57600080fd5b505afa158015611c9e573d6000803e3d6000fd5b505050506040513d6020811015611cb457600080fd5b5051611d07576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b6000806000611d17868686612b6e565b925092509250856001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d90578181015183820152602001611d78565b50505050905090810190601f168015611dbd5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611dde57600080fd5b505af1158015611df2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611e1b57600080fd5b8101908080516040519392919084640100000000821115611e3b57600080fd5b908301906020820185811115611e5057600080fd5b8251640100000000811182820188101715611e6a57600080fd5b82525081516020918201929091019080838360005b83811015611e97578181015183820152602001611e7f565b50505050905090810190601f168015611ec45780820380516001836020036101000a031916815260200191505b506040525050600180555050505050505050565b6000611ee48383612ce9565b90505b92915050565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b158015611f3257600080fd5b505afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a91906133a2565b90508060045410611f7b57506120ae565b6004545b818110156120a957600254604051631526fe2760e01b81526000916001600160a01b031690631526fe2790611fb8908590600401613502565b6101606040518083038186803b158015611fd157600080fd5b505afa158015611fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200991906132db565b5050506001600160a01b03909316600081815260036020908152604080832060019d8e019081905560059092528220805460ff19168d179055600680549c8d0181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909a0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905550611f7f9650505050505050565b506004555b565b600061050982612532565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806001600160a01b038316734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156121b557604051636386c1c760e01b81526000907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c7906121419088906004016133f9565b60a06040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219191906133ba565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b975095506104f7945050505050565b6001600160a01b03831673d533a949740bb3306d119cc777fa900ba034cd5214156121e5575060009050806104f7565b60006121f0846102e7565b6002546040516393f1a40b60e01b8152919350600092506001600160a01b0316906393f1a40b906122279085908a9060040161350b565b60606040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227791906132a0565b5073d533a949740bb3306d119cc777fa900ba034cd5295506fffffffffffffffffffffffffffffffff1693505050509250929050565b60006001600160a01b03821673d533a949740bb3306d119cc777fa900ba034cd5214156122fb57507f000000000000000000000000000000000000000000000000000000000000000061050c565b5090565b6123076130f1565b61230f6130f1565b6001600160a01b038716808252604080517f56ba88b800000000000000000000000000000000000000000000000000000000815290516356ba88b891600480820192602092909190829003018186803b15801561236b57600080fd5b505afa15801561237f573d6000803e3d6000fd5b505050506040513d602081101561239557600080fd5b50516001600160a01b031660208201526123ae866122ad565b6001600160a01b0316604082018190526123c9908890612ce9565b608082015260608101949094525060a08301525092915050565b60008160600151116124265760405162461bcd60e51b81526004018080602001828103825260348152602001806136246034913960400191505060405180910390fd5b80606001518160800151101561246d5760405162461bcd60e51b81526004018080602001828103825260338152602001806135576033913960400191505060405180910390fd5b50565b50506040805160208101909152600080825293849350909150565b50600090565b60006001600160a01b038316734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156124d357507396c68d861ada016ed98c30c810879f9df7c64154611ee7565b6001600160a01b03831673d533a949740bb3306d119cc777fa900ba034cd52141561251f57507f0000000000000000000000000000000000000000000000000000000000000000611ee7565b506002546001600160a01b031692915050565b90565b6000806060600080612546896102e7565b90925090506001600160a01b03891673d533a949740bb3306d119cc777fa900ba034cd52148061259257506001600160a01b038916734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b145b8061259a5750815b6125bf5760405162461bcd60e51b81526004016125b6906134cb565b60405180910390fd5b600081898860036040516024016125d99493929190613522565b60408051601f198184030181529190526020810180516001600160e01b03167f995bca01000000000000000000000000000000000000000000000000000000001790526002549091506001600160a01b03908116908b16734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156126a55750506040805160048152602481019091526020810180516001600160e01b03167f6fcd112b000000000000000000000000000000000000000000000000000000001790527396c68d861ada016ed98c30c810879f9df7c641545b6001600160a01b038b1673d533a949740bb3306d119cc777fa900ba034cd52141561274b577f000000000000000000000000000000000000000000000000000000000000000090508b8a8960026040516024016127059493929190613426565b60408051601f198184030181529190526020810180516001600160e01b03167f15980d890000000000000000000000000000000000000000000000000000000017905291505b9b60009b50909950975050505050505050565b806060015181608001510360640161277e82600001518360400151612ce9565b111561246d5760405162461bcd60e51b81526004018080602001828103825260318152602001806135bc6031913960400191505060405180910390fd5b6000806127c88484612f4d565b90506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b146127f8576000915050611012565b604051636386c1c760e01b815260009081907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612834908a906004016133f9565b60a06040518083038186803b15801561284c57600080fd5b505afa158015612860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288491906133ba565b5050509150915080821180156128a5575062a0d7006128a288612f71565b11155b979650505050505050565b600081606001511161246d5760405162461bcd60e51b81526004018080602001828103825260378152602001806135ed6037913960400191505060405180910390fd5b6000806060600080612904896102e7565b90925090506001600160a01b03891673d533a949740bb3306d119cc777fa900ba034cd52148061295057506001600160a01b038916734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b145b806129585750815b6129745760405162461bcd60e51b81526004016125b6906134cb565b6000816040516024016129879190613502565b60408051601f198184030181529190526020810180516001600160e01b03167fc6f678bd000000000000000000000000000000000000000000000000000000001790526002549091506001600160a01b03908116908b16734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612a67577396c68d861ada016ed98c30c810879f9df7c64154905087604051602401612a219190613502565b60408051601f198184030181529190526020810180516001600160e01b03167fb6b55f250000000000000000000000000000000000000000000000000000000017905291505b6001600160a01b038b1673d533a949740bb3306d119cc777fa900ba034cd52141561274b577f000000000000000000000000000000000000000000000000000000000000000090508b604051602401612ac091906133f9565b60408051601f198184030181529190526020810180516001600160e01b03167f4c4b5fd700000000000000000000000000000000000000000000000000000000179052915095506000945092505050955095509592505050565b8060800151612b3182600001518360400151612ce9565b101561246d5760405162461bcd60e51b815260040180806020018281038252603281526020018061358a6032913960400191505060405180910390fd5b60008060606000612b7f8686612f4d565b90506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612cc857604051636386c1c760e01b815260009081907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612be2908c906004016133f9565b60a06040518083038186803b158015612bfa57600080fd5b505afa158015612c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3291906133ba565b505050915091506000612c4e82846130e190919063ffffffff16565b604051602401612c5e9190613502565b60408051601f198184030181529190526020810180516001600160e01b03167f6198e339000000000000000000000000000000000000000000000000000000001790527396c68d861ada016ed98c30c810879f9df7c641549750600096509450612ce09350505050565b50506040805160208101909152600080825292508291505b93509350939050565b60006001600160a01b038216734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612da857604051636386c1c760e01b81526000907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612d4a9087906004016133f9565b60a06040518083038186803b158015612d6257600080fd5b505afa158015612d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9a91906133ba565b50929450611ee79350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612e9e576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e479086906004016133f9565b60206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9791906133a2565b9050611ee7565b6000612ea9836102e7565b6002546040516393f1a40b60e01b8152919350600092506001600160a01b0316906393f1a40b90612ee0908590899060040161350b565b60606040518083038186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3091906132a0565b50506fffffffffffffffffffffffffffffffff1695945050505050565b600082826020811015612f5f57600080fd5b50356001600160a01b03169392505050565b6000808290506000816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b158015612fb257600080fd5b505afa158015612fc6573d6000803e3d6000fd5b505050506040513d60e0811015612fdc57600080fd5b506080015190506000612fef42836130e1565b9050826001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b15801561302a57600080fd5b505afa15801561303e573d6000803e3d6000fd5b505050506040513d602081101561305457600080fd5b5051811115613069576000935050505061050c565b6130d881846001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a657600080fd5b505afa1580156130ba573d6000803e3d6000fd5b505050506040513d60208110156130d057600080fd5b5051906130e1565b95945050505050565b80820382811115611ee757600080fd5b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b8051801515811461050c57600080fd5b80516fffffffffffffffffffffffffffffffff8116811461050c57600080fd5b600060208284031215613183578081fd5b813561101281613541565b600080604083850312156131a0578081fd5b82356131ab81613541565b915060208301356131bb81613541565b809150509250929050565b600080600080600060a086880312156131dd578081fd5b85356131e881613541565b945060208601356131f881613541565b935060408601359250606086013561320f81613541565b949793965091946080013592915050565b600080600060408486031215613234578283fd5b833561323f81613541565b9250602084013567ffffffffffffffff8082111561325b578384fd5b818601915086601f83011261326e578384fd5b81358181111561327c578485fd5b87602082850101111561328d578485fd5b6020830194508093505050509250925092565b6000806000606084860312156132b4578283fd5b6132bd84613152565b92506132cb60208501613152565b9150604084015190509250925092565b60008060008060008060008060008060006101608c8e0312156132fc578586fd5b6133058c613152565b9a5061331360208d01613152565b995060408c0151985060608c0151975060808c015161333181613541565b60a08d015190975061334281613541565b8096505060c08c0151945060e08c015193506101008c015192506133696101208d01613142565b91506133786101408d01613142565b90509295989b509295989b9093969950565b60006020828403121561339b578081fd5b5035919050565b6000602082840312156133b3578081fd5b5051919050565b600080600080600060a086880312156133d1578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03851681526020810184905260408101839052608081016005831061344e57fe5b82606083015295945050505050565b901515815260200190565b9115158252602082015260400190565b6000602080835283518082850152825b818110156134a457858101830151858201604001528201613488565b818111156134b55783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f416c616464696e20706f6f6c20646f6573206e6f742065786973740000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b8481526020810184905260408101839052608081016006831061344e57fe5b6001600160a01b038116811461246d57600080fdfe54686520737472617465677920646f6573206e6f74206861766520656e6f75676820696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f7420726563656976652074686520696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f742072657475726e2074686520696e766573746d656e7420746f6b656e734d696e20696e766573746d656e7420746f6b656e7320746f2072656365697665206d7573742062652067726561746572207468616e2030496e766573746d656e7420746f6b656e7320746f2065786368616e6765206d7573742062652067726561746572207468616e2030a2646970667358221220e19faa5688dc423611520dce57e55a2385f1f37a80be7194601330e1603a715864736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101005760003560e01c806391122e4611610097578063d6e5acb011610066578063d6e5acb014610216578063f01fbcc714610236578063f337f6301461023e578063f77c47911461025157610100565b806391122e46146101ca578063976a99be146101dd578063c7eb7846146101f0578063d64bd2981461020357610100565b806360320903116100d35780636032090314610179578063779bcb9b146101815780637b082a74146101a2578063871be911146101b557610100565b806306fdde031461010557806343b55f351461012357806355f974e2146101445780635a59833714610159575b600080fd5b61010d610259565b60405161011a9190613478565b60405180910390f35b610136610131366004613172565b6102e7565b60405161011a929190613468565b61014c61049d565b60405161011a91906133f9565b61016c610167366004613172565b6104ac565b60405161011a919061345d565b61014c6104c1565b61019461018f36600461318e565b6104e5565b60405161011a92919061340d565b61014c6101b0366004613172565b6104fe565b6101c86101c33660046131c6565b610511565b005b61016c6101d8366004613220565b611002565b6101c86101eb3660046131c6565b611019565b61014c6101fe36600461338a565b611b9d565b6101c8610211366004613220565b611bc7565b61022961022436600461318e565b611ed8565b60405161011a9190613502565b6101c8611eed565b61014c61024c366004613172565b6120b0565b61014c6120bb565b6000805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102df5780601f106102b4576101008083540402835291602001916102df565b820191906000526020600020905b8154815290600101906020018083116102c257829003601f168201915b505050505081565b6001600160a01b03811660009081526003602052604081205481901561032e5750506001600160a01b03811660009081526003602052604090205460019060001901610498565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b15801561037357600080fd5b505afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab91906133a2565b905080600454106103c3576000809250925050610498565b6004545b8181101561048e57600254604051631526fe2760e01b81526000916001600160a01b031690631526fe2790610400908590600401613502565b6101606040518083038186803b15801561041957600080fd5b505afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045191906132db565b505050505050945050505050856001600160a01b0316816001600160a01b0316141561048557506001935091506104989050565b506001016103c7565b5060008092509250505b915091565b6002546001600160a01b031681565b60056020526000908152604090205460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806104f284846120df565b915091505b9250929050565b6000610509826122ad565b90505b919050565b60026001541415610569576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b1580156105d457600080fd5b505afa1580156105e8573d6000803e3d6000fd5b505050506040513d60208110156105fe57600080fd5b5051610651576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061066086868686866122ff565b905061066b816123e3565b600080600061067d8989896001612470565b919450925090506001600160a01b03831615610a0557600061069e8961248b565b90506001600160a01b038116156107ca5784516001600160a01b03166397ccdc606106ca8b6001612491565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561071857600080fd5b505afa15801561072c573d6000803e3d6000fd5b505050506040513d602081101561074257600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b1580156107b157600080fd5b505af11580156107c5573d6000803e3d6000fd5b505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610841578181015183820152602001610829565b50505050905090810190601f16801561086e5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561088f57600080fd5b505af11580156108a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156108cc57600080fd5b81019080805160405193929190846401000000008211156108ec57600080fd5b90830190602082018581111561090157600080fd5b825164010000000081118282018810171561091b57600080fd5b82525081516020918201929091019080838360005b83811015610948578181015183820152602001610930565b50505050905090810190601f1680156109755780820380516001836020036101000a031916815260200191505b506040525050505061098689612532565b9850886001600160a01b03166370a082318b6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156109d557600080fd5b505afa1580156109e9573d6000803e3d6000fd5b505050506040513d60208110156109ff57600080fd5b50519750505b610a10886001612491565b6001600160a01b0316610a22896122ad565b6001600160a01b031614610abc5783516001600160a01b03166397ccdc60610a4b8a6001612491565b8a8a6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610aa357600080fd5b505af1158015610ab7573d6000803e3d6000fd5b505050505b6000806000610ace8c8c8c8c8c612535565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610b4b578181015183820152602001610b33565b50505050905090810190601f168015610b785780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610b9957600080fd5b505af1158015610bad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610bd657600080fd5b8101908080516040519392919084640100000000821115610bf657600080fd5b908301906020820185811115610c0b57600080fd5b8251640100000000811182820188101715610c2557600080fd5b82525081516020918201929091019080838360005b83811015610c52578181015183820152602001610c3a565b50505050905090810190601f168015610c7f5780820380516001836020036101000a031916815260200191505b5060405250505050610c948c8c8c6001612470565b919750955093506001600160a01b03861615610f86576000610cb58c61248b565b90506001600160a01b03811615610dd1576000816001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610d1557600080fd5b505afa158015610d29573d6000803e3d6000fd5b505050506040513d6020811015610d3f57600080fd5b505189519091506001600160a01b03166397ccdc60610d5f8f6001612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b158015610db757600080fd5b505af1158015610dcb573d6000803e3d6000fd5b50505050505b87600001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015610e48578181015183820152602001610e30565b50505050905090810190601f168015610e755780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015610e9657600080fd5b505af1158015610eaa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015610ed357600080fd5b8101908080516040519392919084640100000000821115610ef357600080fd5b908301906020820185811115610f0857600080fd5b8251640100000000811182820188101715610f2257600080fd5b82525081516020918201929091019080838360005b83811015610f4f578181015183820152602001610f37565b50505050905090810190601f168015610f7c5780820380516001836020036101000a031916815260200191505b5060405250505050505b610f8f8761275e565b86604001516001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167f99d773709d80de3e15433c22c381fd8e3b82a68b56322240ff4a304956ef0e528d6040518082815260200191505060405180910390a450506001805550505050505050505050565b600061100f8484846127bb565b90505b9392505050565b60026001541415611071576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b1580156110dc57600080fd5b505afa1580156110f0573d6000803e3d6000fd5b505050506040513d602081101561110657600080fd5b5051611159576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b600061116886868686866122ff565b9050611173816128b0565b60008060006111858989876000612470565b919450925090506001600160a01b038316156114775760006111a68961248b565b90506001600160a01b038116156112c2576000816001600160a01b03166370a082318c6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b505186519091506001600160a01b03166397ccdc606112508c6000612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156112a857600080fd5b505af11580156112bc573d6000803e3d6000fd5b50505050505b84600001516001600160a01b0316636bc195dd8585856040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611339578181015183820152602001611321565b50505050905090810190601f1680156113665780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156113c457600080fd5b81019080805160405193929190846401000000008211156113e457600080fd5b9083019060208201858111156113f957600080fd5b825164010000000081118282018810171561141357600080fd5b82525081516020918201929091019080838360005b83811015611440578181015183820152602001611428565b50505050905090810190601f16801561146d5780820380516001836020036101000a031916815260200191505b5060405250505050505b6001600160a01b0386161561164a5783516001600160a01b03166397ccdc606114a18a6000612491565b88886040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b1580156114f957600080fd5b505af115801561150d573d6000803e3d6000fd5b50505050600061151c8961248b565b90506001600160a01b038116156116485784516001600160a01b03166397ccdc606115488b6000612491565b83846001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561159657600080fd5b505afa1580156115aa573d6000803e3d6000fd5b505050506040513d60208110156115c057600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b15801561162f57600080fd5b505af1158015611643573d6000803e3d6000fd5b505050505b505b600080600061165c8c8c8c8c8c6128f3565b92509250925086600001516001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156116d95781810151838201526020016116c1565b50505050905090810190601f1680156117065780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b15801561172757600080fd5b505af115801561173b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052602081101561176457600080fd5b810190808051604051939291908464010000000082111561178457600080fd5b90830190602082018581111561179957600080fd5b82516401000000008111828201881017156117b357600080fd5b82525081516020918201929091019080838360005b838110156117e05781810151838201526020016117c8565b50505050905090810190601f16801561180d5780820380516001836020036101000a031916815260200191505b50604052505050506118228c8c8c6000612470565b919750955093506001600160a01b03861615611b145760006118438c61248b565b90506001600160a01b0381161561195f576000816001600160a01b03166370a082318f6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156118a357600080fd5b505afa1580156118b7573d6000803e3d6000fd5b505050506040513d60208110156118cd57600080fd5b505189519091506001600160a01b03166397ccdc606118ed8f6001612491565b84846040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050600060405180830381600087803b15801561194557600080fd5b505af1158015611959573d6000803e3d6000fd5b50505050505b87600001516001600160a01b0316636bc195dd8888886040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156119d65781810151838201526020016119be565b50505050905090810190601f168015611a035780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611a2457600080fd5b505af1158015611a38573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611a6157600080fd5b8101908080516040519392919084640100000000821115611a8157600080fd5b908301906020820185811115611a9657600080fd5b8251640100000000811182820188101715611ab057600080fd5b82525081516020918201929091019080838360005b83811015611add578181015183820152602001611ac5565b50505050905090810190601f168015611b0a5780820380516001836020036101000a031916815260200191505b5060405250505050505b611b1d87612b1a565b8a6001600160a01b031687600001516001600160a01b031688602001516001600160a01b03167fdc0718d28ea0f80518c2c454af93bc46bf51dd4a1b25a048ca4ca75a7ac359c48c8e60405180836001600160a01b031681526020018281526020019250505060405180910390a450506001805550505050505050505050565b60068181548110611bad57600080fd5b6000918252602090912001546001600160a01b0316905081565b60026001541415611c1f576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b6002600155604080516313bc6d4b60e01b815233600482015290516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016916313bc6d4b916024808301926020929190829003018186803b158015611c8a57600080fd5b505afa158015611c9e573d6000803e3d6000fd5b505050506040513d6020811015611cb457600080fd5b5051611d07576040805162461bcd60e51b815260206004820152601960248201527f4f6e6c792073797374656d2063616e2063616c6c207468697300000000000000604482015290519081900360640190fd5b6000806000611d17868686612b6e565b925092509250856001600160a01b0316636bc195dd8484846040518463ffffffff1660e01b815260040180846001600160a01b0316815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b83811015611d90578181015183820152602001611d78565b50505050905090810190601f168015611dbd5780820380516001836020036101000a031916815260200191505b50945050505050600060405180830381600087803b158015611dde57600080fd5b505af1158015611df2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526020811015611e1b57600080fd5b8101908080516040519392919084640100000000821115611e3b57600080fd5b908301906020820185811115611e5057600080fd5b8251640100000000811182820188101715611e6a57600080fd5b82525081516020918201929091019080838360005b83811015611e97578181015183820152602001611e7f565b50505050905090810190601f168015611ec45780820380516001836020036101000a031916815260200191505b506040525050600180555050505050505050565b6000611ee48383612ce9565b90505b92915050565b6002546040805163040f1f6d60e11b815290516000926001600160a01b03169163081e3eda916004808301926020929190829003018186803b158015611f3257600080fd5b505afa158015611f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f6a91906133a2565b90508060045410611f7b57506120ae565b6004545b818110156120a957600254604051631526fe2760e01b81526000916001600160a01b031690631526fe2790611fb8908590600401613502565b6101606040518083038186803b158015611fd157600080fd5b505afa158015611fe5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200991906132db565b5050506001600160a01b03909316600081815260036020908152604080832060019d8e019081905560059092528220805460ff19168d179055600680549c8d0181559091527ff652222313e28459528d920b65115c16c04f3efc82aaedc97be59f3f377c0d3f909a0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016909117905550611f7f9650505050505050565b506004555b565b600061050982612532565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806001600160a01b038316734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156121b557604051636386c1c760e01b81526000907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c7906121419088906004016133f9565b60a06040518083038186803b15801561215957600080fd5b505afa15801561216d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061219191906133ba565b734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b975095506104f7945050505050565b6001600160a01b03831673d533a949740bb3306d119cc777fa900ba034cd5214156121e5575060009050806104f7565b60006121f0846102e7565b6002546040516393f1a40b60e01b8152919350600092506001600160a01b0316906393f1a40b906122279085908a9060040161350b565b60606040518083038186803b15801561223f57600080fd5b505afa158015612253573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061227791906132a0565b5073d533a949740bb3306d119cc777fa900ba034cd5295506fffffffffffffffffffffffffffffffff1693505050509250929050565b60006001600160a01b03821673d533a949740bb3306d119cc777fa900ba034cd5214156122fb57507f000000000000000000000000000000000000000000000000000000000000000061050c565b5090565b6123076130f1565b61230f6130f1565b6001600160a01b038716808252604080517f56ba88b800000000000000000000000000000000000000000000000000000000815290516356ba88b891600480820192602092909190829003018186803b15801561236b57600080fd5b505afa15801561237f573d6000803e3d6000fd5b505050506040513d602081101561239557600080fd5b50516001600160a01b031660208201526123ae866122ad565b6001600160a01b0316604082018190526123c9908890612ce9565b608082015260608101949094525060a08301525092915050565b60008160600151116124265760405162461bcd60e51b81526004018080602001828103825260348152602001806136246034913960400191505060405180910390fd5b80606001518160800151101561246d5760405162461bcd60e51b81526004018080602001828103825260338152602001806135576033913960400191505060405180910390fd5b50565b50506040805160208101909152600080825293849350909150565b50600090565b60006001600160a01b038316734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156124d357507396c68d861ada016ed98c30c810879f9df7c64154611ee7565b6001600160a01b03831673d533a949740bb3306d119cc777fa900ba034cd52141561251f57507f0000000000000000000000000000000000000000000000000000000000000000611ee7565b506002546001600160a01b031692915050565b90565b6000806060600080612546896102e7565b90925090506001600160a01b03891673d533a949740bb3306d119cc777fa900ba034cd52148061259257506001600160a01b038916734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b145b8061259a5750815b6125bf5760405162461bcd60e51b81526004016125b6906134cb565b60405180910390fd5b600081898860036040516024016125d99493929190613522565b60408051601f198184030181529190526020810180516001600160e01b03167f995bca01000000000000000000000000000000000000000000000000000000001790526002549091506001600160a01b03908116908b16734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b14156126a55750506040805160048152602481019091526020810180516001600160e01b03167f6fcd112b000000000000000000000000000000000000000000000000000000001790527396c68d861ada016ed98c30c810879f9df7c641545b6001600160a01b038b1673d533a949740bb3306d119cc777fa900ba034cd52141561274b577f000000000000000000000000000000000000000000000000000000000000000090508b8a8960026040516024016127059493929190613426565b60408051601f198184030181529190526020810180516001600160e01b03167f15980d890000000000000000000000000000000000000000000000000000000017905291505b9b60009b50909950975050505050505050565b806060015181608001510360640161277e82600001518360400151612ce9565b111561246d5760405162461bcd60e51b81526004018080602001828103825260318152602001806135bc6031913960400191505060405180910390fd5b6000806127c88484612f4d565b90506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b146127f8576000915050611012565b604051636386c1c760e01b815260009081907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612834908a906004016133f9565b60a06040518083038186803b15801561284c57600080fd5b505afa158015612860573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288491906133ba565b5050509150915080821180156128a5575062a0d7006128a288612f71565b11155b979650505050505050565b600081606001511161246d5760405162461bcd60e51b81526004018080602001828103825260378152602001806135ed6037913960400191505060405180910390fd5b6000806060600080612904896102e7565b90925090506001600160a01b03891673d533a949740bb3306d119cc777fa900ba034cd52148061295057506001600160a01b038916734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b145b806129585750815b6129745760405162461bcd60e51b81526004016125b6906134cb565b6000816040516024016129879190613502565b60408051601f198184030181529190526020810180516001600160e01b03167fc6f678bd000000000000000000000000000000000000000000000000000000001790526002549091506001600160a01b03908116908b16734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612a67577396c68d861ada016ed98c30c810879f9df7c64154905087604051602401612a219190613502565b60408051601f198184030181529190526020810180516001600160e01b03167fb6b55f250000000000000000000000000000000000000000000000000000000017905291505b6001600160a01b038b1673d533a949740bb3306d119cc777fa900ba034cd52141561274b577f000000000000000000000000000000000000000000000000000000000000000090508b604051602401612ac091906133f9565b60408051601f198184030181529190526020810180516001600160e01b03167f4c4b5fd700000000000000000000000000000000000000000000000000000000179052915095506000945092505050955095509592505050565b8060800151612b3182600001518360400151612ce9565b101561246d5760405162461bcd60e51b815260040180806020018281038252603281526020018061358a6032913960400191505060405180910390fd5b60008060606000612b7f8686612f4d565b90506001600160a01b038116734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612cc857604051636386c1c760e01b815260009081907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612be2908c906004016133f9565b60a06040518083038186803b158015612bfa57600080fd5b505afa158015612c0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3291906133ba565b505050915091506000612c4e82846130e190919063ffffffff16565b604051602401612c5e9190613502565b60408051601f198184030181529190526020810180516001600160e01b03167f6198e339000000000000000000000000000000000000000000000000000000001790527396c68d861ada016ed98c30c810879f9df7c641549750600096509450612ce09350505050565b50506040805160208101909152600080825292508291505b93509350939050565b60006001600160a01b038216734e3fbd56cd56c3e72c1403e103b45db9da5b9d2b1415612da857604051636386c1c760e01b81526000907396c68d861ada016ed98c30c810879f9df7c6415490636386c1c790612d4a9087906004016133f9565b60a06040518083038186803b158015612d6257600080fd5b505afa158015612d76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9a91906133ba565b50929450611ee79350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316826001600160a01b03161415612e9e576040517f70a082310000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906370a0823190612e479086906004016133f9565b60206040518083038186803b158015612e5f57600080fd5b505afa158015612e73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9791906133a2565b9050611ee7565b6000612ea9836102e7565b6002546040516393f1a40b60e01b8152919350600092506001600160a01b0316906393f1a40b90612ee0908590899060040161350b565b60606040518083038186803b158015612ef857600080fd5b505afa158015612f0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f3091906132a0565b50506fffffffffffffffffffffffffffffffff1695945050505050565b600082826020811015612f5f57600080fd5b50356001600160a01b03169392505050565b6000808290506000816001600160a01b031663bf1dcfe26040518163ffffffff1660e01b815260040160e06040518083038186803b158015612fb257600080fd5b505afa158015612fc6573d6000803e3d6000fd5b505050506040513d60e0811015612fdc57600080fd5b506080015190506000612fef42836130e1565b9050826001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b15801561302a57600080fd5b505afa15801561303e573d6000803e3d6000fd5b505050506040513d602081101561305457600080fd5b5051811115613069576000935050505061050c565b6130d881846001600160a01b0316630fb5a6b46040518163ffffffff1660e01b815260040160206040518083038186803b1580156130a657600080fd5b505afa1580156130ba573d6000803e3d6000fd5b505050506040513d60208110156130d057600080fd5b5051906130e1565b95945050505050565b80820382811115611ee757600080fd5b6040518060c0016040528060006001600160a01b0316815260200160006001600160a01b0316815260200160006001600160a01b031681526020016000815260200160008152602001600081525090565b8051801515811461050c57600080fd5b80516fffffffffffffffffffffffffffffffff8116811461050c57600080fd5b600060208284031215613183578081fd5b813561101281613541565b600080604083850312156131a0578081fd5b82356131ab81613541565b915060208301356131bb81613541565b809150509250929050565b600080600080600060a086880312156131dd578081fd5b85356131e881613541565b945060208601356131f881613541565b935060408601359250606086013561320f81613541565b949793965091946080013592915050565b600080600060408486031215613234578283fd5b833561323f81613541565b9250602084013567ffffffffffffffff8082111561325b578384fd5b818601915086601f83011261326e578384fd5b81358181111561327c578485fd5b87602082850101111561328d578485fd5b6020830194508093505050509250925092565b6000806000606084860312156132b4578283fd5b6132bd84613152565b92506132cb60208501613152565b9150604084015190509250925092565b60008060008060008060008060008060006101608c8e0312156132fc578586fd5b6133058c613152565b9a5061331360208d01613152565b995060408c0151985060608c0151975060808c015161333181613541565b60a08d015190975061334281613541565b8096505060c08c0151945060e08c015193506101008c015192506133696101208d01613142565b91506133786101408d01613142565b90509295989b509295989b9093969950565b60006020828403121561339b578081fd5b5035919050565b6000602082840312156133b3578081fd5b5051919050565b600080600080600060a086880312156133d1578081fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b6001600160a01b0391909116815260200190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b03851681526020810184905260408101839052608081016005831061344e57fe5b82606083015295945050505050565b901515815260200190565b9115158252602082015260400190565b6000602080835283518082850152825b818110156134a457858101830151858201604001528201613488565b818111156134b55783604083870101525b50601f01601f1916929092016040019392505050565b6020808252601b908201527f416c616464696e20706f6f6c20646f6573206e6f742065786973740000000000604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b8481526020810184905260408101839052608081016006831061344e57fe5b6001600160a01b038116811461246d57600080fdfe54686520737472617465677920646f6573206e6f74206861766520656e6f75676820696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f7420726563656976652074686520696e766573746d656e7420746f6b656e7354686520737472617465677920646964206e6f742072657475726e2074686520696e766573746d656e7420746f6b656e734d696e20696e766573746d656e7420746f6b656e7320746f2072656365697665206d7573742062652067726561746572207468616e2030496e766573746d656e7420746f6b656e7320746f2065786368616e6765206d7573742062652067726561746572207468616e2030a2646970667358221220e19faa5688dc423611520dce57e55a2385f1f37a80be7194601330e1603a715864736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Protocol Aladdin Concentrator Integration",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_aladdinCRV": "Address of our aladdin crv",
          "_aladdinConvexVault": "Address of our aladdin convex vault contract",
          "_controller": "Address of the controller"
        }
      },
      "enterInvestment(address,address,uint256,address,uint256)": {
        "params": {
          "_investmentAddress": "Address of the investment token to join",
          "_investmentTokensOut": "Min amount of investment tokens to receive",
          "_maxAmountIn": "Max amount of the token to deposit",
          "_strategy": "Address of the strategy",
          "_tokenIn": "Token address to deposit"
        }
      },
      "exitInvestment(address,address,uint256,address,uint256)": {
        "params": {
          "_investmentAddress": "Address of the investment token to exit",
          "_investmentTokenIn": "Quantity of investment tokens to return",
          "_minAmountOut": "Min token quantities to receive from the investment",
          "_strategy": "Address of the strategy",
          "_tokenOut": "Token address to withdraw"
        }
      },
      "getInvestmentAsset(address)": {
        "returns": {
          "_0": "address                           Returns the asset that this investment needs"
        }
      },
      "getPid(address)": {
        "params": {
          "_asset": "Address of the convex lp token"
        },
        "returns": {
          "_0": "uint256                       Pid of the pool in convex"
        }
      },
      "getResultAsset(address)": {
        "returns": {
          "_0": "address                            Returns the asset that this investment obtains"
        }
      },
      "getResultBalance(address,address)": {
        "params": {
          "_resultAssetAddress": "Result asset address",
          "_strategy": "Strategy calling"
        },
        "returns": {
          "_0": "uint256                            Returns the balance of the result asset"
        }
      },
      "getRewards(address,address)": {
        "params": {
          "_investmentAddress": "Address of the investment",
          "_strategy": "Address of the strategy"
        },
        "returns": {
          "_0": "address                            Returns the address with the token of extra rewards",
          "_1": "uint256                            Extra rewards received so far"
        }
      },
      "needsUnlockSignal(address,bytes)": {
        "params": {
          "_data": "Data param",
          "_strategy": "Address of the strategy"
        },
        "returns": {
          "_0": "bool                               True if it is needed"
        }
      },
      "signalUnlock(address,bytes)": {
        "params": {
          "_data": "Params",
          "_strategy": "Address of the strategy"
        }
      }
    },
    "title": "AladdinConcentratorIntegration",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "enterInvestment(address,address,uint256,address,uint256)": {
        "notice": "Deposits tokens into an investment"
      },
      "exitInvestment(address,address,uint256,address,uint256)": {
        "notice": "Exits an outside passive investment"
      },
      "getInvestmentAsset(address)": {
        "notice": "Gets the asset needed to enter the investment"
      },
      "getPid(address)": {
        "notice": "Gets the PID in convex of a convex lp token"
      },
      "getResultAsset(address)": {
        "notice": "Gets the asset you obtained after entering the investment"
      },
      "getResultBalance(address,address)": {
        "notice": "Gets the balance of the asset you obtained after entering the investment"
      },
      "getRewards(address,address)": {
        "notice": "Gets the rewards and the token that they are denominated in"
      },
      "needsUnlockSignal(address,bytes)": {
        "notice": "Checks if the integration needs to execute a tx to prepare the withdrawal"
      },
      "signalUnlock(address,bytes)": {
        "notice": "Executes an unlock to prepare for withdrawal"
      },
      "updateCache()": {
        "notice": "Refreshes aladdin vaults"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25737,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 6418,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 31454,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "aladdinConvexVault",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IAladdinConvexVault)49308"
      },
      {
        "astId": 31458,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "cacheAladdinLpTokenToPid",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 31461,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "elementsCached",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 31465,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "aladdinPools",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 31468,
        "contract": "contracts/integrations/passive/AladdinConcentratorIntegration.sol:AladdinConcentratorIntegration",
        "label": "aladdinList",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAladdinConvexVault)49308": {
        "encoding": "inplace",
        "label": "contract IAladdinConvexVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}