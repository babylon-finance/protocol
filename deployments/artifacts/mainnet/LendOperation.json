{
  "address": "0x912f3594dcB64425c61c5a81f298e43796CB102c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_data",
          "type": "address"
        },
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_data",
          "type": "address"
        },
        {
          "internalType": "contract IGarden",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "exitOperation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetToken",
          "type": "address"
        },
        {
          "internalType": "contract IGarden",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "getNAV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_data",
          "type": "address"
        },
        {
          "internalType": "contract IGarden",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validateOperation",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x12f7cdf985acf193e190d78c5d65fde13c2bcc6c76e6d475c7fc6eafbd1e16a4",
  "receipt": {
    "to": null,
    "from": "0x040cC3AF8455F3c34D1df1D2a305e047a062BeBf",
    "contractAddress": "0x912f3594dcB64425c61c5a81f298e43796CB102c",
    "transactionIndex": 72,
    "gasUsed": "1550089",
    "logsBloom": "0x
    "blockHash": "0x75115cf3b7e62212db7be3f5d62d07b3d1fb23be979438e02608a42d5b531a7f",
    "transactionHash": "0x12f7cdf985acf193e190d78c5d65fde13c2bcc6c76e6d475c7fc6eafbd1e16a4",
    "logs": [],
    "blockNumber": 12545360,
    "cumulativeGasUsed": "6751093",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "lend",
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "solcInputHash": "3d00fad6e2a8def9880d61c8c4c2d9ca",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"},{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"},{\"internalType\":\"contract IGarden\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"exitOperation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToken\",\"type\":\"address\"},{\"internalType\":\"contract IGarden\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"getNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_data\",\"type\":\"address\"},{\"internalType\":\"contract IGarden\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validateOperation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Executes a lend operation\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_controller\":\"Address of the controller\",\"_name\":\"Name of the integration\"}},\"executeOperation(address,uint256,uint8,address,address,address)\":{\"params\":{\"_capital\":\"Amount of capital received from the garden\"}},\"exitOperation(uint256,address,address,address)\":{\"params\":{\"_percentage\":\"of capital to exit from the strategy\"}},\"getNAV(address,address,address)\":{\"returns\":{\"_0\":\"_nav           NAV of the strategy\"}},\"validateOperation(address,address,address,uint256)\":{\"params\":{\"_data\":\"Operation data\"}}},\"title\":\"LendOperatin\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"executeOperation(address,uint256,uint8,address,address,address)\":{\"notice\":\"Executes the lend operation\"},\"exitOperation(uint256,address,address,address)\":{\"notice\":\"Exits the lend operation.\"},\"getNAV(address,address,address)\":{\"notice\":\"Gets the NAV of the lend op in the reserve asset\"},\"getName()\":{\"notice\":\"Returns the name of the operation\"},\"validateOperation(address,address,address,uint256)\":{\"notice\":\"Sets operation data for the lend operation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/operations/LendOperation.sol\":\"LendOperation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function disableGarden(address _garden) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editIshtarGate(address _ishtarGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function editUniswapFactory(address _newUniswapFactory) external;\\n\\n    function addIntegration(string memory _name, address _integration) external;\\n\\n    function editIntegration(string memory _name, address _integration) external;\\n\\n    function removeIntegration(string memory _name) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setDefaultTradeIntegration(address _newDefaultTradeIntegation) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function enableBABLMiningProgram() external;\\n\\n    function setAllowPublicGardens() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function maxContributorsPerGarden() external view returns (uint256);\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function openPublicGardenCreation() external;\\n\\n    function setMaxContributorsPerGarden(uint256 _newMax) external;\\n\\n    function owner() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function defaultTradeIntegration() external view returns (address);\\n\\n    function protocolDepositGardenTokenFee() external view returns (uint256);\\n\\n    function protocolWithdrawalGardenTokenFee() external view returns (uint256);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getProfitSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getBABLSharing()\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function getIntegrationByName(string memory _name) external view returns (address);\\n\\n    function getIntegrationWithHash(bytes32 _nameHashP) external view returns (address);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function isValidIntegration(string memory _name, address _integration) external view returns (bool);\\n\\n    function getMinCooldownPeriod() external view returns (uint256);\\n\\n    function getMaxCooldownPeriod() external view returns (uint256);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n\\n    function uniswapFactory() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7b004d4283f4160790705e75b63d50bb87300be2e32bafb56a0b7d11028739c3\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IGarden\\n * @author Babylon Finance\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface IGarden {\\n    /* ============ Functions ============ */\\n    function makeGardenPublic() external;\\n\\n    function setActive(bool _val) external;\\n\\n    function active() external view returns (bool);\\n\\n    function guestListEnabled() external view returns (bool);\\n\\n    function controller() external view returns (address);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function maxContributors() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function principal() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function reserveAssetPrincipalWindow() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function startWithdrawalWindow(\\n        uint256 _amount,\\n        uint256 _profits,\\n        int256 _returns,\\n        address _strategy\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        address[] calldata _opDatas\\n    ) external;\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to\\n    ) external payable;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function getGardenTokenMintQuantity(uint256 _netReserveFlows, bool isDeposit) external view returns (uint256);\\n\\n    function getExpectedReserveWithdrawalQuantity(uint256 _gardenTokenQuantity) external view returns (uint256);\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256, uint256);\\n\\n    function rebalanceStrategies(uint256 _fee) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function burnStrategistStake(address _strategist, uint256 _amount) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\",\"keccak256\":\"0xdb24cbfb70d62cc259e8456a077c0a3a8f5dfdf80a7d608dbeee5161aba4cd31\",\"license\":\"Apache License\"},\"contracts/interfaces/ILendIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ILendIntegration\\n * @author Babylon Finance\\n *\\n * Interface for lending integrations such as Compound, Aave.\\n */\\ninterface ILendIntegration {\\n    function supplyTokens(\\n        address _strategy,\\n        address _assetToken,\\n        uint256 _numTokensToSupply,\\n        uint256 _minAmountExpected\\n    ) external;\\n\\n    function redeemTokens(\\n        address _strategy,\\n        address _assetToken,\\n        uint256 _numTokensToRedeem,\\n        uint256 _minAmountExpected\\n    ) external;\\n\\n    function getExpectedShares(address _assetToken, uint256 _numTokensToSupply) external view returns (uint256);\\n\\n    function getExchangeRatePerToken(address _assetToken) external view returns (uint256);\\n\\n    function getInvestmentToken(address _assetToken) external view returns (address);\\n}\\n\",\"keccak256\":\"0x28ca8cb40b050139b7416224c43de2c14fa7991e0b3769f7bab349e3422fc34f\",\"license\":\"Apache License\"},\"contracts/interfaces/IOperation.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from './IGarden.sol';\\nimport {IStrategy} from './IStrategy.sol';\\n\\n/**\\n * @title IOperation\\n * @author Babylon Finance\\n *\\n * Interface for an strategy operation\\n */\\ninterface IOperation {\\n    function validateOperation(\\n        address _data,\\n        IGarden _garden,\\n        address _integration,\\n        uint256 _index\\n    ) external view;\\n\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8 _assetStatus,\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function exitOperation(\\n        uint256 _percentage,\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external;\\n\\n    function getNAV(\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view returns (uint256);\\n\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x856e173e6c8e1fdbe54988df58d0805a23a6a2f8408bd4f90a488a1978e762ed\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateAdapters(address _assetOne, address _assetTwo) external;\\n}\\n\",\"keccak256\":\"0xa22e0e5e166f6f6714553b736ee921b916c37bc5b557042bf6042cc010d2a041\",\"license\":\"Apache License\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _minRebalanceCapital\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        address[] calldata _opDatas\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function executeStrategyRebalance(\\n        uint256 _capital,\\n        uint256 fee,\\n        address payable _keeper\\n    ) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opDatas(uint256 _index) external view returns (address);\\n\\n    function opIntegrations(uint256 _index) external view returns (address);\\n\\n    function opTypes(uint256 _index) external view returns (uint8);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function finalizeStrategy(uint256 fee, string memory _tokenURI) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind) external;\\n\\n    function changeStrategyDuration(uint256 _newDuration) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function executedAt() external view returns (uint256);\\n\\n    function updatedAt() external view returns (uint256);\\n\\n    function exitedAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function rewardsTotalOverhead() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function minRebalanceCapital() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalVotes() external view returns (int256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function finalized() external view returns (bool);\\n\\n    function active() external view returns (bool);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0xd6bfbde7916cdc262bec925ae404d12042e2a9a364986f6d5edec1e53e79a1cf\",\"license\":\"Apache License\"},\"contracts/interfaces/ITradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ITrade\\n * @author Babylon Finance\\n *\\n * Interface for trading protocol integrations\\n */\\ninterface ITradeIntegration {\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external;\\n\\n    function getConversionRates(\\n        address _sourceToken,\\n        address _destinationToken,\\n        uint256 _sourceQuantity\\n    ) external returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x95df25f2cbfd3d82a9e22c9202f9fc2c497e90fd6e5fcfb00c4162f6447c0cbd\",\"license\":\"Apache License\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using SafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xb9e221da0132ab13fc991f633d3daac43cc3a99596e63b175e4c85675bd94017\",\"license\":\"Apache License\"},\"contracts/strategies/operations/LendOperation.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {Operation} from './Operation.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\nimport {ILendIntegration} from '../../interfaces/ILendIntegration.sol';\\n\\n/**\\n * @title LendOperatin\\n * @author Babylon Finance\\n *\\n * Executes a lend operation\\n */\\ncontract LendOperation is Operation {\\n    using SafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, address _controller) Operation(_name, _controller) {}\\n\\n    /**\\n     * Sets operation data for the lend operation\\n     *\\n     * @param _data                   Operation data\\n     */\\n    function validateOperation(\\n        address _data,\\n        IGarden _garden,\\n        address, /* _integration */\\n        uint256 /* _index */\\n    ) external view override onlyStrategy {\\n        require(_data != _garden.reserveAsset(), 'Receive token must be different');\\n    }\\n\\n    /**\\n     * Executes the lend operation\\n     * @param _capital      Amount of capital received from the garden\\n     */\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8, /* _assetStatus */\\n        address _data,\\n        IGarden, /* _garden */\\n        address _integration\\n    )\\n        external\\n        override\\n        onlyStrategy\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        )\\n    {\\n        address assetToken = _data;\\n        if (assetToken != _asset) {\\n            IStrategy(msg.sender).trade(_asset, _capital, assetToken);\\n        }\\n        uint256 numTokensToSupply = IERC20(assetToken).balanceOf(msg.sender);\\n        uint256 exactAmount = ILendIntegration(_integration).getExpectedShares(assetToken, numTokensToSupply);\\n        uint256 minAmountExpected = exactAmount.sub(exactAmount.preciseMul(SLIPPAGE_ALLOWED));\\n        ILendIntegration(_integration).supplyTokens(msg.sender, assetToken, numTokensToSupply, minAmountExpected);\\n        return (assetToken, numTokensToSupply, 1); // put as collateral\\n    }\\n\\n    /**\\n     * Exits the lend operation.\\n     * @param _percentage of capital to exit from the strategy\\n     */\\n    function exitOperation(\\n        uint256 _percentage,\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external override onlyStrategy {\\n        require(_percentage <= HUNDRED_PERCENT, 'Unwind Percentage <= 100%');\\n        address assetToken = _data;\\n        uint256 numTokensToRedeem =\\n            IERC20(ILendIntegration(_integration).getInvestmentToken(assetToken)).balanceOf(msg.sender).preciseMul(\\n                _percentage\\n            );\\n        ILendIntegration(_integration).redeemTokens(\\n            msg.sender,\\n            assetToken,\\n            numTokensToRedeem,\\n            ILendIntegration(_integration).getExchangeRatePerToken(assetToken).mul(\\n                numTokensToRedeem.sub(numTokensToRedeem.preciseMul(SLIPPAGE_ALLOWED))\\n            )\\n        );\\n        if (assetToken != _garden.reserveAsset()) {\\n            IStrategy(msg.sender).trade(assetToken, IERC20(assetToken).balanceOf(msg.sender), _garden.reserveAsset());\\n        }\\n    }\\n\\n    /**\\n     * Gets the NAV of the lend op in the reserve asset\\n     *\\n     * @return _nav           NAV of the strategy\\n     */\\n    function getNAV(\\n        address _assetToken,\\n        IGarden _garden,\\n        address _integration\\n    ) external view override onlyStrategy returns (uint256) {\\n        if (!IStrategy(msg.sender).isStrategyActive()) {\\n            return 0;\\n        }\\n        uint256 numTokensToRedeem =\\n            IERC20(ILendIntegration(_integration).getInvestmentToken(_assetToken)).balanceOf(msg.sender);\\n        uint256 assetTokensAmount =\\n            ILendIntegration(_integration).getExchangeRatePerToken(_assetToken).mul(numTokensToRedeem);\\n        uint256 price = _getPrice(_garden.reserveAsset(), _assetToken);\\n        uint256 NAV = _normalizeDecimals(_assetToken, assetTokensAmount).preciseDiv(price);\\n        require(NAV != 0, 'NAV has to be bigger 0');\\n        return NAV;\\n    }\\n}\\n\",\"keccak256\":\"0x5bf9b7784c5e4fb13a545927f58e1f4a74f2ef1a1b3bb95175313d1efabdbd0f\",\"license\":\"Apache License\"},\"contracts/strategies/operations/Operation.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IOperation} from '../../interfaces/IOperation.sol';\\nimport {ITradeIntegration} from '../../interfaces/ITradeIntegration.sol';\\nimport {IPriceOracle} from '../../interfaces/IPriceOracle.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\n\\n/**\\n * @title LongStrategy\\n * @author Babylon Finance\\n *\\n * Holds the data for a long strategy\\n */\\nabstract contract Operation is IOperation {\\n    using SafeMath for uint256;\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyStrategy() {\\n        IStrategy strategy = IStrategy(msg.sender);\\n        IGarden garden = strategy.garden();\\n        require(IBabController(controller).isSystemContract(address(garden)), 'Only a garden can call this');\\n        require(garden.strategyMapping(msg.sender), 'Sender must be a strategy');\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    uint256 internal constant SLIPPAGE_ALLOWED = 1e16; // 1%\\n    uint256 internal constant HUNDRED_PERCENT = 1e18; // 100%\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n\\n    // Address of the controller\\n    address public controller;\\n    // Name of the operation\\n    string public name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, address _controller) {\\n        require(_controller != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ Virtual External Functions ============ */\\n\\n    function validateOperation(\\n        address _data,\\n        IGarden _garden,\\n        address _integration,\\n        uint256 _index\\n    ) external view virtual override;\\n\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8 _assetStatus,\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        virtual\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function exitOperation(\\n        uint256 _percentage,\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external virtual override;\\n\\n    function getNAV(\\n        address _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view virtual override returns (uint256);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Returns the name of the operation\\n     */\\n    function getName() external view override returns (string memory) {\\n        return name;\\n    }\\n\\n    /**\\n     * Returns the price of the pair through the price oracle\\n     */\\n    function _getPrice(address _assetOne, address _assetTwo) internal view returns (uint256) {\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        return oracle.getPrice(_assetOne, _assetTwo);\\n    }\\n\\n    function _normalizeDecimals(address _asset, uint256 _quantity) internal view returns (uint256) {\\n        uint8 tokenDecimals = ERC20(_asset).decimals();\\n        require(tokenDecimals <= 18, 'Unsupported decimals');\\n        return tokenDecimals != 18 ? _quantity.mul(10**(uint256(18).sub(tokenDecimals))) : _quantity;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3269f3b11853ae18f38a27e3f4dc5630d258b53f4ca9dbe1218f095b26b1e6\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c7838038062001c78833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001519150829050816001600160a01b03811662000150576040805162461bcd60e51b815260206004820152601a60248201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604482015290519081900360640190fd5b81516200016590600190602085019062000190565b50600080546001600160a01b0319166001600160a01b0392909216919091179055506200023c915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282620001c8576000855562000213565b82601f10620001e357805160ff191683800117855562000213565b8280016001018555821562000213579182015b8281111562000213578251825591602001919060010190620001f6565b506200022192915062000225565b5090565b5b8082111562000221576000815560010162000226565b611a2c806200024c6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634222326a1161005b5780634222326a1461014757806355d9750b14610191578063c8cd307514610209578063f77c4791146102455761007d565b806306fdde031461008257806317d7de7c146100ff578063419ea18a14610107575b600080fd5b61008a610269565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61008a6102f6565b6101456004803603608081101561011d57600080fd5b508035906001600160a01b03602082013581169160408101358216916060909101351661038b565b005b61017f6004803603606081101561015d57600080fd5b506001600160a01b038135811691602081013582169160409091013516610a32565b60408051918252519081900360200190f35b6101de600480360360c08110156101a757600080fd5b506001600160a01b03813581169160208101359160ff604083013516916060810135821691608082013581169160a0013516610eeb565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b6101456004803603608081101561021f57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561137e565b61024d611646565b604080516001600160a01b039092168252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505081565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156103815780601f1061035657610100808354040283529160200191610381565b820191906000526020600020905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103cb57600080fd5b505afa1580156103df573d6000803e3d6000fd5b505050506040513d60208110156103f557600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d602081101561047057600080fd5b50516104c3576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d602081101561053357600080fd5b5051610586576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b670de0b6b3a76400008611156105e3576040805162461bcd60e51b815260206004820152601960248201527f556e77696e642050657263656e74616765203c3d203130302500000000000000604482015290519081900360640190fd5b600085905060006106e188866001600160a01b031663eb40e600856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d602081101561066557600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d60208110156106d957600080fd5b505190611655565b90506001600160a01b03851663d0d2d3a233848461079261071361070c83662386f26fc10000611655565b889061167c565b8b6001600160a01b03166307b54c6f8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d602081101561078a57600080fd5b5051906116d9565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b1580156107ef57600080fd5b505af1158015610803573d6000803e3d6000fd5b50505050856001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d602081101561086a57600080fd5b50516001600160a01b03838116911614610a2857336001600160a01b0316630e32db5283846001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d602081101561090557600080fd5b5051604080517ff85cb5c800000000000000000000000000000000000000000000000000000000815290516001600160a01b038c169163f85cb5c8916004808301926020929190829003018186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d602081101561098a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039485166004820152602481019390935292166044820152905160648083019260209291908290030181600087803b1580156109fb57600080fd5b505af1158015610a0f573d6000803e3d6000fd5b505050506040513d6020811015610a2557600080fd5b50505b5050505050505050565b6000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b158015610aee57600080fd5b505afa158015610b02573d6000803e3d6000fd5b505050506040513d6020811015610b1857600080fd5b5051610b6b576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d6020811015610bdb57600080fd5b5051610c2e576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b336001600160a01b031663e4df5e1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d6020811015610c9157600080fd5b5051610ca05760009250610ee2565b6000846001600160a01b031663eb40e600886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d6020811015610d1957600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d6357600080fd5b505afa158015610d77573d6000803e3d6000fd5b505050506040513d6020811015610d8d57600080fd5b5051604080517f07b54c6f0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529151929350600092610dfe928592908a16916307b54c6f91602480820192602092909190829003018186803b15801561076057600080fd5b90506000610e70886001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3e57600080fd5b505afa158015610e52573d6000803e3d6000fd5b505050506040513d6020811015610e6857600080fd5b50518a611732565b90506000610e8882610e828c8661185e565b90611956565b905080610edc576040805162461bcd60e51b815260206004820152601660248201527f4e41562068617320746f20626520626967676572203000000000000000000000604482015290519081900360640190fd5b95505050505b50509392505050565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d6020811015610f5957600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b158015610faa57600080fd5b505afa158015610fbe573d6000803e3d6000fd5b505050506040513d6020811015610fd457600080fd5b5051611027576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d602081101561109757600080fd5b50516110ea576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b876001600160a01b03808216908d161461119b57604080517f0e32db520000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018e90528316604482015290513391630e32db529160648083019260209291908290030181600087803b15801561116e57600080fd5b505af1158015611182573d6000803e3d6000fd5b505050506040513d602081101561119857600080fd5b50505b6000816001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d602081101561121457600080fd5b5051604080517f4deef6490000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490529151929350600092918b1691634deef64991604480820192602092909190829003018186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d60208110156112b057600080fd5b5051905060006112d16112ca83662386f26fc10000611655565b839061167c565b604080517ff14b57880000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052606482018490529151929350908c169163f14b57889160848082019260009290919082900301818387803b15801561134c57600080fd5b505af1158015611360573d6000803e3d6000fd5b50959a50939850600197505050505050505096509650969350505050565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113be57600080fd5b505afa1580156113d2573d6000803e3d6000fd5b505050506040513d60208110156113e857600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d602081101561146357600080fd5b50516114b6576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d602081101561152657600080fd5b5051611579576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b846001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d60208110156115dc57600080fd5b50516001600160a01b038781169116141561163e576040805162461bcd60e51b815260206004820152601f60248201527f5265636569766520746f6b656e206d75737420626520646966666572656e7400604482015290519081900360640190fd5b505050505050565b6000546001600160a01b031681565b6000611673670de0b6b3a764000061166d85856116d9565b9061196e565b90505b92915050565b6000828211156116d3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826116e857506000611676565b828202828482816116f557fe5b04146116735760405162461bcd60e51b81526004018080602001828103825260218152602001806119d66021913960400191505060405180910390fd5b60008054604080517f2630c12f000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691632630c12f916004808301926020929190829003018186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152868116602483015291519293509083169163ac41865a91604480820192602092909190829003018186803b15801561182a57600080fd5b505afa15801561183e573d6000803e3d6000fd5b505050506040513d602081101561185457600080fd5b5051949350505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561189a57600080fd5b505afa1580156118ae573d6000803e3d6000fd5b505050506040513d60208110156118c457600080fd5b50519050601260ff82161115611921576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b8060ff1660121415611933578261194e565b61194e611944601260ff841661167c565b8490600a0a6116d9565b949350505050565b60006116738261166d85670de0b6b3a76400006116d9565b60008082116119c4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119cd57fe5b04939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220eaec5f7f506878ec648189304e311c8b6f71a65fa34dcf7bd0c34c1f1de9694464736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c80634222326a1161005b5780634222326a1461014757806355d9750b14610191578063c8cd307514610209578063f77c4791146102455761007d565b806306fdde031461008257806317d7de7c146100ff578063419ea18a14610107575b600080fd5b61008a610269565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61008a6102f6565b6101456004803603608081101561011d57600080fd5b508035906001600160a01b03602082013581169160408101358216916060909101351661038b565b005b61017f6004803603606081101561015d57600080fd5b506001600160a01b038135811691602081013582169160409091013516610a32565b60408051918252519081900360200190f35b6101de600480360360c08110156101a757600080fd5b506001600160a01b03813581169160208101359160ff604083013516916060810135821691608082013581169160a0013516610eeb565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b6101456004803603608081101561021f57600080fd5b506001600160a01b0381358116916020810135821691604082013516906060013561137e565b61024d611646565b604080516001600160a01b039092168252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156102ee5780601f106102c3576101008083540402835291602001916102ee565b820191906000526020600020905b8154815290600101906020018083116102d157829003601f168201915b505050505081565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156103815780601f1061035657610100808354040283529160200191610381565b820191906000526020600020905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156103cb57600080fd5b505afa1580156103df573d6000803e3d6000fd5b505050506040513d60208110156103f557600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b15801561044657600080fd5b505afa15801561045a573d6000803e3d6000fd5b505050506040513d602081101561047057600080fd5b50516104c3576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b15801561050957600080fd5b505afa15801561051d573d6000803e3d6000fd5b505050506040513d602081101561053357600080fd5b5051610586576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b670de0b6b3a76400008611156105e3576040805162461bcd60e51b815260206004820152601960248201527f556e77696e642050657263656e74616765203c3d203130302500000000000000604482015290519081900360640190fd5b600085905060006106e188866001600160a01b031663eb40e600856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561063b57600080fd5b505afa15801561064f573d6000803e3d6000fd5b505050506040513d602081101561066557600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b1580156106af57600080fd5b505afa1580156106c3573d6000803e3d6000fd5b505050506040513d60208110156106d957600080fd5b505190611655565b90506001600160a01b03851663d0d2d3a233848461079261071361070c83662386f26fc10000611655565b889061167c565b8b6001600160a01b03166307b54c6f8a6040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561076057600080fd5b505afa158015610774573d6000803e3d6000fd5b505050506040513d602081101561078a57600080fd5b5051906116d9565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b1580156107ef57600080fd5b505af1158015610803573d6000803e3d6000fd5b50505050856001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b15801561084057600080fd5b505afa158015610854573d6000803e3d6000fd5b505050506040513d602081101561086a57600080fd5b50516001600160a01b03838116911614610a2857336001600160a01b0316630e32db5283846001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156108db57600080fd5b505afa1580156108ef573d6000803e3d6000fd5b505050506040513d602081101561090557600080fd5b5051604080517ff85cb5c800000000000000000000000000000000000000000000000000000000815290516001600160a01b038c169163f85cb5c8916004808301926020929190829003018186803b15801561096057600080fd5b505afa158015610974573d6000803e3d6000fd5b505050506040513d602081101561098a57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e087901b1681526001600160a01b039485166004820152602481019390935292166044820152905160648083019260209291908290030181600087803b1580156109fb57600080fd5b505af1158015610a0f573d6000803e3d6000fd5b505050506040513d6020811015610a2557600080fd5b50505b5050505050505050565b6000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610a7357600080fd5b505afa158015610a87573d6000803e3d6000fd5b505050506040513d6020811015610a9d57600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b158015610aee57600080fd5b505afa158015610b02573d6000803e3d6000fd5b505050506040513d6020811015610b1857600080fd5b5051610b6b576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b158015610bb157600080fd5b505afa158015610bc5573d6000803e3d6000fd5b505050506040513d6020811015610bdb57600080fd5b5051610c2e576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b336001600160a01b031663e4df5e1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610c6757600080fd5b505afa158015610c7b573d6000803e3d6000fd5b505050506040513d6020811015610c9157600080fd5b5051610ca05760009250610ee2565b6000846001600160a01b031663eb40e600886040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610cef57600080fd5b505afa158015610d03573d6000803e3d6000fd5b505050506040513d6020811015610d1957600080fd5b5051604080516370a0823160e01b815233600482015290516001600160a01b03909216916370a0823191602480820192602092909190829003018186803b158015610d6357600080fd5b505afa158015610d77573d6000803e3d6000fd5b505050506040513d6020811015610d8d57600080fd5b5051604080517f07b54c6f0000000000000000000000000000000000000000000000000000000081526001600160a01b038a811660048301529151929350600092610dfe928592908a16916307b54c6f91602480820192602092909190829003018186803b15801561076057600080fd5b90506000610e70886001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610e3e57600080fd5b505afa158015610e52573d6000803e3d6000fd5b505050506040513d6020811015610e6857600080fd5b50518a611732565b90506000610e8882610e828c8661185e565b90611956565b905080610edc576040805162461bcd60e51b815260206004820152601660248201527f4e41562068617320746f20626520626967676572203000000000000000000000604482015290519081900360640190fd5b95505050505b50509392505050565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f2f57600080fd5b505afa158015610f43573d6000803e3d6000fd5b505050506040513d6020811015610f5957600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b158015610faa57600080fd5b505afa158015610fbe573d6000803e3d6000fd5b505050506040513d6020811015610fd457600080fd5b5051611027576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b15801561106d57600080fd5b505afa158015611081573d6000803e3d6000fd5b505050506040513d602081101561109757600080fd5b50516110ea576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b876001600160a01b03808216908d161461119b57604080517f0e32db520000000000000000000000000000000000000000000000000000000081526001600160a01b038e81166004830152602482018e90528316604482015290513391630e32db529160648083019260209291908290030181600087803b15801561116e57600080fd5b505af1158015611182573d6000803e3d6000fd5b505050506040513d602081101561119857600080fd5b50505b6000816001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b1580156111ea57600080fd5b505afa1580156111fe573d6000803e3d6000fd5b505050506040513d602081101561121457600080fd5b5051604080517f4deef6490000000000000000000000000000000000000000000000000000000081526001600160a01b038581166004830152602482018490529151929350600092918b1691634deef64991604480820192602092909190829003018186803b15801561128657600080fd5b505afa15801561129a573d6000803e3d6000fd5b505050506040513d60208110156112b057600080fd5b5051905060006112d16112ca83662386f26fc10000611655565b839061167c565b604080517ff14b57880000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052606482018490529151929350908c169163f14b57889160848082019260009290919082900301818387803b15801561134c57600080fd5b505af1158015611360573d6000803e3d6000fd5b50959a50939850600197505050505050505096509650969350505050565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113be57600080fd5b505afa1580156113d2573d6000803e3d6000fd5b505050506040513d60208110156113e857600080fd5b5051600054604080516313bc6d4b60e01b81526001600160a01b03808516600483015291519394509116916313bc6d4b91602480820192602092909190829003018186803b15801561143957600080fd5b505afa15801561144d573d6000803e3d6000fd5b505050506040513d602081101561146357600080fd5b50516114b6576040805162461bcd60e51b815260206004820152601b60248201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604482015290519081900360640190fd5b60408051633a82192560e01b815233600482015290516001600160a01b03831691633a821925916024808301926020929190829003018186803b1580156114fc57600080fd5b505afa158015611510573d6000803e3d6000fd5b505050506040513d602081101561152657600080fd5b5051611579576040805162461bcd60e51b815260206004820152601960248201527f53656e646572206d757374206265206120737472617465677900000000000000604482015290519081900360640190fd5b846001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b1580156115b257600080fd5b505afa1580156115c6573d6000803e3d6000fd5b505050506040513d60208110156115dc57600080fd5b50516001600160a01b038781169116141561163e576040805162461bcd60e51b815260206004820152601f60248201527f5265636569766520746f6b656e206d75737420626520646966666572656e7400604482015290519081900360640190fd5b505050505050565b6000546001600160a01b031681565b6000611673670de0b6b3a764000061166d85856116d9565b9061196e565b90505b92915050565b6000828211156116d3576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826116e857506000611676565b828202828482816116f557fe5b04146116735760405162461bcd60e51b81526004018080602001828103825260218152602001806119d66021913960400191505060405180910390fd5b60008054604080517f2630c12f000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691632630c12f916004808301926020929190829003018186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d60208110156117ba57600080fd5b5051604080517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b038781166004830152868116602483015291519293509083169163ac41865a91604480820192602092909190829003018186803b15801561182a57600080fd5b505afa15801561183e573d6000803e3d6000fd5b505050506040513d602081101561185457600080fd5b5051949350505050565b600080836001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561189a57600080fd5b505afa1580156118ae573d6000803e3d6000fd5b505050506040513d60208110156118c457600080fd5b50519050601260ff82161115611921576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b8060ff1660121415611933578261194e565b61194e611944601260ff841661167c565b8490600a0a6116d9565b949350505050565b60006116738261166d85670de0b6b3a76400006116d9565b60008082116119c4576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816119cd57fe5b04939250505056fe536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f77a2646970667358221220eaec5f7f506878ec648189304e311c8b6f71a65fa34dcf7bd0c34c1f1de9694464736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Executes a lend operation",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_controller": "Address of the controller",
          "_name": "Name of the integration"
        }
      },
      "executeOperation(address,uint256,uint8,address,address,address)": {
        "params": {
          "_capital": "Amount of capital received from the garden"
        }
      },
      "exitOperation(uint256,address,address,address)": {
        "params": {
          "_percentage": "of capital to exit from the strategy"
        }
      },
      "getNAV(address,address,address)": {
        "returns": {
          "_0": "_nav           NAV of the strategy"
        }
      },
      "validateOperation(address,address,address,uint256)": {
        "params": {
          "_data": "Operation data"
        }
      }
    },
    "title": "LendOperatin",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "executeOperation(address,uint256,uint8,address,address,address)": {
        "notice": "Executes the lend operation"
      },
      "exitOperation(uint256,address,address,address)": {
        "notice": "Exits the lend operation."
      },
      "getNAV(address,address,address)": {
        "notice": "Gets the NAV of the lend op in the reserve asset"
      },
      "getName()": {
        "notice": "Returns the name of the operation"
      },
      "validateOperation(address,address,address,uint256)": {
        "notice": "Sets operation data for the lend operation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 36661,
        "contract": "contracts/strategies/operations/LendOperation.sol:LendOperation",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 36663,
        "contract": "contracts/strategies/operations/LendOperation.sol:LendOperation",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}