{
  "address": "0x45093c91c7069C7E01338B14368657A2Fcc1A27f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_capital",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_remaining",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_percentage",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "exitOperation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "contract IGarden",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_integration",
          "type": "address"
        }
      ],
      "name": "getNAV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "contract IGarden",
          "name": "_garden",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "validateOperation",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa80def953ea9c569af028decef92bd8c9ecc07f783bf12a9da83e552561b3122",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0x45093c91c7069C7E01338B14368657A2Fcc1A27f",
    "transactionIndex": 30,
    "gasUsed": "1945948",
    "logsBloom": "0x
    "blockHash": "0xb54f0bc2ad88495b4725e5377c412bb9dd786de7f19ad1089dcdedb598162d61",
    "transactionHash": "0xa80def953ea9c569af028decef92bd8c9ecc07f783bf12a9da83e552561b3122",
    "logs": [],
    "blockNumber": 14381096,
    "cumulativeGasUsed": "3683355",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "lend",
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F"
  ],
  "numDeployments": 3,
  "solcInputHash": "ba6203999d233d8052c16bb880537de0",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_capital\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_remaining\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_percentage\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"exitOperation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"contract IGarden\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_integration\",\"type\":\"address\"}],\"name\":\"getNAV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"contract IGarden\",\"name\":\"_garden\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"validateOperation\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Babylon Finance Executes a lend operation\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_controller\":\"Address of the controller\",\"_name\":\"Name of the integration\"}},\"executeOperation(address,uint256,uint8,bytes,address,address)\":{\"params\":{\"_asset\":\"Asset to receive into this operation\",\"_capital\":\"Amount of asset received param _assetStatus         Status of the asset amount\",\"_data\":\"OpData e.g. Address of the asset to lend param _garden              Garden of the strategy\",\"_integration\":\"Address of the integration to execute\"}},\"exitOperation(address,uint256,uint8,uint256,bytes,address,address)\":{\"params\":{\"_percentage\":\"of capital to exit from the strategy\"}},\"getNAV(bytes,address,address)\":{\"params\":{\"_data\":\"OpData e.g. Asset lent\",\"_garden\":\"Garden the strategy belongs to\",\"_integration\":\"Status of the asset amount\"},\"returns\":{\"_0\":\"_nav               NAV of the strategy\"}},\"validateOperation(bytes,address,address,uint256)\":{\"params\":{\"_data\":\"Operation data\"}}},\"title\":\"LendOperation\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Creates the integration\"},\"executeOperation(address,uint256,uint8,bytes,address,address)\":{\"notice\":\"Executes the lend operation\"},\"exitOperation(address,uint256,uint8,uint256,bytes,address,address)\":{\"notice\":\"Exits the lend operation.\"},\"getNAV(bytes,address,address)\":{\"notice\":\"Gets the NAV of the lend op in the reserve asset\"},\"getName()\":{\"notice\":\"Returns the name of the operation\"},\"validateOperation(bytes,address,address,uint256)\":{\"notice\":\"Sets operation data for the lend operation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/strategies/operations/LendOperation.sol\":\"LendOperation\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x6387fc1c0d888155360b0c3fb2360c6387250ed75881dfdbce5ea86133973c27\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IBaseIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\ninterface IBaseIntegration {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xc17c281287e52562f824b1eec248005af77da26b7e25b650ee5080b73c6f9d6f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0x0d794604791fe40cd0864e0fa18b54d3adbac74144006ffa4f47b30cc391a650\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyGarden\\n *\\n * Interface for functions of the garden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function updateStrategyRewards(\\n        address _strategy,\\n        uint256 _newTotalAmount,\\n        uint256 _newCapitalReturned\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n *\\n * Interface for amdin functions of the Garden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[11] memory _newParams) external;\\n}\\n\\n/**\\n * @title IGarden\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        address signer,\\n        bytes memory signature\\n    ) external;\\n\\n    function claimNFT() external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IERC20, IERC20Metadata {}\\n\",\"keccak256\":\"0xd44aebdee90a454f3895d129fc9d2031b6a3943c1dc43bb26ed42f6ad4ff62d8\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ILendIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ILendIntegration\\n * @author Babylon Finance\\n *\\n * Interface for lending integrations such as Compound, Aave.\\n */\\ninterface ILendIntegration {\\n    function supplyTokens(\\n        address _strategy,\\n        address _assetToken,\\n        uint256 _numTokensToSupply,\\n        uint256 _minAmountExpected\\n    ) external;\\n\\n    function redeemTokens(\\n        address _strategy,\\n        address _assetToken,\\n        uint256 _numTokensToRedeem,\\n        uint256 _minAmountExpected\\n    ) external;\\n\\n    function getRewardToken() external view returns (address);\\n\\n    function getCollateralFactor(address _assetToken) external view returns (uint256);\\n\\n    function getRewardsAccrued(address _strategy) external view returns (uint256);\\n\\n    function getExpectedShares(address _assetToken, uint256 _numTokensToSupply) external view returns (uint256);\\n\\n    function getExchangeRatePerToken(address _assetToken) external view returns (uint256);\\n\\n    function getInvestmentToken(address _assetToken) external view returns (address);\\n\\n    function getInvestmentTokenAmount(address _address, address _assetToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa16e1adbbbc8ace4c43f21ed7ba3fed1b20b51607d7b194b8867ce1dc9bbbe06\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOperation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from './IGarden.sol';\\nimport {IStrategy} from './IStrategy.sol';\\n\\n/**\\n * @title IOperation\\n * @author Babylon Finance\\n *\\n * Interface for an strategy operation\\n */\\ninterface IOperation {\\n    function validateOperation(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration,\\n        uint256 _index\\n    ) external view;\\n\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8 _assetStatus,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function exitOperation(\\n        address _asset,\\n        uint256 _remaining,\\n        uint8 _assetStatus,\\n        uint256 _percentage,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function getNAV(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view returns (uint256, bool);\\n\\n    function getName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x8351ebface95e69f83267be06ffaead1aa8e839b8c25c6e13027e1e79e2f5357\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ITokenIdentifier} from './ITokenIdentifier.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateReserves(address[] memory list) external;\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) external;\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) external;\\n\\n    function getCompoundExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8cd99857180b06fe33ccc458e35395a94cdb6acda9441819b375a6e1ada7f0d2\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IGarden} from '../interfaces/IGarden.sol';\\n\\n/**\\n * @title IStrategy\\n * @author Babylon Finance\\n *\\n * Interface for strategy\\n */\\ninterface IStrategy {\\n    function initialize(\\n        address _strategist,\\n        address _garden,\\n        address _controller,\\n        uint256 _maxCapitalRequested,\\n        uint256 _stake,\\n        uint256 _strategyDuration,\\n        uint256 _expectedReturn,\\n        uint256 _maxAllocationPercentage,\\n        uint256 _maxGasFeePercentage,\\n        uint256 _maxTradeSlippagePercentage\\n    ) external;\\n\\n    function resolveVoting(\\n        address[] calldata _voters,\\n        int256[] calldata _votes,\\n        uint256 fee\\n    ) external;\\n\\n    function updateParams(uint256[5] calldata _params) external;\\n\\n    function sweep(address _token, uint256 _newSlippage) external;\\n\\n    function updateStrategyRewards(uint256 _newTotalRewards, uint256 _newCapitalReturned) external;\\n\\n    function setData(\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes memory _opEncodedData\\n    ) external;\\n\\n    function executeStrategy(uint256 _capital, uint256 fee) external;\\n\\n    function getNAV() external view returns (uint256);\\n\\n    function opEncodedData() external view returns (bytes memory);\\n\\n    function getOperationsCount() external view returns (uint256);\\n\\n    function getOperationByIndex(uint8 _index)\\n        external\\n        view\\n        returns (\\n            uint8,\\n            address,\\n            bytes memory\\n        );\\n\\n    function finalizeStrategy(\\n        uint256 fee,\\n        string memory _tokenURI,\\n        uint256 _minReserveOut\\n    ) external;\\n\\n    function unwindStrategy(uint256 _amountToUnwind, uint256 _strategyNAV) external;\\n\\n    function invokeFromIntegration(\\n        address _target,\\n        uint256 _value,\\n        bytes calldata _data\\n    ) external returns (bytes memory);\\n\\n    function invokeApprove(\\n        address _spender,\\n        address _asset,\\n        uint256 _quantity\\n    ) external;\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken\\n    ) external returns (uint256);\\n\\n    function trade(\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _overrideSlippage\\n    ) external returns (uint256);\\n\\n    function handleWeth(bool _isDeposit, uint256 _wethAmount) external;\\n\\n    function getStrategyDetails()\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            address,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyState()\\n        external\\n        view\\n        returns (\\n            address,\\n            bool,\\n            bool,\\n            bool,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getStrategyRewardsContext()\\n        external\\n        view\\n        returns (\\n            address,\\n            uint256[] memory,\\n            bool[] memory\\n        );\\n\\n    function isStrategyActive() external view returns (bool);\\n\\n    function getUserVotes(address _address) external view returns (int256);\\n\\n    function strategist() external view returns (address);\\n\\n    function enteredAt() external view returns (uint256);\\n\\n    function enteredCooldownAt() external view returns (uint256);\\n\\n    function stake() external view returns (uint256);\\n\\n    function strategyRewards() external view returns (uint256);\\n\\n    function maxCapitalRequested() external view returns (uint256);\\n\\n    function maxAllocationPercentage() external view returns (uint256);\\n\\n    function maxTradeSlippagePercentage() external view returns (uint256);\\n\\n    function maxGasFeePercentage() external view returns (uint256);\\n\\n    function expectedReturn() external view returns (uint256);\\n\\n    function duration() external view returns (uint256);\\n\\n    function totalPositiveVotes() external view returns (uint256);\\n\\n    function totalNegativeVotes() external view returns (uint256);\\n\\n    function capitalReturned() external view returns (uint256);\\n\\n    function capitalAllocated() external view returns (uint256);\\n\\n    function garden() external view returns (IGarden);\\n}\\n\",\"keccak256\":\"0x9bb46b1237e6cc36aa7144ffb85d91a16bee3e872c283f6b94f865a842db72db\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ Functions ============ */\\n\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external;\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0xa30bdb97ab135172a145ea6f08fda87a3c5d891f65f35275e5b9c2c73f04f5f6\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ITradeIntegration.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IBaseIntegration} from '../interfaces/IBaseIntegration.sol';\\n\\n/**\\n * @title ITrade\\n * @author Babylon Finance\\n *\\n * Interface for trading protocol integrations\\n */\\ninterface ITradeIntegration is IBaseIntegration {\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external;\\n\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        address _hopToken\\n    ) external;\\n}\\n\",\"keccak256\":\"0xd0b8cbebf6d9220b9c2a9e9aba7f4e6300acb2f017cac6dc1abc6b31b320f465\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/external/harvest/IHarvestUniv3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IHarvestUniv3Pool {\\n    function deposit(\\n        uint256 _amount0,\\n        uint256 _amount1,\\n        bool _zapFunds,\\n        uint256 _sqrtRatioX96,\\n        uint256 _tolerance,\\n        uint256 _zapAmount0OutMin,\\n        uint256 _zapAmount1OutMin,\\n        uint160 _zapSqrtPriceLimitX96\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _numberOfShares,\\n        bool _token0,\\n        bool _token1,\\n        uint256 _sqrtRatioX96,\\n        uint256 _tolerance\\n    ) external;\\n\\n    function approve(address spender, uint256 amount) external;\\n\\n    function governance() external view returns (address);\\n\\n    function controller() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getSqrtPriceX96() external view returns (uint160);\\n\\n    function getStorage() external view returns (address);\\n\\n    function getPricePerFullShare() external view returns (uint256);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xe1fb5f122b409ec6e699cd50bdd396ef0de380604446e9286a72beca66c05793\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/external/uniswap-v3/INFTPositionManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface INFTPositionManager {\\n    function positions(uint256 tokenId)\\n        external\\n        view\\n        returns (\\n            uint96 nonce,\\n            address operator,\\n            address token0,\\n            address token1,\\n            uint24 fee,\\n            int24 tickLower,\\n            int24 tickUpper,\\n            uint128 liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n}\\n\",\"keccak256\":\"0x561b6103d23230c03c83e609d0eac567953ebab7fea79ea63dd1e4a6f1f7f370\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/uniswap-v3/IUniVaultStorage.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniVaultStorage {\\n    function posId() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa9ee4ec2ed1831a9c6b3046b14f8d5030103d0fc3730576b7c47ff19a657cc11\",\"license\":\"GPL-2.0-or-later\"},\"contracts/interfaces/external/uniswap-v3/IUniswapViewer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\ninterface IUniswapViewer {\\n    function getAmountsForPosition(uint256 posId) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0x4a15754b8aaa0b5b4bdd0ee79021f4dfaac989e3cabdc7d050c2d7bf67517b9a\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * original version by @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n *  Adapted by Babylon Finance.\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity 0.7.6;\\n\\nlibrary BytesLib {\\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n                case 2 {\\n                    // Since the new array still fits in the slot, we just need to\\n                    // update the contents of the slot.\\n                    // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                    sstore(\\n                        _preBytes.slot,\\n                        // all the modifications to the slot are inside this\\n                        // next block\\n                        add(\\n                            // we can just add to the slot contents because the\\n                            // bytes we want to change are the LSBs\\n                            fslot,\\n                            add(\\n                                mul(\\n                                    div(\\n                                        // load the bytes from memory\\n                                        mload(add(_postBytes, 0x20)),\\n                                        // zero all bytes to the right\\n                                        exp(0x100, sub(32, mlength))\\n                                    ),\\n                                    // and now shift left the number of bytes to\\n                                    // leave space for the length in the slot\\n                                    exp(0x100, sub(32, newlength))\\n                                ),\\n                                // increase length by the double of the memory\\n                                // bytes length\\n                                mul(mlength, 2)\\n                            )\\n                        )\\n                    )\\n                }\\n                case 1 {\\n                    // The stored value fits in the slot, but the combined value\\n                    // will exceed it.\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // The contents of the _postBytes array start 32 bytes into\\n                    // the structure. Our first read should obtain the `submod`\\n                    // bytes that can fit into the unused space in the last word\\n                    // of the stored array. To get this, we read 32 bytes starting\\n                    // from `submod`, so the data we read overlaps with the array\\n                    // contents by `submod` bytes. Masking the lowest-order\\n                    // `submod` bytes allows us to add that value directly to the\\n                    // stored value.\\n\\n                    let submod := sub(32, slength)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(\\n                        sc,\\n                        add(\\n                            and(fslot, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00),\\n                            and(mload(mc), mask)\\n                        )\\n                    )\\n\\n                    for {\\n                        mc := add(mc, 0x20)\\n                        sc := add(sc, 1)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n                default {\\n                    // get the keccak hash to get the contents of the array\\n                    mstore(0x0, _preBytes.slot)\\n                    // Start copying to the last used word of the stored array.\\n                    let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                    // save new length\\n                    sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                    // Copy over the first `submod` bytes of the new data as in\\n                    // case 1 above.\\n                    let slengthmod := mod(slength, 32)\\n                    let mlengthmod := mod(mlength, 32)\\n                    let submod := sub(32, slengthmod)\\n                    let mc := add(_postBytes, submod)\\n                    let end := add(_postBytes, mlength)\\n                    let mask := sub(exp(0x100, submod), 1)\\n\\n                    sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                    for {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } lt(mc, end) {\\n                        sc := add(sc, 1)\\n                        mc := add(mc, 0x20)\\n                    } {\\n                        sstore(sc, mload(mc))\\n                    }\\n\\n                    mask := exp(0x100, sub(mc, end))\\n\\n                    sstore(sc, mul(div(mload(mc), mask), mask))\\n                }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory) {\\n        require(_length + 31 >= _length, 'slice_overflow');\\n        require(_bytes.length >= _start + _length, 'slice_outOfBounds');\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n                case 0 {\\n                    // Get a location of some free memory and store it in tempBytes as\\n                    // Solidity does for memory variables.\\n                    tempBytes := mload(0x40)\\n\\n                    // The first word of the slice result is potentially a partial\\n                    // word read from the original array. To read it, we calculate\\n                    // the length of that partial word and start copying that many\\n                    // bytes into the array. The first word we copy will start with\\n                    // data we don't care about, but the last `lengthmod` bytes will\\n                    // land at the beginning of the contents of the new array. When\\n                    // we're done copying, we overwrite the full first word with\\n                    // the actual length of the slice.\\n                    let lengthmod := and(_length, 31)\\n\\n                    // The multiplication in the next line is necessary\\n                    // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                    // the following copy loop was copying the origin's length\\n                    // and then ending prematurely not copying everything it should.\\n                    let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                    let end := add(mc, _length)\\n\\n                    for {\\n                        // The multiplication in the next line has the same exact purpose\\n                        // as the one above.\\n                        let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                    } lt(mc, end) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        mstore(mc, mload(cc))\\n                    }\\n\\n                    mstore(tempBytes, _length)\\n\\n                    //update free-memory pointer\\n                    //allocating the array padded to 32 bytes like the compiler does now\\n                    mstore(0x40, and(add(mc, 31), not(31)))\\n                }\\n                //if we want a zero-length slice let's just return a zero-length array\\n                default {\\n                    tempBytes := mload(0x40)\\n                    //zero out the 32 bytes slice we are about to return\\n                    //we need to do it because Solidity does not garbage collect\\n                    mstore(tempBytes, 0)\\n\\n                    mstore(0x40, add(tempBytes, 0x20))\\n                }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, 'toAddress_outOfBounds');\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1, 'toUint8_outOfBounds');\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, 'toUint16_outOfBounds');\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, 'toUint32_outOfBounds');\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, 'toUint64_outOfBounds');\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, 'toUint96_outOfBounds');\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, 'toUint128_outOfBounds');\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, 'toUint256_outOfBounds');\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, 'toBytes32_outOfBounds');\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n                case 1 {\\n                    // cb is a circuit breaker in the for loop since there's\\n                    //  no said feature for inline assembly loops\\n                    // cb = 1 - don't breaker\\n                    // cb = 0 - break\\n                    let cb := 1\\n\\n                    let mc := add(_preBytes, 0x20)\\n                    let end := add(mc, length)\\n\\n                    for {\\n                        let cc := add(_postBytes, 0x20)\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                    } eq(add(lt(mc, end), cb), 2) {\\n                        mc := add(mc, 0x20)\\n                        cc := add(cc, 0x20)\\n                    } {\\n                        // if any of these checks fails then arrays are not equal\\n                        if iszero(eq(mload(mc), mload(cc))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n                case 1 {\\n                    // slength can contain both the length and contents of the array\\n                    // if length < 32 bytes so let's prepare for that\\n                    // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                    if iszero(iszero(slength)) {\\n                        switch lt(slength, 32)\\n                            case 1 {\\n                                // blank the last byte which is the length\\n                                fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                                if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                                    // unsuccess:\\n                                    success := 0\\n                                }\\n                            }\\n                            default {\\n                                // cb is a circuit breaker in the for loop since there's\\n                                //  no said feature for inline assembly loops\\n                                // cb = 1 - don't breaker\\n                                // cb = 0 - break\\n                                let cb := 1\\n\\n                                // get the keccak hash to get the contents of the array\\n                                mstore(0x0, _preBytes.slot)\\n                                let sc := keccak256(0x0, 0x20)\\n\\n                                let mc := add(_postBytes, 0x20)\\n                                let end := add(mc, mlength)\\n\\n                                // the next line is the loop condition:\\n                                // while(uint256(mc < end) + cb == 2)\\n                                for {\\n\\n                                } eq(add(lt(mc, end), cb), 2) {\\n                                    sc := add(sc, 1)\\n                                    mc := add(mc, 0x20)\\n                                } {\\n                                    if iszero(eq(sload(sc), mload(mc))) {\\n                                        // unsuccess:\\n                                        success := 0\\n                                        cb := 0\\n                                    }\\n                                }\\n                            }\\n                    }\\n                }\\n                default {\\n                    // unsuccess:\\n                    success := 0\\n                }\\n        }\\n\\n        return success;\\n    }\\n\\n    function get64Bytes(bytes memory _data, uint256 _index) internal pure returns (bytes memory) {\\n        return slice(_data, (64 * _index), 64);\\n    }\\n\\n    function decodeOpDataAddressAssembly(bytes memory _data, uint256 _startingByte) internal pure returns (address) {\\n        return toAddress(_data, _startingByte);\\n    }\\n\\n    function decodeOpDataAddress(bytes calldata _data) internal pure returns (address) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address));\\n    }\\n\\n    function decodeOpDataAddressAndUint(bytes calldata _data) internal pure returns (address, uint256) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        return abi.decode(_data, (address, uint256));\\n    }\\n\\n    function decodeOpDataAsType(\\n        bytes memory _data,\\n        uint8 _type,\\n        uint8 _offset\\n    ) internal pure returns (bytes memory) {\\n        // Expects no prefix (e.g. signature of bytes4 should be removed before using it)\\n        // type: 0 - uint8, 1: uint256, 2: bool, 3: address\\n        if (_type == 0 || _type == 2) {\\n            // boolean is also 1 byte\\n            // returning bytes type\\n            return slice(_data, _offset, 1); // to return uint8 type better use toUint8(_data, _offset);\\n        } else if (_type == 1) {\\n            // returning bytes type\\n            return slice(_data, _offset, 32); // to return uint256 type better use toUint256(_data, _offset);\\n        } else if (_type == 3) {\\n            // returning bytes type\\n            return slice(_data, _offset, 20); // to return address type better use toAddress(_data, _offset);\\n        }\\n        // Default uint\\n        return slice(_data, _offset, 1);\\n    }\\n}\\n\",\"keccak256\":\"0x6a0b47ec0526641367a1b50b39af2bb507f5e3ad84494ed55a1970df642628ae\",\"license\":\"Unlicense\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x8349571932df52641bc6c22f77b577acbb440da1ec0bb617905b8000663ed120\",\"license\":\"Apache-2.0\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x09d53ea817952f505899280de00535cdd147c12d45a13d2c75c6c203dc9aaecb\",\"license\":\"Apache-2.0\"},\"contracts/strategies/operations/LendOperation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {ILendIntegration} from '../../interfaces/ILendIntegration.sol';\\n\\nimport {PreciseUnitMath} from '../../lib/PreciseUnitMath.sol';\\nimport {SafeDecimalMath} from '../../lib/SafeDecimalMath.sol';\\nimport {LowGasSafeMath as SafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {BytesLib} from '../../lib/BytesLib.sol';\\n\\nimport {Operation} from './Operation.sol';\\n\\n/**\\n * @title LendOperation\\n * @author Babylon Finance\\n *\\n * Executes a lend operation\\n */\\ncontract LendOperation is Operation {\\n    using SafeMath for uint256;\\n    using PreciseUnitMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using BytesLib for bytes;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, address _controller) Operation(_name, _controller) {}\\n\\n    /**\\n     * Sets operation data for the lend operation\\n     *\\n     * @param _data                   Operation data\\n     */\\n    function validateOperation(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address, /* _integration */\\n        uint256 /* _index */\\n    ) external view override onlyStrategy {}\\n\\n    /**\\n     * Executes the lend operation\\n     * @param _asset              Asset to receive into this operation\\n     * @param _capital            Amount of asset received\\n     * param _assetStatus         Status of the asset amount\\n     * @param _data               OpData e.g. Address of the asset to lend\\n     * param _garden              Garden of the strategy\\n     * @param _integration        Address of the integration to execute\\n     */\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8, /* _assetStatus */\\n        bytes calldata _data,\\n        IGarden, /* _garden */\\n        address _integration\\n    )\\n        external\\n        override\\n        onlyStrategy\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        )\\n    {\\n        address assetToken = BytesLib.decodeOpDataAddress(_data); // We just use the first 20 bytes from the whole opEncodedData\\n        if (assetToken != _asset) {\\n            // Trade to WETH if is 0x0 (eth in compound)\\n            if (assetToken != address(0) || _asset != WETH) {\\n                IStrategy(msg.sender).trade(_asset, _capital, assetToken == address(0) ? WETH : assetToken);\\n            }\\n        }\\n        uint256 numTokensToSupply;\\n        if (assetToken == address(0)) {\\n            // change it to plain eth for compound\\n            IStrategy(msg.sender).handleWeth(false, IERC20(WETH).balanceOf(msg.sender));\\n            numTokensToSupply = address(msg.sender).balance;\\n        } else {\\n            numTokensToSupply = IERC20(assetToken).balanceOf(msg.sender);\\n        }\\n        uint256 exactAmount = ILendIntegration(_integration).getExpectedShares(assetToken, numTokensToSupply);\\n        uint256 minAmountExpected = exactAmount.sub(exactAmount.preciseMul(SLIPPAGE_ALLOWED));\\n        ILendIntegration(_integration).supplyTokens(msg.sender, assetToken, numTokensToSupply, minAmountExpected);\\n        return (assetToken, numTokensToSupply, 1); // put as collateral\\n    }\\n\\n    /**\\n     * Exits the lend operation.\\n     * @param _percentage of capital to exit from the strategy\\n     */\\n    function exitOperation(\\n        address _borrowToken,\\n        uint256 _remaining,\\n        uint8, /* _assetStatus */\\n        uint256 _percentage,\\n        bytes memory _data,\\n        IGarden, /* _garden */\\n        address _integration\\n    )\\n        external\\n        override\\n        onlyStrategy\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        )\\n    {\\n        address assetToken = BytesLib.decodeOpDataAddressAssembly(_data, 12);\\n        require(_percentage <= HUNDRED_PERCENT, 'Unwind Percentage <= 100%');\\n        _redeemTokens(_borrowToken, _remaining, _percentage, msg.sender, _integration, assetToken);\\n        // Change to weth if needed\\n        if (assetToken == address(0)) {\\n            assetToken = WETH;\\n            IStrategy(msg.sender).handleWeth(true, address(msg.sender).balance);\\n        }\\n        address rewardsToken = _getRewardToken(_integration);\\n        // Only sell rewards when the strategy finalizes\\n        if (rewardsToken != address(0) && _percentage == HUNDRED_PERCENT) {\\n            uint256 rewardsBalance = IERC20(rewardsToken).balanceOf(msg.sender);\\n            // Add rewards\\n            if (rewardsBalance > 1e16) {\\n                IStrategy(msg.sender).trade(rewardsToken, rewardsBalance, assetToken, 70e15);\\n            }\\n        }\\n        // Liquidations\\n        _tradeLiquidationsToAsset(_borrowToken, assetToken);\\n        return (assetToken, IERC20(assetToken).balanceOf(msg.sender), 0);\\n    }\\n\\n    /**\\n     * Gets the NAV of the lend op in the reserve asset\\n     *\\n     * @param _data               OpData e.g. Asset lent\\n     * @param _garden             Garden the strategy belongs to\\n     * @param _integration        Status of the asset amount\\n     * @return _nav               NAV of the strategy\\n     */\\n    function getNAV(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view override returns (uint256, bool) {\\n        address lendToken = BytesLib.decodeOpDataAddress(_data); // 64 bytes (w/o signature prefix bytes4)\\n        if (!IStrategy(msg.sender).isStrategyActive()) {\\n            return (0, true);\\n        }\\n        uint256 assetTokenAmount = ILendIntegration(_integration).getInvestmentTokenAmount(msg.sender, lendToken);\\n        uint256 price = _getPrice(_garden.reserveAsset(), lendToken);\\n        uint256 NAV =\\n            SafeDecimalMath.normalizeAmountTokens(lendToken, _garden.reserveAsset(), assetTokenAmount).preciseDiv(\\n                price\\n            );\\n        address rewardsToken = _getRewardToken(_integration);\\n        // Replace FuseLend\\n        if (_integration == 0x3D0160388eC9196ceA4fA57E020E11ae446b3c13) {\\n            _integration = 0x68BE39E4357408f8c504ae1c25380bF132bd5555;\\n        }\\n        if (rewardsToken != address(0)) {\\n            uint256 rewardsAmount = ILendIntegration(_integration).getRewardsAccrued(msg.sender);\\n            if (rewardsAmount > 0) {\\n                uint256 priceRewards = _getPrice(_garden.reserveAsset(), rewardsToken);\\n                // We add rewards\\n                if (priceRewards != 0) {\\n                    NAV = NAV.add(\\n                        SafeDecimalMath\\n                            .normalizeAmountTokens(rewardsToken, _garden.reserveAsset(), rewardsAmount)\\n                            .preciseDiv(priceRewards)\\n                    );\\n                }\\n            }\\n        }\\n        require(NAV != 0, 'NAV has to be bigger 0');\\n        return (NAV, true);\\n    }\\n\\n    function _redeemTokens(\\n        address _borrowToken,\\n        uint256 _remaining,\\n        uint256 _percentage,\\n        address _sender,\\n        address _integration,\\n        address _assetToken\\n    ) internal {\\n        // Normalize to underlying asset if any (ctokens for compound)\\n        uint256 numTokensToRedeem = ILendIntegration(_integration).getInvestmentTokenAmount(_sender, _assetToken);\\n        // Apply percentage\\n        numTokensToRedeem = numTokensToRedeem.preciseMul(_percentage);\\n        uint256 remainingDebtInCollateralTokens = _getRemainingDebt(_borrowToken, _assetToken, _remaining);\\n        remainingDebtInCollateralTokens = SafeDecimalMath.normalizeAmountTokens(\\n            _borrowToken,\\n            _assetToken,\\n            remainingDebtInCollateralTokens\\n        );\\n\\n        if (_remaining > 0) {\\n            // Update amount so we can exit if there is debt\\n            try ILendIntegration(_integration).getCollateralFactor(_assetToken) returns (uint256 collateralPctg) {\\n                numTokensToRedeem = numTokensToRedeem.sub(\\n                    remainingDebtInCollateralTokens.preciseDiv(collateralPctg).mul(105).div(100)\\n                ); // add a bit extra 5% just in case\\n            } catch {\\n                numTokensToRedeem = numTokensToRedeem.sub(remainingDebtInCollateralTokens.mul(140).div(100));\\n            }\\n        }\\n        uint256 exchangeRate = ILendIntegration(_integration).getExchangeRatePerToken(_assetToken);\\n        // replace old aave\\n        if (_integration == 0x9b468eb07082bE767895eA7A9019619c3Db3BC89) {\\n            _integration = 0x72e27dA102a67767a7a3858D117159418f93617D;\\n        }\\n        ILendIntegration(_integration).redeemTokens(\\n            msg.sender,\\n            _assetToken,\\n            numTokensToRedeem,\\n            exchangeRate.mul(numTokensToRedeem.sub(numTokensToRedeem.preciseMul(SLIPPAGE_ALLOWED.mul(2))))\\n        );\\n    }\\n\\n    function _tradeLiquidationsToAsset(address _borrowToken, address _assetToken) private {\\n        // Change to weth if needed\\n        if (_borrowToken == address(0)) {\\n            if (address(msg.sender).balance > 0) {\\n                IStrategy(msg.sender).handleWeth(true, address(msg.sender).balance);\\n            }\\n            _borrowToken = WETH;\\n        }\\n        // Trade borrow token (from liquidations)\\n        if (IERC20(_borrowToken).balanceOf(msg.sender) > 1e6) {\\n            IStrategy(msg.sender).trade(_borrowToken, IERC20(_borrowToken).balanceOf(msg.sender), _assetToken);\\n        }\\n    }\\n\\n    function _getRemainingDebt(\\n        address _borrowToken,\\n        address _assetToken,\\n        uint256 _remaining\\n    ) private view returns (uint256) {\\n        if (_remaining == 0) {\\n            return 0;\\n        }\\n        uint256 price = _getPrice(_borrowToken, _assetToken);\\n        return _remaining.preciseMul(price);\\n    }\\n\\n    function _getRewardToken(address _integration) private view returns (address) {\\n        try ILendIntegration(_integration).getRewardToken() returns (address rewardsToken) {\\n            return rewardsToken;\\n        } catch {\\n            return address(0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3a5742ab32f9f3b8c0d1e91614e8d231057aff5430260adb1e4b72f04c9f5fd7\",\"license\":\"Apache-2.0\"},\"contracts/strategies/operations/Operation.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nimport {IGarden} from '../../interfaces/IGarden.sol';\\nimport {IStrategy} from '../../interfaces/IStrategy.sol';\\nimport {IOperation} from '../../interfaces/IOperation.sol';\\nimport {ITradeIntegration} from '../../interfaces/ITradeIntegration.sol';\\nimport {IPriceOracle} from '../../interfaces/IPriceOracle.sol';\\nimport {IBabController} from '../../interfaces/IBabController.sol';\\nimport {IHarvestUniv3Pool} from '../../interfaces/external/harvest/IHarvestUniv3Pool.sol';\\nimport {IUniswapViewer} from '../../interfaces/external/uniswap-v3/IUniswapViewer.sol';\\nimport {IUniVaultStorage} from '../../interfaces/external/uniswap-v3/IUniVaultStorage.sol';\\nimport {INFTPositionManager} from '../../interfaces/external/uniswap-v3/INFTPositionManager.sol';\\nimport {LowGasSafeMath as SafeMath} from '../../lib/LowGasSafeMath.sol';\\nimport {SafeDecimalMath} from '../../lib/SafeDecimalMath.sol';\\nimport {BytesLib} from '../../lib/BytesLib.sol';\\n\\n/**\\n * @title LongStrategy\\n * @author Babylon Finance\\n *\\n * Holds the data for a long strategy\\n */\\nabstract contract Operation is IOperation {\\n    using SafeMath for uint256;\\n    using BytesLib for uint256;\\n    using SafeDecimalMath for uint256;\\n\\n    /* ============ Modifiers ============ */\\n\\n    modifier onlyStrategy() {\\n        IStrategy strategy = IStrategy(msg.sender);\\n        IGarden garden = strategy.garden();\\n        require(IBabController(controller).isSystemContract(address(garden)), 'Only a garden can call this');\\n        require(garden.strategyMapping(msg.sender), 'Sender must be a strategy');\\n        _;\\n    }\\n\\n    /* ============ State Variables ============ */\\n    uint256 internal constant MIN_TRADE_AMOUNT = 1000;\\n    uint256 internal constant SLIPPAGE_ALLOWED = 1e16; // 1%\\n    uint256 internal constant HUNDRED_PERCENT = 1e18; // 100%\\n    address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\n    IUniswapViewer private constant uniswapViewer = IUniswapViewer(0x25c81e249F913C94F263923421622bA731E6555b);\\n    INFTPositionManager private constant nftPositionManager =\\n        INFTPositionManager(0xC36442b4a4522E871399CD717aBDD847Ab11FE88);\\n\\n    // Address of the controller\\n    address public controller;\\n    // Name of the operation\\n    string public name;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Creates the integration\\n     *\\n     * @param _name                   Name of the integration\\n     * @param _controller             Address of the controller\\n     */\\n    constructor(string memory _name, address _controller) {\\n        require(_controller != address(0), 'Controller must be defined');\\n        name = _name;\\n        controller = _controller;\\n    }\\n\\n    /* ============ Virtual External Functions ============ */\\n\\n    function validateOperation(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration,\\n        uint256 _index\\n    ) external view virtual override;\\n\\n    function executeOperation(\\n        address _asset,\\n        uint256 _capital,\\n        uint8 _assetStatus,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        virtual\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function exitOperation(\\n        address _asset,\\n        uint256 _remaining,\\n        uint8 _assetStatus,\\n        uint256 _percentage,\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    )\\n        external\\n        virtual\\n        override\\n        returns (\\n            address,\\n            uint256,\\n            uint8\\n        );\\n\\n    function getNAV(\\n        bytes calldata _data,\\n        IGarden _garden,\\n        address _integration\\n    ) external view virtual override returns (uint256, bool);\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Returns the name of the operation\\n     */\\n    function getName() external view override returns (string memory) {\\n        return name;\\n    }\\n\\n    /**\\n     * Returns the price of the pair through the price oracle\\n     */\\n    function _getPrice(address _assetOne, address _assetTwo) internal view returns (uint256) {\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        try\\n            oracle.getPrice(_assetOne == address(0) ? WETH : _assetOne, _assetTwo == address(0) ? WETH : _assetTwo)\\n        returns (uint256 price) {\\n            return price;\\n        } catch {\\n            return 0;\\n        }\\n    }\\n\\n    /**\\n     * Returns the price of the pair through the price oracle including univ2\\n     */\\n    function _getPriceNAV(address _assetOne, address _assetTwo) internal view returns (uint256) {\\n        IPriceOracle oracle = IPriceOracle(IBabController(controller).priceOracle());\\n        return\\n            oracle.getPriceNAV(_assetOne == address(0) ? WETH : _assetOne, _assetTwo == address(0) ? WETH : _assetTwo);\\n    }\\n\\n    /**\\n     * Calculates the value of a univ3 lp token held by a harvest vault\\n     * @param _pool                      Address of the harvest vault\\n     * @param _reserve                   Address of the reserve asset\\n     */\\n    function _getPriceUniV3LpToken(address _pool, address _reserve) internal view returns (uint256) {\\n        uint256 priceToken0 = _getPrice(IHarvestUniv3Pool(_pool).token0(), _reserve);\\n        uint256 priceToken1 = _getPrice(IHarvestUniv3Pool(_pool).token1(), _reserve);\\n        uint256 uniswapPosId = IUniVaultStorage(IHarvestUniv3Pool(_pool).getStorage()).posId();\\n        (uint256 amount0, uint256 amount1) = uniswapViewer.getAmountsForPosition(uniswapPosId);\\n        (, , , , , , , uint128 totalSupply, , , , ) = nftPositionManager.positions(uniswapPosId);\\n        if (totalSupply == 0) {\\n            return 0;\\n        }\\n        uint256 priceinReserveToken0 =\\n            SafeDecimalMath.normalizeAmountTokens(\\n                IHarvestUniv3Pool(_pool).token0(),\\n                _reserve,\\n                amount0.mul(priceToken0).div(totalSupply)\\n            );\\n        uint256 priceinReserveToken1 =\\n            SafeDecimalMath.normalizeAmountTokens(\\n                IHarvestUniv3Pool(_pool).token1(),\\n                _reserve,\\n                amount1.mul(priceToken1).div(totalSupply)\\n            );\\n        return priceinReserveToken0.add(priceinReserveToken1);\\n    }\\n}\\n\",\"keccak256\":\"0xe9e5d4ae3a58b2a839f1f1483c96417914f10ab6a8fd0d085102a7c17ec1aea7\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620023ad380380620023ad833981810160405260408110156200003757600080fd5b81019080805160405193929190846401000000008211156200005857600080fd5b9083019060208201858111156200006e57600080fd5b82516401000000008111828201881017156200008957600080fd5b82525081516020918201929091019080838360005b83811015620000b85781810151838201526020016200009e565b50505050905090810190601f168015620000e65780820380516001836020036101000a031916815260200191505b50604052602001519150829050816001600160a01b038116620001265760405162461bcd60e51b81526004016200011d9062000212565b60405180910390fd5b81516200013b90600190602085019062000166565b50600080546001600160a01b0319166001600160a01b03929092169190911790555062000249915050565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826200019e5760008555620001e9565b82601f10620001b957805160ff1916838001178555620001e9565b82800160010185558215620001e9579182015b82811115620001e9578251825591602001919060010190620001cc565b50620001f7929150620001fb565b5090565b5b80821115620001f75760008155600101620001fc565b6020808252601a908201527f436f6e74726f6c6c6572206d75737420626520646566696e6564000000000000604082015260600190565b61215480620002596000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a24258ad1161005b578063a24258ad146101d2578063bdd7a79c1461026c578063cdea20341461034c578063f77c4791146103d75761007d565b806306fdde031461008257806317d7de7c146100ff57806387033f6114610107575b600080fd5b61008a6103fb565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61008a610488565b6101a7600480360360c081101561011d57600080fd5b6001600160a01b038235169160208101359160ff604083013516919081019060808101606082013564010000000081111561015757600080fd5b82018360208201111561016957600080fd5b8035906020019184600183028401116401000000008311171561018b57600080fd5b91935091506001600160a01b038135811691602001351661051d565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b610253600480360360608110156101e857600080fd5b81019060208101813564010000000081111561020357600080fd5b82018360208201111561021557600080fd5b8035906020019184600183028401116401000000008311171561023757600080fd5b91935091506001600160a01b0381358116916020013516610aca565b6040805192835290151560208301528051918290030190f35b6101a7600480360360e081101561028257600080fd5b6001600160a01b038235169160208101359160ff6040830135169160608101359181019060a0810160808201356401000000008111156102c157600080fd5b8201836020820111156102d357600080fd5b803590602001918460018302840111640100000000831117156102f557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335811694506020909301359092169150610ed79050565b6103d56004803603608081101561036257600080fd5b81019060208101813564010000000081111561037d57600080fd5b82018360208201111561038f57600080fd5b803590602001918460018302840111640100000000831117156103b157600080fd5b91935091506001600160a01b0381358116916020810135909116906040013561138b565b005b6103df611541565b604080516001600160a01b039092168252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561056157600080fd5b505afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b906105ca90849060040161206a565b60206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190612032565b61063f5760405162461bcd60e51b815260040161063690612098565b60405180910390fd5b604051633a82192560e01b81526001600160a01b03821690633a8219259061066b90339060040161206a565b60206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190612032565b6106d75760405162461bcd60e51b8152600401610636906120cf565b60006106e38a8a611550565b90508c6001600160a01b0316816001600160a01b0316146107ed576001600160a01b03811615158061073257506001600160a01b038d1673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214155b156107ed5733630e32db528e8e6001600160a01b03851615610754578461076a565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b505050506040513d60208110156107ea57600080fd5b50505b60006001600160a01b03821661090557604080516370a0823160e01b815233600482018190529151631a5cfcb79160009173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2916370a08231916024808301926020929190829003018186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d602081101561088357600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681529215156004840152602483019190915251604480830192600092919082900301818387803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b50503331925061097a915050565b604080516370a0823160e01b815233600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d602081101561097557600080fd5b505190505b6000886001600160a01b0316634deef64984846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60208110156109fb57600080fd5b505190506000610a1c610a1583662386f26fc10000611576565b839061159b565b604080517ff14b57880000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052606482018490529151929350908c169163f14b57889160848082019260009290919082900301818387803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b50959a5093985060019750505050505050509750975097945050505050565b6000806000610ad98787611550565b9050336001600160a01b031663e4df5e1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d6020811015610b3e57600080fd5b5051610b5257600060019250925050610ece565b604080517f7137f5520000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0383811660248301529151600092871691637137f552916044808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d6020811015610be657600080fd5b5051604080517ff85cb5c80000000000000000000000000000000000000000000000000000000081529051919250600091610c7e916001600160a01b038a169163f85cb5c891600480820192602092909190829003018186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b5051846115ab565b90506000610cfb82610cf5868b6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d6020811015610ced57600080fd5b50518761171f565b906118e0565b90506000610d08886118f8565b9050733d0160388ec9196cea4fa57e020e11ae446b3c136001600160a01b0389161415610d47577368be39e4357408f8c504ae1c25380bf132bd555597505b6001600160a01b03811615610e71576000886001600160a01b031663ff0a30f0336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b505190508015610e6f576000610e178b6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b90508015610e6d57610e6a610e6382610cf5868f6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b859061196c565b93505b505b505b81610ec3576040805162461bcd60e51b815260206004820152601660248201527f4e41562068617320746f20626520626967676572203000000000000000000000604482015290519081900360640190fd5b509450600193505050505b94509492505050565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f539190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b90610f8490849060040161206a565b60206040518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190612032565b610ff05760405162461bcd60e51b815260040161063690612098565b604051633a82192560e01b81526001600160a01b03821690633a8219259061101c90339060040161206a565b60206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190612032565b6110885760405162461bcd60e51b8152600401610636906120cf565b600061109589600c61197c565b9050670de0b6b3a76400008a11156110f4576040805162461bcd60e51b815260206004820152601960248201527f556e77696e642050657263656e74616765203c3d203130302500000000000000604482015290519081900360640190fd5b6111028d8d8c338b86611988565b6001600160a01b038116611186575060408051631a5cfcb760e01b8152600160048201523380316024830152915173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29291631a5cfcb791604480830192600092919082900301818387803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b505050505b6000611191886118f8565b90506001600160a01b038116158015906111b25750670de0b6b3a76400008b145b156112ef576000816001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b50519050662386f26fc100008111156112ed57604080517fbb39a9600000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490528516604482015266f8b0a10e47000060648201529051339163bb39a9609160848083019260209291908290030181600087803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b505050506040513d60208110156112ea57600080fd5b50505b505b6112f98e83611c78565b81826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d602081101561137157600080fd5b5051909f909e5060009d509b505050505050505050505050565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cb57600080fd5b505afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b9061143490849060040161206a565b60206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612032565b6114a05760405162461bcd60e51b815260040161063690612098565b604051633a82192560e01b81526001600160a01b03821690633a821925906114cc90339060040161206a565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612032565b6115385760405162461bcd60e51b8152600401610636906120cf565b50505050505050565b6000546001600160a01b031681565b60008282602081101561156257600080fd5b50356001600160a01b031690505b92915050565b6000611594670de0b6b3a764000061158e8585611eb1565b90611ed5565b9392505050565b8082038281111561157057600080fd5b60008054604080517f2630c12f000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691632630c12f916004808301926020929190829003018186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190612016565b90506001600160a01b038082169063ac41865a908616156116625785611678565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6001600160a01b0386161561168d57856116a3565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6040518363ffffffff1660e01b81526004016116c092919061207e565b60206040518083038186803b1580156116d857600080fd5b505afa925050508015611708575060408051601f3d908101601f1916820190925261170591810190612052565b60015b611716576000915050611570565b91506115709050565b60008061172b85611f3c565b61179957846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561176857600080fd5b505afa15801561177c573d6000803e3d6000fd5b505050506040513d602081101561179257600080fd5b505161179c565b60125b60ff16905060006117ac85611f3c565b61181a57846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d602081101561181357600080fd5b505161181d565b60125b60ff16905060128211158015611834575060128111155b611885576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b80821415611897578392505050611594565b818111156118bf576118b66118ac828461159b565b8590600a0a611eb1565b92505050611594565b6118d66118cc838361159b565b8590600a0a611ed5565b9695505050505050565b60006115948261158e85670de0b6b3a7640000611eb1565b6000816001600160a01b03166369940d796040518163ffffffff1660e01b815260040160206040518083038186803b15801561193357600080fd5b505afa92505050801561195857506040513d602081101561195357600080fd5b505160015b61196457506000611967565b90505b919050565b8082018281101561157057600080fd5b60006115948383611f72565b6000826001600160a01b0316637137f55285846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d6020811015611a1257600080fd5b50519050611a208186611576565b90506000611a2f888489611fe6565b9050611a3c88848361171f565b90508615611afc57836001600160a01b03166323617585846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a9157600080fd5b505afa925050508015611ab657506040513d6020811015611ab157600080fd5b505160015b611ad457611acd610a15606461158e84608c611eb1565b9150611afc565b611af8611af1606461158e6069611aeb87876118e0565b90611eb1565b849061159b565b9250505b6000846001600160a01b03166307b54c6f856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611b4b57600080fd5b505afa158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b50519050739b468eb07082be767895ea7a9019619c3db3bc896001600160a01b0386161415611bb6577372e27da102a67767a7a3858d117159418f93617d94505b6001600160a01b03851663d0d2d3a2338686611bf8611bf1611bea611be3662386f26fc100006002611eb1565b8b90611576565b8a9061159b565b8790611eb1565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b158015611c5557600080fd5b505af1158015611c69573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b038216611d0457333115611cec5760408051631a5cfcb760e01b81526001600482015233803160248301529151631a5cfcb79160448082019260009290919082900301818387803b158015611cd357600080fd5b505af1158015611ce7573d6000803e3d6000fd5b505050505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b620f4240826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d5557600080fd5b505afa158015611d69573d6000803e3d6000fd5b505050506040513d6020811015611d7f57600080fd5b50511115611ead57336001600160a01b0316630e32db5283846001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d6020811015611e0e57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015260248101929092529185166044820152905160648083019260209291908290030181600087803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b505050506040513d6020811015611eaa57600080fd5b50505b5050565b6000821580611ecc57505081810281838281611ec957fe5b04145b61157057600080fd5b6000808211611f2b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611f3457fe5b049392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806119645750506001600160a01b03161590565b60008160140183511015611fcd576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081611ff557506000611594565b600061200185856115ab565b905061200d8382611576565b95945050505050565b600060208284031215612027578081fd5b815161159481612106565b600060208284031215612043578081fd5b81518015158114611594578182fd5b600060208284031215612063578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252601b908201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604082015260600190565b60208082526019908201527f53656e646572206d757374206265206120737472617465677900000000000000604082015260600190565b6001600160a01b038116811461211b57600080fd5b5056fea2646970667358221220151c61f9a4a8fffb79c5f1bdc07e2227dd69c9cab1a40684c1f5a72d66d550e764736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a24258ad1161005b578063a24258ad146101d2578063bdd7a79c1461026c578063cdea20341461034c578063f77c4791146103d75761007d565b806306fdde031461008257806317d7de7c146100ff57806387033f6114610107575b600080fd5b61008a6103fb565b6040805160208082528351818301528351919283929083019185019080838360005b838110156100c45781810151838201526020016100ac565b50505050905090810190601f1680156100f15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61008a610488565b6101a7600480360360c081101561011d57600080fd5b6001600160a01b038235169160208101359160ff604083013516919081019060808101606082013564010000000081111561015757600080fd5b82018360208201111561016957600080fd5b8035906020019184600183028401116401000000008311171561018b57600080fd5b91935091506001600160a01b038135811691602001351661051d565b604080516001600160a01b039094168452602084019290925260ff1682820152519081900360600190f35b610253600480360360608110156101e857600080fd5b81019060208101813564010000000081111561020357600080fd5b82018360208201111561021557600080fd5b8035906020019184600183028401116401000000008311171561023757600080fd5b91935091506001600160a01b0381358116916020013516610aca565b6040805192835290151560208301528051918290030190f35b6101a7600480360360e081101561028257600080fd5b6001600160a01b038235169160208101359160ff6040830135169160608101359181019060a0810160808201356401000000008111156102c157600080fd5b8201836020820111156102d357600080fd5b803590602001918460018302840111640100000000831117156102f557600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335811694506020909301359092169150610ed79050565b6103d56004803603608081101561036257600080fd5b81019060208101813564010000000081111561037d57600080fd5b82018360208201111561038f57600080fd5b803590602001918460018302840111640100000000831117156103b157600080fd5b91935091506001600160a01b0381358116916020810135909116906040013561138b565b005b6103df611541565b604080516001600160a01b039092168252519081900360200190f35b60018054604080516020600284861615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b505050505081565b60018054604080516020601f600260001961010087891615020190951694909404938401819004810282018101909252828152606093909290918301828280156105135780601f106104e857610100808354040283529160200191610513565b820191906000526020600020905b8154815290600101906020018083116104f657829003601f168201915b5050505050905090565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b15801561056157600080fd5b505afa158015610575573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105999190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b906105ca90849060040161206a565b60206040518083038186803b1580156105e257600080fd5b505afa1580156105f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061a9190612032565b61063f5760405162461bcd60e51b815260040161063690612098565b60405180910390fd5b604051633a82192560e01b81526001600160a01b03821690633a8219259061066b90339060040161206a565b60206040518083038186803b15801561068357600080fd5b505afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190612032565b6106d75760405162461bcd60e51b8152600401610636906120cf565b60006106e38a8a611550565b90508c6001600160a01b0316816001600160a01b0316146107ed576001600160a01b03811615158061073257506001600160a01b038d1673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214155b156107ed5733630e32db528e8e6001600160a01b03851615610754578461076a565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6040518463ffffffff1660e01b815260040180846001600160a01b03168152602001838152602001826001600160a01b031681526020019350505050602060405180830381600087803b1580156107c057600080fd5b505af11580156107d4573d6000803e3d6000fd5b505050506040513d60208110156107ea57600080fd5b50505b60006001600160a01b03821661090557604080516370a0823160e01b815233600482018190529151631a5cfcb79160009173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2916370a08231916024808301926020929190829003018186803b15801561085957600080fd5b505afa15801561086d573d6000803e3d6000fd5b505050506040513d602081101561088357600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681529215156004840152602483019190915251604480830192600092919082900301818387803b1580156108e357600080fd5b505af11580156108f7573d6000803e3d6000fd5b50503331925061097a915050565b604080516370a0823160e01b815233600482015290516001600160a01b038416916370a08231916024808301926020929190829003018186803b15801561094b57600080fd5b505afa15801561095f573d6000803e3d6000fd5b505050506040513d602081101561097557600080fd5b505190505b6000886001600160a01b0316634deef64984846040518363ffffffff1660e01b815260040180836001600160a01b031681526020018281526020019250505060206040518083038186803b1580156109d157600080fd5b505afa1580156109e5573d6000803e3d6000fd5b505050506040513d60208110156109fb57600080fd5b505190506000610a1c610a1583662386f26fc10000611576565b839061159b565b604080517ff14b57880000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03878116602483015260448201879052606482018490529151929350908c169163f14b57889160848082019260009290919082900301818387803b158015610a9757600080fd5b505af1158015610aab573d6000803e3d6000fd5b50959a5093985060019750505050505050509750975097945050505050565b6000806000610ad98787611550565b9050336001600160a01b031663e4df5e1a6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b1457600080fd5b505afa158015610b28573d6000803e3d6000fd5b505050506040513d6020811015610b3e57600080fd5b5051610b5257600060019250925050610ece565b604080517f7137f5520000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b0383811660248301529151600092871691637137f552916044808301926020929190829003018186803b158015610bbc57600080fd5b505afa158015610bd0573d6000803e3d6000fd5b505050506040513d6020811015610be657600080fd5b5051604080517ff85cb5c80000000000000000000000000000000000000000000000000000000081529051919250600091610c7e916001600160a01b038a169163f85cb5c891600480820192602092909190829003018186803b158015610c4c57600080fd5b505afa158015610c60573d6000803e3d6000fd5b505050506040513d6020811015610c7657600080fd5b5051846115ab565b90506000610cfb82610cf5868b6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b505afa158015610cd7573d6000803e3d6000fd5b505050506040513d6020811015610ced57600080fd5b50518761171f565b906118e0565b90506000610d08886118f8565b9050733d0160388ec9196cea4fa57e020e11ae446b3c136001600160a01b0389161415610d47577368be39e4357408f8c504ae1c25380bf132bd555597505b6001600160a01b03811615610e71576000886001600160a01b031663ff0a30f0336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015610da557600080fd5b505afa158015610db9573d6000803e3d6000fd5b505050506040513d6020811015610dcf57600080fd5b505190508015610e6f576000610e178b6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4c57600080fd5b90508015610e6d57610e6a610e6382610cf5868f6001600160a01b031663f85cb5c86040518163ffffffff1660e01b815260040160206040518083038186803b158015610cc357600080fd5b859061196c565b93505b505b505b81610ec3576040805162461bcd60e51b815260206004820152601660248201527f4e41562068617320746f20626520626967676572203000000000000000000000604482015290519081900360640190fd5b509450600193505050505b94509492505050565b6000806000803390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1b57600080fd5b505afa158015610f2f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f539190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b90610f8490849060040161206a565b60206040518083038186803b158015610f9c57600080fd5b505afa158015610fb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd49190612032565b610ff05760405162461bcd60e51b815260040161063690612098565b604051633a82192560e01b81526001600160a01b03821690633a8219259061101c90339060040161206a565b60206040518083038186803b15801561103457600080fd5b505afa158015611048573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106c9190612032565b6110885760405162461bcd60e51b8152600401610636906120cf565b600061109589600c61197c565b9050670de0b6b3a76400008a11156110f4576040805162461bcd60e51b815260206004820152601960248201527f556e77696e642050657263656e74616765203c3d203130302500000000000000604482015290519081900360640190fd5b6111028d8d8c338b86611988565b6001600160a01b038116611186575060408051631a5cfcb760e01b8152600160048201523380316024830152915173c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29291631a5cfcb791604480830192600092919082900301818387803b15801561116d57600080fd5b505af1158015611181573d6000803e3d6000fd5b505050505b6000611191886118f8565b90506001600160a01b038116158015906111b25750670de0b6b3a76400008b145b156112ef576000816001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561120657600080fd5b505afa15801561121a573d6000803e3d6000fd5b505050506040513d602081101561123057600080fd5b50519050662386f26fc100008111156112ed57604080517fbb39a9600000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152602482018490528516604482015266f8b0a10e47000060648201529051339163bb39a9609160848083019260209291908290030181600087803b1580156112c057600080fd5b505af11580156112d4573d6000803e3d6000fd5b505050506040513d60208110156112ea57600080fd5b50505b505b6112f98e83611c78565b81826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b15801561134757600080fd5b505afa15801561135b573d6000803e3d6000fd5b505050506040513d602081101561137157600080fd5b5051909f909e5060009d509b505050505050505050505050565b60003390506000816001600160a01b03166356ba88b86040518163ffffffff1660e01b815260040160206040518083038186803b1580156113cb57600080fd5b505afa1580156113df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114039190612016565b6000546040516313bc6d4b60e01b81529192506001600160a01b0316906313bc6d4b9061143490849060040161206a565b60206040518083038186803b15801561144c57600080fd5b505afa158015611460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114849190612032565b6114a05760405162461bcd60e51b815260040161063690612098565b604051633a82192560e01b81526001600160a01b03821690633a821925906114cc90339060040161206a565b60206040518083038186803b1580156114e457600080fd5b505afa1580156114f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151c9190612032565b6115385760405162461bcd60e51b8152600401610636906120cf565b50505050505050565b6000546001600160a01b031681565b60008282602081101561156257600080fd5b50356001600160a01b031690505b92915050565b6000611594670de0b6b3a764000061158e8585611eb1565b90611ed5565b9392505050565b8082038281111561157057600080fd5b60008054604080517f2630c12f000000000000000000000000000000000000000000000000000000008152905183926001600160a01b031691632630c12f916004808301926020929190829003018186803b15801561160957600080fd5b505afa15801561161d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116419190612016565b90506001600160a01b038082169063ac41865a908616156116625785611678565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6001600160a01b0386161561168d57856116a3565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b6040518363ffffffff1660e01b81526004016116c092919061207e565b60206040518083038186803b1580156116d857600080fd5b505afa925050508015611708575060408051601f3d908101601f1916820190925261170591810190612052565b60015b611716576000915050611570565b91506115709050565b60008061172b85611f3c565b61179957846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561176857600080fd5b505afa15801561177c573d6000803e3d6000fd5b505050506040513d602081101561179257600080fd5b505161179c565b60125b60ff16905060006117ac85611f3c565b61181a57846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156117e957600080fd5b505afa1580156117fd573d6000803e3d6000fd5b505050506040513d602081101561181357600080fd5b505161181d565b60125b60ff16905060128211158015611834575060128111155b611885576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b80821415611897578392505050611594565b818111156118bf576118b66118ac828461159b565b8590600a0a611eb1565b92505050611594565b6118d66118cc838361159b565b8590600a0a611ed5565b9695505050505050565b60006115948261158e85670de0b6b3a7640000611eb1565b6000816001600160a01b03166369940d796040518163ffffffff1660e01b815260040160206040518083038186803b15801561193357600080fd5b505afa92505050801561195857506040513d602081101561195357600080fd5b505160015b61196457506000611967565b90505b919050565b8082018281101561157057600080fd5b60006115948383611f72565b6000826001600160a01b0316637137f55285846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156119e857600080fd5b505afa1580156119fc573d6000803e3d6000fd5b505050506040513d6020811015611a1257600080fd5b50519050611a208186611576565b90506000611a2f888489611fe6565b9050611a3c88848361171f565b90508615611afc57836001600160a01b03166323617585846040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611a9157600080fd5b505afa925050508015611ab657506040513d6020811015611ab157600080fd5b505160015b611ad457611acd610a15606461158e84608c611eb1565b9150611afc565b611af8611af1606461158e6069611aeb87876118e0565b90611eb1565b849061159b565b9250505b6000846001600160a01b03166307b54c6f856040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611b4b57600080fd5b505afa158015611b5f573d6000803e3d6000fd5b505050506040513d6020811015611b7557600080fd5b50519050739b468eb07082be767895ea7a9019619c3db3bc896001600160a01b0386161415611bb6577372e27da102a67767a7a3858d117159418f93617d94505b6001600160a01b03851663d0d2d3a2338686611bf8611bf1611bea611be3662386f26fc100006002611eb1565b8b90611576565b8a9061159b565b8790611eb1565b6040518563ffffffff1660e01b815260040180856001600160a01b03168152602001846001600160a01b03168152602001838152602001828152602001945050505050600060405180830381600087803b158015611c5557600080fd5b505af1158015611c69573d6000803e3d6000fd5b50505050505050505050505050565b6001600160a01b038216611d0457333115611cec5760408051631a5cfcb760e01b81526001600482015233803160248301529151631a5cfcb79160448082019260009290919082900301818387803b158015611cd357600080fd5b505af1158015611ce7573d6000803e3d6000fd5b505050505b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc291505b620f4240826001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611d5557600080fd5b505afa158015611d69573d6000803e3d6000fd5b505050506040513d6020811015611d7f57600080fd5b50511115611ead57336001600160a01b0316630e32db5283846001600160a01b03166370a08231336040518263ffffffff1660e01b815260040180826001600160a01b0316815260200191505060206040518083038186803b158015611de457600080fd5b505afa158015611df8573d6000803e3d6000fd5b505050506040513d6020811015611e0e57600080fd5b5051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b03938416600482015260248101929092529185166044820152905160648083019260209291908290030181600087803b158015611e8057600080fd5b505af1158015611e94573d6000803e3d6000fd5b505050506040513d6020811015611eaa57600080fd5b50505b5050565b6000821580611ecc57505081810281838281611ec957fe5b04145b61157057600080fd5b6000808211611f2b576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381611f3457fe5b049392505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b03831614806119645750506001600160a01b03161590565b60008160140183511015611fcd576040805162461bcd60e51b815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e64730000000000000000000000604482015290519081900360640190fd5b5001602001516c01000000000000000000000000900490565b600081611ff557506000611594565b600061200185856115ab565b905061200d8382611576565b95945050505050565b600060208284031215612027578081fd5b815161159481612106565b600060208284031215612043578081fd5b81518015158114611594578182fd5b600060208284031215612063578081fd5b5051919050565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6020808252601b908201527f4f6e6c7920612067617264656e2063616e2063616c6c20746869730000000000604082015260600190565b60208082526019908201527f53656e646572206d757374206265206120737472617465677900000000000000604082015260600190565b6001600160a01b038116811461211b57600080fd5b5056fea2646970667358221220151c61f9a4a8fffb79c5f1bdc07e2227dd69c9cab1a40684c1f5a72d66d550e764736f6c63430007060033",
  "devdoc": {
    "author": "Babylon Finance Executes a lend operation",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_controller": "Address of the controller",
          "_name": "Name of the integration"
        }
      },
      "executeOperation(address,uint256,uint8,bytes,address,address)": {
        "params": {
          "_asset": "Asset to receive into this operation",
          "_capital": "Amount of asset received param _assetStatus         Status of the asset amount",
          "_data": "OpData e.g. Address of the asset to lend param _garden              Garden of the strategy",
          "_integration": "Address of the integration to execute"
        }
      },
      "exitOperation(address,uint256,uint8,uint256,bytes,address,address)": {
        "params": {
          "_percentage": "of capital to exit from the strategy"
        }
      },
      "getNAV(bytes,address,address)": {
        "params": {
          "_data": "OpData e.g. Asset lent",
          "_garden": "Garden the strategy belongs to",
          "_integration": "Status of the asset amount"
        },
        "returns": {
          "_0": "_nav               NAV of the strategy"
        }
      },
      "validateOperation(bytes,address,address,uint256)": {
        "params": {
          "_data": "Operation data"
        }
      }
    },
    "title": "LendOperation",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Creates the integration"
      },
      "executeOperation(address,uint256,uint8,bytes,address,address)": {
        "notice": "Executes the lend operation"
      },
      "exitOperation(address,uint256,uint8,uint256,bytes,address,address)": {
        "notice": "Exits the lend operation."
      },
      "getNAV(bytes,address,address)": {
        "notice": "Gets the NAV of the lend op in the reserve asset"
      },
      "getName()": {
        "notice": "Returns the name of the operation"
      },
      "validateOperation(bytes,address,address,uint256)": {
        "notice": "Sets operation data for the lend operation"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59619,
        "contract": "contracts/strategies/operations/LendOperation.sol:LendOperation",
        "label": "controller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 59621,
        "contract": "contracts/strategies/operations/LendOperation.sol:LendOperation",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}