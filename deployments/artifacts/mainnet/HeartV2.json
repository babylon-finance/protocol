{
  "address": "0xeA872D296569Ae9b016d8F6bDd49a1402D9e159E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBabController",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "contract IGovernor",
          "name": "_governor",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bablSent",
          "type": "uint256"
        }
      ],
      "name": "BABLRewardSent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_wethSpent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bablBought",
          "type": "uint256"
        }
      ],
      "name": "BablBuyback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "FeesCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_assetAmount",
          "type": "uint256"
        }
      ],
      "name": "FuseLentAsset",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_garden",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_wethInvested",
          "type": "uint256"
        }
      ],
      "name": "GardenSeedInvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_wethBalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_bablBalance",
          "type": "uint256"
        }
      ],
      "name": "LiquidityAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_isApprove",
          "type": "bool"
        }
      ],
      "name": "ProposalVote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "UpdatedGardenWeights",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bablAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_weeklyRate",
          "type": "uint256"
        }
      ],
      "name": "addReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetForPurchases",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToCToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "assetToLend",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bablRewardLeft",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetToBorrow",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrowFusePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "feeDistributionWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "gardenWeights",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getFeeDistributionWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGardenWeights",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalStats",
      "outputs": [
        {
          "internalType": "uint256[7]",
          "name": "",
          "type": "uint256[7]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVotedGardens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "heartGarden",
      "outputs": [
        {
          "internalType": "contract IGarden",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_feeWeights",
          "type": "uint256[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastPumpAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastVotesAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetToLend",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_lendAmount",
          "type": "uint256"
        }
      ],
      "name": "lendFusePool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "minAmounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pump",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gardens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "resolveGardenVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_gardens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_weights",
          "type": "uint256[]"
        }
      ],
      "name": "resolveGardenVotesAndPump",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetToSell",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountToSell",
          "type": "uint256"
        }
      ],
      "name": "sellWantedAssetToHeart",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_heartGarden",
          "type": "address"
        }
      ],
      "name": "setHeartGardenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        }
      ],
      "name": "setMinTradeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tradeSlippage",
          "type": "uint256"
        }
      ],
      "name": "setTradeSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalStats",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tradeSlippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetToLend",
          "type": "address"
        }
      ],
      "name": "updateAssetToLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_purchaseAsset",
          "type": "address"
        }
      ],
      "name": "updateAssetToPurchase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_feeWeights",
          "type": "uint256[]"
        }
      ],
      "name": "updateFeeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateMarkets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_proposalId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isApprove",
          "type": "bool"
        }
      ],
      "name": "voteProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "votedGardens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weeklyRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b011347bcc93ed7116db67d94515a4009e85663c1849547709bd13809619ad8",
  "receipt": {
    "to": null,
    "from": "0xAeC6233A45A3866e9F1c64ab121e4eE9DBEaFbfF",
    "contractAddress": "0xeA872D296569Ae9b016d8F6bDd49a1402D9e159E",
    "transactionIndex": 15,
    "gasUsed": "4165929",
    "logsBloom": "0x
    "blockHash": "0x85aad6ef764a6d29f2119f6e445adcae80715df8dcb0b805bcf85fd7d5242a1f",
    "transactionHash": "0x6b011347bcc93ed7116db67d94515a4009e85663c1849547709bd13809619ad8",
    "logs": [],
    "blockNumber": 14254246,
    "cumulativeGasUsed": "5337793",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a5b5fcB561dAF3aDF86F8477555B92FBa43b5F",
    "0xBEC3de5b14902C660Bd2C7EfD2F259998424cc24"
  ],
  "numDeployments": 1,
  "solcInputHash": "c82f0c2162f71ad0152ea6148afe1725",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBabController\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"contract IGovernor\",\"name\":\"_governor\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bablSent\",\"type\":\"uint256\"}],\"name\":\"BABLRewardSent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wethSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bablBought\",\"type\":\"uint256\"}],\"name\":\"BablBuyback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"FeesCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_assetAmount\",\"type\":\"uint256\"}],\"name\":\"FuseLentAsset\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_garden\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wethInvested\",\"type\":\"uint256\"}],\"name\":\"GardenSeedInvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_wethBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_bablBalance\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"ProposalVote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"UpdatedGardenWeights\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bablAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_weeklyRate\",\"type\":\"uint256\"}],\"name\":\"addReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetForPurchases\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToCToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"assetToLend\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bablRewardLeft\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToBorrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrowFusePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"feeDistributionWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"gardenWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getFeeDistributionWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGardenWeights\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalStats\",\"outputs\":[{\"internalType\":\"uint256[7]\",\"name\":\"\",\"type\":\"uint256[7]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVotedGardens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"heartGarden\",\"outputs\":[{\"internalType\":\"contract IGarden\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeWeights\",\"type\":\"uint256[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastPumpAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastVotesAt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToLend\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_lendAmount\",\"type\":\"uint256\"}],\"name\":\"lendFusePool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"minAmounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gardens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"resolveGardenVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_gardens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_weights\",\"type\":\"uint256[]\"}],\"name\":\"resolveGardenVotesAndPump\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToSell\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSell\",\"type\":\"uint256\"}],\"name\":\"sellWantedAssetToHeart\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_heartGarden\",\"type\":\"address\"}],\"name\":\"setHeartGardenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"}],\"name\":\"setMinTradeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tradeSlippage\",\"type\":\"uint256\"}],\"name\":\"setTradeSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"totalStats\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tradeSlippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetToLend\",\"type\":\"address\"}],\"name\":\"updateAssetToLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_purchaseAsset\",\"type\":\"address\"}],\"name\":\"updateAssetToPurchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_feeWeights\",\"type\":\"uint256[]\"}],\"name\":\"updateFeeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateMarkets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isApprove\",\"type\":\"bool\"}],\"name\":\"voteProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"votedGardens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weeklyRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addReward(uint256,uint256)\":{\"params\":{\"_bablAmount\":\"Total amount to distribute\",\"_weeklyRate\":\"Weekly amount to distribute\"}},\"borrowFusePool(address,uint256)\":{\"params\":{\"_assetToBorrow\":\"Asset that the heart is receiving from sender\",\"_borrowAmount\":\"Amount of asset to transfet\"}},\"getFeeDistributionWeights()\":{\"returns\":{\"_0\":\"The array of weights for the fees\"}},\"getGardenWeights()\":{\"returns\":{\"_0\":\"The array of weights for voted gardens\"}},\"getTotalStats()\":{\"returns\":{\"_0\":\"The array of stats for the fees\"}},\"getVotedGardens()\":{\"returns\":{\"_0\":\"The array of voted gardens\"}},\"initialize(uint256[])\":{\"params\":{\"_feeWeights\":\"Weights of the fee distribution\"}},\"lendFusePool(address,uint256)\":{\"params\":{\"_assetToLend\":\"Address of the asset to lend\",\"_lendAmount\":\"Amount of the asset to lend\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"resolveGardenVotes(address[],uint256[])\":{\"params\":{\"_gardens\":\"Gardens that are going to receive investment\",\"_weights\":\"Weight for the investment in each garden normalied to 1e18 precision\"}},\"sellWantedAssetToHeart(address,uint256)\":{\"params\":{\"_amountToSell\":\"Amount of asset to sell\",\"_assetToSell\":\"Asset that the heart is receiving from strategy to sell\"}},\"setHeartGardenAddress(address)\":{\"params\":{\"_heartGarden\":\"New heart garden address\"}},\"setMinTradeAmount(address,uint256)\":{\"params\":{\"_asset\":\"Asset to edit the min amount\",\"_minAmount\":\"New min amount\"}},\"setTradeSlippage(uint256)\":{\"params\":{\"_tradeSlippage\":\"Trade slippage\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAssetToLend(address)\":{\"params\":{\"_assetToLend\":\"New asset to lend\"}},\"updateAssetToPurchase(address)\":{\"params\":{\"_purchaseAsset\":\"New asset to purchase\"}},\"updateFeeWeights(uint256[])\":{\"params\":{\"_feeWeights\":\"Array of % (up to 1e18) with the fee weights\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addReward(uint256,uint256)\":{\"notice\":\"Adds a BABL reward to be distributed weekly back to the heart garden\"},\"borrowFusePool(address,uint256)\":{\"notice\":\"Heart borrows using its liquidity Note: Heart must have enough liquidity\"},\"getFeeDistributionWeights()\":{\"notice\":\"Getter to get the whole array of fee weights\"},\"getGardenWeights()\":{\"notice\":\"Getter to get the whole array of garden weights\"},\"getTotalStats()\":{\"notice\":\"Getter to get the whole array of total stats\"},\"getVotedGardens()\":{\"notice\":\"Getter to get the whole array of voted gardens\"},\"initialize(uint256[])\":{\"notice\":\"Set state variables and map asset pairs to their oracles\"},\"lendFusePool(address,uint256)\":{\"notice\":\"Tell the heart to lend an asset on Fuse\"},\"pump()\":{\"notice\":\"Function to pump blood to the heart Note: Anyone can call this. Keeper in Defender will be set up to do it for convenience.\"},\"resolveGardenVotes(address[],uint256[])\":{\"notice\":\"Resolves garden votes for this cycle Note: Only keeper can call this\"},\"sellWantedAssetToHeart(address,uint256)\":{\"notice\":\"Strategies can sell wanted assets by the protocol to the heart. Heart will buy them using borrowings in stables. Heart returns WETH so master swapper will take it from there. Note: Strategy needs to have approved the heart.\"},\"setHeartGardenAddress(address)\":{\"notice\":\"Updates the heart garden address\"},\"setMinTradeAmount(address,uint256)\":{\"notice\":\"Updates the min amount to trade a specific asset\"},\"setTradeSlippage(uint256)\":{\"notice\":\"Updates the tradeSlippage\"},\"updateAssetToLend(address)\":{\"notice\":\"Updates the next asset to lend on fuse pool\"},\"updateAssetToPurchase(address)\":{\"notice\":\"Updates the next asset to purchase assets from strategies at a premium\"},\"updateFeeWeights(uint256[])\":{\"notice\":\"Set the weights to allocate to different heart initiatives\"},\"updateMarkets()\":{\"notice\":\"Updates fuse pool market information and enters the markets\"},\"voteProposal(uint256,bool)\":{\"notice\":\"Function to vote for a proposal Note: Only keeper can call this. Votes need to have been resolved offchain. Warning: Gardens need to delegate to heart first.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Heart.sol\":\"HeartV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xb419e68addcb82ecda3ad3974b0d2db76435ce9b08435a04d5b119a0c5d45ea5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xfc5ea91fa9ceb1961023b2a6c978b902888c52b90847ac7813fe3b79524165f6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SignedSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @title SignedSafeMath\\n * @dev Signed math operations with safety checks that revert on error.\\n */\\nlibrary SignedSafeMath {\\n    int256 constant private _INT256_MIN = -2**255;\\n\\n    /**\\n     * @dev Returns the multiplication of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(int256 a, int256 b) internal pure returns (int256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        require(!(a == -1 && b == _INT256_MIN), \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        int256 c = a * b;\\n        require(c / a == b, \\\"SignedSafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two signed integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, \\\"SignedSafeMath: division by zero\\\");\\n        require(!(b == -1 && a == _INT256_MIN), \\\"SignedSafeMath: division overflow\\\");\\n\\n        int256 c = a / b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a - b;\\n        require((b >= 0 && c <= a) || (b < 0 && c > a), \\\"SignedSafeMath: subtraction overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two signed integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(int256 a, int256 b) internal pure returns (int256) {\\n        int256 c = a + b;\\n        require((b >= 0 && c >= a) || (b < 0 && c < a), \\\"SignedSafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n}\\n\",\"keccak256\":\"0xd17ac7e1d8f83d20d80e652adfed83da122f3a3c7b69fefa2985d85aebf0a3e9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title The interface for the Uniswap V3 Factory\\n/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\\ninterface IUniswapV3Factory {\\n    /// @notice Emitted when the owner of the factory is changed\\n    /// @param oldOwner The owner before the owner was changed\\n    /// @param newOwner The owner after the owner was changed\\n    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\\n\\n    /// @notice Emitted when a pool is created\\n    /// @param token0 The first token of the pool by address sort order\\n    /// @param token1 The second token of the pool by address sort order\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks\\n    /// @param pool The address of the created pool\\n    event PoolCreated(\\n        address indexed token0,\\n        address indexed token1,\\n        uint24 indexed fee,\\n        int24 tickSpacing,\\n        address pool\\n    );\\n\\n    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\\n    /// @param fee The enabled fee, denominated in hundredths of a bip\\n    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\\n    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\\n\\n    /// @notice Returns the current owner of the factory\\n    /// @dev Can be changed by the current owner via setOwner\\n    /// @return The address of the factory owner\\n    function owner() external view returns (address);\\n\\n    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\\n    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\\n    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\\n    /// @return The tick spacing\\n    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\\n\\n    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\\n    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\n    /// @param tokenA The contract address of either token0 or token1\\n    /// @param tokenB The contract address of the other token\\n    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\\n    /// @return pool The pool address\\n    function getPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external view returns (address pool);\\n\\n    /// @notice Creates a pool for the given two tokens and fee\\n    /// @param tokenA One of the two tokens in the desired pool\\n    /// @param tokenB The other of the two tokens in the desired pool\\n    /// @param fee The desired fee for the pool\\n    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\\n    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\\n    /// are invalid.\\n    /// @return pool The address of the newly created pool\\n    function createPool(\\n        address tokenA,\\n        address tokenB,\\n        uint24 fee\\n    ) external returns (address pool);\\n\\n    /// @notice Updates the owner of the factory\\n    /// @dev Must be called by the current owner\\n    /// @param _owner The new owner of the factory\\n    function setOwner(address _owner) external;\\n\\n    /// @notice Enables a fee amount with the given tickSpacing\\n    /// @dev Fee amounts may never be removed once enabled\\n    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\\n    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\\n    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\\n}\\n\",\"keccak256\":\"0xcc3d0c93fc9ac0febbe09f941b465b57f750bcf3b48432da0b97dc289cfdc489\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Callback for IUniswapV3PoolActions#swap\\n/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\\ninterface IUniswapV3SwapCallback {\\n    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\\n    /// @dev In the implementation you must pay the pool tokens owed for the swap.\\n    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\\n    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\n    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\n    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\n    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\n    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\\n    function uniswapV3SwapCallback(\\n        int256 amount0Delta,\\n        int256 amount1Delta,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3f485fb1a44e8fbeadefb5da07d66edab3cfe809f0ac4074b1e54e3eb3c4cf69\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.7.5;\\npragma abicoder v2;\\n\\nimport '@uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol';\\n\\n/// @title Router token swapping functionality\\n/// @notice Functions for swapping tokens via Uniswap V3\\ninterface ISwapRouter is IUniswapV3SwapCallback {\\n    struct ExactInputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactInputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountIn;\\n        uint256 amountOutMinimum;\\n    }\\n\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\n    /// @return amountOut The amount of the received token\\n    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\\n\\n    struct ExactOutputSingleParams {\\n        address tokenIn;\\n        address tokenOut;\\n        uint24 fee;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n        uint160 sqrtPriceLimitX96;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\\n\\n    struct ExactOutputParams {\\n        bytes path;\\n        address recipient;\\n        uint256 deadline;\\n        uint256 amountOut;\\n        uint256 amountInMaximum;\\n    }\\n\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\\n    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\\n    /// @return amountIn The amount of the input token\\n    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\\n}\\n\",\"keccak256\":\"0x9bfaf1feb32814623e627ab70f2409760b15d95f1f9b058e2b3399a8bb732975\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.6.0;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\",\"keccak256\":\"0x9af98b0908c96320ca6d08b22f0efca864742f6adbe5794cafe2d1d2e808b0cd\",\"license\":\"GPL-2.0-or-later\"},\"contracts/Heart.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport {OwnableUpgradeable} from '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\\n\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Factory.sol';\\nimport '@uniswap/v3-periphery/contracts/interfaces/ISwapRouter.sol';\\nimport '@uniswap/v3-periphery/contracts/libraries/TransferHelper.sol';\\nimport '@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol';\\n\\nimport {IHypervisor} from './interfaces/IHypervisor.sol';\\nimport {IBabController} from './interfaces/IBabController.sol';\\nimport {IGovernor} from './interfaces/external/oz/IGovernor.sol';\\nimport {IGarden} from './interfaces/IGarden.sol';\\nimport {IHeart} from './interfaces/IHeart.sol';\\nimport {IWETH} from './interfaces/external/weth/IWETH.sol';\\nimport {ICToken} from './interfaces/external/compound/ICToken.sol';\\nimport {ICEther} from './interfaces/external/compound/ICEther.sol';\\nimport {IComptroller} from './interfaces/external/compound/IComptroller.sol';\\nimport {IPriceOracle} from './interfaces/IPriceOracle.sol';\\nimport {IMasterSwapper} from './interfaces/IMasterSwapper.sol';\\nimport {IVoteToken} from './interfaces/IVoteToken.sol';\\n\\nimport {PreciseUnitMath} from './lib/PreciseUnitMath.sol';\\nimport {SafeDecimalMath} from './lib/SafeDecimalMath.sol';\\nimport {LowGasSafeMath as SafeMath} from './lib/LowGasSafeMath.sol';\\nimport {Errors, _require, _revert} from './lib/BabylonErrors.sol';\\nimport {ControllerLib} from './lib/ControllerLib.sol';\\n\\n/**\\n * @title Heart\\n * @author Babylon Finance\\n *\\n * Contract that assists The Heart of Babylon garden with BABL staking.\\n *\\n */\\ncontract Heart is OwnableUpgradeable, IHeart {\\n    using SafeERC20 for IERC20;\\n    using PreciseUnitMath for uint256;\\n    using SafeMath for uint256;\\n    using SafeDecimalMath for uint256;\\n    using ControllerLib for IBabController;\\n\\n    /* ============ Modifiers ============ */\\n\\n    /**\\n     * Throws if the sender is not a keeper in the protocol\\n     */\\n    function _onlyKeeper() private view {\\n        _require(controller.isValidKeeper(msg.sender), Errors.ONLY_KEEPER);\\n    }\\n\\n    /* ============ Events ============ */\\n\\n    event FeesCollected(uint256 _timestamp, uint256 _amount);\\n    event LiquidityAdded(uint256 _timestamp, uint256 _wethBalance, uint256 _bablBalance);\\n    event BablBuyback(uint256 _timestamp, uint256 _wethSpent, uint256 _bablBought);\\n    event GardenSeedInvest(uint256 _timestamp, address indexed _garden, uint256 _wethInvested);\\n    event FuseLentAsset(uint256 _timestamp, address indexed _asset, uint256 _assetAmount);\\n    event BABLRewardSent(uint256 _timestamp, uint256 _bablSent);\\n    event ProposalVote(uint256 _timestamp, uint256 _proposalId, bool _isApprove);\\n    event UpdatedGardenWeights(uint256 _timestamp);\\n\\n    /* ============ Constants ============ */\\n\\n    // Only for offline use by keeper/fauna\\n    bytes32 private constant VOTE_PROPOSAL_TYPEHASH =\\n        keccak256('ProposalVote(uint256 _proposalId,uint256 _amount,bool _isApprove)');\\n    bytes32 private constant VOTE_GARDEN_TYPEHASH = keccak256('GardenVote(address _garden,uint256 _amount)');\\n\\n    // Visor\\n    IHypervisor private constant visor = IHypervisor(0xF19F91d7889668A533F14d076aDc187be781a458);\\n\\n    // Address of Uniswap factory\\n    IUniswapV3Factory internal constant factory = IUniswapV3Factory(0x1F98431c8aD98523631AE4a59f267346ea31F984);\\n    uint24 private constant FEE_LOW = 500;\\n    uint24 private constant FEE_MEDIUM = 3000;\\n    uint24 private constant FEE_HIGH = 10000;\\n    uint256 private constant DEFAULT_TRADE_SLIPPAGE = 25e15; // 2.5%\\n\\n    // Tokens\\n    IWETH private constant WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\\n    IERC20 private constant BABL = IERC20(0xF4Dc48D260C93ad6a96c5Ce563E70CA578987c74);\\n    IERC20 private constant DAI = IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\\n    IERC20 private constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\\n    IERC20 private constant WBTC = IERC20(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\\n    IERC20 private constant FRAX = IERC20(0x853d955aCEf822Db058eb8505911ED77F175b99e);\\n\\n    // Fuse\\n    address private constant BABYLON_FUSE_POOL_ADDRESS = 0xC7125E3A2925877C7371d579D29dAe4729Ac9033;\\n\\n    /* ============ Immutables ============ */\\n\\n    IBabController private immutable controller;\\n    IGovernor private immutable governor;\\n    address private immutable treasury;\\n\\n    /* ============ State Variables ============ */\\n\\n    // Instance of the Controller contract\\n\\n    // Heart garden address\\n    IGarden public heartGarden;\\n\\n    // Variables to handle garden seed investments\\n    address[] public override votedGardens;\\n    uint256[] public override gardenWeights;\\n\\n    // Min Amounts to trade\\n    mapping(address => uint256) public override minAmounts;\\n\\n    // Fuse pool Variables\\n    // Mapping of asset addresses to cToken addresses in the fuse pool\\n    mapping(address => address) public override assetToCToken;\\n    // Which asset is going to receive the next batch of liquidity in fuse\\n    address public override assetToLend;\\n\\n    // Timestamp when the heart was last pumped\\n    uint256 public override lastPumpAt;\\n\\n    // Timestamp when the votes were sent by the keeper last\\n    uint256 public override lastVotesAt;\\n\\n    // Amount to gift to the Heart of Babylon Garden weekly\\n    uint256 public override weeklyRewardAmount;\\n    uint256 public override bablRewardLeft;\\n\\n    // Array with the weights to distribute to different heart activities\\n    // 0: Treasury\\n    // 1: Buybacks\\n    // 2: Liquidity BABL-ETH\\n    // 3: Garden Seed Investments\\n    // 4: Fuse Pool\\n    uint256[] public override feeDistributionWeights;\\n\\n    // Metric Totals\\n    // 0: fees accumulated in weth\\n    // 1: Money sent to treasury\\n    // 2: babl bought in babl\\n    // 3: liquidity added in weth\\n    // 4: amount invested in gardens in weth\\n    // 5: amount lent on fuse in weth\\n    // 6: weekly rewards paid in babl\\n    uint256[7] public override totalStats;\\n\\n    // Trade slippage to apply in trades\\n    uint256 public override tradeSlippage;\\n\\n    // Asset to use to buy protocol wanted assets\\n    address public override assetForPurchases;\\n\\n    /* ============ Initializer ============ */\\n\\n    /**\\n     * Set controller and governor addresses\\n     *\\n     * @param _controller             Address of controller contract\\n     * @param _governor               Address of governor contract\\n     */\\n    constructor(IBabController _controller, IGovernor _governor) initializer {\\n        _require(address(_controller) != address(0), Errors.ADDRESS_IS_ZERO);\\n        _require(address(_governor) != address(0), Errors.ADDRESS_IS_ZERO);\\n\\n        controller = _controller;\\n        treasury = _controller.treasury();\\n        governor = _governor;\\n    }\\n\\n    /**\\n     * Set state variables and map asset pairs to their oracles\\n     *\\n     * @param _feeWeights             Weights of the fee distribution\\n     */\\n    function initialize(uint256[] calldata _feeWeights) external initializer {\\n        OwnableUpgradeable.__Ownable_init();\\n        updateFeeWeights(_feeWeights);\\n        updateMarkets();\\n        updateAssetToLend(address(DAI));\\n        minAmounts[address(DAI)] = 500e18;\\n        minAmounts[address(USDC)] = 500e6;\\n        minAmounts[address(WETH)] = 5e17;\\n        minAmounts[address(WBTC)] = 3e6;\\n        // Self-delegation to be able to use BABL balance as voting power\\n        IVoteToken(address(BABL)).delegate(address(this));\\n        tradeSlippage = DEFAULT_TRADE_SLIPPAGE;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * Function to pump blood to the heart\\n     *\\n     * Note: Anyone can call this. Keeper in Defender will be set up to do it for convenience.\\n     */\\n    function pump() public override {\\n        _require(address(heartGarden) != address(0), Errors.HEART_GARDEN_NOT_SET);\\n        _require(block.timestamp.sub(lastPumpAt) >= 1 weeks, Errors.HEART_ALREADY_PUMPED);\\n        _require(block.timestamp.sub(lastVotesAt) < 1 weeks, Errors.HEART_VOTES_MISSING);\\n        // Consolidate all fees\\n        _consolidateFeesToWeth();\\n        uint256 wethBalance = WETH.balanceOf(address(this));\\n        _require(wethBalance >= 3e18, Errors.HEART_MINIMUM_FEES);\\n        // Send 10% to the treasury\\n        IERC20(WETH).safeTransferFrom(address(this), treasury, wethBalance.preciseMul(feeDistributionWeights[0]));\\n        totalStats[1] = totalStats[1].add(wethBalance.preciseMul(feeDistributionWeights[0]));\\n        // 30% for buybacks\\n        _buyback(wethBalance.preciseMul(feeDistributionWeights[1]));\\n        // 25% to BABL-ETH pair\\n        _addLiquidity(wethBalance.preciseMul(feeDistributionWeights[2]));\\n        // 15% to Garden Investments\\n        _investInGardens(wethBalance.preciseMul(feeDistributionWeights[3]));\\n        // 20% lend in fuse pool\\n        _lendFusePool(address(WETH), wethBalance.preciseMul(feeDistributionWeights[4]), address(assetToLend));\\n        // Add BABL reward to stakers (if any)\\n        _sendWeeklyReward();\\n        lastPumpAt = block.timestamp;\\n    }\\n\\n    /**\\n     * Function to vote for a proposal\\n     *\\n     * Note: Only keeper can call this. Votes need to have been resolved offchain.\\n     * Warning: Gardens need to delegate to heart first.\\n     */\\n    function voteProposal(uint256 _proposalId, bool _isApprove) external override {\\n        _onlyKeeper();\\n        // Governor does revert if trying to cast a vote twice or if proposal is not active\\n        IGovernor(governor).castVote(_proposalId, _isApprove ? 1 : 0);\\n        emit ProposalVote(block.timestamp, _proposalId, _isApprove);\\n    }\\n\\n    /**\\n     * Resolves garden votes for this cycle\\n     *\\n     * Note: Only keeper can call this\\n     * @param _gardens             Gardens that are going to receive investment\\n     * @param _weights             Weight for the investment in each garden normalied to 1e18 precision\\n     */\\n    function resolveGardenVotes(address[] memory _gardens, uint256[] memory _weights) public override {\\n        _onlyKeeper();\\n        _require(_gardens.length == _weights.length, Errors.HEART_VOTES_LENGTH);\\n        delete votedGardens;\\n        delete gardenWeights;\\n        for (uint256 i = 0; i < _gardens.length; i++) {\\n            votedGardens.push(_gardens[i]);\\n            gardenWeights.push(_weights[i]);\\n        }\\n        lastVotesAt = block.timestamp;\\n        emit UpdatedGardenWeights(block.timestamp);\\n    }\\n\\n    function resolveGardenVotesAndPump(address[] memory _gardens, uint256[] memory _weights) external override {\\n        resolveGardenVotes(_gardens, _weights);\\n        pump();\\n    }\\n\\n    /**\\n     * Updates fuse pool market information and enters the markets\\n     *\\n     */\\n    function updateMarkets() public override {\\n        controller.onlyGovernanceOrEmergency();\\n        // Enter markets of the fuse pool for all these assets\\n        address[] memory markets = IComptroller(BABYLON_FUSE_POOL_ADDRESS).getAllMarkets();\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            address underlying = ICToken(markets[i]).underlying();\\n            assetToCToken[underlying] = markets[i];\\n        }\\n        IComptroller(BABYLON_FUSE_POOL_ADDRESS).enterMarkets(markets);\\n    }\\n\\n    /**\\n     * Set the weights to allocate to different heart initiatives\\n     *\\n     * @param _feeWeights             Array of % (up to 1e18) with the fee weights\\n     */\\n    function updateFeeWeights(uint256[] calldata _feeWeights) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        delete feeDistributionWeights;\\n        for (uint256 i = 0; i < _feeWeights.length; i++) {\\n            feeDistributionWeights.push(_feeWeights[i]);\\n        }\\n    }\\n\\n    /**\\n     * Updates the next asset to lend on fuse pool\\n     *\\n     * @param _assetToLend             New asset to lend\\n     */\\n    function updateAssetToLend(address _assetToLend) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        _require(assetToLend != _assetToLend, Errors.HEART_ASSET_LEND_SAME);\\n        _require(assetToCToken[_assetToLend] != address(0), Errors.HEART_ASSET_LEND_INVALID);\\n        assetToLend = _assetToLend;\\n    }\\n\\n    /**\\n     * Updates the next asset to purchase assets from strategies at a premium\\n     *\\n     * @param _purchaseAsset             New asset to purchase\\n     */\\n    function updateAssetToPurchase(address _purchaseAsset) public override {\\n        controller.onlyGovernanceOrEmergency();\\n        _require(\\n            _purchaseAsset != assetForPurchases && _purchaseAsset != address(0),\\n            Errors.HEART_ASSET_PURCHASE_INVALID\\n        );\\n        assetForPurchases = _purchaseAsset;\\n    }\\n\\n    /**\\n     * Adds a BABL reward to be distributed weekly back to the heart garden\\n     *\\n     * @param _bablAmount             Total amount to distribute\\n     * @param _weeklyRate             Weekly amount to distribute\\n     */\\n    function addReward(uint256 _bablAmount, uint256 _weeklyRate) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        // Get the BABL reward\\n        IERC20(BABL).safeTransferFrom(msg.sender, address(this), _bablAmount);\\n        bablRewardLeft = bablRewardLeft.add(_bablAmount);\\n        weeklyRewardAmount = _weeklyRate;\\n    }\\n\\n    /**\\n     * Updates the min amount to trade a specific asset\\n     *\\n     * @param _asset                Asset to edit the min amount\\n     * @param _minAmount            New min amount\\n     */\\n    function setMinTradeAmount(address _asset, uint256 _minAmount) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        minAmounts[_asset] = _minAmount;\\n    }\\n\\n    /**\\n     * Updates the heart garden address\\n     *\\n     * @param _heartGarden                New heart garden address\\n     */\\n    function setHeartGardenAddress(address _heartGarden) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        heartGarden = IGarden(_heartGarden);\\n    }\\n\\n    /**\\n     * Updates the tradeSlippage\\n     *\\n     * @param _tradeSlippage                Trade slippage\\n     */\\n    function setTradeSlippage(uint256 _tradeSlippage) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        tradeSlippage = _tradeSlippage;\\n    }\\n\\n    /**\\n     * Tell the heart to lend an asset on Fuse\\n     *\\n     * @param _assetToLend                  Address of the asset to lend\\n     * @param _lendAmount                   Amount of the asset to lend\\n     */\\n    function lendFusePool(address _assetToLend, uint256 _lendAmount) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        // Lend into fuse\\n        _lendFusePool(_assetToLend, _lendAmount, _assetToLend);\\n    }\\n\\n    /**\\n     * Heart borrows using its liquidity\\n     * Note: Heart must have enough liquidity\\n     *\\n     * @param _assetToBorrow              Asset that the heart is receiving from sender\\n     * @param _borrowAmount               Amount of asset to transfet\\n     */\\n    function borrowFusePool(address _assetToBorrow, uint256 _borrowAmount) external override {\\n        controller.onlyGovernanceOrEmergency();\\n        address cToken = assetToCToken[_assetToBorrow];\\n        require(cToken != address(0), 'Not a valid cToken');\\n        require(ICToken(cToken).borrow(_borrowAmount) == 0, 'Not enough collateral');\\n    }\\n\\n    /**\\n     * Strategies can sell wanted assets by the protocol to the heart.\\n     * Heart will buy them using borrowings in stables.\\n     * Heart returns WETH so master swapper will take it from there.\\n     * Note: Strategy needs to have approved the heart.\\n     *\\n     * @param _assetToSell                  Asset that the heart is receiving from strategy to sell\\n     * @param _amountToSell                 Amount of asset to sell\\n     */\\n    function sellWantedAssetToHeart(address _assetToSell, uint256 _amountToSell) external override {\\n        controller.isSystemContract(msg.sender);\\n        require(controller.protocolWantedAssets(_assetToSell), 'Must be a wanted asset');\\n        require(assetForPurchases != address(0), 'Asset for purchases not set');\\n        // Uses on chain oracle to fetch prices\\n        uint256 pricePerTokenUnit = IPriceOracle(controller.priceOracle()).getPrice(_assetToSell, assetForPurchases);\\n        require(pricePerTokenUnit != 0, 'No price found');\\n        uint256 amountInPurchaseAssetOffered = pricePerTokenUnit.preciseMul(_amountToSell);\\n        require(\\n            IERC20(assetForPurchases).balanceOf(address(this)) >= amountInPurchaseAssetOffered,\\n            'Not enough balance to buy wanted asset'\\n        );\\n        IERC20(_assetToSell).safeTransferFrom(msg.sender, address(this), _amountToSell);\\n        // Buy it from the strategy plus 1% premium\\n        uint256 wethTraded = _trade(assetForPurchases, address(WETH), amountInPurchaseAssetOffered.preciseMul(101e16));\\n        // Send weth back to the strategy\\n        IERC20(WETH).safeTransfer(msg.sender, wethTraded);\\n    }\\n\\n    // solhint-disable-next-line\\n    receive() external payable {}\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Getter to get the whole array of voted gardens\\n     *\\n     * @return            The array of voted gardens\\n     */\\n    function getVotedGardens() external view override returns (address[] memory) {\\n        return votedGardens;\\n    }\\n\\n    /**\\n     * Getter to get the whole array of garden weights\\n     *\\n     * @return            The array of weights for voted gardens\\n     */\\n    function getGardenWeights() external view override returns (uint256[] memory) {\\n        return gardenWeights;\\n    }\\n\\n    /**\\n     * Getter to get the whole array of fee weights\\n     *\\n     * @return            The array of weights for the fees\\n     */\\n    function getFeeDistributionWeights() external view override returns (uint256[] memory) {\\n        return feeDistributionWeights;\\n    }\\n\\n    /**\\n     * Getter to get the whole array of total stats\\n     *\\n     * @return            The array of stats for the fees\\n     */\\n    function getTotalStats() external view override returns (uint256[7] memory) {\\n        return totalStats;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Consolidates all reserve asset fees to weth\\n     *\\n     */\\n    function _consolidateFeesToWeth() private {\\n        address[] memory reserveAssets = controller.getReserveAssets();\\n        for (uint256 i = 0; i < reserveAssets.length; i++) {\\n            address reserveAsset = reserveAssets[i];\\n            uint256 balance = IERC20(reserveAsset).balanceOf(address(this));\\n            // Trade if it's above a min amount (otherwise wait until next pump)\\n            if (reserveAsset != address(BABL) && reserveAsset != address(WETH) && balance > minAmounts[reserveAsset]) {\\n                totalStats[0] = totalStats[0].add(_trade(reserveAsset, address(WETH), balance));\\n            }\\n            if (reserveAsset == address(WETH)) {\\n                totalStats[0] = totalStats[0].add(balance);\\n            }\\n        }\\n        emit FeesCollected(block.timestamp, IERC20(WETH).balanceOf(address(this)));\\n    }\\n\\n    /**\\n     * Buys back BABL through the uniswap V3 BABL-ETH pool\\n     *\\n     */\\n    function _buyback(uint256 _amount) private {\\n        // Gift 50% BABL back to garden and send 50% to the treasury\\n        uint256 bablBought = _trade(address(WETH), address(BABL), _amount); // 50%\\n        IERC20(BABL).safeTransfer(address(heartGarden), bablBought.div(2));\\n        IERC20(BABL).safeTransfer(treasury, bablBought.div(2));\\n        totalStats[2] = totalStats[2].add(bablBought);\\n        emit BablBuyback(block.timestamp, _amount, bablBought);\\n    }\\n\\n    /**\\n     * Adds liquidity to the BABL-ETH pair through the hypervisor\\n     *\\n     * Note: Address of the heart needs to be whitelisted by Visor.\\n     */\\n    function _addLiquidity(uint256 _wethBalance) private {\\n        // Buy BABL again with half to add 50/50\\n        uint256 wethToDeposit = _wethBalance.preciseMul(5e17);\\n        uint256 bablTraded = _trade(address(WETH), address(BABL), wethToDeposit); // 50%\\n        BABL.approve(address(visor), bablTraded);\\n        WETH.approve(address(visor), wethToDeposit);\\n        uint256 oldTreasuryBalance = visor.balanceOf(treasury);\\n        uint256 shares = visor.deposit(wethToDeposit, bablTraded, treasury);\\n        _require(\\n            shares == visor.balanceOf(treasury).sub(oldTreasuryBalance) && visor.balanceOf(treasury) > 0,\\n            Errors.HEART_LP_TOKENS\\n        );\\n        totalStats[3] += _wethBalance;\\n        emit LiquidityAdded(block.timestamp, wethToDeposit, bablTraded);\\n    }\\n\\n    /**\\n     * Invests in gardens using WETH converting it to garden reserve asset first\\n     *\\n     * @param _wethAmount             Total amount of weth to invest in all gardens\\n     */\\n    function _investInGardens(uint256 _wethAmount) private {\\n        for (uint256 i = 0; i < votedGardens.length; i++) {\\n            address reserveAsset = IGarden(votedGardens[i]).reserveAsset();\\n            uint256 amountTraded;\\n            if (reserveAsset != address(WETH)) {\\n                amountTraded = _trade(address(WETH), reserveAsset, _wethAmount.preciseMul(gardenWeights[i]));\\n            } else {\\n                amountTraded = _wethAmount.preciseMul(gardenWeights[i]);\\n            }\\n            // Gift it to garden\\n            IERC20(reserveAsset).safeTransfer(votedGardens[i], amountTraded);\\n            emit GardenSeedInvest(block.timestamp, votedGardens[i], _wethAmount.preciseMul(gardenWeights[i]));\\n        }\\n        totalStats[4] += _wethAmount;\\n    }\\n\\n    /**\\n     * Lends an amount of WETH converting it first to the pool asset that is the lowest (except BABL)\\n     *\\n     * @param _fromAsset             Which asset to convert\\n     * @param _fromAmount             Total amount of weth to lend\\n     * @param _lendAsset            Address of the asset to lend\\n     */\\n    function _lendFusePool(\\n        address _fromAsset,\\n        uint256 _fromAmount,\\n        address _lendAsset\\n    ) private {\\n        address cToken = assetToCToken[_lendAsset];\\n        _require(cToken != address(0), Errors.HEART_INVALID_CTOKEN);\\n        uint256 assetToLendBalance = _fromAmount;\\n        // Trade to asset to lend if needed\\n        if (_fromAsset != _lendAsset) {\\n            assetToLendBalance = _trade(\\n                address(_fromAsset),\\n                _lendAsset == address(0) ? address(WETH) : _lendAsset,\\n                _fromAmount\\n            );\\n        }\\n        if (_lendAsset == address(0)) {\\n            // Convert WETH to ETH\\n            IWETH(WETH).withdraw(_fromAmount);\\n            ICEther(cToken).mint{value: _fromAmount}();\\n        } else {\\n            IERC20(_lendAsset).approve(cToken, assetToLendBalance);\\n            ICToken(cToken).mint(assetToLendBalance);\\n        }\\n        uint256 assetToLendWethPrice = IPriceOracle(controller.priceOracle()).getPrice(_lendAsset, address(WETH));\\n        uint256 assettoLendBalanceInWeth = assetToLendBalance.preciseMul(assetToLendWethPrice);\\n        totalStats[5] = totalStats[5].add(assettoLendBalanceInWeth);\\n        emit FuseLentAsset(block.timestamp, _lendAsset, assettoLendBalanceInWeth);\\n    }\\n\\n    /**\\n     * Sends the weekly BABL reward to the garden (if any)\\n     */\\n    function _sendWeeklyReward() private {\\n        if (bablRewardLeft > 0) {\\n            uint256 bablToSend = bablRewardLeft < weeklyRewardAmount ? bablRewardLeft : weeklyRewardAmount;\\n            uint256 currentBalance = IERC20(BABL).balanceOf(address(this));\\n            bablToSend = currentBalance < bablToSend ? currentBalance : bablToSend;\\n            IERC20(BABL).safeTransfer(address(heartGarden), bablToSend);\\n            bablRewardLeft = bablRewardLeft.sub(bablToSend);\\n            emit BABLRewardSent(block.timestamp, bablToSend);\\n            totalStats[6] = totalStats[6].add(bablToSend);\\n        }\\n    }\\n\\n    /**\\n     * Trades _tokenIn to _tokenOut using Uniswap V3\\n     *\\n     * @param _tokenIn             Token that is sold\\n     * @param _tokenOut            Token that is purchased\\n     * @param _amount              Amount of tokenin to sell\\n     */\\n    function _trade(\\n        address _tokenIn,\\n        address _tokenOut,\\n        uint256 _amount\\n    ) private returns (uint256) {\\n        if (_tokenIn == _tokenOut) {\\n            return _amount;\\n        }\\n        // Uses on chain oracle for all internal strategy operations to avoid attacks\\n        uint256 pricePerTokenUnit = IPriceOracle(controller.priceOracle()).getPrice(_tokenIn, _tokenOut);\\n        _require(pricePerTokenUnit != 0, Errors.NO_PRICE_FOR_TRADE);\\n        // minAmount must have receive token decimals\\n        uint256 exactAmount =\\n            SafeDecimalMath.normalizeAmountTokens(_tokenIn, _tokenOut, _amount.preciseMul(pricePerTokenUnit));\\n        uint256 minAmountExpected = exactAmount.sub(exactAmount.preciseMul(tradeSlippage));\\n        ISwapRouter swapRouter = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\\n        // Approve the router to spend token in.\\n        TransferHelper.safeApprove(_tokenIn, address(swapRouter), _amount);\\n        bytes memory path;\\n        if (_tokenIn == address(FRAX) || _tokenOut == address(FRAX)) {\\n            address hopToken = address(DAI);\\n            uint24 fee0 = _getUniswapPoolFeeWithHighestLiquidity(_tokenIn, hopToken);\\n            uint24 fee1 = _getUniswapPoolFeeWithHighestLiquidity(_tokenOut, hopToken);\\n            path = abi.encodePacked(_tokenIn, fee0, hopToken, fee1, _tokenOut);\\n        } else {\\n            uint24 fee = _getUniswapPoolFeeWithHighestLiquidity(_tokenIn, _tokenOut);\\n            path = abi.encodePacked(_tokenIn, fee, _tokenOut);\\n        }\\n        ISwapRouter.ExactInputParams memory params =\\n            ISwapRouter.ExactInputParams(path, address(this), block.timestamp, _amount, minAmountExpected);\\n        return swapRouter.exactInput(params);\\n    }\\n\\n    /**\\n     * Returns the FEE of the highest liquidity pool in univ3 for this pair\\n     * @param sendToken               Token that is sold\\n     * @param receiveToken            Token that is purchased\\n     */\\n    function _getUniswapPoolFeeWithHighestLiquidity(address sendToken, address receiveToken)\\n        private\\n        view\\n        returns (uint24)\\n    {\\n        IUniswapV3Pool poolLow = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_LOW));\\n        IUniswapV3Pool poolMedium = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_MEDIUM));\\n        IUniswapV3Pool poolHigh = IUniswapV3Pool(factory.getPool(sendToken, receiveToken, FEE_HIGH));\\n\\n        uint128 liquidityLow = address(poolLow) != address(0) ? poolLow.liquidity() : 0;\\n        uint128 liquidityMedium = address(poolMedium) != address(0) ? poolMedium.liquidity() : 0;\\n        uint128 liquidityHigh = address(poolHigh) != address(0) ? poolHigh.liquidity() : 0;\\n        if (liquidityLow >= liquidityMedium && liquidityLow >= liquidityHigh) {\\n            return FEE_LOW;\\n        }\\n        if (liquidityMedium >= liquidityLow && liquidityMedium >= liquidityHigh) {\\n            return FEE_MEDIUM;\\n        }\\n        return FEE_HIGH;\\n    }\\n}\\n\\ncontract HeartV2 is Heart {\\n    constructor(IBabController _controller, IGovernor _governor) Heart(_controller, _governor) {}\\n}\\n\",\"keccak256\":\"0x21be04ccceb9dd2621033fda17948365dd98344f2c61aee7c1ebce7fafafdfc5\",\"license\":\"Apache License\"},\"contracts/interfaces/IBabController.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IBabController\\n * @author Babylon Finance\\n *\\n * Interface for interacting with BabController\\n */\\ninterface IBabController {\\n    /* ============ Functions ============ */\\n\\n    function createGarden(\\n        address _reserveAsset,\\n        string memory _name,\\n        string memory _symbol,\\n        string memory _tokenURI,\\n        uint256 _seed,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards,\\n        uint256[] memory _profitSharing\\n    ) external payable returns (address);\\n\\n    function removeGarden(address _garden) external;\\n\\n    function addReserveAsset(address _reserveAsset) external;\\n\\n    function removeReserveAsset(address _reserveAsset) external;\\n\\n    function updateProtocolWantedAsset(address _wantedAsset, bool _wanted) external;\\n\\n    function editPriceOracle(address _priceOracle) external;\\n\\n    function editMardukGate(address _mardukGate) external;\\n\\n    function editGardenValuer(address _gardenValuer) external;\\n\\n    function editTreasury(address _newTreasury) external;\\n\\n    function editHeart(address _newHeart) external;\\n\\n    function editRewardsDistributor(address _rewardsDistributor) external;\\n\\n    function editGardenFactory(address _newGardenFactory) external;\\n\\n    function editGardenNFT(address _newGardenNFT) external;\\n\\n    function editCurveMetaRegistry(address _curveMetaRegistry) external;\\n\\n    function editStrategyNFT(address _newStrategyNFT) external;\\n\\n    function editStrategyFactory(address _newStrategyFactory) external;\\n\\n    function setOperation(uint8 _kind, address _operation) external;\\n\\n    function setMasterSwapper(address _newMasterSwapper) external;\\n\\n    function addKeeper(address _keeper) external;\\n\\n    function addKeepers(address[] memory _keepers) external;\\n\\n    function removeKeeper(address _keeper) external;\\n\\n    function enableGardenTokensTransfers() external;\\n\\n    function editLiquidityReserve(address _reserve, uint256 _minRiskyPairLiquidityEth) external;\\n\\n    function gardenCreationIsOpen() external view returns (bool);\\n\\n    function owner() external view returns (address);\\n\\n    function EMERGENCY_OWNER() external view returns (address);\\n\\n    function guardianGlobalPaused() external view returns (bool);\\n\\n    function guardianPaused(address _address) external view returns (bool);\\n\\n    function setPauseGuardian(address _guardian) external;\\n\\n    function setGlobalPause(bool _state) external returns (bool);\\n\\n    function setSomePause(address[] memory _address, bool _state) external returns (bool);\\n\\n    function isPaused(address _contract) external view returns (bool);\\n\\n    function priceOracle() external view returns (address);\\n\\n    function gardenValuer() external view returns (address);\\n\\n    function heart() external view returns (address);\\n\\n    function gardenNFT() external view returns (address);\\n\\n    function strategyNFT() external view returns (address);\\n\\n    function curveMetaRegistry() external view returns (address);\\n\\n    function rewardsDistributor() external view returns (address);\\n\\n    function gardenFactory() external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    function ishtarGate() external view returns (address);\\n\\n    function mardukGate() external view returns (address);\\n\\n    function strategyFactory() external view returns (address);\\n\\n    function masterSwapper() external view returns (address);\\n\\n    function gardenTokensTransfersEnabled() external view returns (bool);\\n\\n    function bablMiningProgramEnabled() external view returns (bool);\\n\\n    function allowPublicGardens() external view returns (bool);\\n\\n    function enabledOperations(uint256 _kind) external view returns (address);\\n\\n    function getGardens() external view returns (address[] memory);\\n\\n    function getReserveAssets() external view returns (address[] memory);\\n\\n    function getOperations() external view returns (address[20] memory);\\n\\n    function isGarden(address _garden) external view returns (bool);\\n\\n    function protocolWantedAssets(address _wantedAsset) external view returns (bool);\\n\\n    function isValidReserveAsset(address _reserveAsset) external view returns (bool);\\n\\n    function isValidKeeper(address _keeper) external view returns (bool);\\n\\n    function isSystemContract(address _contractAddress) external view returns (bool);\\n\\n    function protocolPerformanceFee() external view returns (uint256);\\n\\n    function protocolManagementFee() external view returns (uint256);\\n\\n    function minLiquidityPerReserve(address _reserve) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x31932d500ed2d16c823a891976dea3e5938ca277aab457ee2419d08f8bd59b7d\",\"license\":\"Apache License\"},\"contracts/interfaces/IBaseIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\ninterface IBaseIntegration {\\n    function name() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xf6945b4c232e689e1501c5a9a2de85dd22cbb39fd130a41e59dcac486789af85\",\"license\":\"Apache License\"},\"contracts/interfaces/ICurveMetaRegistry.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title ICurveMetaRegistry\\n * @author Babylon Finance\\n *\\n * Interface for interacting with all the curve registries\\n */\\ninterface ICurveMetaRegistry {\\n    /* ============ Functions ============ */\\n\\n    function updatePoolsList() external;\\n\\n    function updateCryptoRegistries() external;\\n\\n    /* ============ View Functions ============ */\\n\\n    function isPool(address _poolAddress) external view returns (bool);\\n\\n    function getCoinAddresses(address _pool, bool _getUnderlying) external view returns (address[8] memory);\\n\\n    function getNCoins(address _pool) external view returns (uint256);\\n\\n    function getLpToken(address _pool) external view returns (address);\\n\\n    function getPoolFromLpToken(address _lpToken) external view returns (address);\\n\\n    function getVirtualPriceFromLpToken(address _pool) external view returns (uint256);\\n\\n    function isMeta(address _pool) external view returns (bool);\\n\\n    function getUnderlyingAndRate(address _pool, uint256 _i) external view returns (address, uint256);\\n\\n    function findPoolForCoins(\\n        address _fromToken,\\n        address _toToken,\\n        uint256 _i\\n    ) external view returns (address);\\n\\n    function getCoinIndices(\\n        address _pool,\\n        address _fromToken,\\n        address _toToken\\n    )\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            bool\\n        );\\n}\\n\",\"keccak256\":\"0xb8b2aef9698f8ac2af013e3f0b71cc3ee3b2cdba0b5cae5e8d7c11e5f4a3039e\",\"license\":\"Apache License\"},\"contracts/interfaces/IGarden.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\nimport {IBabController} from './IBabController.sol';\\n\\n/**\\n * @title IStrategyGarden\\n *\\n * Interface for functions of the garden\\n */\\ninterface IStrategyGarden {\\n    /* ============ Write ============ */\\n\\n    function finalizeStrategy(\\n        uint256 _profits,\\n        int256 _returns,\\n        uint256 _burningAmount\\n    ) external;\\n\\n    function allocateCapitalToStrategy(uint256 _capital) external;\\n\\n    function expireCandidateStrategy(address _strategy) external;\\n\\n    function addStrategy(\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _stratParams,\\n        uint8[] calldata _opTypes,\\n        address[] calldata _opIntegrations,\\n        bytes calldata _opEncodedDatas\\n    ) external;\\n\\n    function payKeeper(address payable _keeper, uint256 _fee) external;\\n}\\n\\n/**\\n * @title IAdminGarden\\n *\\n * Interface for amdin functions of the Garden\\n */\\ninterface IAdminGarden {\\n    /* ============ Write ============ */\\n    function initialize(\\n        address _reserveAsset,\\n        IBabController _controller,\\n        address _creator,\\n        string memory _name,\\n        string memory _symbol,\\n        uint256[] calldata _gardenParams,\\n        uint256 _initialContribution,\\n        bool[] memory _publicGardenStrategistsStewards\\n    ) external payable;\\n\\n    function makeGardenPublic() external;\\n\\n    function transferCreatorRights(address _newCreator, uint8 _index) external;\\n\\n    function addExtraCreators(address[4] memory _newCreators) external;\\n\\n    function setPublicRights(bool _publicStrategist, bool _publicStewards) external;\\n\\n    function delegateVotes(address _token, address _address) external;\\n\\n    function updateCreators(address _newCreator, address[4] memory _newCreators) external;\\n\\n    function updateGardenParams(uint256[11] memory _newParams) external;\\n}\\n\\n/**\\n * @title IGarden\\n *\\n * Interface for operating with a Garden.\\n */\\ninterface ICoreGarden {\\n    /* ============ Constructor ============ */\\n\\n    /* ============ View ============ */\\n\\n    function privateGarden() external view returns (bool);\\n\\n    function publicStrategists() external view returns (bool);\\n\\n    function publicStewards() external view returns (bool);\\n\\n    function controller() external view returns (IBabController);\\n\\n    function creator() external view returns (address);\\n\\n    function isGardenStrategy(address _strategy) external view returns (bool);\\n\\n    function getContributor(address _contributor)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function reserveAsset() external view returns (address);\\n\\n    function totalContributors() external view returns (uint256);\\n\\n    function gardenInitializedAt() external view returns (uint256);\\n\\n    function minContribution() external view returns (uint256);\\n\\n    function depositHardlock() external view returns (uint256);\\n\\n    function minLiquidityAsset() external view returns (uint256);\\n\\n    function minStrategyDuration() external view returns (uint256);\\n\\n    function maxStrategyDuration() external view returns (uint256);\\n\\n    function reserveAssetRewardsSetAside() external view returns (uint256);\\n\\n    function absoluteReturns() external view returns (int256);\\n\\n    function totalStake() external view returns (uint256);\\n\\n    function minVotesQuorum() external view returns (uint256);\\n\\n    function minVoters() external view returns (uint256);\\n\\n    function maxDepositLimit() external view returns (uint256);\\n\\n    function strategyCooldownPeriod() external view returns (uint256);\\n\\n    function getStrategies() external view returns (address[] memory);\\n\\n    function extraCreators(uint256 index) external view returns (address);\\n\\n    function getFinalizedStrategies() external view returns (address[] memory);\\n\\n    function strategyMapping(address _strategy) external view returns (bool);\\n\\n    function getLockedBalance(address _contributor) external view returns (uint256);\\n\\n    function keeperDebt() external view returns (uint256);\\n\\n    function totalKeeperFees() external view returns (uint256);\\n\\n    function lastPricePerShare() external view returns (uint256);\\n\\n    function lastPricePerShareTS() external view returns (uint256);\\n\\n    function pricePerShareDecayRate() external view returns (uint256);\\n\\n    function pricePerShareDelta() external view returns (uint256);\\n\\n    /* ============ Write ============ */\\n\\n    function deposit(\\n        uint256 _reserveAssetQuantity,\\n        uint256 _minGardenTokenReceiveQuantity,\\n        address _to,\\n        bool mintNFT\\n    ) external payable;\\n\\n    function depositBySig(\\n        uint256 _amountIn,\\n        uint256 _minAmountOut,\\n        bool _mintNft,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _pricePerShare,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function withdraw(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        address payable _to,\\n        bool _withPenalty,\\n        address _unwindStrategy\\n    ) external;\\n\\n    function withdrawBySig(\\n        uint256 _gardenTokenQuantity,\\n        uint256 _minReserveReceiveQuantity,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        bool _withPenalty,\\n        address _unwindStrategy,\\n        uint256 _pricePerShare,\\n        uint256 _strategyNAV,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function claimReturns(address[] calldata _finalizedStrategies) external;\\n\\n    function claimRewardsBySig(\\n        uint256 _babl,\\n        uint256 _profits,\\n        uint256 _nonce,\\n        uint256 _maxFee,\\n        uint256 _fee,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\\ninterface IERC20Metadata {\\n    function name() external view returns (string memory);\\n}\\n\\ninterface IGarden is ICoreGarden, IAdminGarden, IStrategyGarden, IERC20, IERC20Metadata {}\\n\",\"keccak256\":\"0x663712418af72d503dcb6c7a1a7e4c92a56875db90c8c09527a9a23e86fcdca8\",\"license\":\"Apache License\"},\"contracts/interfaces/IHeart.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\n/**\\n * @title IHeart\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Heart\\n */\\ninterface IHeart {\\n    // View functions\\n\\n    function getVotedGardens() external view returns (address[] memory);\\n\\n    function getGardenWeights() external view returns (uint256[] memory);\\n\\n    function minAmounts(address _reserve) external view returns (uint256);\\n\\n    function assetToCToken(address _asset) external view returns (address);\\n\\n    function assetToLend() external view returns (address);\\n\\n    function assetForPurchases() external view returns (address);\\n\\n    function lastPumpAt() external view returns (uint256);\\n\\n    function lastVotesAt() external view returns (uint256);\\n\\n    function tradeSlippage() external view returns (uint256);\\n\\n    function weeklyRewardAmount() external view returns (uint256);\\n\\n    function bablRewardLeft() external view returns (uint256);\\n\\n    function getFeeDistributionWeights() external view returns (uint256[] memory);\\n\\n    function getTotalStats() external view returns (uint256[7] memory);\\n\\n    function votedGardens(uint256 _index) external view returns (address);\\n\\n    function gardenWeights(uint256 _index) external view returns (uint256);\\n\\n    function feeDistributionWeights(uint256 _index) external view returns (uint256);\\n\\n    function totalStats(uint256 _index) external view returns (uint256);\\n\\n    // Non-view\\n\\n    function pump() external;\\n\\n    function voteProposal(uint256 _proposalId, bool _isApprove) external;\\n\\n    function resolveGardenVotesAndPump(address[] memory _gardens, uint256[] memory _weights) external;\\n\\n    function resolveGardenVotes(address[] memory _gardens, uint256[] memory _weights) external;\\n\\n    function updateMarkets() external;\\n\\n    function setHeartGardenAddress(address _heartGarden) external;\\n\\n    function updateFeeWeights(uint256[] calldata _feeWeights) external;\\n\\n    function updateAssetToLend(address _assetToLend) external;\\n\\n    function updateAssetToPurchase(address _purchaseAsset) external;\\n\\n    function lendFusePool(address _assetToLend, uint256 _lendAmount) external;\\n\\n    function borrowFusePool(address _assetToBorrow, uint256 _borrowAmount) external;\\n\\n    function sellWantedAssetToHeart(address _assetToSell, uint256 _amountToSell) external;\\n\\n    function addReward(uint256 _bablAmount, uint256 _weeklyRate) external;\\n\\n    function setMinTradeAmount(address _asset, uint256 _minAmount) external;\\n\\n    function setTradeSlippage(uint256 _tradeSlippage) external;\\n}\\n\",\"keccak256\":\"0x55cfd814477168516ebd8c55017ee7f45ab695b53cb43796ef9d046e606fc9c1\",\"license\":\"Apache License\"},\"contracts/interfaces/IHypervisor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity 0.7.6;\\npragma abicoder v2;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IHypervisor {\\n    // @param deposit0 Amount of token0 transfered from sender to Hypervisor\\n    // @param deposit1 Amount of token0 transfered from sender to Hypervisor\\n    // @param to Address to which liquidity tokens are minted\\n    // @return shares Quantity of liquidity tokens minted as a result of deposit\\n    function deposit(\\n        uint256 deposit0,\\n        uint256 deposit1,\\n        address to\\n    ) external returns (uint256);\\n\\n    // @param shares Number of liquidity tokens to redeem as pool assets\\n    // @param to Address to which redeemed pool assets are sent\\n    // @param from Address from which liquidity tokens are sent\\n    // @return amount0 Amount of token0 redeemed by the submitted liquidity tokens\\n    // @return amount1 Amount of token1 redeemed by the submitted liquidity tokens\\n    function withdraw(\\n        uint256 shares,\\n        address to,\\n        address from\\n    ) external returns (uint256, uint256);\\n\\n    function rebalance(\\n        int24 _baseLower,\\n        int24 _baseUpper,\\n        int24 _limitLower,\\n        int24 _limitUpper,\\n        address _feeRecipient,\\n        int256 swapQuantity\\n    ) external;\\n\\n    function addBaseLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function addLimitLiquidity(uint256 amount0, uint256 amount1) external;\\n\\n    function pullLiquidity(uint256 shares)\\n        external\\n        returns (\\n            uint256 base0,\\n            uint256 base1,\\n            uint256 limit0,\\n            uint256 limit1\\n        );\\n\\n    function token0() external view returns (IERC20);\\n\\n    function token1() external view returns (IERC20);\\n\\n    function balanceOf(address) external view returns (uint256);\\n\\n    function approve(address, uint256) external returns (bool);\\n\\n    function transferFrom(\\n        address,\\n        address,\\n        uint256\\n    ) external returns (bool);\\n\\n    function transfer(address, uint256) external returns (bool);\\n\\n    function getTotalAmounts() external view returns (uint256 total0, uint256 total1);\\n\\n    function pendingFees() external returns (uint256 fees0, uint256 fees1);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function setMaxTotalSupply(uint256 _maxTotalSupply) external;\\n\\n    function setDepositMax(uint256 _deposit0Max, uint256 _deposit1Max) external;\\n\\n    function appendList(address[] memory listed) external;\\n\\n    function toggleWhitelist() external;\\n\\n    function transferOwnership(address newOwner) external;\\n}\\n\",\"keccak256\":\"0x1035919a5afc1ca6013b687273d5878f50933f26ce5c85191ba48968fd53cfeb\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/IMasterSwapper.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ITradeIntegration} from './ITradeIntegration.sol';\\n\\n/**\\n * @title IIshtarGate\\n * @author Babylon Finance\\n *\\n * Interface for interacting with the Gate Guestlist NFT\\n */\\ninterface IMasterSwapper is ITradeIntegration {\\n    /* ============ Functions ============ */\\n\\n    function isTradeIntegration(address _integration) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfe770ba899f649d0e34a1fc7784e1e7ca485c54561d04e0213af92fb5d30d55c\",\"license\":\"Apache License\"},\"contracts/interfaces/IPriceOracle.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\npragma solidity 0.7.6;\\n\\nimport {ITokenIdentifier} from './ITokenIdentifier.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface IPriceOracle {\\n    /* ============ Functions ============ */\\n\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function getPriceNAV(address _assetOne, address _assetTwo) external view returns (uint256);\\n\\n    function updateReserves(address[] memory list) external;\\n\\n    function updateMaxTwapDeviation(int24 _maxTwapDeviation) external;\\n\\n    function updateTokenIdentifier(ITokenIdentifier _tokenIdentifier) external;\\n\\n    function getCompoundExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n\\n    function getCreamExchangeRate(address _asset, address _finalAsset) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x137796623547b5b769d9770baf55efda0a9f7226ed26b162e492b3e3f1629252\",\"license\":\"Apache License\"},\"contracts/interfaces/ITokenIdentifier.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Modified from (Set Protocol IPriceOracle)\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {ICurveMetaRegistry} from './ICurveMetaRegistry.sol';\\n\\n/**\\n * @title IPriceOracle\\n * @author Babylon Finance\\n *\\n * Interface for interacting with PriceOracle\\n */\\ninterface ITokenIdentifier {\\n    /* ============ Functions ============ */\\n\\n    function identifyTokens(\\n        address _tokenIn,\\n        address _tokenOut,\\n        ICurveMetaRegistry _curveMetaRegistry\\n    )\\n        external\\n        view\\n        returns (\\n            uint8,\\n            uint8,\\n            address,\\n            address\\n        );\\n\\n    function updateYearnVault(address[] calldata _vaults, bool[] calldata _values) external;\\n\\n    function updateSynth(address[] calldata _synths, bool[] calldata _values) external;\\n\\n    function updateCreamPair(address[] calldata _creamTokens, address[] calldata _underlyings) external;\\n\\n    function updateAavePair(address[] calldata _aaveTokens, address[] calldata _underlyings) external;\\n\\n    function updateCompoundPair(address[] calldata _cTokens, address[] calldata _underlyings) external;\\n}\\n\",\"keccak256\":\"0xa84450c5b6d869a2621ae54488d7e526c8bd019df9fac7e1624d3e8d78c1509b\",\"license\":\"Apache License\"},\"contracts/interfaces/ITradeIntegration.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBaseIntegration} from '../interfaces/IBaseIntegration.sol';\\n\\n/**\\n * @title ITrade\\n * @author Babylon Finance\\n *\\n * Interface for trading protocol integrations\\n */\\ninterface ITradeIntegration is IBaseIntegration {\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity\\n    ) external;\\n\\n    function trade(\\n        address _strategy,\\n        address _sendToken,\\n        uint256 _sendQuantity,\\n        address _receiveToken,\\n        uint256 _minReceiveQuantity,\\n        address _hopToken\\n    ) external;\\n}\\n\",\"keccak256\":\"0xe1ab6cfe4062856dafe432b3d66a59865b3666cc643acd5c08dc7a05d3fb2104\",\"license\":\"Apache License\"},\"contracts/interfaces/IVoteToken.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IVoteToken {\\n    function delegate(address delegatee) external;\\n\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bool prefix\\n    ) external;\\n\\n    function getCurrentVotes(address account) external view returns (uint96);\\n\\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\\n\\n    function getMyDelegatee() external view returns (address);\\n\\n    function getDelegatee(address account) external view returns (address);\\n\\n    function getCheckpoints(address account, uint32 id) external view returns (uint32 fromBlock, uint96 votes);\\n\\n    function getNumberOfCheckpoints(address account) external view returns (uint32);\\n}\\n\\ninterface IVoteTokenWithERC20 is IVoteToken, IERC20 {}\\n\",\"keccak256\":\"0xf4f3aa6bdcf6d3dc33e53b01aa6a2bf6543008b1910913e2504f229dab3b381d\",\"license\":\"Apache License\"},\"contracts/interfaces/external/compound/ICEther.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface ICEther {\\n    function mint() external payable;\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function repayBorrow() external payable;\\n\\n    function getCash() external view returns (uint256);\\n\\n    function repayBorrowBehalf(address borrower) external payable;\\n\\n    function borrowBalanceCurrent(address account) external returns (uint256);\\n\\n    function borrowBalanceStored(address account) external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function exchangeRateCurrent() external returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n}\\n\",\"keccak256\":\"0xad345c1403999be345cc6d8dfb3ccfc71b56c6de962d443f456cee4b2a902a67\",\"license\":\"MIT\"},\"contracts/interfaces/external/compound/ICToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ICToken is IERC20 {\\n    function mint(uint256 mintAmount) external returns (uint256);\\n\\n    function redeem(uint256 redeemTokens) external returns (uint256);\\n\\n    function accrueInterest() external returns (uint256);\\n\\n    function redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n    function borrow(uint256 borrowAmount) external returns (uint256);\\n\\n    function repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n    function exchangeRateStored() external view returns (uint256);\\n\\n    function getCash() external view returns (uint256);\\n\\n    function borrowRatePerBlock() external view returns (uint256);\\n\\n    function totalBorrowsCurrent() external view returns (uint256);\\n\\n    function underlying() external view returns (address);\\n\\n    function getAccountSnapshot(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function repayBorrowBehalf(address borrower, uint256 amount) external payable returns (uint256);\\n\\n    function borrowBalanceCurrent(address account) external view returns (uint256);\\n\\n    function supplyRatePerBlock() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8a935c6d68ac62de10fff25f719612bd0b85eca3e8472e9db30f3b9b272e2ef6\",\"license\":\"MIT\"},\"contracts/interfaces/external/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ninterface IComptroller {\\n    /**\\n     * @notice Marker function used for light validation when updating the comptroller of a market\\n     * @dev Implementations should simply return true.\\n     * @return true\\n     */\\n    function isComptroller() external view returns (bool);\\n\\n    function markets(address _cToken) external view returns (bool, uint256);\\n\\n    function getRewardsDistributors() external view returns (address[] memory);\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n    function exitMarket(address cToken) external returns (uint256);\\n\\n    function getAllMarkets() external view returns (address[] memory);\\n\\n    function _borrowGuardianPaused() external view returns (bool);\\n\\n    function borrowGuardianPaused(address _asset) external view returns (bool);\\n\\n    function borrowCaps(address _asset) external view returns (uint256);\\n\\n    function compAccrued(address holder) external view returns (uint256);\\n\\n    /*** Policy Hooks ***/\\n\\n    function getAccountLiquidity(address account)\\n        external\\n        view\\n        returns (\\n            uint256,\\n            uint256,\\n            uint256\\n        );\\n\\n    function getAssetsIn(address account) external view returns (address[] memory);\\n\\n    function mintAllowed(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount\\n    ) external returns (uint256);\\n\\n    function mintVerify(\\n        address cToken,\\n        address minter,\\n        uint256 mintAmount,\\n        uint256 mintTokens\\n    ) external;\\n\\n    function redeemAllowed(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemTokens\\n    ) external returns (uint256);\\n\\n    function redeemVerify(\\n        address cToken,\\n        address redeemer,\\n        uint256 redeemAmount,\\n        uint256 redeemTokens\\n    ) external;\\n\\n    function borrowAllowed(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external returns (uint256);\\n\\n    function borrowVerify(\\n        address cToken,\\n        address borrower,\\n        uint256 borrowAmount\\n    ) external;\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function repayBorrowVerify(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 borrowerIndex\\n    ) external;\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount\\n    ) external returns (uint256);\\n\\n    function liquidateBorrowVerify(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint256 repayAmount,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external returns (uint256);\\n\\n    function seizeVerify(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint256 seizeTokens\\n    ) external;\\n\\n    function transferAllowed(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external returns (uint256);\\n\\n    function transferVerify(\\n        address cToken,\\n        address src,\\n        address dst,\\n        uint256 transferTokens\\n    ) external;\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint256 repayAmount\\n    ) external view returns (uint256, uint256);\\n}\\n\",\"keccak256\":\"0xbef4279c68f23f9caa38666ae679dc441138182dc0fef8beb6cd8d1f15dde89f\",\"license\":\"MIT\"},\"contracts/interfaces/external/oz/IGovernor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (governance/IGovernor.sol)\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\n/**\\n * @dev Interface of the {Governor} core.\\n *\\n * _Available since v4.3._\\n */\\nabstract contract IGovernor {\\n    enum ProposalState {Pending, Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed}\\n\\n    /**\\n     * @dev Emitted when a proposal is created.\\n     */\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        address[] targets,\\n        uint256[] values,\\n        string[] signatures,\\n        bytes[] calldatas,\\n        uint256 startBlock,\\n        uint256 endBlock,\\n        string description\\n    );\\n\\n    /**\\n     * @dev Emitted when a proposal is canceled.\\n     */\\n    event ProposalCanceled(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a proposal is executed.\\n     */\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    /**\\n     * @dev Emitted when a vote is cast.\\n     *\\n     * Note: `support` values should be seen as buckets. There interpretation depends on the voting module used.\\n     */\\n    event VoteCast(address indexed voter, uint256 proposalId, uint8 support, uint256 weight, string reason);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Name of the governor instance (used in building the ERC712 domain separator).\\n     */\\n    function name() public view virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Version of the governor instance (used in building the ERC712 domain separator). Default: \\\"1\\\"\\n     */\\n    function version() public view virtual returns (string memory);\\n\\n    function proposals(uint256 _proposalId)\\n        public\\n        view\\n        virtual\\n        returns (\\n            uint256,\\n            address,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            uint256,\\n            bool,\\n            bool\\n        );\\n\\n    /**\\n     * @notice module:voting\\n     * @dev A description of the possible `support` values for {castVote} and the way these votes are counted, meant to\\n     * be consumed by UIs to show correct vote options and interpret the results. The string is a URL-encoded sequence of\\n     * key-value pairs that each describe one aspect, for example `support=bravo&quorum=for,abstain`.\\n     *\\n     * There are 2 standard keys: `support` and `quorum`.\\n     *\\n     * - `support=bravo` refers to the vote options 0 = Against, 1 = For, 2 = Abstain, as in `GovernorBravo`.\\n     * - `quorum=bravo` means that only For votes are counted towards quorum.\\n     * - `quorum=for,abstain` means that both For and Abstain votes are counted towards quorum.\\n     *\\n     * NOTE: The string can be decoded by the standard\\n     * https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams[`URLSearchParams`]\\n     * JavaScript class.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function COUNTING_MODE() public pure virtual returns (string memory);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Hashing function used to (re)build the proposal id from the proposal details..\\n     */\\n    function hashProposal(\\n        address[] calldata targets,\\n        uint256[] calldata values,\\n        bytes[] calldata calldatas,\\n        bytes32 descriptionHash\\n    ) public pure virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Current state of a proposal, following Compound's convention\\n     */\\n    function state(uint256 proposalId) public view virtual returns (ProposalState);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number used to retrieve user's votes and quorum. As per Compound's Comp and OpenZeppelin's\\n     * ERC20Votes, the snapshot is performed at the end of this block. Hence, voting for this proposal starts at the\\n     * beginning of the following block.\\n     */\\n    function proposalSnapshot(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:core\\n     * @dev Block number at which votes close. Votes close at the end of this block, so it is possible to cast a vote\\n     * during this block.\\n     */\\n    function proposalDeadline(uint256 proposalId) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of block, between the proposal is created and the vote starts. This can be increassed to\\n     * leave time for users to buy voting power, of delegate it, before the voting of a proposal starts.\\n     */\\n    function votingDelay() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Delay, in number of blocks, between the vote start and vote ends.\\n     *\\n     * NOTE: The {votingDelay} can delay the start of the vote. This must be considered when setting the voting\\n     * duration compared to the voting delay.\\n     */\\n    function votingPeriod() public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:user-config\\n     * @dev Minimum number of cast voted required for a proposal to be successful.\\n     *\\n     * Note: The `blockNumber` parameter corresponds to the snaphot used for counting vote. This allows to scale the\\n     * quroum depending on values such as the totalSupply of a token at this block (see {ERC20Votes}).\\n     */\\n    function quorum(uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:reputation\\n     * @dev Voting power of an `account` at a specific `blockNumber`.\\n     *\\n     * Note: this can be implemented in a number of ways, for example by reading the delegated balance from one (or\\n     * multiple), {ERC20Votes} tokens.\\n     */\\n    function getVotes(address account, uint256 blockNumber) public view virtual returns (uint256);\\n\\n    /**\\n     * @notice module:voting\\n     * @dev Returns weither `account` has cast a vote on `proposalId`.\\n     */\\n    function hasVoted(uint256 proposalId, address account) public view virtual returns (bool);\\n\\n    /**\\n     * @dev Create a new proposal. Vote start {IGovernor-votingDelay} blocks after the proposal is created and ends\\n     * {IGovernor-votingPeriod} blocks after the voting starts.\\n     *\\n     * Emits a {ProposalCreated} event.\\n     */\\n    function propose(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        string memory description\\n    ) public virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Execute a successful proposal. This requires the quorum to be reached, the vote to be successful, and the\\n     * deadline to be reached.\\n     *\\n     * Emits a {ProposalExecuted} event.\\n     *\\n     * Note: some module can modify the requirements for execution, for example by adding an additional timelock.\\n     */\\n    function execute(\\n        address[] memory targets,\\n        uint256[] memory values,\\n        bytes[] memory calldatas,\\n        bytes32 descriptionHash\\n    ) public payable virtual returns (uint256 proposalId);\\n\\n    /**\\n     * @dev Cast a vote\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVote(uint256 proposalId, uint8 support) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote with a reason\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteWithReason(\\n        uint256 proposalId,\\n        uint8 support,\\n        string calldata reason\\n    ) public virtual returns (uint256 balance);\\n\\n    /**\\n     * @dev Cast a vote using the user cryptographic signature.\\n     *\\n     * Emits a {VoteCast} event.\\n     */\\n    function castVoteBySig(\\n        uint256 proposalId,\\n        uint8 support,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual returns (uint256 balance);\\n}\\n\",\"keccak256\":\"0x571ccb40c907e376f675f02f442c0ce32010d92c14ee4b270cc448aad2b4b379\",\"license\":\"MIT\"},\"contracts/interfaces/external/weth/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0xacc7980a650b7a753ee51f1bbc0ae4f641e84261bcc02cfdaf87ee8136483684\",\"license\":\"MIT\"},\"contracts/lib/BabylonErrors.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\n// solhint-disable\\n\\n/**\\n * @notice Forked from https://github.com/balancer-labs/balancer-core-v2/blob/master/contracts/lib/helpers/BalancerErrors.sol\\n * @dev Reverts if `condition` is false, with a revert reason containing `errorCode`. Only codes up to 999 are\\n * supported.\\n */\\nfunction _require(bool condition, uint256 errorCode) pure {\\n    if (!condition) _revert(errorCode);\\n}\\n\\n/**\\n * @dev Reverts with a revert reason containing `errorCode`. Only codes up to 999 are supported.\\n */\\nfunction _revert(uint256 errorCode) pure {\\n    // We're going to dynamically create a revert string based on the error code, with the following format:\\n    // 'BAB#{errorCode}'\\n    // where the code is left-padded with zeroes to three digits (so they range from 000 to 999).\\n    //\\n    // We don't have revert strings embedded in the contract to save bytecode size: it takes much less space to store a\\n    // number (8 to 16 bits) than the individual string characters.\\n    //\\n    // The dynamic string creation algorithm that follows could be implemented in Solidity, but assembly allows for a\\n    // much denser implementation, again saving bytecode size. Given this function unconditionally reverts, this is a\\n    // safe place to rely on it without worrying about how its usage might affect e.g. memory contents.\\n    assembly {\\n        // First, we need to compute the ASCII representation of the error code. We assume that it is in the 0-999\\n        // range, so we only need to convert three digits. To convert the digits to ASCII, we add 0x30, the value for\\n        // the '0' character.\\n\\n        let units := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let tenths := add(mod(errorCode, 10), 0x30)\\n\\n        errorCode := div(errorCode, 10)\\n        let hundreds := add(mod(errorCode, 10), 0x30)\\n\\n        // With the individual characters, we can now construct the full string. The \\\"BAB#\\\" part is a known constant\\n        // (0x42414223): we simply shift this by 24 (to provide space for the 3 bytes of the error code), and add the\\n        // characters to it, each shifted by a multiple of 8.\\n        // The revert reason is then shifted left by 200 bits (256 minus the length of the string, 7 characters * 8 bits\\n        // per character = 56) to locate it in the most significant part of the 256 slot (the beginning of a byte\\n        // array).\\n\\n        let revertReason := shl(200, add(0x42414223000000, add(add(units, shl(8, tenths)), shl(16, hundreds))))\\n\\n        // We can now encode the reason in memory, which can be safely overwritten as we're about to revert. The encoded\\n        // message will have the following layout:\\n        // [ revert reason identifier ] [ string location offset ] [ string length ] [ string contents ]\\n\\n        // The Solidity revert reason identifier is 0x08c739a0, the function selector of the Error(string) function. We\\n        // also write zeroes to the next 28 bytes of memory, but those are about to be overwritten.\\n        mstore(0x0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n        // Next is the offset to the location of the string, which will be placed immediately after (20 bytes away).\\n        mstore(0x04, 0x0000000000000000000000000000000000000000000000000000000000000020)\\n        // The string length is fixed: 7 characters.\\n        mstore(0x24, 7)\\n        // Finally, the string itself is stored.\\n        mstore(0x44, revertReason)\\n\\n        // Even if the string is only 7 bytes long, we need to return a full 32 byte slot containing it. The length of\\n        // the encoded message is therefore 4 + 32 + 32 + 32 = 100.\\n        revert(0, 100)\\n    }\\n}\\n\\nlibrary Errors {\\n    // Max deposit limit needs to be under the limit\\n    uint256 internal constant MAX_DEPOSIT_LIMIT = 0;\\n    // Creator needs to deposit\\n    uint256 internal constant MIN_CONTRIBUTION = 1;\\n    // Min Garden token supply >= 0\\n    uint256 internal constant MIN_TOKEN_SUPPLY = 2;\\n    // Deposit hardlock needs to be at least 1 block\\n    uint256 internal constant DEPOSIT_HARDLOCK = 3;\\n    // Needs to be at least the minimum\\n    uint256 internal constant MIN_LIQUIDITY = 4;\\n    // _reserveAssetQuantity is not equal to msg.value\\n    uint256 internal constant MSG_VALUE_DO_NOT_MATCH = 5;\\n    // Withdrawal amount has to be equal or less than msg.sender balance\\n    uint256 internal constant MSG_SENDER_TOKENS_DO_NOT_MATCH = 6;\\n    // Tokens are staked\\n    uint256 internal constant TOKENS_STAKED = 7;\\n    // Balance too low\\n    uint256 internal constant BALANCE_TOO_LOW = 8;\\n    // msg.sender doesn't have enough tokens\\n    uint256 internal constant MSG_SENDER_TOKENS_TOO_LOW = 9;\\n    //  There is an open redemption window already\\n    uint256 internal constant REDEMPTION_OPENED_ALREADY = 10;\\n    // Cannot request twice in the same window\\n    uint256 internal constant ALREADY_REQUESTED = 11;\\n    // Rewards and profits already claimed\\n    uint256 internal constant ALREADY_CLAIMED = 12;\\n    // Value have to be greater than zero\\n    uint256 internal constant GREATER_THAN_ZERO = 13;\\n    // Must be reserve asset\\n    uint256 internal constant MUST_BE_RESERVE_ASSET = 14;\\n    // Only contributors allowed\\n    uint256 internal constant ONLY_CONTRIBUTOR = 15;\\n    // Only controller allowed\\n    uint256 internal constant ONLY_CONTROLLER = 16;\\n    // Only creator allowed\\n    uint256 internal constant ONLY_CREATOR = 17;\\n    // Only keeper allowed\\n    uint256 internal constant ONLY_KEEPER = 18;\\n    // Fee is too high\\n    uint256 internal constant FEE_TOO_HIGH = 19;\\n    // Only strategy allowed\\n    uint256 internal constant ONLY_STRATEGY = 20;\\n    // Only active allowed\\n    uint256 internal constant ONLY_ACTIVE = 21;\\n    // Only inactive allowed\\n    uint256 internal constant ONLY_INACTIVE = 22;\\n    // Address should be not zero address\\n    uint256 internal constant ADDRESS_IS_ZERO = 23;\\n    // Not within range\\n    uint256 internal constant NOT_IN_RANGE = 24;\\n    // Value is too low\\n    uint256 internal constant VALUE_TOO_LOW = 25;\\n    // Value is too high\\n    uint256 internal constant VALUE_TOO_HIGH = 26;\\n    // Only strategy or protocol allowed\\n    uint256 internal constant ONLY_STRATEGY_OR_CONTROLLER = 27;\\n    // Normal withdraw possible\\n    uint256 internal constant NORMAL_WITHDRAWAL_POSSIBLE = 28;\\n    // User does not have permissions to join garden\\n    uint256 internal constant USER_CANNOT_JOIN = 29;\\n    // User does not have permissions to add strategies in garden\\n    uint256 internal constant USER_CANNOT_ADD_STRATEGIES = 30;\\n    // Only Protocol or garden\\n    uint256 internal constant ONLY_PROTOCOL_OR_GARDEN = 31;\\n    // Only Strategist\\n    uint256 internal constant ONLY_STRATEGIST = 32;\\n    // Only Integration\\n    uint256 internal constant ONLY_INTEGRATION = 33;\\n    // Only garden and data not set\\n    uint256 internal constant ONLY_GARDEN_AND_DATA_NOT_SET = 34;\\n    // Only active garden\\n    uint256 internal constant ONLY_ACTIVE_GARDEN = 35;\\n    // Contract is not a garden\\n    uint256 internal constant NOT_A_GARDEN = 36;\\n    // Not enough tokens\\n    uint256 internal constant STRATEGIST_TOKENS_TOO_LOW = 37;\\n    // Stake is too low\\n    uint256 internal constant STAKE_HAS_TO_AT_LEAST_ONE = 38;\\n    // Duration must be in range\\n    uint256 internal constant DURATION_MUST_BE_IN_RANGE = 39;\\n    // Max Capital Requested\\n    uint256 internal constant MAX_CAPITAL_REQUESTED = 41;\\n    // Votes are already resolved\\n    uint256 internal constant VOTES_ALREADY_RESOLVED = 42;\\n    // Voting window is closed\\n    uint256 internal constant VOTING_WINDOW_IS_OVER = 43;\\n    // Strategy needs to be active\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_ACTIVE = 44;\\n    // Max capital reached\\n    uint256 internal constant MAX_CAPITAL_REACHED = 45;\\n    // Capital is less then rebalance\\n    uint256 internal constant CAPITAL_IS_LESS_THAN_REBALANCE = 46;\\n    // Strategy is in cooldown period\\n    uint256 internal constant STRATEGY_IN_COOLDOWN = 47;\\n    // Strategy is not executed\\n    uint256 internal constant STRATEGY_IS_NOT_EXECUTED = 48;\\n    // Strategy is not over yet\\n    uint256 internal constant STRATEGY_IS_NOT_OVER_YET = 49;\\n    // Strategy is already finalized\\n    uint256 internal constant STRATEGY_IS_ALREADY_FINALIZED = 50;\\n    // No capital to unwind\\n    uint256 internal constant STRATEGY_NO_CAPITAL_TO_UNWIND = 51;\\n    // Strategy needs to be inactive\\n    uint256 internal constant STRATEGY_NEEDS_TO_BE_INACTIVE = 52;\\n    // Duration needs to be less\\n    uint256 internal constant DURATION_NEEDS_TO_BE_LESS = 53;\\n    // Can't sweep reserve asset\\n    uint256 internal constant CANNOT_SWEEP_RESERVE_ASSET = 54;\\n    // Voting window is opened\\n    uint256 internal constant VOTING_WINDOW_IS_OPENED = 55;\\n    // Strategy is executed\\n    uint256 internal constant STRATEGY_IS_EXECUTED = 56;\\n    // Min Rebalance Capital\\n    uint256 internal constant MIN_REBALANCE_CAPITAL = 57;\\n    // Not a valid strategy NFT\\n    uint256 internal constant NOT_STRATEGY_NFT = 58;\\n    // Garden Transfers Disabled\\n    uint256 internal constant GARDEN_TRANSFERS_DISABLED = 59;\\n    // Tokens are hardlocked\\n    uint256 internal constant TOKENS_HARDLOCKED = 60;\\n    // Max contributors reached\\n    uint256 internal constant MAX_CONTRIBUTORS = 61;\\n    // BABL Transfers Disabled\\n    uint256 internal constant BABL_TRANSFERS_DISABLED = 62;\\n    // Strategy duration range error\\n    uint256 internal constant DURATION_RANGE = 63;\\n    // Checks the min amount of voters\\n    uint256 internal constant MIN_VOTERS_CHECK = 64;\\n    // Ge contributor power error\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_WINDOW = 65;\\n    // Not enough reserve set aside\\n    uint256 internal constant NOT_ENOUGH_RESERVE = 66;\\n    // Garden is already public\\n    uint256 internal constant GARDEN_ALREADY_PUBLIC = 67;\\n    // Withdrawal with penalty\\n    uint256 internal constant WITHDRAWAL_WITH_PENALTY = 68;\\n    // Withdrawal with penalty\\n    uint256 internal constant ONLY_MINING_ACTIVE = 69;\\n    // Overflow in supply\\n    uint256 internal constant OVERFLOW_IN_SUPPLY = 70;\\n    // Overflow in power\\n    uint256 internal constant OVERFLOW_IN_POWER = 71;\\n    // Not a system contract\\n    uint256 internal constant NOT_A_SYSTEM_CONTRACT = 72;\\n    // Strategy vs Garden mismatch\\n    uint256 internal constant STRATEGY_GARDEN_MISMATCH = 73;\\n    // Minimum quarters is 1\\n    uint256 internal constant QUARTERS_MIN_1 = 74;\\n    // Too many strategy operations\\n    uint256 internal constant TOO_MANY_OPS = 75;\\n    // Only operations\\n    uint256 internal constant ONLY_OPERATION = 76;\\n    // Strat params wrong length\\n    uint256 internal constant STRAT_PARAMS_LENGTH = 77;\\n    // Garden params wrong length\\n    uint256 internal constant GARDEN_PARAMS_LENGTH = 78;\\n    // Token names too long\\n    uint256 internal constant NAME_TOO_LONG = 79;\\n    // Contributor power overflows over garden power\\n    uint256 internal constant CONTRIBUTOR_POWER_OVERFLOW = 80;\\n    // Contributor power window out of bounds\\n    uint256 internal constant CONTRIBUTOR_POWER_CHECK_DEPOSITS = 81;\\n    // Contributor power window out of bounds\\n    uint256 internal constant NO_REWARDS_TO_CLAIM = 82;\\n    // Pause guardian paused this operation\\n    uint256 internal constant ONLY_UNPAUSED = 83;\\n    // Reentrant intent\\n    uint256 internal constant REENTRANT_CALL = 84;\\n    // Reserve asset not supported\\n    uint256 internal constant RESERVE_ASSET_NOT_SUPPORTED = 85;\\n    // Withdrawal/Deposit check min amount received\\n    uint256 internal constant RECEIVE_MIN_AMOUNT = 86;\\n    // Total Votes has to be positive\\n    uint256 internal constant TOTAL_VOTES_HAVE_TO_BE_POSITIVE = 87;\\n    // Signer has to be valid\\n    uint256 internal constant INVALID_SIGNER = 88;\\n    // Nonce has to be valid\\n    uint256 internal constant INVALID_NONCE = 89;\\n    // Garden is not public\\n    uint256 internal constant GARDEN_IS_NOT_PUBLIC = 90;\\n    // Setting max contributors\\n    uint256 internal constant MAX_CONTRIBUTORS_SET = 91;\\n    // Profit sharing mismatch for customized gardens\\n    uint256 internal constant PROFIT_SHARING_MISMATCH = 92;\\n    // Max allocation percentage\\n    uint256 internal constant MAX_STRATEGY_ALLOCATION_PERCENTAGE = 93;\\n    // new creator must not exist\\n    uint256 internal constant NEW_CREATOR_MUST_NOT_EXIST = 94;\\n    // only first creator can add\\n    uint256 internal constant ONLY_FIRST_CREATOR_CAN_ADD = 95;\\n    // invalid address\\n    uint256 internal constant INVALID_ADDRESS = 96;\\n    // creator can only renounce in some circumstances\\n    uint256 internal constant CREATOR_CANNOT_RENOUNCE = 97;\\n    // no price for trade\\n    uint256 internal constant NO_PRICE_FOR_TRADE = 98;\\n    // Max capital requested\\n    uint256 internal constant ZERO_CAPITAL_REQUESTED = 99;\\n    // Unwind capital above the limit\\n    uint256 internal constant INVALID_CAPITAL_TO_UNWIND = 100;\\n    // Mining % sharing does not match\\n    uint256 internal constant INVALID_MINING_VALUES = 101;\\n    // Max trade slippage percentage\\n    uint256 internal constant MAX_TRADE_SLIPPAGE_PERCENTAGE = 102;\\n    // Max gas fee percentage\\n    uint256 internal constant MAX_GAS_FEE_PERCENTAGE = 103;\\n    // Mismatch between voters and votes\\n    uint256 internal constant INVALID_VOTES_LENGTH = 104;\\n    // Only Rewards Distributor\\n    uint256 internal constant ONLY_RD = 105;\\n    // Fee is too LOW\\n    uint256 internal constant FEE_TOO_LOW = 106;\\n    // Only governance or emergency\\n    uint256 internal constant ONLY_GOVERNANCE_OR_EMERGENCY = 107;\\n    // Strategy invalid reserve asset amount\\n    uint256 internal constant INVALID_RESERVE_AMOUNT = 108;\\n    // Heart only pumps once a week\\n    uint256 internal constant HEART_ALREADY_PUMPED = 109;\\n    // Heart needs garden votes to pump\\n    uint256 internal constant HEART_VOTES_MISSING = 110;\\n    // Not enough fees for heart\\n    uint256 internal constant HEART_MINIMUM_FEES = 111;\\n    // Invalid heart votes length\\n    uint256 internal constant HEART_VOTES_LENGTH = 112;\\n    // Heart LP tokens not received\\n    uint256 internal constant HEART_LP_TOKENS = 113;\\n    // Heart invalid asset to lend\\n    uint256 internal constant HEART_ASSET_LEND_INVALID = 114;\\n    // Heart garden not set\\n    uint256 internal constant HEART_GARDEN_NOT_SET = 115;\\n    // Heart asset to lend is the same\\n    uint256 internal constant HEART_ASSET_LEND_SAME = 116;\\n    // Heart invalid ctoken\\n    uint256 internal constant HEART_INVALID_CTOKEN = 117;\\n    // Price per share is wrong\\n    uint256 internal constant PRICE_PER_SHARE_WRONG = 118;\\n    // Heart asset to purchase is same\\n    uint256 internal constant HEART_ASSET_PURCHASE_INVALID = 119;\\n}\\n\",\"keccak256\":\"0x1998f4b37e9926c6161c11b8ef17ec9ed01752f0e03c2bcf21f0afe5dc51d278\",\"license\":\"Apache License\"},\"contracts/lib/ControllerLib.sol\":{\"content\":\"/*\\n    Copyright 2021 Babylon Finance.\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {IBabController} from '../interfaces/IBabController.sol';\\n\\nlibrary ControllerLib {\\n    /**\\n     * Throws if the sender is not the protocol\\n     */\\n    function onlyGovernanceOrEmergency(IBabController _controller) internal view {\\n        require(\\n            msg.sender == _controller.owner() || msg.sender == _controller.EMERGENCY_OWNER(),\\n            'Only governance or emergency can call this'\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5b5957049797cea3493ff6fe2d68b182973962253a9eb2eb72283c3532df193d\",\"license\":\"Apache License\"},\"contracts/lib/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\n\\npragma solidity 0.7.6;\\n\\n/// @title Optimized overflow and underflow safe math operations\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\nlibrary LowGasSafeMath {\\n    /// @notice Returns x + y, reverts if sum overflows uint256\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x + y) >= x);\\n    }\\n\\n    /// @notice Returns x - y, reverts if underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require((z = x - y) <= x);\\n    }\\n\\n    /// @notice Returns x * y, reverts if overflows\\n    /// @param x The multiplicand\\n    /// @param y The multiplier\\n    /// @return z The product of x and y\\n    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        require(x == 0 || (z = x * y) / x == y);\\n    }\\n\\n    /// @notice Returns x + y, reverts if overflows or underflows\\n    /// @param x The augend\\n    /// @param y The addend\\n    /// @return z The sum of x and y\\n    function add(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x + y) >= x == (y >= 0));\\n    }\\n\\n    /// @notice Returns x - y, reverts if overflows or underflows\\n    /// @param x The minuend\\n    /// @param y The subtrahend\\n    /// @return z The difference of x and y\\n    function sub(int256 x, int256 y) internal pure returns (int256 z) {\\n        require((z = x - y) <= x == (y >= 0));\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, 'SafeMath: division by zero');\\n        return a / b;\\n    }\\n}\\n\",\"keccak256\":\"0xdb9b5f36675fd53dd12aa2b33f70305aa576bba377cb8d3ce680df6ee3f63635\",\"license\":\"GPL-2.0-or-later\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"/*\\n    Copyright 2020 Set Labs Inc.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {SignedSafeMath} from '@openzeppelin/contracts/math/SignedSafeMath.sol';\\n\\nimport {LowGasSafeMath} from './LowGasSafeMath.sol';\\n\\n/**\\n * @title PreciseUnitMath\\n * @author Set Protocol\\n *\\n * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\\n * dYdX's BaseMath library.\\n *\\n * CHANGELOG:\\n * - 9/21/20: Added safePower function\\n */\\nlibrary PreciseUnitMath {\\n    using LowGasSafeMath for uint256;\\n    using SignedSafeMath for int256;\\n\\n    // The number One in precise units.\\n    uint256 internal constant PRECISE_UNIT = 10**18;\\n    int256 internal constant PRECISE_UNIT_INT = 10**18;\\n\\n    // Max unsigned integer value\\n    uint256 internal constant MAX_UINT_256 = type(uint256).max;\\n    // Max and min signed integer value\\n    int256 internal constant MAX_INT_256 = type(int256).max;\\n    int256 internal constant MIN_INT_256 = type(int256).min;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function decimals() internal pure returns (uint256) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnitInt() internal pure returns (int256) {\\n        return PRECISE_UNIT_INT;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxUint256() internal pure returns (uint256) {\\n        return MAX_UINT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function maxInt256() internal pure returns (int256) {\\n        return MAX_INT_256;\\n    }\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function minInt256() internal pure returns (int256) {\\n        return MIN_INT_256;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(b).div(PRECISE_UNIT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\\n     * significand of a number with 18 decimals precision.\\n     */\\n    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(b).div(PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\\n     * of a number with 18 decimals precision.\\n     */\\n    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0 || b == 0) {\\n            return 0;\\n        }\\n        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down).\\n     */\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a.mul(PRECISE_UNIT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded towards 0).\\n     */\\n    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return a.mul(PRECISE_UNIT_INT).div(b);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded up or away from 0).\\n     */\\n    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, 'Cant divide by 0');\\n\\n        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\\n     */\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        require(b != 0, 'Cant divide by 0');\\n        require(a != MIN_INT_256 || b != -1, 'Invalid input');\\n\\n        int256 result = a.div(b);\\n        if (a ^ b < 0 && a % b != 0) {\\n            result -= 1;\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Multiplies value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(b), PRECISE_UNIT_INT);\\n    }\\n\\n    /**\\n     * @dev Divides value a by value b where rounding is towards the lesser number.\\n     * (positive values are rounded towards zero and negative values are rounded away from 0).\\n     */\\n    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\\n        return divDown(a.mul(PRECISE_UNIT_INT), b);\\n    }\\n\\n    /**\\n     * @dev Performs the power on a specified value, reverts on overflow.\\n     */\\n    function safePower(uint256 a, uint256 pow) internal pure returns (uint256) {\\n        require(a > 0, 'Value must be positive');\\n\\n        uint256 result = 1;\\n        for (uint256 i = 0; i < pow; i++) {\\n            uint256 previousResult = result;\\n\\n            // Using safemath multiplication prevents overflows\\n            result = previousResult.mul(a);\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x296db183159528f4b51a3f5f56b66938188b8f2d3c6976cb32a4f0bdb608c9d0\",\"license\":\"Apache License\"},\"contracts/lib/SafeDecimalMath.sol\":{\"content\":\"/*\\n    Original version by Synthetix.io\\n    https://docs.synthetix.io/contracts/source/libraries/safedecimalmath\\n\\n    Adapted by Babylon Finance.\\n\\n    Licensed under the Apache License, Version 2.0 (the \\\"License\\\");\\n    you may not use this file except in compliance with the License.\\n    You may obtain a copy of the License at\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\n    Unless required by applicable law or agreed to in writing, software\\n    distributed under the License is distributed on an \\\"AS IS\\\" BASIS,\\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\n    See the License for the specific language governing permissions and\\n    limitations under the License.\\n\\n    SPDX-License-Identifier: Apache License, Version 2.0\\n*/\\n\\npragma solidity 0.7.6;\\n\\nimport {LowGasSafeMath} from '../lib/LowGasSafeMath.sol';\\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\n\\nlibrary SafeDecimalMath {\\n    using LowGasSafeMath for uint256;\\n\\n    /* Number of decimal places in the representations. */\\n    uint8 internal constant decimals = 18;\\n\\n    /* The number representing 1.0. */\\n    uint256 internal constant UNIT = 10**uint256(decimals);\\n\\n    /**\\n     * @return Provides an interface to UNIT.\\n     */\\n    function unit() internal pure returns (uint256) {\\n        return UNIT;\\n    }\\n\\n    /**\\n     * @return The result of multiplying x and y, interpreting the operands as fixed-point\\n     * decimals.\\n     *\\n     * @dev A unit factor is divided out after the product of x and y is evaluated,\\n     * so that product must be less than 2**256. As this is an integer division,\\n     * the internal division always rounds down. This helps save on gas. Rounding\\n     * is more expensive on gas.\\n     */\\n    function multiplyDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        return x.mul(y) / UNIT;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of the specified precision unit.\\n     *\\n     * @dev The operands should be in the form of a the specified unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function _multiplyDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        /* Divide by UNIT to remove the extra factor introduced by the product. */\\n        uint256 quotientTimesTen = x.mul(y) / (precisionUnit / 10);\\n\\n        if (quotientTimesTen % 10 >= 5) {\\n            quotientTimesTen += 10;\\n        }\\n\\n        return quotientTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely multiplying x and y, interpreting the operands\\n     * as fixed-point decimals of a standard unit.\\n     *\\n     * @dev The operands should be in the standard unit factor which will be\\n     * divided out after the product of x and y is evaluated, so that product must be\\n     * less than 2**256.\\n     *\\n     * Unlike multiplyDecimal, this function rounds the result to the nearest increment.\\n     * Rounding is useful when you need to retain fidelity for small decimal numbers\\n     * (eg. small fractions or percentages).\\n     */\\n    function multiplyDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _multiplyDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is a high\\n     * precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and UNIT must be less than 2**256. As\\n     * this is an integer division, the result is always rounded down.\\n     * This helps save on gas. Rounding is more expensive on gas.\\n     */\\n    function divideDecimal(uint256 x, uint256 y) internal pure returns (uint256) {\\n        /* Reintroduce the UNIT factor that will be divided out by y. */\\n        return x.mul(UNIT).div(y);\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * decimal in the precision unit specified in the parameter.\\n     *\\n     * @dev y is divided after the product of x and the specified precision unit\\n     * is evaluated, so the product of x and the specified precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function _divideDecimalRound(\\n        uint256 x,\\n        uint256 y,\\n        uint256 precisionUnit\\n    ) private pure returns (uint256) {\\n        uint256 resultTimesTen = x.mul(precisionUnit * 10).div(y);\\n\\n        if (resultTimesTen % 10 >= 5) {\\n            resultTimesTen += 10;\\n        }\\n\\n        return resultTimesTen / 10;\\n    }\\n\\n    /**\\n     * @return The result of safely dividing x and y. The return value is as a rounded\\n     * standard precision decimal.\\n     *\\n     * @dev y is divided after the product of x and the standard precision unit\\n     * is evaluated, so the product of x and the standard precision unit must\\n     * be less than 2**256. The result is rounded to the nearest increment.\\n     */\\n    function divideDecimalRound(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return _divideDecimalRound(x, y, UNIT);\\n    }\\n\\n    /**\\n     * Normalizing amount decimals between tokens\\n     * @param assetFrom       ERC20 asset address\\n     * @param assetTarget     ERC20 asset address\\n     * @param quantity Value to normalize (e.g. capital)\\n     */\\n    function normalizeAmountTokens(\\n        address assetFrom,\\n        address assetTarget,\\n        uint256 quantity\\n    ) internal view returns (uint256) {\\n        uint256 tokenDecimals = _isETH(assetFrom) ? 18 : ERC20(assetFrom).decimals();\\n        uint256 tokenDecimalsTarget = _isETH(assetTarget) ? 18 : ERC20(assetTarget).decimals();\\n        require(tokenDecimals <= 18 && tokenDecimalsTarget <= 18, 'Unsupported decimals');\\n        if (tokenDecimals == tokenDecimalsTarget) {\\n            return quantity;\\n        }\\n        if (tokenDecimalsTarget > tokenDecimals) {\\n            return quantity.mul(10**(tokenDecimalsTarget.sub(tokenDecimals)));\\n        }\\n        return quantity.div(10**(tokenDecimals.sub(tokenDecimalsTarget)));\\n    }\\n\\n    function _isETH(address _address) internal pure returns (bool) {\\n        return _address == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE || _address == address(0);\\n    }\\n}\\n\",\"keccak256\":\"0x962373863c5ee11f3448970bfee73b0806ac9fe4e9e462a1f75a81f5959ef75f\",\"license\":\"Apache License\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162004d5f38038062004d5f833981016040819052620000349162000279565b60005482908290610100900460ff168062000054575062000054620001c7565b8062000063575060005460ff16155b620000a05760405162461bcd60e51b815260040180806020018281038252602e81526020018062004d31602e913960400191505060405180910390fd5b600054610100900460ff16158015620000cc576000805460ff1961ff0019909116610100171660011790555b620000e46001600160a01b03841615156017620001e5565b620000fc6001600160a01b03831615156017620001e5565b826001600160a01b03166080816001600160a01b031660601b81525050826001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b1580156200015357600080fd5b505afa15801562000168573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018e919062000253565b6001600160601b0319606091821b811660c0529083901b1660a0528015620001bc576000805461ff00191690555b5050505050620002d0565b6000620001df30620001fa60201b62001c141760201c565b15905090565b81620001f657620001f68162000200565b5050565b3b151590565b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60006020828403121562000265578081fd5b81516200027281620002b7565b9392505050565b600080604083850312156200028c578081fd5b82516200029981620002b7565b6020840151909250620002ac81620002b7565b809150509250929050565b6001600160a01b0381168114620002cd57600080fd5b50565b60805160601c60a05160601c60c05160601c6149c26200036f60003980610aa2528061222a5280612458528061252252806125ca528061269652508061125c52508061081e5280610c0c5280610c5a5280610d4a5280610d8b5280610e0c528061114d52806112035280611368528061160852806117e5528061189b52806119685280611c4e5280611e295280612bd95280612fa052506149c26000f3fe60806040526004361061026e5760003560e01c8063730fa8c411610153578063bd59c9b0116100cb578063dac5a9951161007f578063f2fde38b11610064578063f2fde38b14610654578063f30fd02014610674578063fc5cbf1d1461069457610275565b8063dac5a9951461061f578063ed63f9191461063457610275565b8063cddb7148116100b0578063cddb7148146105d5578063cfd2dc99146105ea578063d9cf443b146105ff57610275565b8063bd59c9b014610595578063bd61d4fd146105b557610275565b8063a25db51611610122578063a775efa511610107578063a775efa514610540578063b1beb88d14610555578063bcfb9b611461057557610275565b8063a25db5161461050b578063a350fe071461052b57610275565b8063730fa8c4146104a157806375c93bb9146104b65780638da5cb5b146104d65780639c5e52d5146104eb57610275565b806343fce074116101e657806362f0e8dc116101b55780636be2f2671161019a5780636be2f267146104575780636fe0e5591461046c578063715018a61461048c57610275565b806362f0e8dc1461042257806365f7f6481461044257610275565b806343fce074146103a0578063564e4bab146103c05780635acaaef3146103e257806361cab7121461040257610275565b806335d10b611161023d578063395ea61b11610222578063395ea61b146103565780633f1ee1671461036b57806340e016501461038057610275565b806335d10b6114610314578063394abf451461033457610275565b8063081ab4c21461027a57806308de5fc6146102a557806319c92094146102c75780633550bd62146102e757610275565b3661027557005b600080fd5b34801561028657600080fd5b5061028f6106b6565b60405161029c919061452f565b60405180910390f35b3480156102b157600080fd5b506102c56102c0366004614180565b610718565b005b3480156102d357600080fd5b506102c56102e23660046140bc565b610819565b3480156102f357600080fd5b50610307610302366004614084565b610945565b60405161029c91906144c0565b34801561032057600080fd5b5061030761032f366004614376565b610960565b34801561034057600080fd5b5061034961098a565b60405161029c91906147e4565b34801561036257600080fd5b506102c5610990565b34801561037757600080fd5b50610307610bf8565b34801561038c57600080fd5b506102c561039b3660046140bc565b610c07565b3480156103ac57600080fd5b506102c56103bb366004614084565b610c55565b3480156103cc57600080fd5b506103d5610cee565b60405161029c91906145ad565b3480156103ee57600080fd5b506102c56103fd3660046140bc565b610d45565b34801561040e57600080fd5b506102c561041d366004614240565b610d86565b34801561042e57600080fd5b506102c561043d366004614376565b610e07565b34801561044e57600080fd5b50610307610e3e565b34801561046357600080fd5b50610307610e4d565b34801561047857600080fd5b506102c5610487366004614240565b610e5c565b34801561049857600080fd5b506102c5611084565b3480156104ad57600080fd5b50610349611142565b3480156104c257600080fd5b506102c56104d13660046143d5565b611148565b3480156104e257600080fd5b506103076111b0565b3480156104f757600080fd5b50610349610506366004614084565b6111bf565b34801561051757600080fd5b50610349610526366004614376565b6111d1565b34801561053757600080fd5b506103496111f2565b34801561054c57600080fd5b506103496111f8565b34801561056157600080fd5b506102c5610570366004614084565b6111fe565b34801561058157600080fd5b506102c56105903660046143a6565b611252565b3480156105a157600080fd5b506103496105b0366004614376565b61133c565b3480156105c157600080fd5b506103496105d0366004614376565b611353565b3480156105e157600080fd5b506102c5611363565b3480156105f657600080fd5b506103d56115ad565b34801561060b57600080fd5b506102c561061a366004614084565b611603565b34801561062b57600080fd5b50610349611688565b34801561064057600080fd5b506102c561064f366004614180565b61168e565b34801561066057600080fd5b506102c561066f366004614084565b6116a0565b34801561068057600080fd5b506102c561068f3660046140bc565b6117b5565b3480156106a057600080fd5b506106a9611bde565b60405161029c919061457c565b6060606680548060200260200160405190810160405280929190818152602001828054801561070e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106f0575b5050505050905090565b610720611c1a565b61072f81518351146070611cdc565b61073b60666000613fc3565b61074760676000613fc3565b60005b82518110156107d857606683828151811061076157fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905581516067908390839081106107ad57fe5b602090810291909101810151825460018181018555600094855292909320909201919091550161074a565b5042606c8190556040517f39dc56f5c791d35313f12a8053a1cb6e24fdc18a55184d2f9f3dc00de3522f8b9161080d916147e4565b60405180910390a15050565b61084b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b6001600160a01b03808316600090815260696020526040902054168061088c5760405162461bcd60e51b8152600401610883906145e5565b60405180910390fd5b6040517fc5ebeaec0000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063c5ebeaec906108d19085906004016147e4565b602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610923919061438e565b156109405760405162461bcd60e51b81526004016108839061471e565b505050565b6069602052600090815260409020546001600160a01b031681565b6066818154811061097057600080fd5b6000918252602090912001546001600160a01b0316905081565b606b5481565b6065546109a9906001600160a01b031615156073611cdc565b6109ce62093a806109c5606b5442611e0f90919063ffffffff16565b1015606d611cdc565b6109f262093a806109ea606c5442611e0f90919063ffffffff16565b10606e611cdc565b6109fa611e25565b6040516370a0823160e01b815260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a0823190610a349030906004016144c0565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a84919061438e565b9050610a9c6729a2241af62c0000821015606f611cdc565b610b09307f0000000000000000000000000000000000000000000000000000000000000000610aec606f600081548110610ad257fe5b90600052602060002001548561210890919063ffffffff16565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292919061212d565b610b44610b37606f600081548110610b1d57fe5b90600052602060002001548361210890919063ffffffff16565b607060015b0154906121a6565b607155606f8054610b6391610b5e916001908110610b1d57fe5b6121b6565b610b7c610b77606f600281548110610b1d57fe5b612298565b610b95610b90606f600381548110610b1d57fe5b612762565b610be973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610bd8606f600481548110610bbe57fe5b90600052602060002001548461210890919063ffffffff16565b606a546001600160a01b031661295e565b610bf1612d67565b5042606b55565b6078546001600160a01b031681565b610c397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b6001600160a01b03909116600090815260686020526040902055565b610c877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b606a54610ca4906001600160a01b03838116911614156074611cdc565b6001600160a01b03818116600090815260696020526040902054610ccc911615156072611cdc565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060606f80548060200260200160405190810160405280929190818152602001828054801561070e57602002820191906000526020600020905b815481526020019060010190808311610d28575050505050905090565b610d777f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b610d8282828461295e565b5050565b610db87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b610dc4606f6000613fc3565b60005b8181101561094057606f838383818110610ddd57fe5b83546001808201865560009586526020958690209290950293909301359201919091555001610dc7565b610e397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b607755565b6065546001600160a01b031681565b606a546001600160a01b031681565b600054610100900460ff1680610e755750610e75612eb3565b80610e83575060005460ff16155b610ebe5760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015610ee9576000805460ff1961ff0019909116610100171660011790555b610ef1612ec4565b610efb8383610d86565b610f03611363565b610f20736b175474e89094c44da98b954eedeac495271d0f610c55565b6068602052681b1ae4d6e2ef5000007f4d158bbfd95ee9a2dbb8c3a636c573b20dcaba9e72bb743c844cbd959c77df4a55631dcd65007fd98c4d2a11233789190aab6ba2d225b6bda4b59c2917636996ecacff26f3e69f556706f05b59d3b200007fccdc1587d0c86316e8986de7a983e28b085ec139bbb38b23b4194aea13c3886c55732260fac5e5542a773aa44fbcfedf7c193bc2c599600052622dc6c07fbb3572ea0c5a0fdc48a9bbcbc231cf5f7e7ec4ba06bf0dd23084ade8b950a16e556040517f5c19a95c00000000000000000000000000000000000000000000000000000000815273f4dc48d260c93ad6a96c5ce563e70ca578987c7490635c19a95c906110319030906004016144c0565b600060405180830381600087803b15801561104b57600080fd5b505af115801561105f573d6000803e3d6000fd5b50506658d15e1762800060775550508015610940576000805461ff0019169055505050565b61108c612f75565b6001600160a01b031661109d6111b0565b6001600160a01b0316146110f8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b606c5481565b61117a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b61119a73f4dc48d260c93ad6a96c5ce563e70ca578987c7433308561212d565b606e546111a790836121a6565b606e55606d5550565b6033546001600160a01b031690565b60686020526000908152604090205481565b606781815481106111e157600080fd5b600091825260209091200154905081565b60775481565b606e5481565b6112307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b61125a611c1a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663567813888383611296576000611299565b60015b6040518363ffffffff1660e01b81526004016112b6929190614848565b602060405180830381600087803b1580156112d057600080fd5b505af11580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611308919061438e565b507fefa00395b2e0ff3ae4ff4742ac3a68646612107e164ca54a2b88dcc983f7252142838360405161080d9392919061481a565b6070816007811061134c57600080fd5b0154905081565b606f81815481106111e157600080fd5b6113957f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b600073c7125e3a2925877c7371d579d29dae4729ac90336001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261142091908101906140e7565b905060005b815181101561150657600082828151811061143c57fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b491906140a0565b90508282815181106114c257fe5b6020908102919091018101516001600160a01b0392831660009081526069909252604090912080546001600160a01b03191692909116919091179055600101611425565b506040517fc299823800000000000000000000000000000000000000000000000000000000815273c7125e3a2925877c7371d579d29dae4729ac90339063c29982389061155790849060040161452f565b600060405180830381600087803b15801561157157600080fd5b505af1158015611585573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8291908101906142af565b6060606780548060200260200160405190810160405280929190818152602001828054801561070e5760200282019190600052602060002090815481526020019060010190808311610d28575050505050905090565b6116357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b607854611666906001600160a01b0383811691161480159061165f57506001600160a01b03821615155b6077611cdc565b607880546001600160a01b0319166001600160a01b0392909216919091179055565b606d5481565b6116988282610718565b610d82610990565b6116a8612f75565b6001600160a01b03166116b96111b0565b6001600160a01b031614611714576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166117595760405162461bcd60e51b81526004018080602001828103825260268152602001806148bf6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6040517f13bc6d4b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906313bc6d4b9061181a9033906004016144c0565b60206040518083038186803b15801561183257600080fd5b505afa158015611846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186a9190614333565b506040517fb3af17430000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b3af1743906118d09085906004016144c0565b60206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614333565b61193c5760405162461bcd60e51b81526004016108839061468a565b6078546001600160a01b03166119645760405162461bcd60e51b81526004016108839061461c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119bf57600080fd5b505afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f791906140a0565b6078546040517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263ac41865a92611a44928892909116906004016144d4565b60206040518083038186803b158015611a5c57600080fd5b505afa158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a94919061438e565b905080611ab35760405162461bcd60e51b815260040161088390614653565b6000611abf8284612108565b6078546040516370a0823160e01b815291925082916001600160a01b03909116906370a0823190611af49030906004016144c0565b60206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b44919061438e565b1015611b625760405162461bcd60e51b8152600401610883906146c1565b611b776001600160a01b03851633308661212d565b607854600090611bb6906001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611bb185670e043da617250000612108565b612f79565b9050611bd773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc233836132c7565b5050505050565b611be6613fe1565b6040805160e08101918290526070805482529091600790607160208501808311610d28575050505050905090565b3b151590565b6040517f411137c3000000000000000000000000000000000000000000000000000000008152611cda906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063411137c390611c839033906004016144c0565b60206040518083038186803b158015611c9b57600080fd5b505afa158015611caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190614333565b6012611cdc565b565b81610d8257610d8281613332565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d6020811015611d4d57600080fd5b50516001600160a01b0316331480611dd15750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9957600080fd5b505afa158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b50516001600160a01b031633145b611e0c5760405162461bcd60e51b815260040180806020018281038252602a815260200180614939602a913960400191505060405180910390fd5b50565b80820382811115611e1f57600080fd5b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc819ea66040518163ffffffff1660e01b815260040160006040518083038186803b158015611e8057600080fd5b505afa158015611e94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ebc91908101906140e7565b905060005b8151811015612043576000828281518110611ed857fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611f1091906144c0565b60206040518083038186803b158015611f2857600080fd5b505afa158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f60919061438e565b90506001600160a01b03821673f4dc48d260c93ad6a96c5ce563e70ca578987c7414801590611fac57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214155b8015611fcf57506001600160a01b03821660009081526068602052604090205481115b1561200357611fff611ff68373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc284612f79565b60706000610b3c565b6070555b6001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415612039576120358160706000610b3c565b6070555b5050600101611ec1565b506040516370a0823160e01b81527f49d512bf9cb224241c05691e73eb9fab078cf350c7dbcbcf66788f1fc0cc8b0b90429073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319061209f9030906004016144c0565b60206040518083038186803b1580156120b757600080fd5b505afa1580156120cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ef919061438e565b6040516120fd9291906147ed565b60405180910390a150565b6000612126670de0b6b3a76400006121208585613385565b906133a9565b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790526121a0908590613410565b50505050565b80820182811015611e1f57600080fd5b60006121eb73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273f4dc48d260c93ad6a96c5ce563e70ca578987c7484612f79565b606554909150612225906001600160a01b03166122098360026133a9565b73f4dc48d260c93ad6a96c5ce563e70ca578987c7491906132c7565b6122547f00000000000000000000000000000000000000000000000000000000000000006122098360026133a9565b6122618160706002610b3c565b6072556040517fead6bc1fbe3e9483a6b9cb8433997e459522311151455ee2112877dc4daeb5599061080d90429085908590614832565b60006122ac826706f05b59d3b20000612108565b905060006122e373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273f4dc48d260c93ad6a96c5ce563e70ca578987c7484612f79565b60405163095ea7b360e01b815290915073f4dc48d260c93ad6a96c5ce563e70ca578987c749063095ea7b3906123339073f19f91d7889668a533f14d076adc187be781a458908590600401614516565b602060405180830381600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190614333565b5060405163095ea7b360e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063095ea7b3906123d39073f19f91d7889668a533f14d076adc187be781a458908690600401614516565b602060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124259190614333565b506040516370a0823160e01b815260009073f19f91d7889668a533f14d076adc187be781a458906370a0823190612480907f0000000000000000000000000000000000000000000000000000000000000000906004016144c0565b60206040518083038186803b15801561249857600080fd5b505afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d0919061438e565b6040517f8dbdbe6d00000000000000000000000000000000000000000000000000000000815290915060009073f19f91d7889668a533f14d076adc187be781a45890638dbdbe6d9061254a90879087907f0000000000000000000000000000000000000000000000000000000000000000906004016147fb565b602060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259c919061438e565b905061271761265b8373f19f91d7889668a533f14d076adc187be781a4586001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161260591906144c0565b60206040518083038186803b15801561261d57600080fd5b505afa158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061438e565b90611e0f565b8214801561271057506040516370a0823160e01b815260009073f19f91d7889668a533f14d076adc187be781a458906370a08231906126be907f0000000000000000000000000000000000000000000000000000000000000000906004016144c0565b60206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e919061438e565b115b6071611cdc565b60738054860190556040517fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39061275390429087908790614832565b60405180910390a15050505050565b60005b6066548110156129525760006066828154811061277e57fe5b60009182526020918290200154604080517ff85cb5c800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263f85cb5c892600480840193829003018186803b1580156127e057600080fd5b505afa1580156127f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281891906140a0565b905060006001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21461288a5761288373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc283611bb16067878154811061286957fe5b90600052602060002001548861210890919063ffffffff16565b905061289d565b61289a60678481548110610ad257fe5b90505b6128cc606684815481106128ad57fe5b6000918252602090912001546001600160a01b038481169116836132c7565b606683815481106128d957fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03167f2eaf4a63a45c70f8c897bb4d267391aa5da44272b2c9eda3aa02a99111d06f37426129326067878154811061286957fe5b6040516129409291906147ed565b60405180910390a25050600101612765565b50607480549091019055565b6001600160a01b03808216600090815260696020526040902054166129868115156075611cdc565b826001600160a01b03858116908416146129d2576129cf856001600160a01b038516156129b357846129c9565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b86612f79565b90505b6001600160a01b038316612abb576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90612a309087906004016147e4565b600060405180830381600087803b158015612a4a57600080fd5b505af1158015612a5e573d6000803e3d6000fd5b50505050816001600160a01b0316631249c58b856040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a9d57600080fd5b505af1158015612ab1573d6000803e3d6000fd5b5050505050612bd5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390612ae99085908590600401614516565b602060405180830381600087803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3b9190614333565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a0712d6890612b819084906004016147e4565b602060405180830381600087803b158015612b9b57600080fd5b505af1158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd3919061438e565b505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3057600080fd5b505afa158015612c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6891906140a0565b6001600160a01b031663ac41865a8573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518363ffffffff1660e01b8152600401612ca99291906144d4565b60206040518083038186803b158015612cc157600080fd5b505afa158015612cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf9919061438e565b90506000612d078383612108565b9050612d168160706005610b3c565b6075556040516001600160a01b038616907f26ad8f0c19554f6771309e2ce6bbb81e1b4960161535735bd15845e4bbba29a790612d5690429085906147ed565b60405180910390a250505050505050565b606e5415611cda576000606d54606e5410612d8457606d54612d88565b606e545b6040516370a0823160e01b815290915060009073f4dc48d260c93ad6a96c5ce563e70ca578987c74906370a0823190612dc59030906004016144c0565b60206040518083038186803b158015612ddd57600080fd5b505afa158015612df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e15919061438e565b9050818110612e245781612e26565b805b606554909250612e559073f4dc48d260c93ad6a96c5ce563e70ca578987c74906001600160a01b0316846132c7565b606e54612e629083611e0f565b606e556040517fb04849741dcc54ec81be5b4974b53836c36df01b634e717f9d674ec7d30c4f3890612e9790429085906147ed565b60405180910390a1612eac8260706006610b3c565b6076555050565b6000612ebe30611c14565b15905090565b600054610100900460ff1680612edd5750612edd612eb3565b80612eeb575060005460ff16155b612f265760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015612f51576000805460ff1961ff0019909116610100171660011790555b612f596134c1565b612f61613561565b8015611e0c576000805461ff001916905550565b3390565b6000826001600160a01b0316846001600160a01b03161415612f9c575080612126565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff757600080fd5b505afa15801561300b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302f91906140a0565b6001600160a01b031663ac41865a86866040518363ffffffff1660e01b815260040161305c9291906144d4565b60206040518083038186803b15801561307457600080fd5b505afa158015613088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ac919061438e565b90506130bb8115156062611cdc565b60006130d186866130cc8786612108565b61365a565b905060006130f46130ed6077548461210890919063ffffffff16565b8390611e0f565b905073e592427a0aece92de3edee1f18e0157c0586156461311688828861381b565b60606001600160a01b03891673853d955acef822db058eb8505911ed77f175b99e148061315f57506001600160a01b03881673853d955acef822db058eb8505911ed77f175b99e145b156131c757736b175474e89094c44da98b954eedeac495271d0f60006131858b8361397d565b905060006131938b8461397d565b90508b8284838e6040516020016131ae959493929190614456565b60405160208183030381529060405293505050506131fd565b60006131d38a8a61397d565b905089818a6040516020016131ea93929190614403565b6040516020818303038152906040529150505b6040805160a0810182528281523060208201524281830152606081018990526080810185905290517fc04b8d590000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063c04b8d5990613267908490600401614755565b602060405180830381600087803b15801561328157600080fd5b505af1158015613295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b9919061438e565b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610940908490613410565b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008215806133a05750508181028183828161339d57fe5b04145b611e1f57600080fd5b60008082116133ff576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161340857fe5b049392505050565b6000613465826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d779092919063ffffffff16565b8051909150156109405780806020019051602081101561348457600080fd5b50516109405760405162461bcd60e51b815260040180806020018281038252602a815260200180614963602a913960400191505060405180910390fd5b600054610100900460ff16806134da57506134da612eb3565b806134e8575060005460ff16155b6135235760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015612f61576000805460ff1961ff0019909116610100171660011790558015611e0c576000805461ff001916905550565b600054610100900460ff168061357a575061357a612eb3565b80613588575060005460ff16155b6135c35760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff161580156135ee576000805460ff1961ff0019909116610100171660011790555b60006135f8612f75565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611e0c576000805461ff001916905550565b60008061366685613d8e565b6136d457846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a357600080fd5b505afa1580156136b7573d6000803e3d6000fd5b505050506040513d60208110156136cd57600080fd5b50516136d7565b60125b60ff16905060006136e785613d8e565b61375557846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561372457600080fd5b505afa158015613738573d6000803e3d6000fd5b505050506040513d602081101561374e57600080fd5b5051613758565b60125b60ff1690506012821115801561376f575060128111155b6137c0576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b808214156137d2578392505050612126565b818111156137fa576137f16137e78284611e0f565b8590600a0a613385565b92505050612126565b6138116138078383611e0f565b8590600a0a6133a9565b9695505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106138975780518252601f199092019160209182019101613878565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146138f9576040519150601f19603f3d011682016040523d82523d6000602084013e6138fe565b606091505b509150915081801561392c57508051158061392c575080806020019051602081101561392957600080fd5b50515b611bd7576040805162461bcd60e51b815260206004820152600260248201527f5341000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604051630b4c774160e11b81526000908190731f98431c8ad98523631ae4a59f267346ea31f98490631698ee82906139bf90879087906101f4906004016144ee565b60206040518083038186803b1580156139d757600080fd5b505afa1580156139eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0f91906140a0565b604051630b4c774160e11b8152909150600090731f98431c8ad98523631ae4a59f267346ea31f98490631698ee8290613a529088908890610bb8906004016144ee565b60206040518083038186803b158015613a6a57600080fd5b505afa158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa291906140a0565b604051630b4c774160e11b8152909150600090731f98431c8ad98523631ae4a59f267346ea31f98490631698ee8290613ae59089908990612710906004016144ee565b60206040518083038186803b158015613afd57600080fd5b505afa158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3591906140a0565b905060006001600160a01b038416613b4e576000613bbf565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613b8757600080fd5b505afa158015613b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbf919061434f565b905060006001600160a01b038416613bd8576000613c49565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613c1157600080fd5b505afa158015613c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c49919061434f565b905060006001600160a01b038416613c62576000613cd3565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9b57600080fd5b505afa158015613caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd3919061434f565b9050816001600160801b0316836001600160801b031610158015613d095750806001600160801b0316836001600160801b031610155b15613d1e576101f49650505050505050611e1f565b826001600160801b0316826001600160801b031610158015613d525750806001600160801b0316826001600160801b031610155b15613d6757610bb89650505050505050611e1f565b5061271098975050505050505050565b6060613d868484600085613dc4565b949350505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0383161480611e1f5750506001600160a01b03161590565b606082471015613e055760405162461bcd60e51b81526004018080602001828103825260268152602001806148e56026913960400191505060405180910390fd5b613e0e85611c14565b613e5f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613e9d5780518252601f199092019160209182019101613e7e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613eff576040519150601f19603f3d011682016040523d82523d6000602084013e613f04565b606091505b5091509150613f14828286613f1f565b979650505050505050565b60608315613f2e575081612126565b825115613f3e5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f88578181015183820152602001613f70565b50505050905090810190601f168015613fb55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080546000825590600052602060002090810190611e0c9190613fff565b6040518060e001604052806007906020820280368337509192915050565b5b808211156140145760008155600101614000565b5090565b600082601f830112614028578081fd5b8135602061403d6140388361487d565b614859565b8281528181019085830183850287018401881015614059578586fd5b855b858110156140775781358452928401929084019060010161405b565b5090979650505050505050565b600060208284031215614095578081fd5b81356121268161489b565b6000602082840312156140b1578081fd5b81516121268161489b565b600080604083850312156140ce578081fd5b82356140d98161489b565b946020939093013593505050565b600060208083850312156140f9578182fd5b825167ffffffffffffffff81111561410f578283fd5b8301601f8101851361411f578283fd5b805161412d6140388261487d565b8181528381019083850185840285018601891015614149578687fd5b8694505b838510156141745780516141608161489b565b83526001949094019391850191850161414d565b50979650505050505050565b60008060408385031215614192578182fd5b823567ffffffffffffffff808211156141a9578384fd5b818501915085601f8301126141bc578384fd5b813560206141cc6140388361487d565b82815281810190858301838502870184018b10156141e8578889fd5b8896505b848710156142135780356141ff8161489b565b8352600196909601959183019183016141ec565b5096505086013592505080821115614229578283fd5b5061423685828601614018565b9150509250929050565b60008060208385031215614252578182fd5b823567ffffffffffffffff80821115614269578384fd5b818501915085601f83011261427c578384fd5b81358181111561428a578485fd5b866020808302850101111561429d578485fd5b60209290920196919550909350505050565b600060208083850312156142c1578182fd5b825167ffffffffffffffff8111156142d7578283fd5b8301601f810185136142e7578283fd5b80516142f56140388261487d565b8181528381019083850185840285018601891015614311578687fd5b8694505b83851015614174578051835260019490940193918501918501614315565b600060208284031215614344578081fd5b8151612126816148b0565b600060208284031215614360578081fd5b81516001600160801b0381168114612126578182fd5b600060208284031215614387578081fd5b5035919050565b60006020828403121561439f578081fd5b5051919050565b600080604083850312156143b8578182fd5b8235915060208301356143ca816148b0565b809150509250929050565b600080604083850312156143e7578182fd5b50508035926020909101359150565b6001600160a01b03169052565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6bffffffffffffffffffffffff19606096871b811682527fffffff000000000000000000000000000000000000000000000000000000000060e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156145705783516001600160a01b03168352928401929184019160010161454b565b50909695505050505050565b60e08101818360005b60078110156145a4578151835260209283019290910190600101614585565b50505092915050565b6020808252825182820181905260009190848201906040850190845b81811015614570578351835292840192918401916001016145c9565b60208082526012908201527f4e6f7420612076616c69642063546f6b656e0000000000000000000000000000604082015260600190565b6020808252601b908201527f417373657420666f7220707572636861736573206e6f74207365740000000000604082015260600190565b6020808252600e908201527f4e6f20707269636520666f756e64000000000000000000000000000000000000604082015260600190565b60208082526016908201527f4d75737420626520612077616e74656420617373657400000000000000000000604082015260600190565b60208082526026908201527f4e6f7420656e6f7567682062616c616e636520746f206275792077616e74656460408201527f2061737365740000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f4e6f7420656e6f75676820636f6c6c61746572616c0000000000000000000000604082015260600190565b60006020808352835160a08285015280518060c0860152835b8181101561478a5782810184015186820160e00152830161476e565b8181111561479b578460e083880101525b5091850151916147ae60408601846143f6565b6040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b90815260200190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b91825260ff16602082015260400190565b60405181810167ffffffffffffffff8111828210171561487557fe5b604052919050565b600067ffffffffffffffff82111561489157fe5b5060209081020190565b6001600160a01b0381168114611e0c57600080fd5b8015158114611e0c57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c20746869735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220aa22705663fc90d92d3c41b5b946e22ca74f0ab85286923c0d41bf90bd8e9e5f64736f6c63430007060033496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
  "deployedBytecode": "0x60806040526004361061026e5760003560e01c8063730fa8c411610153578063bd59c9b0116100cb578063dac5a9951161007f578063f2fde38b11610064578063f2fde38b14610654578063f30fd02014610674578063fc5cbf1d1461069457610275565b8063dac5a9951461061f578063ed63f9191461063457610275565b8063cddb7148116100b0578063cddb7148146105d5578063cfd2dc99146105ea578063d9cf443b146105ff57610275565b8063bd59c9b014610595578063bd61d4fd146105b557610275565b8063a25db51611610122578063a775efa511610107578063a775efa514610540578063b1beb88d14610555578063bcfb9b611461057557610275565b8063a25db5161461050b578063a350fe071461052b57610275565b8063730fa8c4146104a157806375c93bb9146104b65780638da5cb5b146104d65780639c5e52d5146104eb57610275565b806343fce074116101e657806362f0e8dc116101b55780636be2f2671161019a5780636be2f267146104575780636fe0e5591461046c578063715018a61461048c57610275565b806362f0e8dc1461042257806365f7f6481461044257610275565b806343fce074146103a0578063564e4bab146103c05780635acaaef3146103e257806361cab7121461040257610275565b806335d10b611161023d578063395ea61b11610222578063395ea61b146103565780633f1ee1671461036b57806340e016501461038057610275565b806335d10b6114610314578063394abf451461033457610275565b8063081ab4c21461027a57806308de5fc6146102a557806319c92094146102c75780633550bd62146102e757610275565b3661027557005b600080fd5b34801561028657600080fd5b5061028f6106b6565b60405161029c919061452f565b60405180910390f35b3480156102b157600080fd5b506102c56102c0366004614180565b610718565b005b3480156102d357600080fd5b506102c56102e23660046140bc565b610819565b3480156102f357600080fd5b50610307610302366004614084565b610945565b60405161029c91906144c0565b34801561032057600080fd5b5061030761032f366004614376565b610960565b34801561034057600080fd5b5061034961098a565b60405161029c91906147e4565b34801561036257600080fd5b506102c5610990565b34801561037757600080fd5b50610307610bf8565b34801561038c57600080fd5b506102c561039b3660046140bc565b610c07565b3480156103ac57600080fd5b506102c56103bb366004614084565b610c55565b3480156103cc57600080fd5b506103d5610cee565b60405161029c91906145ad565b3480156103ee57600080fd5b506102c56103fd3660046140bc565b610d45565b34801561040e57600080fd5b506102c561041d366004614240565b610d86565b34801561042e57600080fd5b506102c561043d366004614376565b610e07565b34801561044e57600080fd5b50610307610e3e565b34801561046357600080fd5b50610307610e4d565b34801561047857600080fd5b506102c5610487366004614240565b610e5c565b34801561049857600080fd5b506102c5611084565b3480156104ad57600080fd5b50610349611142565b3480156104c257600080fd5b506102c56104d13660046143d5565b611148565b3480156104e257600080fd5b506103076111b0565b3480156104f757600080fd5b50610349610506366004614084565b6111bf565b34801561051757600080fd5b50610349610526366004614376565b6111d1565b34801561053757600080fd5b506103496111f2565b34801561054c57600080fd5b506103496111f8565b34801561056157600080fd5b506102c5610570366004614084565b6111fe565b34801561058157600080fd5b506102c56105903660046143a6565b611252565b3480156105a157600080fd5b506103496105b0366004614376565b61133c565b3480156105c157600080fd5b506103496105d0366004614376565b611353565b3480156105e157600080fd5b506102c5611363565b3480156105f657600080fd5b506103d56115ad565b34801561060b57600080fd5b506102c561061a366004614084565b611603565b34801561062b57600080fd5b50610349611688565b34801561064057600080fd5b506102c561064f366004614180565b61168e565b34801561066057600080fd5b506102c561066f366004614084565b6116a0565b34801561068057600080fd5b506102c561068f3660046140bc565b6117b5565b3480156106a057600080fd5b506106a9611bde565b60405161029c919061457c565b6060606680548060200260200160405190810160405280929190818152602001828054801561070e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116106f0575b5050505050905090565b610720611c1a565b61072f81518351146070611cdc565b61073b60666000613fc3565b61074760676000613fc3565b60005b82518110156107d857606683828151811061076157fe5b60209081029190910181015182546001810184556000938452919092200180546001600160a01b0319166001600160a01b0390921691909117905581516067908390839081106107ad57fe5b602090810291909101810151825460018181018555600094855292909320909201919091550161074a565b5042606c8190556040517f39dc56f5c791d35313f12a8053a1cb6e24fdc18a55184d2f9f3dc00de3522f8b9161080d916147e4565b60405180910390a15050565b61084b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b6001600160a01b03808316600090815260696020526040902054168061088c5760405162461bcd60e51b8152600401610883906145e5565b60405180910390fd5b6040517fc5ebeaec0000000000000000000000000000000000000000000000000000000081526001600160a01b0382169063c5ebeaec906108d19085906004016147e4565b602060405180830381600087803b1580156108eb57600080fd5b505af11580156108ff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610923919061438e565b156109405760405162461bcd60e51b81526004016108839061471e565b505050565b6069602052600090815260409020546001600160a01b031681565b6066818154811061097057600080fd5b6000918252602090912001546001600160a01b0316905081565b606b5481565b6065546109a9906001600160a01b031615156073611cdc565b6109ce62093a806109c5606b5442611e0f90919063ffffffff16565b1015606d611cdc565b6109f262093a806109ea606c5442611e0f90919063ffffffff16565b10606e611cdc565b6109fa611e25565b6040516370a0823160e01b815260009073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a0823190610a349030906004016144c0565b60206040518083038186803b158015610a4c57600080fd5b505afa158015610a60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a84919061438e565b9050610a9c6729a2241af62c0000821015606f611cdc565b610b09307f0000000000000000000000000000000000000000000000000000000000000000610aec606f600081548110610ad257fe5b90600052602060002001548561210890919063ffffffff16565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc292919061212d565b610b44610b37606f600081548110610b1d57fe5b90600052602060002001548361210890919063ffffffff16565b607060015b0154906121a6565b607155606f8054610b6391610b5e916001908110610b1d57fe5b6121b6565b610b7c610b77606f600281548110610b1d57fe5b612298565b610b95610b90606f600381548110610b1d57fe5b612762565b610be973c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2610bd8606f600481548110610bbe57fe5b90600052602060002001548461210890919063ffffffff16565b606a546001600160a01b031661295e565b610bf1612d67565b5042606b55565b6078546001600160a01b031681565b610c397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b6001600160a01b03909116600090815260686020526040902055565b610c877f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b606a54610ca4906001600160a01b03838116911614156074611cdc565b6001600160a01b03818116600090815260696020526040902054610ccc911615156072611cdc565b606a80546001600160a01b0319166001600160a01b0392909216919091179055565b6060606f80548060200260200160405190810160405280929190818152602001828054801561070e57602002820191906000526020600020905b815481526020019060010190808311610d28575050505050905090565b610d777f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b610d8282828461295e565b5050565b610db87f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b610dc4606f6000613fc3565b60005b8181101561094057606f838383818110610ddd57fe5b83546001808201865560009586526020958690209290950293909301359201919091555001610dc7565b610e397f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b607755565b6065546001600160a01b031681565b606a546001600160a01b031681565b600054610100900460ff1680610e755750610e75612eb3565b80610e83575060005460ff16155b610ebe5760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015610ee9576000805460ff1961ff0019909116610100171660011790555b610ef1612ec4565b610efb8383610d86565b610f03611363565b610f20736b175474e89094c44da98b954eedeac495271d0f610c55565b6068602052681b1ae4d6e2ef5000007f4d158bbfd95ee9a2dbb8c3a636c573b20dcaba9e72bb743c844cbd959c77df4a55631dcd65007fd98c4d2a11233789190aab6ba2d225b6bda4b59c2917636996ecacff26f3e69f556706f05b59d3b200007fccdc1587d0c86316e8986de7a983e28b085ec139bbb38b23b4194aea13c3886c55732260fac5e5542a773aa44fbcfedf7c193bc2c599600052622dc6c07fbb3572ea0c5a0fdc48a9bbcbc231cf5f7e7ec4ba06bf0dd23084ade8b950a16e556040517f5c19a95c00000000000000000000000000000000000000000000000000000000815273f4dc48d260c93ad6a96c5ce563e70ca578987c7490635c19a95c906110319030906004016144c0565b600060405180830381600087803b15801561104b57600080fd5b505af115801561105f573d6000803e3d6000fd5b50506658d15e1762800060775550508015610940576000805461ff0019169055505050565b61108c612f75565b6001600160a01b031661109d6111b0565b6001600160a01b0316146110f8576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6033546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603380546001600160a01b0319169055565b606c5481565b61117a7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b61119a73f4dc48d260c93ad6a96c5ce563e70ca578987c7433308561212d565b606e546111a790836121a6565b606e55606d5550565b6033546001600160a01b031690565b60686020526000908152604090205481565b606781815481106111e157600080fd5b600091825260209091200154905081565b60775481565b606e5481565b6112307f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b61125a611c1a565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663567813888383611296576000611299565b60015b6040518363ffffffff1660e01b81526004016112b6929190614848565b602060405180830381600087803b1580156112d057600080fd5b505af11580156112e4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611308919061438e565b507fefa00395b2e0ff3ae4ff4742ac3a68646612107e164ca54a2b88dcc983f7252142838360405161080d9392919061481a565b6070816007811061134c57600080fd5b0154905081565b606f81815481106111e157600080fd5b6113957f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b600073c7125e3a2925877c7371d579d29dae4729ac90336001600160a01b031663b0772d0b6040518163ffffffff1660e01b815260040160006040518083038186803b1580156113e457600080fd5b505afa1580156113f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261142091908101906140e7565b905060005b815181101561150657600082828151811061143c57fe5b60200260200101516001600160a01b0316636f307dc36040518163ffffffff1660e01b815260040160206040518083038186803b15801561147c57600080fd5b505afa158015611490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b491906140a0565b90508282815181106114c257fe5b6020908102919091018101516001600160a01b0392831660009081526069909252604090912080546001600160a01b03191692909116919091179055600101611425565b506040517fc299823800000000000000000000000000000000000000000000000000000000815273c7125e3a2925877c7371d579d29dae4729ac90339063c29982389061155790849060040161452f565b600060405180830381600087803b15801561157157600080fd5b505af1158015611585573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d8291908101906142af565b6060606780548060200260200160405190810160405280929190818152602001828054801561070e5760200282019190600052602060002090815481526020019060010190808311610d28575050505050905090565b6116357f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611cea565b607854611666906001600160a01b0383811691161480159061165f57506001600160a01b03821615155b6077611cdc565b607880546001600160a01b0319166001600160a01b0392909216919091179055565b606d5481565b6116988282610718565b610d82610990565b6116a8612f75565b6001600160a01b03166116b96111b0565b6001600160a01b031614611714576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b6001600160a01b0381166117595760405162461bcd60e51b81526004018080602001828103825260268152602001806148bf6026913960400191505060405180910390fd5b6033546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603380546001600160a01b0319166001600160a01b0392909216919091179055565b6040517f13bc6d4b0000000000000000000000000000000000000000000000000000000081526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906313bc6d4b9061181a9033906004016144c0565b60206040518083038186803b15801561183257600080fd5b505afa158015611846573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186a9190614333565b506040517fb3af17430000000000000000000000000000000000000000000000000000000081526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063b3af1743906118d09085906004016144c0565b60206040518083038186803b1580156118e857600080fd5b505afa1580156118fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119209190614333565b61193c5760405162461bcd60e51b81526004016108839061468a565b6078546001600160a01b03166119645760405162461bcd60e51b81526004016108839061461c565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b1580156119bf57600080fd5b505afa1580156119d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119f791906140a0565b6078546040517fac41865a0000000000000000000000000000000000000000000000000000000081526001600160a01b039283169263ac41865a92611a44928892909116906004016144d4565b60206040518083038186803b158015611a5c57600080fd5b505afa158015611a70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a94919061438e565b905080611ab35760405162461bcd60e51b815260040161088390614653565b6000611abf8284612108565b6078546040516370a0823160e01b815291925082916001600160a01b03909116906370a0823190611af49030906004016144c0565b60206040518083038186803b158015611b0c57600080fd5b505afa158015611b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b44919061438e565b1015611b625760405162461bcd60e51b8152600401610883906146c1565b611b776001600160a01b03851633308661212d565b607854600090611bb6906001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2611bb185670e043da617250000612108565b612f79565b9050611bd773c02aaa39b223fe8d0a0e5c4f27ead9083c756cc233836132c7565b5050505050565b611be6613fe1565b6040805160e08101918290526070805482529091600790607160208501808311610d28575050505050905090565b3b151590565b6040517f411137c3000000000000000000000000000000000000000000000000000000008152611cda906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063411137c390611c839033906004016144c0565b60206040518083038186803b158015611c9b57600080fd5b505afa158015611caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cd39190614333565b6012611cdc565b565b81610d8257610d8281613332565b806001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d2357600080fd5b505afa158015611d37573d6000803e3d6000fd5b505050506040513d6020811015611d4d57600080fd5b50516001600160a01b0316331480611dd15750806001600160a01b0316638d97e0436040518163ffffffff1660e01b815260040160206040518083038186803b158015611d9957600080fd5b505afa158015611dad573d6000803e3d6000fd5b505050506040513d6020811015611dc357600080fd5b50516001600160a01b031633145b611e0c5760405162461bcd60e51b815260040180806020018281038252602a815260200180614939602a913960400191505060405180910390fd5b50565b80820382811115611e1f57600080fd5b92915050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663bc819ea66040518163ffffffff1660e01b815260040160006040518083038186803b158015611e8057600080fd5b505afa158015611e94573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ebc91908101906140e7565b905060005b8151811015612043576000828281518110611ed857fe5b602002602001015190506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611f1091906144c0565b60206040518083038186803b158015611f2857600080fd5b505afa158015611f3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f60919061438e565b90506001600160a01b03821673f4dc48d260c93ad6a96c5ce563e70ca578987c7414801590611fac57506001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc214155b8015611fcf57506001600160a01b03821660009081526068602052604090205481115b1561200357611fff611ff68373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc284612f79565b60706000610b3c565b6070555b6001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21415612039576120358160706000610b3c565b6070555b5050600101611ec1565b506040516370a0823160e01b81527f49d512bf9cb224241c05691e73eb9fab078cf350c7dbcbcf66788f1fc0cc8b0b90429073c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2906370a082319061209f9030906004016144c0565b60206040518083038186803b1580156120b757600080fd5b505afa1580156120cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ef919061438e565b6040516120fd9291906147ed565b60405180910390a150565b6000612126670de0b6b3a76400006121208585613385565b906133a9565b9392505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03167f23b872dd000000000000000000000000000000000000000000000000000000001790526121a0908590613410565b50505050565b80820182811015611e1f57600080fd5b60006121eb73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273f4dc48d260c93ad6a96c5ce563e70ca578987c7484612f79565b606554909150612225906001600160a01b03166122098360026133a9565b73f4dc48d260c93ad6a96c5ce563e70ca578987c7491906132c7565b6122547f00000000000000000000000000000000000000000000000000000000000000006122098360026133a9565b6122618160706002610b3c565b6072556040517fead6bc1fbe3e9483a6b9cb8433997e459522311151455ee2112877dc4daeb5599061080d90429085908590614832565b60006122ac826706f05b59d3b20000612108565b905060006122e373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273f4dc48d260c93ad6a96c5ce563e70ca578987c7484612f79565b60405163095ea7b360e01b815290915073f4dc48d260c93ad6a96c5ce563e70ca578987c749063095ea7b3906123339073f19f91d7889668a533f14d076adc187be781a458908590600401614516565b602060405180830381600087803b15801561234d57600080fd5b505af1158015612361573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123859190614333565b5060405163095ea7b360e01b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc29063095ea7b3906123d39073f19f91d7889668a533f14d076adc187be781a458908690600401614516565b602060405180830381600087803b1580156123ed57600080fd5b505af1158015612401573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124259190614333565b506040516370a0823160e01b815260009073f19f91d7889668a533f14d076adc187be781a458906370a0823190612480907f0000000000000000000000000000000000000000000000000000000000000000906004016144c0565b60206040518083038186803b15801561249857600080fd5b505afa1580156124ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124d0919061438e565b6040517f8dbdbe6d00000000000000000000000000000000000000000000000000000000815290915060009073f19f91d7889668a533f14d076adc187be781a45890638dbdbe6d9061254a90879087907f0000000000000000000000000000000000000000000000000000000000000000906004016147fb565b602060405180830381600087803b15801561256457600080fd5b505af1158015612578573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259c919061438e565b905061271761265b8373f19f91d7889668a533f14d076adc187be781a4586001600160a01b03166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161260591906144c0565b60206040518083038186803b15801561261d57600080fd5b505afa158015612631573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612655919061438e565b90611e0f565b8214801561271057506040516370a0823160e01b815260009073f19f91d7889668a533f14d076adc187be781a458906370a08231906126be907f0000000000000000000000000000000000000000000000000000000000000000906004016144c0565b60206040518083038186803b1580156126d657600080fd5b505afa1580156126ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061270e919061438e565b115b6071611cdc565b60738054860190556040517fd7f28048575eead8851d024ead087913957dfb4fd1a02b4d1573f5352a5a2be39061275390429087908790614832565b60405180910390a15050505050565b60005b6066548110156129525760006066828154811061277e57fe5b60009182526020918290200154604080517ff85cb5c800000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263f85cb5c892600480840193829003018186803b1580156127e057600080fd5b505afa1580156127f4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061281891906140a0565b905060006001600160a01b03821673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc21461288a5761288373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc283611bb16067878154811061286957fe5b90600052602060002001548861210890919063ffffffff16565b905061289d565b61289a60678481548110610ad257fe5b90505b6128cc606684815481106128ad57fe5b6000918252602090912001546001600160a01b038481169116836132c7565b606683815481106128d957fe5b9060005260206000200160009054906101000a90046001600160a01b03166001600160a01b03167f2eaf4a63a45c70f8c897bb4d267391aa5da44272b2c9eda3aa02a99111d06f37426129326067878154811061286957fe5b6040516129409291906147ed565b60405180910390a25050600101612765565b50607480549091019055565b6001600160a01b03808216600090815260696020526040902054166129868115156075611cdc565b826001600160a01b03858116908416146129d2576129cf856001600160a01b038516156129b357846129c9565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc25b86612f79565b90505b6001600160a01b038316612abb576040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90612a309087906004016147e4565b600060405180830381600087803b158015612a4a57600080fd5b505af1158015612a5e573d6000803e3d6000fd5b50505050816001600160a01b0316631249c58b856040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a9d57600080fd5b505af1158015612ab1573d6000803e3d6000fd5b5050505050612bd5565b60405163095ea7b360e01b81526001600160a01b0384169063095ea7b390612ae99085908590600401614516565b602060405180830381600087803b158015612b0357600080fd5b505af1158015612b17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b3b9190614333565b506040517fa0712d680000000000000000000000000000000000000000000000000000000081526001600160a01b0383169063a0712d6890612b819084906004016147e4565b602060405180830381600087803b158015612b9b57600080fd5b505af1158015612baf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bd3919061438e565b505b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612c3057600080fd5b505afa158015612c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c6891906140a0565b6001600160a01b031663ac41865a8573c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26040518363ffffffff1660e01b8152600401612ca99291906144d4565b60206040518083038186803b158015612cc157600080fd5b505afa158015612cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cf9919061438e565b90506000612d078383612108565b9050612d168160706005610b3c565b6075556040516001600160a01b038616907f26ad8f0c19554f6771309e2ce6bbb81e1b4960161535735bd15845e4bbba29a790612d5690429085906147ed565b60405180910390a250505050505050565b606e5415611cda576000606d54606e5410612d8457606d54612d88565b606e545b6040516370a0823160e01b815290915060009073f4dc48d260c93ad6a96c5ce563e70ca578987c74906370a0823190612dc59030906004016144c0565b60206040518083038186803b158015612ddd57600080fd5b505afa158015612df1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e15919061438e565b9050818110612e245781612e26565b805b606554909250612e559073f4dc48d260c93ad6a96c5ce563e70ca578987c74906001600160a01b0316846132c7565b606e54612e629083611e0f565b606e556040517fb04849741dcc54ec81be5b4974b53836c36df01b634e717f9d674ec7d30c4f3890612e9790429085906147ed565b60405180910390a1612eac8260706006610b3c565b6076555050565b6000612ebe30611c14565b15905090565b600054610100900460ff1680612edd5750612edd612eb3565b80612eeb575060005460ff16155b612f265760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015612f51576000805460ff1961ff0019909116610100171660011790555b612f596134c1565b612f61613561565b8015611e0c576000805461ff001916905550565b3390565b6000826001600160a01b0316846001600160a01b03161415612f9c575080612126565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316632630c12f6040518163ffffffff1660e01b815260040160206040518083038186803b158015612ff757600080fd5b505afa15801561300b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302f91906140a0565b6001600160a01b031663ac41865a86866040518363ffffffff1660e01b815260040161305c9291906144d4565b60206040518083038186803b15801561307457600080fd5b505afa158015613088573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ac919061438e565b90506130bb8115156062611cdc565b60006130d186866130cc8786612108565b61365a565b905060006130f46130ed6077548461210890919063ffffffff16565b8390611e0f565b905073e592427a0aece92de3edee1f18e0157c0586156461311688828861381b565b60606001600160a01b03891673853d955acef822db058eb8505911ed77f175b99e148061315f57506001600160a01b03881673853d955acef822db058eb8505911ed77f175b99e145b156131c757736b175474e89094c44da98b954eedeac495271d0f60006131858b8361397d565b905060006131938b8461397d565b90508b8284838e6040516020016131ae959493929190614456565b60405160208183030381529060405293505050506131fd565b60006131d38a8a61397d565b905089818a6040516020016131ea93929190614403565b6040516020818303038152906040529150505b6040805160a0810182528281523060208201524281830152606081018990526080810185905290517fc04b8d590000000000000000000000000000000000000000000000000000000081526001600160a01b0384169063c04b8d5990613267908490600401614755565b602060405180830381600087803b15801561328157600080fd5b505af1158015613295573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b9919061438e565b9a9950505050505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b03167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610940908490613410565b62461bcd60e51b6000908152602060045260076024526642414223000030600a808404818106603090810160081b95839006959095019082900491820690940160101b939093010160c81b604452606490fd5b60008215806133a05750508181028183828161339d57fe5b04145b611e1f57600080fd5b60008082116133ff576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b81838161340857fe5b049392505050565b6000613465826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d779092919063ffffffff16565b8051909150156109405780806020019051602081101561348457600080fd5b50516109405760405162461bcd60e51b815260040180806020018281038252602a815260200180614963602a913960400191505060405180910390fd5b600054610100900460ff16806134da57506134da612eb3565b806134e8575060005460ff16155b6135235760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff16158015612f61576000805460ff1961ff0019909116610100171660011790558015611e0c576000805461ff001916905550565b600054610100900460ff168061357a575061357a612eb3565b80613588575060005460ff16155b6135c35760405162461bcd60e51b815260040180806020018281038252602e81526020018061490b602e913960400191505060405180910390fd5b600054610100900460ff161580156135ee576000805460ff1961ff0019909116610100171660011790555b60006135f8612f75565b603380546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015611e0c576000805461ff001916905550565b60008061366685613d8e565b6136d457846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156136a357600080fd5b505afa1580156136b7573d6000803e3d6000fd5b505050506040513d60208110156136cd57600080fd5b50516136d7565b60125b60ff16905060006136e785613d8e565b61375557846001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561372457600080fd5b505afa158015613738573d6000803e3d6000fd5b505050506040513d602081101561374e57600080fd5b5051613758565b60125b60ff1690506012821115801561376f575060128111155b6137c0576040805162461bcd60e51b815260206004820152601460248201527f556e737570706f7274656420646563696d616c73000000000000000000000000604482015290519081900360640190fd5b808214156137d2578392505050612126565b818111156137fa576137f16137e78284611e0f565b8590600a0a613385565b92505050612126565b6138116138078383611e0f565b8590600a0a6133a9565b9695505050505050565b604080516001600160a01b038481166024830152604480830185905283518084039091018152606490920183526020820180516001600160e01b031663095ea7b360e01b1781529251825160009485949389169392918291908083835b602083106138975780518252601f199092019160209182019101613878565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146138f9576040519150601f19603f3d011682016040523d82523d6000602084013e6138fe565b606091505b509150915081801561392c57508051158061392c575080806020019051602081101561392957600080fd5b50515b611bd7576040805162461bcd60e51b815260206004820152600260248201527f5341000000000000000000000000000000000000000000000000000000000000604482015290519081900360640190fd5b604051630b4c774160e11b81526000908190731f98431c8ad98523631ae4a59f267346ea31f98490631698ee82906139bf90879087906101f4906004016144ee565b60206040518083038186803b1580156139d757600080fd5b505afa1580156139eb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a0f91906140a0565b604051630b4c774160e11b8152909150600090731f98431c8ad98523631ae4a59f267346ea31f98490631698ee8290613a529088908890610bb8906004016144ee565b60206040518083038186803b158015613a6a57600080fd5b505afa158015613a7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613aa291906140a0565b604051630b4c774160e11b8152909150600090731f98431c8ad98523631ae4a59f267346ea31f98490631698ee8290613ae59089908990612710906004016144ee565b60206040518083038186803b158015613afd57600080fd5b505afa158015613b11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b3591906140a0565b905060006001600160a01b038416613b4e576000613bbf565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613b8757600080fd5b505afa158015613b9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbf919061434f565b905060006001600160a01b038416613bd8576000613c49565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613c1157600080fd5b505afa158015613c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c49919061434f565b905060006001600160a01b038416613c62576000613cd3565b836001600160a01b0316631a6865026040518163ffffffff1660e01b815260040160206040518083038186803b158015613c9b57600080fd5b505afa158015613caf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613cd3919061434f565b9050816001600160801b0316836001600160801b031610158015613d095750806001600160801b0316836001600160801b031610155b15613d1e576101f49650505050505050611e1f565b826001600160801b0316826001600160801b031610158015613d525750806001600160801b0316826001600160801b031610155b15613d6757610bb89650505050505050611e1f565b5061271098975050505050505050565b6060613d868484600085613dc4565b949350505050565b600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b0383161480611e1f5750506001600160a01b03161590565b606082471015613e055760405162461bcd60e51b81526004018080602001828103825260268152602001806148e56026913960400191505060405180910390fd5b613e0e85611c14565b613e5f576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310613e9d5780518252601f199092019160209182019101613e7e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114613eff576040519150601f19603f3d011682016040523d82523d6000602084013e613f04565b606091505b5091509150613f14828286613f1f565b979650505050505050565b60608315613f2e575081612126565b825115613f3e5782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015613f88578181015183820152602001613f70565b50505050905090810190601f168015613fb55780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b5080546000825590600052602060002090810190611e0c9190613fff565b6040518060e001604052806007906020820280368337509192915050565b5b808211156140145760008155600101614000565b5090565b600082601f830112614028578081fd5b8135602061403d6140388361487d565b614859565b8281528181019085830183850287018401881015614059578586fd5b855b858110156140775781358452928401929084019060010161405b565b5090979650505050505050565b600060208284031215614095578081fd5b81356121268161489b565b6000602082840312156140b1578081fd5b81516121268161489b565b600080604083850312156140ce578081fd5b82356140d98161489b565b946020939093013593505050565b600060208083850312156140f9578182fd5b825167ffffffffffffffff81111561410f578283fd5b8301601f8101851361411f578283fd5b805161412d6140388261487d565b8181528381019083850185840285018601891015614149578687fd5b8694505b838510156141745780516141608161489b565b83526001949094019391850191850161414d565b50979650505050505050565b60008060408385031215614192578182fd5b823567ffffffffffffffff808211156141a9578384fd5b818501915085601f8301126141bc578384fd5b813560206141cc6140388361487d565b82815281810190858301838502870184018b10156141e8578889fd5b8896505b848710156142135780356141ff8161489b565b8352600196909601959183019183016141ec565b5096505086013592505080821115614229578283fd5b5061423685828601614018565b9150509250929050565b60008060208385031215614252578182fd5b823567ffffffffffffffff80821115614269578384fd5b818501915085601f83011261427c578384fd5b81358181111561428a578485fd5b866020808302850101111561429d578485fd5b60209290920196919550909350505050565b600060208083850312156142c1578182fd5b825167ffffffffffffffff8111156142d7578283fd5b8301601f810185136142e7578283fd5b80516142f56140388261487d565b8181528381019083850185840285018601891015614311578687fd5b8694505b83851015614174578051835260019490940193918501918501614315565b600060208284031215614344578081fd5b8151612126816148b0565b600060208284031215614360578081fd5b81516001600160801b0381168114612126578182fd5b600060208284031215614387578081fd5b5035919050565b60006020828403121561439f578081fd5b5051919050565b600080604083850312156143b8578182fd5b8235915060208301356143ca816148b0565b809150509250929050565b600080604083850312156143e7578182fd5b50508035926020909101359150565b6001600160a01b03169052565b606093841b6bffffffffffffffffffffffff19908116825260e89390931b7fffffff0000000000000000000000000000000000000000000000000000000000166014820152921b166017820152602b0190565b6bffffffffffffffffffffffff19606096871b811682527fffffff000000000000000000000000000000000000000000000000000000000060e896871b8116601484015294871b811660178301529290941b909216602b840152921b909116602e82015260420190565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b03938416815291909216602082015262ffffff909116604082015260600190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156145705783516001600160a01b03168352928401929184019160010161454b565b50909695505050505050565b60e08101818360005b60078110156145a4578151835260209283019290910190600101614585565b50505092915050565b6020808252825182820181905260009190848201906040850190845b81811015614570578351835292840192918401916001016145c9565b60208082526012908201527f4e6f7420612076616c69642063546f6b656e0000000000000000000000000000604082015260600190565b6020808252601b908201527f417373657420666f7220707572636861736573206e6f74207365740000000000604082015260600190565b6020808252600e908201527f4e6f20707269636520666f756e64000000000000000000000000000000000000604082015260600190565b60208082526016908201527f4d75737420626520612077616e74656420617373657400000000000000000000604082015260600190565b60208082526026908201527f4e6f7420656e6f7567682062616c616e636520746f206275792077616e74656460408201527f2061737365740000000000000000000000000000000000000000000000000000606082015260800190565b60208082526015908201527f4e6f7420656e6f75676820636f6c6c61746572616c0000000000000000000000604082015260600190565b60006020808352835160a08285015280518060c0860152835b8181101561478a5782810184015186820160e00152830161476e565b8181111561479b578460e083880101525b5091850151916147ae60408601846143f6565b6040860151606086015260608601516080860152608086015160a086015260e0601f19601f830116860101935050505092915050565b90815260200190565b918252602082015260400190565b92835260208301919091526001600160a01b0316604082015260600190565b92835260208301919091521515604082015260600190565b9283526020830191909152604082015260600190565b91825260ff16602082015260400190565b60405181810167ffffffffffffffff8111828210171561487557fe5b604052919050565b600067ffffffffffffffff82111561489157fe5b5060209081020190565b6001600160a01b0381168114611e0c57600080fd5b8015158114611e0c57600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a65644f6e6c7920676f7665726e616e6365206f7220656d657267656e63792063616e2063616c6c20746869735361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220aa22705663fc90d92d3c41b5b946e22ca74f0ab85286923c0d41bf90bd8e9e5f64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addReward(uint256,uint256)": {
        "params": {
          "_bablAmount": "Total amount to distribute",
          "_weeklyRate": "Weekly amount to distribute"
        }
      },
      "borrowFusePool(address,uint256)": {
        "params": {
          "_assetToBorrow": "Asset that the heart is receiving from sender",
          "_borrowAmount": "Amount of asset to transfet"
        }
      },
      "getFeeDistributionWeights()": {
        "returns": {
          "_0": "The array of weights for the fees"
        }
      },
      "getGardenWeights()": {
        "returns": {
          "_0": "The array of weights for voted gardens"
        }
      },
      "getTotalStats()": {
        "returns": {
          "_0": "The array of stats for the fees"
        }
      },
      "getVotedGardens()": {
        "returns": {
          "_0": "The array of voted gardens"
        }
      },
      "initialize(uint256[])": {
        "params": {
          "_feeWeights": "Weights of the fee distribution"
        }
      },
      "lendFusePool(address,uint256)": {
        "params": {
          "_assetToLend": "Address of the asset to lend",
          "_lendAmount": "Amount of the asset to lend"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "resolveGardenVotes(address[],uint256[])": {
        "params": {
          "_gardens": "Gardens that are going to receive investment",
          "_weights": "Weight for the investment in each garden normalied to 1e18 precision"
        }
      },
      "sellWantedAssetToHeart(address,uint256)": {
        "params": {
          "_amountToSell": "Amount of asset to sell",
          "_assetToSell": "Asset that the heart is receiving from strategy to sell"
        }
      },
      "setHeartGardenAddress(address)": {
        "params": {
          "_heartGarden": "New heart garden address"
        }
      },
      "setMinTradeAmount(address,uint256)": {
        "params": {
          "_asset": "Asset to edit the min amount",
          "_minAmount": "New min amount"
        }
      },
      "setTradeSlippage(uint256)": {
        "params": {
          "_tradeSlippage": "Trade slippage"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAssetToLend(address)": {
        "params": {
          "_assetToLend": "New asset to lend"
        }
      },
      "updateAssetToPurchase(address)": {
        "params": {
          "_purchaseAsset": "New asset to purchase"
        }
      },
      "updateFeeWeights(uint256[])": {
        "params": {
          "_feeWeights": "Array of % (up to 1e18) with the fee weights"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addReward(uint256,uint256)": {
        "notice": "Adds a BABL reward to be distributed weekly back to the heart garden"
      },
      "borrowFusePool(address,uint256)": {
        "notice": "Heart borrows using its liquidity Note: Heart must have enough liquidity"
      },
      "getFeeDistributionWeights()": {
        "notice": "Getter to get the whole array of fee weights"
      },
      "getGardenWeights()": {
        "notice": "Getter to get the whole array of garden weights"
      },
      "getTotalStats()": {
        "notice": "Getter to get the whole array of total stats"
      },
      "getVotedGardens()": {
        "notice": "Getter to get the whole array of voted gardens"
      },
      "initialize(uint256[])": {
        "notice": "Set state variables and map asset pairs to their oracles"
      },
      "lendFusePool(address,uint256)": {
        "notice": "Tell the heart to lend an asset on Fuse"
      },
      "pump()": {
        "notice": "Function to pump blood to the heart Note: Anyone can call this. Keeper in Defender will be set up to do it for convenience."
      },
      "resolveGardenVotes(address[],uint256[])": {
        "notice": "Resolves garden votes for this cycle Note: Only keeper can call this"
      },
      "sellWantedAssetToHeart(address,uint256)": {
        "notice": "Strategies can sell wanted assets by the protocol to the heart. Heart will buy them using borrowings in stables. Heart returns WETH so master swapper will take it from there. Note: Strategy needs to have approved the heart."
      },
      "setHeartGardenAddress(address)": {
        "notice": "Updates the heart garden address"
      },
      "setMinTradeAmount(address,uint256)": {
        "notice": "Updates the min amount to trade a specific asset"
      },
      "setTradeSlippage(uint256)": {
        "notice": "Updates the tradeSlippage"
      },
      "updateAssetToLend(address)": {
        "notice": "Updates the next asset to lend on fuse pool"
      },
      "updateAssetToPurchase(address)": {
        "notice": "Updates the next asset to purchase assets from strategies at a premium"
      },
      "updateFeeWeights(uint256[])": {
        "notice": "Set the weights to allocate to different heart initiatives"
      },
      "updateMarkets()": {
        "notice": "Updates fuse pool market information and enters the markets"
      },
      "voteProposal(uint256,bool)": {
        "notice": "Function to vote for a proposal Note: Only keeper can call this. Votes need to have been resolved offchain. Warning: Gardens need to delegate to heart first."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 492,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 495,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1447,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 14598,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "heartGarden",
        "offset": 0,
        "slot": "101",
        "type": "t_contract(IGarden)42224"
      },
      {
        "astId": 14602,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "votedGardens",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 14606,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "gardenWeights",
        "offset": 0,
        "slot": "103",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14611,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "minAmounts",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14616,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "assetToCToken",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 14619,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "assetToLend",
        "offset": 0,
        "slot": "106",
        "type": "t_address"
      },
      {
        "astId": 14622,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "lastPumpAt",
        "offset": 0,
        "slot": "107",
        "type": "t_uint256"
      },
      {
        "astId": 14625,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "lastVotesAt",
        "offset": 0,
        "slot": "108",
        "type": "t_uint256"
      },
      {
        "astId": 14628,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "weeklyRewardAmount",
        "offset": 0,
        "slot": "109",
        "type": "t_uint256"
      },
      {
        "astId": 14631,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "bablRewardLeft",
        "offset": 0,
        "slot": "110",
        "type": "t_uint256"
      },
      {
        "astId": 14635,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "feeDistributionWeights",
        "offset": 0,
        "slot": "111",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 14640,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "totalStats",
        "offset": 0,
        "slot": "112",
        "type": "t_array(t_uint256)7_storage"
      },
      {
        "astId": 14643,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "tradeSlippage",
        "offset": 0,
        "slot": "119",
        "type": "t_uint256"
      },
      {
        "astId": 14646,
        "contract": "contracts/Heart.sol:HeartV2",
        "label": "assetForPurchases",
        "offset": 0,
        "slot": "120",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_array(t_uint256)7_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[7]",
        "numberOfBytes": "224"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IGarden)42224": {
        "encoding": "inplace",
        "label": "contract IGarden",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}